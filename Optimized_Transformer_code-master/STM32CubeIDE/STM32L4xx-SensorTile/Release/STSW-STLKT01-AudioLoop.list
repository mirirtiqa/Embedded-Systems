
STSW-STLKT01-AudioLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006dd0  08019000  08019000  00029000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801fdd0  0801fdd0  0002fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801fdd4  0801fdd4  0002fdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  0801fdd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00017a68  200001f0  0801ffc8  000301f0  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  200001f0  200001f0  000301f0  2**0
                  CONTENTS
  9 ._user_heap_stack 00004000  20017c58  20017c58  00037c58  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_line   000705eb  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000011b  00000000  00000000  000a084e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00238a36  00000000  00000000  000a0969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00018793  00000000  00000000  002d939f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000094b0  00000000  00000000  002f1b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d59dc  00000000  00000000  002fafe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00008021  00000000  00000000  004d09c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00029cac  00000000  00000000  004d89e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00034199  00000000  00000000  00502694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001386f  00000000  00000000  0053682d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018fe4 	.word	0x08018fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08018fe4 	.word	0x08018fe4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	460d      	mov	r5, r1
 8000c36:	f7ff ff59 	bl	8000aec <__aeabi_dcmplt>
 8000c3a:	b928      	cbnz	r0, 8000c48 <__aeabi_d2lz+0x1c>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c44:	f000 b80a 	b.w	8000c5c <__aeabi_d2ulz>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4e:	f000 f805 	bl	8000c5c <__aeabi_d2ulz>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2ulz>:
 8000c5c:	b5d0      	push	{r4, r6, r7, lr}
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__aeabi_d2ulz+0x34>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	4606      	mov	r6, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	f7ff fccf 	bl	8000608 <__aeabi_dmul>
 8000c6a:	f000 f815 	bl	8000c98 <__aeabi_d2uiz>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	f7ff fc50 	bl	8000514 <__aeabi_ui2d>
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <__aeabi_d2ulz+0x38>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f7ff fcc6 	bl	8000608 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4630      	mov	r0, r6
 8000c82:	4639      	mov	r1, r7
 8000c84:	f7ff fb08 	bl	8000298 <__aeabi_dsub>
 8000c88:	f000 f806 	bl	8000c98 <__aeabi_d2uiz>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c90:	3df00000 	.word	0x3df00000
 8000c94:	41f00000 	.word	0x41f00000

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cde:	e003      	b.n	8000ce8 <LoopCopyDataInit>

08000ce0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ce2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ce6:	3104      	adds	r1, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf0:	d3f6      	bcc.n	8000ce0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf4:	e002      	b.n	8000cfc <LoopFillZerobss>

08000cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf8:	f842 3b04 	str.w	r3, [r2], #4

08000cfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <LoopForever+0x16>)
	cmp	r2, r3
 8000cfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d00:	d3f9      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d02:	f000 ff89 	bl	8001c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f017 fb27 	bl	8018358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f000 f973 	bl	8000ff4 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d14:	0801fdd8 	.word	0x0801fdd8
	ldr	r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d1c:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8000d20:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8000d24:	20017c58 	.word	0x20017c58

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <SystemClock_Config>:
 * @brief  System Clock Configuration
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d2c:	b500      	push	{lr}
 8000d2e:	b0bb      	sub	sp, #236	; 0xec
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	2214      	movs	r2, #20
 8000d32:	2100      	movs	r1, #0
 8000d34:	a802      	add	r0, sp, #8
 8000d36:	f017 fa55 	bl	80181e4 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	2244      	movs	r2, #68	; 0x44
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	a807      	add	r0, sp, #28
 8000d40:	f017 fa50 	bl	80181e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	2288      	movs	r2, #136	; 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	a818      	add	r0, sp, #96	; 0x60
 8000d4a:	f017 fa4b 	bl	80181e4 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <SystemClock_Config+0xe0>)
 8000d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d56:	659a      	str	r2, [r3, #88]	; 0x58
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 8000d62:	f001 fdf1 	bl	8002948 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000d66:	2304      	movs	r3, #4
 8000d68:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f001 fe92 	bl	8002a98 <HAL_RCC_OscConfig>
 8000d74:	b108      	cbz	r0, 8000d7a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000d76:	f000 faa7 	bl	80012c8 <Error_Handler>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8000d7a:	f002 fc9d 	bl	80036b8 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d7e:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8000d80:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d82:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000d84:	22b0      	movs	r2, #176	; 0xb0
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8000d86:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8000d88:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8000d8a:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000d8c:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM            = 6;
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000d8e:	2006      	movs	r0, #6
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8000d90:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8000d94:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8000d96:	2328      	movs	r3, #40	; 0x28
 8000d98:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP            = 7;
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000d9c:	f04f 0c07 	mov.w	ip, #7
 8000da0:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLR            = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8000da4:	e9cd c315 	strd	ip, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8000da8:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f001 fe75 	bl	8002a98 <HAL_RCC_OscConfig>
 8000dae:	b108      	cbz	r0, 8000db4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000db0:	f000 fa8a 	bl	80012c8 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc0:	9339      	str	r3, [sp, #228]	; 0xe4
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f002 fa8f 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	b108      	cbz	r0, 8000dcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000dc8:	f000 fa7e 	bl	80012c8 <Error_Handler>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dcc:	f002 fc82 	bl	80036d4 <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd4:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dd6:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000dd8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000ddc:	9333      	str	r3, [sp, #204]	; 0xcc
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dde:	f002 fa81 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	210f      	movs	r1, #15
 8000de4:	2303      	movs	r3, #3
 8000de6:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dec:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfa:	f002 f8d7 	bl	8002fac <HAL_RCC_ClockConfig>
 8000dfe:	b108      	cbz	r0, 8000e04 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000e00:	f000 fa62 	bl	80012c8 <Error_Handler>
  }
}
 8000e04:	b03b      	add	sp, #236	; 0xec
 8000e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	0801fa40 	.word	0x0801fa40

08000e30 <_ZN6tflite13ErrorReporterD0Ev>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffe9 	bl	8000e10 <_ZN6tflite13ErrorReporterD1Ev>
 8000e3e:	2104      	movs	r1, #4
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f016 fbe3 	bl	801760c <_ZdlPvj>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ffd5 	bl	8000e10 <_ZN6tflite13ErrorReporterD1Ev>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0801c40c 	.word	0x0801c40c

08000e74 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe7 	bl	8000e50 <_ZN6tflite18MicroErrorReporterD1Ev>
 8000e82:	2104      	movs	r1, #4
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f016 fbc1 	bl	801760c <_ZdlPvj>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8000eaa:	2149      	movs	r1, #73	; 0x49
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8000eae:	f016 fe91 	bl	8017bd4 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0801900c 	.word	0x0801900c
 8000ec0:	08019050 	.word	0x08019050
 8000ec4:	08019070 	.word	0x08019070

08000ec8 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 fa07 	bl	80012e4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	0801fa28 	.word	0x0801fa28

08000f00 <_ZN6tflite10OpResolverD0Ev>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe9 	bl	8000ee0 <_ZN6tflite10OpResolverD1Ev>
 8000f0e:	2104      	movs	r1, #4
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f016 fb7b 	bl	801760c <_ZdlPvj>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3310      	adds	r3, #16
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	7afa      	ldrb	r2, [r7, #11]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	4798      	blx	r3
 8000f3e:	4603      	mov	r3, r0
  }
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3314      	adds	r3, #20
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	4798      	blx	r3
 8000f62:	4603      	mov	r3, r0
  }
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffaf 	bl	8000ee0 <_ZN6tflite10OpResolverD1Ev>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0801fa04 	.word	0x0801fa04

08000f90 <_ZN6tflite15MicroOpResolverD0Ev>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffe7 	bl	8000f6c <_ZN6tflite15MicroOpResolverD1Ev>
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f016 fb33 	bl	801760c <_ZdlPvj>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DebugLog>:
#define  ARM_CM_DWT_CYCCNT (*(uint32_t *)0xE0001004)

//#define WAVE_DATA {165,396,482,354,166,61,144,285,220,390,284,97,245,235,351,331,78,44,131,116,33,-43,-60,25,55,-35,-158,-236,-174,-90,-135,-227,-230,-143,-135,-197,-198,-159,-143,-192,-173,-147,-181,-114,-69,-150,-186,-97,-31,-27,-33,13,24,-31,24,112,130,139,155,119,93,153,171,163,170,146,140,146,163,189,136,98,110,76,83,88,44,45,18,-12,8,-18,-46,-82,-117,-42,-14,-84,-108,-139,-135,-51,-55,-38,-19,-73,-43,-69,-140,-140,-74,1,-29,39,76,-74,-71,-40,-57,-35,-56,-54,-76,-71,-26,-8,-22,-67,-15,22,-6,63,106,58,28,-6,-32,-35,-4,79,102,87,83,72,84,68,52,65,60,48,38,42,14,-11,20,17,-9,-12,-1,-7,0,46,66,65,7,-65,-81,-94,-60,-8,-24,-66,-49,-2,0,-13,-23,-50,-90,-73,-20,-28,-55,-33,5,22,20,-13,-37,-32,-11,20,13,-2,5,9,7,18,23,3,-2,-2,-6,-11,-5,14,8,5,14,6,12,42,58,51,36,25,20,28,51,54,43,38,20,4,-15,-10,9,-8,-4,-1,-5,2,-33,-66,-60,-40,-24,-13,-24,-26,-23,-40,-37,-45,-47,-20,-17,-22,-25,-22,-6,5,10,-5,-8,14,21,9,-19,-7,2,-5,40,54,29,9,7,9,9,39,45,34,42,54,43,16,21,25,21,16,12,31,38,23,8,5,-17,-41,-27,4,22,19,13,2,-14,-28,-56,-65,-44,-29,-15,16,6,-39,-36,-21,-7,-8,-27,-2,5,-14,-8,1,-3,-18,8,22,-4,4,36,66,50,8,-11,-26,-14,13,17,-2,-10,-6,-12,9,34,21,-17,-22,7,3,-5,-17,-18,-13,-22,-20,-28,2,32,13,-15,-21,12,21,17,7,-14,-2,-1,-21,-13,0,-11,1,7,-4,-4,5,17,14,22,12,-13,-8,-2,-12,-14,13,25,24,21,8,19,12,7,5,-27,-17,17,6,-9,6,10,-7,-6,1,-10,-9,-8,-5,-2,-27,-12,11,0,-4,-8,-20,-14,2,-5,-6,-8,-19,7,23,1,-25,-34,-12,18,11,-3,4,1,-18,-16,20,17,-7,2,-7,-10,6,18,9,-2,17,7,-8,35,41,-19,-9,15,-30,-20,16,16,15,11,-8,-16,8,14,2,-4,1,17,8,-10,-22,-34,-11,20,8,-5,4,14,6,-6,2,-6,-4,16,5,-4,6,9,2,-13,-28,-19,-3,11,25,11,-8,-12,-1,24,22,-6,-24,-20,-11,-8,-11,-2,3,-1,13,5,-8,11,24,1,-34,-21,4,-1,2,17,21,1,-2,-2,-19,-5,11,1,2,11,7,7,5,-6,1,-12,-33,7,31,10,4,12,5,3,14,2,-21,-25,-18,-11,-8,4,5,4,7,-3,-11,-20,-8,15,7,-5,-3,-10,-24,-16,4,0,-17,-10,6,16,31,24,-13,-25,1,16,3,1,6,7,11,0,-15,6,32,15,-3,-1,-12,-11,13,22,14,2,-22,-32,11,37,16,-3,-14,-14,1,0,-26,-29,6,24,14,2,-10,-15,2,8,-5,-6,-8,0,19,8,-16,-10,6,10,14,12,-3,-7,6,17,8,-8,-9,4,9,8,8,4,-9,-17,1,14,-1,-3,5,-2,-3,-4,-9,-3,6,-2,-15,-8,4,1,1,6,-3,-12,-5,-1,4,10,5,-9,-16,-4,-2,-15,1,26,13,-6,-6,-4,-3,0,-3,-6,2,8,2,-2,0,2,4,4,-9,-17,-3,9,6,0,-4,-7,-7,5,14,5,-7,-3,0,0,12,8,-5,-2,0,-11,-13,-1,1,6,18,12,4,0,-8,-8,6,9,-8,-14,-5,4,10,1,-5,-1,-2,-1,9,7,-3,0,0,-7,-2,1,-9,-9,1,-1,-8,-1,7,9,5,1,-2,-5,-9,-8,-2,2,2,6,11,7,-6,-16,-6,13,10,0,3,-1,-9,-1,6,2,-3,10,17,-4,-20,-11,3,10,8,-2,-4,8,11,-6,-13,-3,1,3,6,0,-5,-1,-1,-4,0,4,7,10,4,-10,-12,0,3,0,0,1,1,5,6,1,-2,-4,-3,1,5,5,1,-7,-13,-7,0,7,8,9,11,5,-6,-13,-6,5,4,-6,-5,5,6,4,6,3,-5,-8,1,5,0,-2,-1,1,2,1,0,-2,-1,3,1,-4,-6,-6,-1,6,6,-5,-8,1,5,4,3,-5,-13,-7,1,2,6,5,-2,-2,-4,-7,-1,-2,-4,3,10,11,4,-4,-5,0,-1,-8,-11,-2,4,9,13,-1,-14,-5,5,5,5,0,-9,-7,3,5,3,0,-6,-4,8,7,-4,-12,-7,5,12,8,1,0,0,1,-2,-9,-6,4,6,7,10,4,-3,-1,0,-9,-10,-2,4,12,12,-2,-5,0,-3,-9,-4,0,0,9,10,-4,-8,2,6,-2,-6,-2,-1,3,5,2,-3,-6,-3,-3,0,7,12,7,-2,-14,-20,-5,12,11,1,1,2,1,0,-2,-5,-2,7,7,0,-1,-2,-3,-1,1,0,3,8,3,-7,-5,1,4,-2,-11,-11,-2,11,14,1,-7,-4,-4,-2,3,-1,-7,2,17,10,-3,-8,-11,-6,6,9,1,0,3,0,-1,-2,-3,2,8,2,-5,-2,4,5,0,-10,-13,-2,8,11,6,-2,-6,-3,1,0,0,0,1,3,1,0,0,-1,-2,0,0,0,0,1,1,1,1,-3,-7,-3,1,0,3,3,-1,-3,-5,-4,0,2,2,0,0,-1,-1,0,0,1,2,0,-5,-7,-4,2,7,4,0,0,0,0,0,-1,-5,-2,3,3,0,-3,-3,2,7,5,-1,-3,0,1,0,0,0,2,6,4,-4,-7,-3,1,1,0,-1,0,1,0,-1,-1,0,3,2,-2,-3,-2,-4,-3,0,1,3,3,0,-3,-2,1,1,0,0,1,2,3,1,-2,-2,-1,3,6,3,-1,-5,-3,1,3,6,4,0,-5,-5,0,2,3,3,1,-4,-3,0,1,1,0,-2,-2,0,2,1,0,0,-4,-2,3,3,0,-2,-4,-3,1,4,1,-1,0,0,-1,-1,-1,0,3,2,0,-2,-1,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,1,1,-1,-3,-2,0,2,2,0,-1,-3,-2,-2,-1,0,1,1,-1,-1,-1,-1,1,1,1,0,0,0,-1,-2,-1,0,2,2,1,0,0,-1,-1,1,3,3,1,0,0,0,0,0,0,1,-1,-3,-1,0,1,1,0,-2,-1,1,1,0,0,-1,-1,1,1,-1,-2,0,0,-1,0,0,0,0,0,0,0,1,1,1,0,-1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,2,0,0,0,0,1,2,1,0,0,0,0,0,0,0,1,1,0,-1,-1,0,0,0,1,1,0,-1,-2,-1,0,0,0,0,0,-2,0,0,0,0,0,-2,-3,-1,0,0,0,0,0,-2,-2,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,1,0,-1,-1,0,1,0,0,0,0,0,0,0,0,-1,-2,-1,1,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,-1,0,0,0,0,1,1,0,0,0,-1,0,1,2,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,-1,-2,0,0,0,0,0,-1,-1,0,0,1,0,-1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-2,0,0,0,0,0,-1,0,0,-2,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,0,0,0,-1,-2,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,2,2,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-2,-3,-4,-3,-2,-6,-6,-5,-6,-7,-7,-7,-8,-7,-6,-6,-4,-3,0,0,2,6,9,12,15,19,26,30,32,35,38,40,41,43,44,45,43,38,32,25,20,13,5,-3,-14,-27,-40,-54,-68,-80,-89,-99,-110,-118,-125,-129,-132,-134,-132,-131,-128,-121,-115,-107,-95,-84,-71,-55,-36,-16,2,19,39,56,72,90,106,121,136,148,159,169,178,182,187,193,197,198,196,193,187,181,172,162,153,140,128,114,99,83,65,47,30,13,-2,-17,-34,-49,-66,-83,-95,-106,-119,-129,-137,-143,-148,-153,-152,-150,-150,-148,-142,-135,-128,-119,-109,-98,-89,-77,-63,-49,-37,-25,-13,-2,7,17,27,35,42,51,56,60,63,67,70,70,70,68,66,64,61,58,53,49,44,38,32,28,21,13,9,2,-3,-10,-16,-22,-28,-30,-33,-39,-43,-45,-46,-47,-47,-48,-49,-48,-46,-44,-41,-38,-34,-32,-28,-26,-21,-15,-10,-7,-4,0,3,6,8,12,15,18,21,24,26,28,30,30,33,34,34,35,35,36,36,35,34,33,32,31,28,26,25,23,21,19,15,11,8,5,1,-1,-2,-4,-7,-9,-12,-16,-18,-20,-23,-24,-25,-26,-27,-28,-28,-28,-28,-26,-25,-25,-24,-23,-22,-19,-16,-14,-13,-11,-8,-6,-4,-2,-1,1,3,4,6,8,10,11,13,13,15,16,16,17,18,18,18,18,18,18,19,17,15,14,14,14,13,12,10,9,10,7,5,4,2,1,0,-1,-2,-4,-5,-5,-8,-9,-10,-11,-11,-12,-12,-13,-12,-12,-11,-10,-10,-10,-9,-7,-6,-4,-4,-2,0,0,0,2,5,6,7,9,10,10,10,11,12,12,13,12,11,11,11,11,9,8,7,7,6,3,2,1,1,0,0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-11,-12,-13,-12,-11,-11,-12,-11,-11,-11,-9,-7,-6,-7,-7,-6,-4,-4,-3,-1,-1,0,1,2,1,2,2,3,4,5,6,5,4,5,6,6,6,5,4,4,5,4,3,2,1,2,0,0,1,0,0,-1,-2,-1,-1,-1,-2,-3,-3,-2,-2,-3,-2,-1,-2,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,2,1,2,2,2,3,2,0,0,1,1,1,1,1,0,0,0,0,0,0,-1,-2,-3,-3,-1,-1,-3,-5,-4,-3,-3,-4,-4,-3,-2,-3,-2,-1,-2,-2,-3,-2,-1,-1,-1,0,0,0,0,0,1,2,2,2,3,3,3,3,2,3,5,4,3,3,2,3,4,4,3,4,4,3,3,3,1,0,0,0,1,1,0,0,0,-3,-2,-1,-1,0,-1,-2,-4,-2,-1,-3,-3,-2,-2,-4,-5,-3,-2,-2,-4,-4,-2,0,0,0,0,-3,-3,2,1,0,1,-1,-1,1,1,1,2,0,0,1,1,1,1,1,1,0,0,1,1,2,2,1,0,0,3,4,0,-1,0,0,1,1,0,0,0,0,1,-1,-1,0,0,1,0,0,1,-2,-4,-1,0,2,2,-2,0,-1,-3,-1,0,-1,0,0,-2,-2,0,0,0,1,0,-1,0,0,0,1,0,-1,0,0,0,0,0,0,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,-1,-2,-1,-1,-1,0,0,0,-1,-1,0,0,1,0,-3,-3,-1,0,1,2,1,0,-3,-3,-1,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,-1,-2,0,0,0,0,0,-2,-3,-2,-1,-1,-1,0,-1,-3,-1,0,-1,-2,-1,-2,-2,-1,0,0,0,0,-1,-1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,2,1,1,2,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,2,1,0,1,3,2,1,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,2,2,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,-1,-2,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,3,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,-2,-1,-1,-1,0,-1,-1,-1,-1,-1,-2,-2,-2,-1,0,-2,-2,-1,-2,-2,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,-2,0,0,-1,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,-1,-1,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,-1,0,-1,0,0,-1,0,-1,0,1,0,-2,-2,-2,-1,0,-1,-2,-1,-1,-1,-2,-2,0,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,2,1,0,1,2,2,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-2,0,0,-1,-1,-1,-1,-1,-1,-1,-2,-1,-1,-1,-1,-1,-1,-2,-2,-1,0,-1,0,0,-1,-1,0,0,-1,-1,0,0,0,1,0,0,1,1,2,2,2,2,2,3,4,2,3,3,2,4,4,3,4,4,3,3,3,1,1,1,0,0,0,0,0,0,0,-1,0,-1,-3,-2,-3,-3,-3,-5,-5,-5,-5,-5,-6,-7,-7,-7,-7,-7,-6,-5,-6,-6,-5,-5,-5,-5,-4,-4,-3,-2,-2,0,0,0,0,3,4,3,6,7,9,11,12,13,15,16,17,19,20,21,21,21,22,22,22,23,22,20,21,20,18,18,17,14,10,7,6,2,-1,-5,-9,-14,-19,-25,-31,-36,-42,-50,-57,-63,-68,-75,-82,-86,-91,-93,-95,-98,-96,-93,-90,-84,-77,-69,-57,-45,-31,-15,2,21,40,61,81,99,118,135,150,165,178,188,195,202,206,205,204,199,189,180,168,152,135,118,98,76,55,30,7,-16,-40,-62,-84,-105,-124,-141,-155,-169,-182,-193,-201,-209,-215,-220,-223,-227,-229,-229,-229,-228,-225,-222,-217,-209,-201,-191,-177,-164,-148,-127,-105,-80,-53,-24,7,43,81,119,156,191,223,253,280,304,325,341,356,364,366,365,360,350,335,317,296,271,242,212,179,144,109,74,40,7,-25,-54,-82,-109,-131,-151,-169,-182,-194,-204,-212,-215,-217,-217,-215,-213,-206,-201,-194,-187,-179,-169,-159,-149,-140,-130,-121,-114,-103,-94,-86,-79,-74,-68,-63,-58,-55,-52,-48,-44,-39,-35,-31,-26,-21,-14,-7,1,8,20,35,49,66,84,104,125,147,169,188,204,219,233,244,253,257,260,259,253,244,234,221,205,185,162,138,113,84,55,26,-2,-28,-55,-80,-103,-122,-140,-156,-167,-175,-182,-186,-185,-184,-181,-177,-172,-165,-158,-150,-140,-130,-121,-112,-102,-93,-86,-80,-73,-69,-65,-63,-61,-60,-59,-59,-59,-59,-58,-57,-55,-52,-49,-45,-39,-33,-26,-17,-7,5,18,35,54,76,101,125,148,172,192,211,228,242,256,267,274,276,273,268,260,248,233,214,194,169,142,112,80,47,14,-19,-52,-82,-112,-140,-163,-184,-201,-215,-225,-232,-235,-236,-235,-230,-223,-214,-203,-191,-176,-162,-147,-131,-114,-98,-82,-65,-49,-32,-18,-6,5,17,28,37,45,51,56,59,61,62,62,60,58,54,51,46,40,34,30,25,21,18,16,14,15,18,24,33,45,57,71,87,101,114,127,138,149,157,162,165,165,160,154,145,133,119,102,84,64,42,17,-7,-32,-58,-81,-103,-123,-140,-154,-165,-171,-174,-176,-174,-170,-164,-154,-145,-134,-121,-107,-94,-80,-64,-49,-37,-26,-15,-5,1,7,12,15,17,18,18,17,14,11,7,3,-1,-5,-11,-18,-23,-27,-30,-32,-34,-36,-36,-32,-26,-18,-8,3,19,38,57,75,93,112,129,143,157,170,179,185,188,189,185,178,169,158,145,129,110,90,68,43,18,-3,-27,-50,-70,-87,-101,-115,-124,-131,-136,-136,-137,-135,-130,-124,-117,-110,-101,-92,-83,-74,-65,-56,-48,-41,-33,-25,-18,-12,-10,-7,-5,-3,-1,-3,-4,-6,-8,-11,-16,-20,-24,-27,-31,-36,-40,-43,-46,-49,-51,-50,-50,-47,-42,-35,-25,-14,-2,12,31,49,67,84,100,117,131,143,153,162,165,167,166,162,157,149,137,124,111,95,74,55,35,14,-4,-22,-40,-57,-72,-83,-92,-99,-103,-104,-105,-102,-97,-91,-83,-78,-72,-64,-56,-46,-37,-31,-26,-17,-11,-7,-4,-1,0,0,0,-1,-3,-6,-8,-12,-18,-22,-28,-33,-39,-47,-52,-57,-62,-68,-73,-76,-77,-77,-77,-75,-71,-63,-53,-44,-32,-15,1,18,40,61,81,100,118,137,153,166,177,186,191,193,192,189,181,170,160,147,129,111,91,71,49,27,6,-16,-35,-53,-69,-82,-93,-105,-112,-117,-121,-123,-123,-121,-118,-115,-110,-103,-98,-91,-83,-76,-70,-63,-55,-48,-42,-39,-35,-30,-25,-18,-14,-12,-8,-7,-5,-3,-3,-5,-6,-6,-9,-12,-16,-20,-21,-23,-25,-26,-28,-26,-22,-17,-12,-5,4,16,31,46,62,79,95,110,124,136,145,154,160,164,165,161,156,149,137,124,109,94,75,54,34,13,-8,-29,-50,-67,-84,-98,-110,-120,-125,-128,-131,-128,-125,-121,-112,-103,-94,-81,-71,-60,-50,-40,-31,-23,-19,-14,-6,-3,-1,1,4,6,7,7,8,9,6,3,4,2,0,-3,-8,-11,-14,-15,-21,-30,-35,-38,-40,-41,-45,-49,-49,-45,-44,-43,-37,-30,-18,-6,6,21,39,58,75,91,106,120,133,144,152,155,157,156,151,144,134,121,106,91,73,55,36,15,-4,-21,-41,-59,-74,-87,-97,-106,-112,-114,-114,-110,-105,-98,-89,-78,-65,-53,-42,-31,-19,-10,-3,1,5,8,11,13,14,16,17,14,9,9,12,11,9,3,-2,-6,-9,-14,-22,-29,-34,-39,-46,-48,-53,-57,-59,-63,-64,-64,-63,-62,-58,-55,-51,-41,-31,-18,-4,12,29,46,64,80,95,108,121,132,138,143,143,142,139,132,122,111,99,87,70,52,35,18,5,-8,-25,-43,-55,-65,-75,-81,-86,-87,-84,-81,-76,-69,-60,-50,-43,-38,-28,-17,-11,-12,-9,-5,-1,0,0,0,1,-1,-3,-3,-6,-7,-6,-13,-13,-16,-18,-16,-19,-23,-29,-35,-41,-48,-51,-47,-58,-66,-63,-70,-71,-68,-69,-71,-67,-61,-53,-39,-27,-13,6,27,51,71,91,113,133,150,161,168,172,176,175,167,155,143,126,106,86,63,39,17,-3,-23,-46,-65,-84,-98,-108,-118,-123,-124,-121,-115,-105,-92,-78,-64,-49,-33,-15,-1,10,21,28,32,34,30,24,24,24,22,19,15,9,5,1,-4,-8,-8,-11,-12,-18,-26,-30,-32,-37,-44,-49,-49,-47,-55,-59,-60,-60,-64,-71,-75,-77,-75,-72,-74,-74,-62,-47,-30,-9,13,41,73,102,128,153,174,191,204,211,213,208,199,185,167,147,126,100,73,47,19,-8,-37,-65,-93,-119,-140,-156,-171,-178,-179,-169,-155,-140,-121,-97,-71,-45,-18,4,21,40,54,60,62,59,50,42,37,32,26,16,6,2,0,-1,-5,-11,-21,-26,-29,-37,-50,-61,-65,-64,-64,-68,-70,-67,-56,-45,-49,-56,-60,-64,-67,-69,-76,-82,-80,-70,-50,-24,1,31,72,116,153,186,214,237,262,274,260,240,220,200,187,163,126,96,72,48,17,-19,-53,-84,-114,-147,-178,-205,-224,-236,-238,-231,-215,-189,-154,-114,-72,-30,10,46,73,93,105,107,103,97,88,71,53,39,28,17,7,-4,-12,-20,-25,-27,-34,-46,-61,-72,-74,-76,-82,-87,-85,-73,-61,-58,-60,-59,-52,-47,-54,-67,-85,-102,-114,-123,-131,-126,-102,-69,-25,29,90,152,214,271,312,338,352,352,342,321,295,265,229,192,157,121,82,40,-3,-50,-101,-152,-200,-246,-287,-319,-337,-343,-334,-310,-276,-231,-172,-105,-38,26,87,139,184,217,233,237,225,199,168,134,99,63,27,-5,-33,-56,-75,-92,-106,-117,-128,-140,-152,-163,-169,-174,-173,-165,-150,-127,-99,-73,-46,-22,-14,-19,-39,-71,-111,-157,-200,-234,-246,-226,-169,-82,33,168,308,437,544,611,640,633,591,529,455,378,308,248,201,163,127,85,32,-31,-113,-209,-312,-414,-502,-571,-609,-613,-583,-523,-443,-346,-240,-137,-43,39,113,182,245,305,360,404,431,435,415,368,294,199,90,-22,-126,-219,-287,-330,-347,-337,-310,-275,-240,-213,-196,-195,-200,-206,-207,-194,-168,-126,-72,-14,41,86,113,113,78,16,-71,-175,-278,-355,-379,-334,-211,-22,211,464,696,871,966,972,902,778,631,485,368,291,251,239,240,232,189,107,-16,-176,-361,-548,-715,-837,-902,-902,-841,-732,-591,-440,-301,-188,-103,-46,-2,48,118,218,349,498,639,745,789,758,646,466,241,6,-207,-379,-495,-553,-557,-522,-461,-388,-321,-271,-246,-243,-255,-265,-260,-222,-144,-46,57,146,199,212,190,139,73,10,-54,-126,-218,-330,-440,-511,-491,-347,-75,295,702,1062,1294,1357,1247,1020,755,531,395,365,415,478,496,427,258,7,-283,-562,-781,-925,-984,-972,-913,-824,-725,-623,-526,-436,-357,-285,-214,-135,-39,84,241,418,597,748,849,874,807,661,452,212,-21,-221,-369,-458,-504,-519,-524,-534,-548,-558,-546,-497,-406,-281,-138,-5,96,155,168,142,93,36,-13,-49,-67,-69,-61,-54,-67,-120,-224,-376,-548,-682,-695,-528,-169,347,929,1452,1795,1880,1709,1355,943,593,392,354,439,542,562,437,166,-204,-604,-934,-1132,-1180,-1109,-960,-793,-638,-519,-432,-361,-291,-219,-144,-64,16,95,175,263,353,432,493,524,516,470,393,293,178,51,-78,-206,-325,-430,-509,-555,-570,-556,-518,-447,-345,-214,-61,91,219,292,295,233,121,-6,-114,-183,-204,-191,-167,-150,-149,-175,-230,-311,-418,-542,-660,-712,-626,-343,139,761,1408,1935,2210,2158,1807,1278,739,338,153,176,318,434,399,166,-223,-674,-1068,-1295,-1306,-1132,-864,-594,-399,-304,-294,-315,-307,-231,-92,70,220,320,342,295,216,144,103,108,157,224,270,270,211,95,-59,-229,-379,-480,-520,-501,-442,-364,-289,-233,-187,-138,-74,11,112,207,263,258,185,61,-87,-228,-330,-375,-367,-319,-248,-182,-152,-176,-264,-397,-540,-625,-559,-271,233,883,1545,2059,2294,2181,1771,1199,652,277,127,164,277,324,192,-129,-562,-965,-1216,-1246,-1059,-739,-416,-200,-139,-205,-316,-385,-336,-158,95,335,477,473,326,84,-158,-316,-339,-226,-27,181,314,321,194,-20,-252,-428,-493,-433,-284,-116,4,40,-20,-142,-255,-293,-224,-65,131,289,339,253,55,-185,-395,-513,-511,-408,-253,-103,-6,17,-40,-172,-348,-523,-648,-646,-433,27,682,1402,2003,2322,2262,1839,1203,573,156,40,166,373,475,321,-104,-671,-1169,-1409,-1312,-922,-406,26,218,124,-168,-489,-671,-618,-343,46,390,556,496,240,-111,-424,-595,-578,-393,-117,159,349,398,299,93,-146,-346,-448,-417,-270,-76,84,145,81,-81,-271,-395,-380,-218,33,271,391,332,107,-210,-501,-661,-645,-477,-237,-25,86,74,-41,-210,-378,-492,-525,-450,-219,196,760,1368,1878,2152,2106,1743,1178,603,212,98,201,366,414,217,-226,-780,-1222,-1357,-1132,-632,-63,347,454,233,-180,-572,-757,-659,-330,72,375,456,300,-5,-334,-550,-580,-438,-191,62,242,308,242,79,-111,-277,-375,-390,-322,-190,-52,42,63,-1,-125,-254,-321,-275,-118,97,280,349,259,25,-265,-504,-614,-568,-404,-203,-47,14,-19,-114,-244,-379,-491,-550,-472,-162,407,1156,1897,2395,2480,2102,1384,601,52,-75,166,540,762,606,33,-767,-1464,-1741,-1477,-795,20,635,817,530,-40,-590,-870,-786,-426,8,293,292,38,-311,-582,-664,-547,-311,-80,50,80,71,85,137,179,167,64,-134,-347,-469,-437,-276,-85,33,22,-115,-279,-346,-236,30,332,524,499,242,-155,-525,-709,-655,-422,-131,59,60,-108,-330,-450,-390,-196,14,111,20,-221,-404,-269,267,1083,1897,2401,2400,1874,1041,280,-82,22,381,680,663,218,-535,-1268,-1613,-1398,-748,36,626,795,517,-34,-554,-787,-685,-368,-32,147,90,-154,-430,-585,-565,-403,-183,14,147,207,222,215,167,50,-126,-309,-435,-459,-377,-226,-102,-91,-193,-345,-442,-390,-174,151,450,583,495,223,-115,-387,-497,-421,-255,-127,-113,-218,-369,-461,-409,-209,35,168,96,-145,-423,-502,-183,538,1451,2199,2492,2251,1585,784,194,29,264,610,738,493,-93,-811,-1352,-1462,-1084,-423,205,559,545,243,-165,-469,-538,-415,-244,-151,-185,-308,-434,-463,-363,-212,-124,-148,-234,-288,-208,56,413,674,662,330,-178,-654,-893,-791,-421,9,245,175,-107,-423,-570,-429,-49,394,669,650,368,-34,-384,-578,-569,-415,-252,-158,-141,-169,-197,-201,-158,-69,8,17,-67,-214,-377,-492,-406,-13,632,1342,1891,2134,2030,1619,1066,596,358,328,323,205,-62,-450,-843,-1072,-995,-637,-174,208,392,360,160,-105,-291,-334,-287,-232,-222,-262,-339,-419,-444,-412,-367,-337,-302,-216,-46,184,421,575,523,245,-144,-481,-634,-566,-332,-59,84,9,-212,-423,-476,-313,30,435,702,693,434,70,-257,-472,-530,-453,-351,-318,-365,-399,-365,-288,-179,-40,107,183,132,10,-145,-350,-564,-585,-206,526,1379,2082,2437,2344,1771,939,262,-7,76,242,289,131,-279,-807,-1158,-1090,-627,-56,375,549,436,115,-243,-419,-357,-210,-102,-83,-156,-300,-474,-580,-572,-496,-375,-179,95,344,439,340,104,-198,-478,-588,-459,-177,59,94,-51,-289,-483,-488,-256,130,456,550,395,92,-190,-339,-324,-199,-104,-140,-313,-518,-606,-504,-236,74,287,331,200,-29,-257,-420,-493,-511,-402,-45,566,1318,1954,2256,2164,1697,1012,391,72,104,267,300,94,-317,-762,-1046,-991,-567,8,460,604,448,136,-191,-392,-409,-307,-205,-211,-313,-441,-525,-520,-447,-356,-289,-254,-187,-38,174,376,441,320,56,-256,-463,-496,-382,-202,-96,-103,-170,-205,-118,57,248,365,325,159,-43,-151,-127,-76,-94,-251,-503,-733,-826,-660,-252,213,524,554,351,62,-182,-292,-287,-269,-346,-535,-595,-263,453,1338,2046,2316,2103,1497,791,334,270,453,528,301,-190,-777,-1174,-1189,-775,-124,412,632,506,197,-90,-258,-253,-163,-122,-165,-283,-424,-550,-630,-642,-596,-470,-242,55,312,386,245,-25,-304,-497,-527,-370,-129,22,7,-117,-237,-268,-172,29,226,279,149,-54,-195,-213,-129,-6,60,-22,-241,-498,-671,-677,-465,-67,342,529,395,87,-196,-343,-339,-260,-220,-325,-417,-175,512,1441,2171,2406,2133,1445,639,128,109,431,640,463,-71,-755,-1257,-1317,-829,-27,638,882,692,264,-157,-407,-410,-273,-193,-242,-376,-511,-617,-672,-627,-495,-318,-95,140,307,299,76,-195,-390,-467,-409,-280,-150,-144,-308,-483,-525,-356,-30,308,539,505,211,-168,-442,-445,-239,28,222,188,-70,-472,-834,-909,-623,-88,411,618,491,112,-302,-547,-513,-260,-48,151,539,1100,1658,1899,1756,1400,881,370,120,246,591,727,507,44,-520,-937,-1006,-595,81,581,734,567,253,-77,-351,-422,-382,-389,-462,-548,-555,-564,-597,-565,-496,-409,-308,-132,135,312,311,167,-55,-261,-425,-476,-408,-356,-361,-383,-352,-218,-17,242,466,490,319,62,-144,-232,-227,-128,-23,-30,-166,-355,-472,-506,-460,-261,54,351,457,301,2,-291,-455,-407,-201,-18,-28,-214,-243,149,859,1568,1905,1794,1406,899,529,468,653,829,672,183,-410,-887,-1057,-860,-354,214,551,568,379,162,-21,-166,-257,-340,-439,-531,-581,-553,-526,-533,-522,-437,-249,-22,177,274,211,36,-175,-341,-440,-507,-521,-491,-444,-379,-284,-130,50,184,229,172,49,-90,-161,-103,-1,33,-35,-134,-204,-300,-413,-435,-250,68,288,283,50,-307,-631,-757,-594,-294,-62,214,744,1456,1990,2044,1717,1273,810,423,300,469,673,558,130,-351,-741,-929,-787,-267,338,623,538,309,136,24,-57,-66,-120,-342,-658,-892,-906,-811,-672,-440,-188,15,111,115,82,-45,-179,-175,-59,40,-44,-273,-523,-747,-818,-671,-335,54,300,385,309,98,-97,-171,-88,46,79,16,-122,-281,-385,-481,-539,-506,-336,3,312,421,295,1,-253,-420,-464,-374,-260,106,784,1490,1949,1827,1324,835,462,413,597,832,937,616,160,-248,-573,-623,-483,-129,202,256,195,63,-26,-57,-106,-58,-91,-244,-383,-550,-687,-836,-866,-610,-242,97,246,131,-155,-512,-618,-325,120,428,336,-86,-620,-1058,-1092,-712,-145,303,404,247,-34,-284,-321,-173,25,94,9,-85,-167,-235,-336,-448,-401,-157,198,426,316,-16,-336,-441,-354,-259,-229,-249,-32,623,1459,2038,1968,1420,915,672,727,906,1025,951,500,-118,-583,-720,-488,-125,193,313,165,-71,-220,-155,46,174,179,4,-283,-531,-729,-855,-922,-876,-655,-360,-93,65,61,-36,-178,-241,-113,84,213,166,-60,-347,-635,-800,-762,-566,-272,-30,116,165,81,-35,-126,-138,-73,-37,-11,-21,-67,-152,-348,-533,-577,-421,-96,165,229,98,-112,-216,-210,-180,-217,-157,369,1203,1808,1791,1238,752,661,818,1031,1126,1048,696,140,-294,-481,-388,-149,54,153,43,-211,-439,-479,-261,29,246,276,84,-180,-457,-677,-774,-719,-516,-326,-260,-279,-294,-223,-98,22,123,132,35,-110,-233,-294,-323,-350,-361,-362,-382,-378,-286,-98,96,197,191,99,-25,-139,-215,-211,-154,-117,-159,-294,-408,-382,-228,-38,71,74,-12,-158,-236,-156,-27,-52,-289,-350,169,1045,1706,1716,1214,761,668,931,1287,1431,1231,631,-75,-517,-580,-314,12,187,150,-101,-413,-588,-477,-122,229,404,304,-2,-359,-676,-834,-801,-615,-377,-225,-205,-314,-428,-377,-145,142,287,210,2,-237,-410,-467,-393,-223,-119,-187,-376,-522,-474,-253,7,174,168,37,-107,-185,-172,-104,-30,-38,-166,-320,-378,-288,-135,-3,66,-3,-237,-491,-536,-348,-127,186,859,1651,1889,1294,465,290,892,1604,1867,1636,1091,333,-342,-515,-245,75,156,67,-43,-252,-538,-658,-453,-114,36,-27,-153,-269,-339,-360,-344,-384,-511,-597,-551,-389,-231,-137,-51,4,-13,-107,-216,-191,-30,130,102,-177,-501,-641,-519,-277,-93,-13,-61,-176,-243,-193,-46,78,128,95,-28,-177,-280,-310,-305,-314,-299,-224,-135,-95,-105,-139,-182,-208,-213,-247,-345,-224,457,1416,1855,1323,399,119,746,1620,1982,1681,1077,474,121,81,146,127,-43,-186,-207,-278,-465,-635,-578,-330,-140,-116,-249,-398,-400,-248,-74,-117,-388,-614,-595,-329,-39,72,-12,-175,-218,-87,67,101,-13,-144,-209,-279,-368,-427,-408,-356,-309,-231,-176,-190,-214,-143,33,173,171,43,-126,-218,-165,-36,-6,-172,-384,-412,-251,-83,-36,-90,-194,-289,-271,-152,-137,-346,-377,254,1207,1547,947,195,293,1174,1901,1907,1409,894,561,458,537,586,414,80,-154,-219,-320,-545,-678,-541,-296,-226,-378,-587,-663,-519,-273,-149,-289,-535,-564,-283,43,95,-117,-302,-218,101,367,331,50,-211,-244,-132,-136,-333,-564,-613,-464,-250,-112,-117,-221,-293,-238,-113,-19,15,54,82,26,-89,-174,-173,-148,-132,-90,-34,-15,-27,-47,-103,-214,-294,-285,-301,-481,-559,-49,857,1293,820,90,124,1052,1927,1928,1258,712,693,952,1059,775,304,31,66,165,-24,-456,-733,-628,-369,-357,-638,-921,-949,-718,-474,-460,-645,-693,-412,10,221,57,-237,-340,-149,218,537,630,415,40,-211,-229,-114,-83,-205,-332,-350,-221,-58,-57,-256,-517,-584,-392,-115,86,138,104,31,-74,-144,-124,-3,132,185,173,121,46,-48,-159,-230,-261,-268,-290,-365,-507,-589,-248,480,920,601,-61,-133,729,1705,1836,1153,519,544,996,1343,1206,682,265,221,394,359,-31,-429,-518,-363,-357,-693,-1120,-1297,-1061,-641,-444,-567,-754,-662,-339,-125,-173,-334,-318,-56,258,418,337,179,173,322,396,209,-67,-125,38,155,34,-231,-437,-529,-547,-502,-382,-228,-124,-121,-215,-319,-295,-131,63,179,175,128,102,106,127,140,119,37,-63,-151,-237,-293,-325,-358,-423,-351,56,460,371,-97,-247,396,1319,1556,962,360,497,1144,1594,1419,749,241,313,735,921,493,-189,-527,-411,-282,-495,-834,-968,-808,-562,-548,-806,-1063,-982,-600,-331,-401,-621,-576,-164,256,358,159,-34,33,322,609,658,462,217,100,138,180,115,-60,-274,-406,-382,-247,-185,-302,-473,-509,-356,-150,-53,-95,-179,-197,-104,80,239,251,137,17,-19,0,-13,-78,-105,-35,45,-38,-333,-670,-782,-426,201,479,187,-220,-119,600,1254,1171,525,171,569,1240,1499,1125,542,351,560,752,602,193,-88,-92,18,-47,-344,-626,-720,-634,-582,-747,-1008,-1101,-905,-638,-553,-623,-666,-496,-179,76,186,169,152,236,410,548,525,408,322,302,296,226,108,-5,-93,-146,-129,-62,-77,-235,-424,-508,-421,-227,-84,-87,-182,-241,-195,-62,26,-23,-97,-41,142,286,239,31,-176,-264,-240,-224,-292,-429,-465,-142,360,435,-29,-403,-135,615,1026,659,125,226,892,1363,1206,634,222,402,874,1043,729,246,58,188,235,-69,-501,-682,-612,-521,-579,-825,-1055,-1040,-794,-556,-530,-651,-684,-495,-242,-133,-104,-17,152,320,373,302,219,259,408,520,503,406,343,333,264,107,-10,-62,-137,-228,-232,-149,-81,-119,-244,-330,-309,-205,-96,-51,-69,-50,94,201,69,-211,-378,-274,-40,63,-39,-183,-200,-149,-217,-473,-779,-718,-139,339,131,-402,-456,215,942,898,270,-19,510,1284,1478,989,374,274,714,1061,860,274,-94,45,340,351,-12,-403,-531,-485,-464,-594,-796,-874,-782,-621,-541,-563,-567,-485,-355,-253,-170,-46,100,216,287,340,383,379,325,261,228,250,307,334,278,135,8,4,85,134,77,-59,-164,-134,2,80,-16,-197,-274,-193,-64,-22,-70,-111,-61,55,56,-127,-314,-307,-191,-218,-434,-601,-521,-296,-180,-282,-509,-677,-539,-87,250,88,-282,-236,338,822,647,118,35,594,1148,1150,719,397,549,954,1078,714,217,48,211,366,232,-67,-259,-315,-352,-427,-512,-584,-606,-540,-462,-444,-428,-370,-294,-261,-281,-266,-153,1,91,82,59,78,124,178,216,248,272,280,275,208,100,78,187,275,189,16,-70,-11,89,82,-5,-34,21,42,-57,-225,-336,-293,-155,-75,-86,-98,-96,-163,-296,-397,-403,-332,-288,-337,-438,-512,-510,-482,-529,-662,-690,-366,115,230,-97,-321,-24,588,879,536,66,146,758,1228,1069,576,378,688,1072,1000,555,246,371,675,692,371,18,-127,-103,-101,-200,-357,-480,-524,-540,-552,-518,-448,-408,-433,-470,-414,-254,-126,-121,-175,-175,-80,34,83,59,11,-4,56,180,288,288,190,120,121,150,165,138,83,66,140,253,266,129,-61,-120,-24,46,-9,-132,-177,-104,-57,-140,-294,-362,-304,-251,-293,-403,-466,-429,-375,-384,-460,-527,-539,-529,-512,-495,-468,-394,-206,43,103,-105,-264,-23,529,888,737,374,370,814,1173,1039,634,452,678,1018,1060,754,422,345,474,566,471,251,44,-92,-173,-200,-197,-238,-352,-477,-545,-567,-571,-555,-499,-415,-365,-383,-416,-400,-326,-247,-199,-164,-124,-62,25,127,198,183,92,8,23,135,237,252,229,237,276,275,185,104,126,205,216,115,0,-34,-18,-67,-191,-267,-235,-178,-208,-308,-382,-399,-389,-395,-422,-443,-437,-408,-376,-356,-356,-374,-365,-307,-224,-200,-279,-316,-150,139,236,66,-21,248,684,828,532,231,381,852,1103,882,552,551,842,997,775,413,294,470,631,511,223,48,37,31,-84,-256,-365,-375,-350,-369,-442,-491,-519,-574,-641,-661,-589,-477,-399,-365,-340,-280,-192,-110,-66,-54,-15,51,132,202,231,208,158,164,253,332,298,163,78,146,251,216,45,-87,-62,28,36,-63,-138,-78,-1,-38,-160,-238,-203,-157,-196,-287,-326,-268,-206,-218,-271,-315,-330,-345,-364,-354,-299,-218,-187,-240,-323,-363,-292,-93,114,124,-50,-88,210,620,746,496,241,379,789,998,808,535,540,784,929,767,448,286,342,417,340,157,31,-4,-24,-92,-185,-269,-348,-410,-436,-422,-385,-381,-425,-470,-451,-388,-359,-381,-408,-366,-238,-106,-72,-138,-191,-143,-38,51,97,116,130,137,160,209,223,177,111,84,134,217,233,150,56,29,53,77,85,77,58,-2,-88,-122,-83,-31,-45,-135,-229,-277,-271,-230,-190,-156,-145,-168,-222,-283,-300,-247,-164,-126,-159,-209,-220,-199,-183,-183,-170,-100,-2,35,-29,-66,78,341,485,379,181,166,425,698,736,575,464,544,687,693,548,402,374,417,418,332,207,119,44,-42,-104,-131,-163,-238,-327,-361,-334,-301,-345,-444,-480,-408,-302,-277,-350,-416,-374,-245,-160,-187,-249,-232,-133,-66,-73,-92,-41,66,116,70,-7,-24,32,87,87,63,83,131,130,86,56,105,182,199,169,141,151,174,165,139,115,98,59,-3,-34,-39,-51,-96,-165,-198,-180,-176,-235,-317,-310,-213,-152,-194,-287,-328,-296,-262,-267,-276,-242,-196,-191,-204,-150,-22,64,32,-33,47,288,459,400,246,247,463,658,625,469,426,549,674,632,455,328,344,411,390,265,127,60,45,17,-30,-92,-168,-256,-348,-402,-413,-419,-453,-509,-536,-525,-508,-502,-482,-416,-318,-253,-259,-288,-250,-123,19,81,58,39,67,120,168,198,213,232,245,239,207,196,229,274,284,241,192,166,156,131,81,31,29,49,15,-62,-104,-80,-31,-28,-103,-178,-153,-38,32,-7,-89,-125,-84,-13,27,32,28,20,-4,-44,-62,-59,-75,-112,-146,-159,-162,-176,-195,-208,-206,-194,-201,-227,-220,-166,-122,-119,-148,-162,-122,-43,2,12,61,153,222,219,175,203,339,458,433,318,278,356,452,448,335,217,197,255,287,233,149,111,115,111,66,6,-25,-30,-25,-50,-115,-187,-231,-228,-195,-177,-203,-247,-268,-253,-235,-236,-260,-278,-261,-220,-166,-136,-132,-139,-119,-46,31,83,105,92,91,121,152,158,142,147,177,199,195,165,135,119,116,122,130,129,115,78,32,-9,-55,-94,-111,-84,-41,-50,-106,-140,-123,-72,-61,-109,-140,-98,-24,-12,-61,-93,-77,-33,-29,-99,-164,-155,-55,24,7,-55,-105,-83,-31,-23,-54,-70,-39,-8,-29,-69,-86,-61,-29,-34,-46,-30,8,27,9,-15,-15,21,66,72,54,54,83,127,159,168,164,158,155,155,160,181,200,196,169,141,137,159,179,179,158,145,155,164,166,143,104,80,77,64,30,-4,-15,-6,-7,-44,-95,-120,-119,-119,-152,-208,-239,-228,-198,-188,-215,-254,-271,-263,-250,-242,-227,-196,-162,-140,-122,-103,-89,-87,-99,-106,-77,-27,0,-1,-19,-21,0,10,13,25,53,87,120,136,128,115,121,142,160,175,197,232,266,274,248,210,189,180,166,147,127,100,56,5,-44,-86,-111,-134,-172,-209,-213,-194,-195,-226,-274,-305,-287,-237,-197,-187,-198,-197,-168,-122,-82,-63,-51,-36,-9,15,28,38,51,75,98,109,107,103,115,160,204,210,201,208,252,307,324,298,262,260,283,297,290,273,253,230,196,153,113,88,68,38,-2,-43,-76,-105,-147,-196,-237,-260,-268,-264,-256,-249,-247,-253,-257,-261,-273,-282,-267,-225,-170,-137,-154,-203,-223,-187,-123,-79,-87,-113,-111,-77,-45,-41,-57,-69,-54,-18,10,24,38,60,84,99,113,130,153,181,200,197,194,209,232,235,212,194,193,203,206,189,159,140,149,157,128,74,36,35,52,50,16,-27,-45,-34,-17,-32,-71,-99,-96,-73,-69,-96,-125,-133,-116,-96,-94,-105,-121,-126,-100,-61,-43,-38,-37,-41,-40,-37,-35,-30,-20,2,21,17,-6,-29,-29,-4,26,41,32,8,-5,7,30,38,20,0,-6,-2,9,14,12,8,-1,-14,-22,-20,-5,5,3,-12,-36,-45,-40,-32,-35,-45,-45,-38,-28,-28,-35,-40,-36,-14,4,9,12,10,15,32,49,59,67,76,77,67,54,48,53,64,63,46,28,20,27,39,37,25,17,24,37,38,26,17,16,18,18,11,3,-3,-4,-1,-2,-2,0,-4,-10,-14,-15,-13,-14,-16,-13,-3,-5,-26,-48,-55,-40,-20,-24,-46,-62,-49,-18,-5,-21,-37,-30,-6,13,11,-3,-10,4,28,33,17,1,7,21,26,16,-1,-5,4,15,13,-1,-16,-20,-12,-1,2,-4,-15,-26,-34,-31,-19,-17,-37,-63,-72,-55,-30,-22,-34,-47,-43,-25,-10,-16,-30,-21,-1,11,8,-5,-7,9,31,37,26,22,39,60,65,60,58,61,70,77,72,67,67,68,64,46,25,16,16,15,11,0,-15,-27,-23,-13,-10,-16,-30,-44,-45,-27,-9,-6,-20,-30,-24,-15,-15,-26,-43,-46,-35,-25,-31,-45,-54,-52,-48,-49,-48,-40,-27,-15,-10,-11,-10,-4,6,15,21,29,40,54,64,72,78,82,78,71,73,75,74,68,53,42,32,24,13,1,-11,-22,-21,-18,-22,-34,-48,-51,-48,-42,-32,-25,-25,-24,-21,-22,-23,-25,-29,-33,-31,-21,-9,-9,-21,-36,-40,-28,-12,-13,-32,-40,-26,-3,13,11,1,-6,1,20,26,19,10,7,17,27,23,10,-1,-2,1,2,-1,-2,0,2,-1,-12,-22,-24,-19,-10,-3,0,2,7,11,12,14,23,35,37,36,35,33,37,40,34,22,11,6,8,9,14,15,12,10,6,8,12,15,21,25,26,28,28,21,10,4,-1,4,7,1,-9,-21,-26,-28,-34,-46,-57,-63,-73,-77,-75,-69,-57,-52,-53,-56,-54,-41,-24,-17,-15,-6,6,18,24,22,22,31,40,41,39,38,41,44,37,22,9,9,19,23,12,-3,-5,5,15,16,13,10,15,23,27,28,25,26,30,30,25,13,-3,-10,-4,1,-2,-15,-33,-43,-37,-27,-30,-42,-53,-52,-43,-36,-39,-47,-44,-33,-20,-11,-5,-1,5,13,18,25,28,31,35,35,34,38,43,42,39,35,33,34,33,28,20,14,16,21,23,20,10,4,5,12,14,10,3,1,10,11,1,-11,-23,-25,-26,-36,-47,-54,-52,-47,-46,-48,-55,-56,-52,-43,-39,-41,-37,-34,-29,-25,-25,-21,-17,-10,-1,5,12,24,35,38,34,28,32,42,52,53,44,35,28,31,33,30,24,13,12,15,22,19,4,-3,-3,4,9,2,-7,-12,-8,3,8,0,-11,-14,-10,-5,-2,-1,-4,-6,-4,-1,-4,-9,-7,-6,-4,-3,-4,-5,-5,-6,-11,-15,-17,-21,-26,-26,-21,-16,-14,-16,-16,-10,-2,1,1,4,7,12,16,17,15,13,11,10,12,17,18,16,18,20,15,8,6,7,8,9,5,-4,-9,-11,-15,-17,-22,-25,-24,-19,-12,-15,-19,-19,-14,-3,2,3,-1,-1,-2,3,14,17,12,8,3,-1,1,6,6,4,2,6,7,7,6,0,-3,0,6,8,10,8,6,4,1,-1,-1,2,4,5,5,2,0,4,7,5,7,10,7,1,-1,0,3,3,-4,-11,-12,-10,-6,-2,-2,-3,-5,-5,-5,-3,-2,-5,-5,-4,-2,-3,-11,-15,-15,-13,-12,-17,-18,-13,-10,-9,-8,-4,-2,0,3,0,-1,3,9,14,12,8,4,2,4,6,6,2,-1,2,7,9,4,1,-1,0,5,3,1,5,10,10,5,-1,0,3,6,10,5,0,0,2,3,3,7,8,7,4,1,2,5,3,-1,-6,-15,-17,-12,-9,-6,-3,0,1,-2,-2,1,2,2,7,10,4,1,-1,-1,1,-1,-8,-13,-16,-13,-4,-1,-2,-5,-9,-9,-7,-9,-6,0,1,0,1,4,4,3,2,1,5,9,10,9,8,11,12,11,9,5,2,4,10,8,2,-2,-5,-5,-6,-7,-6,-5,-8,-13,-16,-10,-1,0,0,-2,-6,-3,5,11,10,5,2,1,-2,-3,1,5,9,11,8,3,3,8,13,11,12,10,3,0,2,5,2,0,-4,-7,-8,-9,-8,-8,-6,-3,-2,-2,-4,-8,-12,-12,-8,-4,-3,-7,-9,-6,-6,-8,-12,-17,-14,-8,-5,-3,-5,-8,-7,-3,1,0,0,4,8,11,10,7,8,7,10,13,10,4,3,8,15,16,12,8,3,2,8,14,13,9,1,-3,-1,-2,-5,-9,-10,-5,-4,-6,-4,-2,-1,2,3,1,-2,-4,-7,-4,0,0,-4,-7,-9,-11,-9,-7,-4,-1,1,0,-2,-2,1,1,0,0,0,3,11,12,8,4,2,2,3,4,3,5,5,5,4,0,-1,-1,-1,-1,1,1,0,-2,-3,-3,-2,-4,-5,-3,-1,0,1,1,2,2,-1,-6,-4,0,2,2,0,-2,-7,-8,-9,-12,-9,-8,-9,-9,-8,-5,-1,1,4,5,3,6,6,6,10,11,9,3,2,3,4,6,6,5,3,2,3,6,4,1,1,1,1,0,2,1,2,5,3,0,4,4,0,1,0,2,4,3,2,1,-1,-2,-2,-4,-5,-4,-7,-8,-10,-15,-18,-17,-13,-9,-7,-7,-6,-7,-5,-2,1,0,2,3,2,3,3,5,6,2,0,1,4,5,5,5,4,6,8,10,9,8,9,10,13,10,3,-1,-3,0,5,5,0,-6,-10,-6,-3,-1,0,-3,-6,-11,-12,-11,-10,-9,-10,-8,-10,-9,-8,-7,-2,0,-1,-1,-1,2,7,10,9,7,4,4,7,7,10,12,7,4,2,2,3,4,2,0,0,2,4,2,0,0,-1,0,0,0,0,-2,-2,-2,-4,-3,-3,-3,-4,-5,-7,-7,-6,-6,-5,-2,-1,-1,0,1,0,-1,0,0,2,7,9,5,0,-1,0,1,4,8,8,3,0,0,0,0,0,-3,-5,-1,1,0,-2,-8,-11,-11,-10,-5,-2,1,0,-1,0,-3,-2,0,1,3,3,4,3,-1,-1,1,1,0,0,0,1,0,1,3,1,0,1,2,4,5,1,-1,1,2,0,0,0,-1,1,1,0,-1,-1,0,1,4,3,0,-1,-2,-2,-1,1,2,-2,-5,-4,-5,-5,-2,-1,0,0,1,3,3,1,0,1,0,2,8,8,6,3,1,0,0,-1,-2,-2,0,1,2,0,0,-2,-4,-4,-1,0,1,-2,-7,-5,-2,-3,-6,-8,-5,-1,0,1,2,1,-1,0,0,0,1,0,0,-1,-2,-1,-1,-2,-3,-2,0,-1,-2,-3,-3,-2,-2,-1,1,0,0,0,-1,2,5,7,5,3,1,0,1,1,5,7,5,4,6,7,5,5,5,2,2,5,7,6,6,5,1,-1,-2,-2,1,1,1,1,1,0,0,0,-2,-2,0,0,0,0,0,-4,-7,-5,-3,1,1,1,0,0,1,0,0,0,0,-1,-1,0,-2,-4,-4,-5,-3,-4,-6,-5,-3,-1,-2,-2,-1,-3,-1,0,-2,0,1,5,6,2,0,-1,0,2,1,-2,-4,-4,-3,-1,-2,-3,-2,-1,0,-1,-3,-5,-6,-4,1,3,1,-3,-5,-2,0,0,1,1,3,6,8,6,1,1,2,3,4,3,3,2,0,0,0,-1,-1,-2,2,4,5,4,0,0,1,3,4,3,2,1,1,0,0,0,-1,-2,-1,0,1,0,0,-1,-3,-4,-4,-2,0,0,0,0,-1,-1,0,0,-2,-1,1,0,0,0,0,0,1,3,4,5,8,5,-1,-2,-1,5,4,1,0,-2,-1,-1,0,0,-2,-3,-3,-2,0,-3,-8,-11,-11,-7,-3,-2,-4,-6,-4,-1,0,-4,-5,-1,1,4,6,4,1,0,0,5,8,7,7,8,6,5,6,3,4,7,5,6,6,2,-1,-3,-1,1,1,0,0,0,-1,-1,-1,-1,0,-1,0,-2,-6,-3,-2,-5,-4,-2,0,0,-2,-2,-2,-1,0,0,-1,-2,0,0,0,0,0,1,0,0,1,3,2,2,2,1,0,-1,-1,0,1,0,0,0,-2,-1,0,-2,-3,-2,0,-1,-1,-1,-2,-4,-2,-1,-3,-3,-1,-2,-2,0,0,0,2,3,3,4,4,3,4,4,3,5,4,3,4,3,4,4,5,4,1,0,0,0,-1,-3,-3,-1,-1,0,0,-1,0,0,0,0,0,0,-1,0,0,1,2,1,3,4,1,1,0,1,3,1,-2,-4,-5,-2,0,-1,-2,-3,-2,-1,1,-1,-3,-1,-1,0,0,0,-1,0,-3,-3,-4,-7,-4,-2,-3,-4,-5,-4,-1,0,0,-1,-2,-2,-2,-2,-4,-1,1,1,0,1,2,4,5,4,7,9,9,9,6,1,0,1,2,2,2,1,-1,-3,-2,0,-1,-1,-2,-3,-1,-1,-2,-1,-1,-1,0,0,-1,0,0,-1,0,-2,-1,2,2,3,3,3,0,3,4,5,6,3,5,5,5,7,6,4,2,1,3,3,2,1,1,-1,-1,-2,-1,0,0,0,0,-3,-7,-8,-6,-6,-9,-10,-9,-9,-7,-7,-8,-5,-4,-1,0,2,2,-1,-3,-1,0,0,0,0,0,1,1,2,5,3,1,1,2,4,4,3,3,1,0,1,1,1,0,-2,-2,-1,-1,-2,-4,-7,-6,-2,-3,-3,-5,-7,-3,-1,-2,-3,-2,-1,0,0,-2,0,1,0,1,2,6,8,1,2,8,2,10,15,-2,14,14,-8,16,4,-11,19,-1,-8,8,-10,1,8,-2,-1,-7,22,2,-15,29,-37,42,140,-47,-16,19,-141,43,52,-143,13,-3,-59,42,-49,-29,14,-14,41,-38,-20,19,-44,81,16,-65,85,-47,-12,133,-76,12,88,-74,73,33,-75,68,-2,8,48,-55,24,-9,-25,72,-70,-5,44,-101,48,5,-89,63,-33,-20,49,-82,19,13,-48,48,-40,-15,35,-62,24,9,-36,38,-28,19,27,-44,44,-34,0,83,-72,35,37,-78,78,-27,-46,98,-63,24,51,-91,93,-18,-67,114,-84,13,73,-127,78,11,-102,139,-76,-70,138,-126,32,103,-163,75,48,-133,118,-6,-127,145,-53,-59,132,-124,23,92,-106,103,-20,-87,115,-82,26,37,-109,107,-13,-42,73,-95,12,69,-41,-12,2,8,-30,65,7,-89,93,-44,-23,116,-150,52,77,-167,176,-35,-168,195,-85,-26,142,-134,93,96,-89,87,-24,-70,73,-24,-76,26,21,-124,-2,44,-118,69,-25,-120,87,-15,-47,41,-16,-16,11,48,-27,-64,113,-52,-14,146,-116,23,92,-79,73,33,-73,59,25,-62,28,29,-50,43,33,-67,54,0,-47,68,-29,-51,145,-102,-3,107,-165,111,61,-137,123,-21,-138,161,3,-149,111,-6,-122,163,-46,-164,214,-141,-49,304,-335,103,209,-408,381,-12,-387,464,-262,-142,429,-399,-13,313,-318,88,169,-314,86,158,-184,108,14,-228,233,49,-187,141,-66,-33,163,-69,28,-45,-15,166,-103,20,26,-120,155,-8,-85,119,-131,10,125,-106,-10,-25,-14,69,-59,-17,22,-74,41,87,-114,-28,130,-127,33,121,-241,131,105,-241,227,-28,-223,277,-43,-158,173,-51,-102,185,-71,-135,173,-73,-60,202,-161,-55,203,-150,56,74,-168,134,28,-74,77,-91,-24,139,-45,-35,10,-86,78,76,-110,24,-23,-77,171,-46,-125,86,-71,16,125,-135,-14,73,-79,119,33,-145,39,60,-30,57,-5,-118,81,60,-74,41,-31,-100,101,30,-83,41,-53,-51,106,-21,-90,81,-26,-50,159,-80,-113,158,-63,-52,184,-164,-64,208,-193,31,152,-227,60,131,-153,17,91,-148,57,161,-194,4,132,-158,131,88,-219,152,41,-107,142,-72,-29,95,-60,34,10,-63,39,8,-36,53,-33,-30,42,-46,42,1,-47,105,-74,-17,122,-171,82,142,-218,112,74,-191,158,4,-157,174,-15,-125,116,3,-80,50,51,-80,-30,126,-114,-37,202,-175,4,191,-229,64,150,-228,99,127,-182,32,34,-112,61,85,-38,-72,8,24,-38,59,26,-136,62,77,-153,72,10,-197,190,108,-214,45,2,-154,196,85,-179,39,-40,-77,184,1,-147,25,-3,0,113,-58,-167,81,99,3,89,-147,-133,177,14,69,104,-244,-16,139,-11,90,-54,-127,72,53,108,-20,-207,84,40,49,197,-268,-162,224,-72,155,152,-431,24,247,-160,198,45,-414,179,214,-204,143,-67,-307,296,150,-180,37,-126,-76,205,66,-44,-123,-70,124,-7,43,48,-208,37,181,-109,15,26,-185,125,147,-184,17,93,-183,75,149,-143,17,17,-62,76,1,-3,28,-63,60,18,-42,92,-90,-26,135,-96,2,131,-160,-47,126,-108,35,68,-139,7,-9,-10,91,-121,5,75,-123,109,40,-152,88,-16,-13,139,-123,-28,77,-107,157,41,-235,142,22,-131,167,-48,-120,140,-38,-34,88,-80,-24,90,29,-6,-21,-32,37,11,-5,46,-35,-4,6,-38,75,-54,-6,163,-187,-19,172,-169,27,98,-146,82,81,-139,7,-7,-27,148,1,-123,36,-33,-11,170,4,-146,25,77,-26,-1,25,-127,31,181,-117,-26,28,-235,165,250,-242,-22,27,-152,179,96,-132,-8,-107,41,233,-138,-156,103,9,22,150,-100,-224,113,123,-13,58,-114,-164,135,142,-77,-41,-19,-97,105,139,-141,-107,41,76,91,-74,-102,42,-21,62,120,-137,-100,90,38,55,-4,-144,28,113,-14,46,-63,-136,135,54,-55,99,-160,-108,303,-63,-200,188,-30,-156,224,28,-220,62,44,-37,126,-31,-124,91,-13,-48,138,-54,-145,156,53,-154,81,15,-119,134,46,-111,24,-34,-26,113,33,-105,-48,54,-30,6,54,-92,-16,71,-29,11,-24,-46,30,41,31,-72,-50,38,17,71,-2,-100,-31,1,114,94,-124,-64,68,7,62,40,-139,-73,138,88,-58,-45,-123,-20,240,31,-148,-52,-81,108,194,-98,-109,-6,-11,155,41,-205,-10,32,57,170,-150,-187,84,68,91,-11,-120,28,-60,64,178,-199,-101,197,-40,-30,91,-191,-8,195,-82,61,18,-240,134,116,-120,82,-21,-52,73,-59,-12,15,-30,70,13,-53,-55,-16,129,-8,-84,80,-66,-53,108,-41,-40,-15,-5,107,-72,-60,33,-63,128,51,-116,43,-84,-3,154,-131,10,59,-163,141,35,-169,152,-5,-80,190,-62,-145,104,-7,2,101,-75,-76,27,13,68,24,-83,-46,62,86,-57,36,-16,-176,219,93,-245,145,-32,-160,300,-57,-214,145,-53,14,174,-109,-114,5,58,88,-17,-17,-66,-78,107,89,-76,-63,21,5,15,47,-64,-88,52,89,51,-41,-112,-27,52,76,66,-49,-103,-51,30,73,-14,-44,-24,-19,59,-6,-90,27,1,7,128,-96,-174,112,40,-7,140,-131,-138,153,-16,19,122,-166,11,169,-104,-13,22,-82,105,106,-95,-119,-10,12,53,114,-129,-146,124,3,22,78,-190,47,172,-118,44,-51,-175,211,104,-92,-15,-146,2,209,34,-20,-94,-124,122,91,-13,-10,-155,-16,200,-7,-108,-25,-40,77,147,-30,-156,-65,103,108,20,-16,-127,-91,163,77,-122,67,9,-146,161,77,-192,79,97,-97,76,23,-170,34,81,-35,79,-34,-120,42,-31,19,80,-67,60,-15,-139,106,-13,-12,152,-144,-3,83,-194,124,74,-172,166,-16,-175,102,-51,-41,138,-46,-27,18,-98,32,62,-37,9,24,-1,-8,2,7,-27,38,80,-19,-32,-64,-28,153,-34,-96,133,-117,-123,209,-14,-115,100,-26,-45,68,-20,-39,-7,48,28,-29,40,-78,-60,182,-13,-111,112,-66,-101,183,-27,-173,108,23,-108,128,-7,-215,111,123,-99,86,-20,-208,123,151,-113,-5,17,-125,92,165,-137,-70,86,-40,89,108,-213,-60,161,-17,21,45,-139,-49,110,18,-58,14,-8,-54,73,40,-97,28,25,-78,86,46,-80,55,10,-87,55,59,-49,-11,16,0,15,21,-13,-55,-16,64,29,-35,-43,-68,32,118,-31,-43,7,-72,67,96,-99,-15,31,-9,112,-30,-122,82,9,-36,108,-82,-103,160,-9,-104,84,-74,-58,208,-42,-180,112,-3,-82,175,-45,-196,162,68,-144,115,53,-179,107,162,-207,-14,161,-179,37,206,-229,-48,188,-137,3,151,-152,-51,160,-42,-56,106,-61,-105,132,24,-101,101,-17,-148,113,42,-142,67,49,-117,41,47,-124,26,93,-70,32,32,-140,56,120,-92,-10,37,-49,23,47,-1,-38,-42,56,23,-27,34,-72,-51,111,0,-34,49,-76,-25,94,-7,-7,22,-36,-20,35,20,-5,14,-21,-33,37,1,-31,0,-25,5,24,-5,-1,-44,-41,50,29,-4,17,-33,-15,24,-15,50,68,-51,-20,28,-15,22,39,2,-2,9,26,-23,-72,31,57,-17,40,-25,-109,58,33,-57,55,-62,-72,119,-35,-84,47,-51,6,98,-53,-46,-3,-48,45,38,-35,-7,-35,-37,35,25,-5,18,3,-16,9,1,-25,4,15,5,20,-13,-46,5,47,16,23,23,-66,-15,111,12,-38,39,-42,-19,106,-20,-84,48,2,-21,90,-48,-130,46,32,-41,44,-11,-92,49,48,-60,44,1,-82,93,19,-123,53,5,-46,142,-27,-115,79,-34,-15,131,-55,-53,76,-52,-36,58,-37,9,86,-67,-52,55,-21,42,68,-73,-11,21,-12,52,-32,-44,61,-12,-26,12,-82,6,123,-16,-42,-8,-76,46,125,-28,-58,-26,-47,46,71,-66,-56,22,15,55,-6,-99,3,61,53,55,-87,-112,37,39,45,53,-104,-86,51,18,18,20,-48,-2,69,5,-49,-3,-6,10,88,10,-73,-21,-36,7,102,10,-56,-14,-52,-5,78,16,6,10,-42,-1,37,7,6,-6,5,20,-20,1,-19,-42,63,39,-42,13,-28,-57,68,33,-57,11,-9,-49,45,6,-85,5,22,-15,48,-7,-74,-10,12,26,37,-4,-27,-11,11,8,-3,-1,9,17,40,14,-56,-24,38,39,46,-4,-83,-6,60,-2,8,-6,-52,31,49,-19,-29,-25,5,39,34,-16,-62,-22,19,4,5,-1,-26,-1,6,-39,-27,13,25,33,4,-56,-35,27,28,10,-4,-18,-21,-2,8,-14,-9,21,15,-5,-1,-13,-9,35,26,-5,2,-15,-21,16,23,3,-5,5,1,-9,12,6,-18,15,24,-10,-2,-12,-30,8,27,0,-13,-21,-38,-4,28,-6,-22,-1,6,-3,1,-4,-21,7,35,18,-11,-26,-8,17,22,11,-7,-11,8,13,6,3,-14,11,38,-7,-15,2,-18,6,42,12,-3,7,-21,-1,41,0,-5,19,-21,-12,27,-15,-20,29,4,3,19,-36,-21,33,5,-5,6,-32,-15,19,-4,-1,1,-21,-2,15,-1,0,-4,-11,5,-5,-8,2,-18,-9,12,0,2,-6,-19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}

void DebugLog(const char *s)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
//	STLBLE_PRINTF("%s", s);
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <__tcf_0>:
//  }

//	int16_t audio_buffer[16000]=WAVE_DATA;

	int8_t audio_buffer[3920] = {};
	static tflite::MicroErrorReporter micro_error_reporter;
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4801      	ldr	r0, [pc, #4]	; (8000fd0 <__tcf_0+0xc>)
 8000fca:	f7ff ff41 	bl	8000e50 <_ZN6tflite18MicroErrorReporterD1Ev>
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <__tcf_1>:
//		STLBLE_PRINTF("Model provided is schema version %d not equal to supported version %d.",
//							 model->version(), TFLITE_SCHEMA_VERSION);
//	}
//	static tflite::AllOpsResolver resolver;

		static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <__tcf_1+0xc>)
 8000fda:	f000 fb19 	bl	8001610 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20015940 	.word	0x20015940

08000fe4 <__tcf_2>:
//	micro_op_resolver.AddTranspose();
//	micro_op_resolver.AddMul();
//	micro_op_resolver.AddAdd();
//	micro_op_resolver.AddStridedSlice();

	static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4801      	ldr	r0, [pc, #4]	; (8000ff0 <__tcf_2+0xc>)
 8000fea:	f009 fd65 	bl	800aab8 <_ZN6tflite16MicroInterpreterD1Ev>
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200159c4 	.word	0x200159c4

08000ff4 <main>:
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8000ffa:	af04      	add	r7, sp, #16
  HAL_Init();
 8000ffc:	f000 fe56 	bl	8001cac <HAL_Init>
  SystemClock_Config();
 8001000:	f7ff fe94 	bl	8000d2c <SystemClock_Config>
  HAL_PWREx_EnableVddUSB();
 8001004:	f001 fcb0 	bl	8002968 <HAL_PWREx_EnableVddUSB>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	4990      	ldr	r1, [pc, #576]	; (800124c <main+0x258>)
 800100c:	4890      	ldr	r0, [pc, #576]	; (8001250 <main+0x25c>)
 800100e:	f003 fad4 	bl	80045ba <USBD_Init>
  USBD_RegisterClass(&hUSBDDevice, USBD_CDC_CLASS);
 8001012:	4990      	ldr	r1, [pc, #576]	; (8001254 <main+0x260>)
 8001014:	488e      	ldr	r0, [pc, #568]	; (8001250 <main+0x25c>)
 8001016:	f003 fae3 	bl	80045e0 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 800101a:	498f      	ldr	r1, [pc, #572]	; (8001258 <main+0x264>)
 800101c:	488c      	ldr	r0, [pc, #560]	; (8001250 <main+0x25c>)
 800101e:	f003 fa98 	bl	8004552 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 8001022:	488b      	ldr	r0, [pc, #556]	; (8001250 <main+0x25c>)
 8001024:	f003 faf2 	bl	800460c <USBD_Start>
  HAL_Delay(5000);
 8001028:	f241 3088 	movw	r0, #5000	; 0x1388
 800102c:	f000 fe66 	bl	8001cfc <HAL_Delay>
	int8_t audio_buffer[3920] = {};
 8001030:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001034:	f103 0310 	add.w	r3, r3, #16
 8001038:	f6a3 736c 	subw	r3, r3, #3948	; 0xf6c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	f640 724c 	movw	r2, #3916	; 0xf4c
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f017 f8cb 	bl	80181e4 <memset>
	static tflite::MicroErrorReporter micro_error_reporter;
 800104e:	4b83      	ldr	r3, [pc, #524]	; (800125c <main+0x268>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f3bf 8f5b 	dmb	ish
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf0c      	ite	eq
 800105e:	2301      	moveq	r3, #1
 8001060:	2300      	movne	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d010      	beq.n	800108a <main+0x96>
 8001068:	487c      	ldr	r0, [pc, #496]	; (800125c <main+0x268>)
 800106a:	f016 fad3 	bl	8017614 <__cxa_guard_acquire>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <main+0x96>
 800107e:	4878      	ldr	r0, [pc, #480]	; (8001260 <main+0x26c>)
 8001080:	f016 fdc6 	bl	8017c10 <atexit>
 8001084:	4875      	ldr	r0, [pc, #468]	; (800125c <main+0x268>)
 8001086:	f016 fad1 	bl	801762c <__cxa_guard_release>
	error_reporter = &micro_error_reporter;
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <main+0x270>)
 800108c:	4a76      	ldr	r2, [pc, #472]	; (8001268 <main+0x274>)
 800108e:	601a      	str	r2, [r3, #0]
	model = tflite::GetModel(kwt);
 8001090:	4876      	ldr	r0, [pc, #472]	; (800126c <main+0x278>)
 8001092:	f7ff ff19 	bl	8000ec8 <_ZN6tflite8GetModelEPKv>
 8001096:	4603      	mov	r3, r0
 8001098:	4a75      	ldr	r2, [pc, #468]	; (8001270 <main+0x27c>)
 800109a:	6013      	str	r3, [r2, #0]
		static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <main+0x280>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f3bf 8f5b 	dmb	ish
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d014      	beq.n	80010e0 <main+0xec>
 80010b6:	486f      	ldr	r0, [pc, #444]	; (8001274 <main+0x280>)
 80010b8:	f016 faac 	bl	8017614 <__cxa_guard_acquire>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <main+0xec>
 80010cc:	2100      	movs	r1, #0
 80010ce:	486a      	ldr	r0, [pc, #424]	; (8001278 <main+0x284>)
 80010d0:	f000 f936 	bl	8001340 <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>
 80010d4:	4869      	ldr	r0, [pc, #420]	; (800127c <main+0x288>)
 80010d6:	f016 fd9b 	bl	8017c10 <atexit>
 80010da:	4866      	ldr	r0, [pc, #408]	; (8001274 <main+0x280>)
 80010dc:	f016 faa6 	bl	801762c <__cxa_guard_release>
		micro_op_resolver.AddConv2D();
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <main+0x284>)
 80010e2:	f000 f949 	bl	8001378 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DEv>
		micro_op_resolver.AddMaxPool2D();
 80010e6:	4864      	ldr	r0, [pc, #400]	; (8001278 <main+0x284>)
 80010e8:	f000 f95e 	bl	80013a8 <_ZN6tflite22MicroMutableOpResolverILj3EE12AddMaxPool2DEv>
		micro_op_resolver.AddMean();
 80010ec:	4862      	ldr	r0, [pc, #392]	; (8001278 <main+0x284>)
 80010ee:	f000 f973 	bl	80013d8 <_ZN6tflite22MicroMutableOpResolverILj3EE7AddMeanEv>
		micro_op_resolver.AddFullyConnected();
 80010f2:	4861      	ldr	r0, [pc, #388]	; (8001278 <main+0x284>)
 80010f4:	f000 f988 	bl	8001408 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedEv>
		micro_op_resolver.AddSoftmax();
 80010f8:	485f      	ldr	r0, [pc, #380]	; (8001278 <main+0x284>)
 80010fa:	f000 f99d 	bl	8001438 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxEv>
		micro_op_resolver.AddDequantize();
 80010fe:	485e      	ldr	r0, [pc, #376]	; (8001278 <main+0x284>)
 8001100:	f000 f9b2 	bl	8001468 <_ZN6tflite22MicroMutableOpResolverILj3EE13AddDequantizeEv>
	static tflite::MicroInterpreter static_interpreter(model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001104:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <main+0x28c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f3bf 8f5b 	dmb	ish
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01f      	beq.n	800115e <main+0x16a>
 800111e:	4858      	ldr	r0, [pc, #352]	; (8001280 <main+0x28c>)
 8001120:	f016 fa78 	bl	8017614 <__cxa_guard_acquire>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d014      	beq.n	800115e <main+0x16a>
 8001134:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <main+0x27c>)
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <main+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f44f 33aa 	mov.w	r3, #87040	; 0x15400
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <main+0x290>)
 800114a:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <main+0x284>)
 800114c:	484e      	ldr	r0, [pc, #312]	; (8001288 <main+0x294>)
 800114e:	f009 fc76 	bl	800aa3e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 8001152:	484e      	ldr	r0, [pc, #312]	; (800128c <main+0x298>)
 8001154:	f016 fd5c 	bl	8017c10 <atexit>
 8001158:	4849      	ldr	r0, [pc, #292]	; (8001280 <main+0x28c>)
 800115a:	f016 fa67 	bl	801762c <__cxa_guard_release>
	interpreter = &static_interpreter;
 800115e:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <main+0x29c>)
 8001160:	4a49      	ldr	r2, [pc, #292]	; (8001288 <main+0x294>)
 8001162:	601a      	str	r2, [r3, #0]
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8001164:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <main+0x29c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f009 fd2f 	bl	800abcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800116e:	4603      	mov	r3, r0
 8001170:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001174:	f102 020f 	add.w	r2, r2, #15
 8001178:	7013      	strb	r3, [r2, #0]
//	if (allocate_status != kTfLiteOk)
//	{
//		STLBLE_PRINTF("AllocateTensors() failed");
//	}

	model_input = interpreter->input(0);
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <main+0x29c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f009 fed7 	bl	800af34 <_ZN6tflite16MicroInterpreter5inputEj>
 8001186:	4603      	mov	r3, r0
 8001188:	4a42      	ldr	r2, [pc, #264]	; (8001294 <main+0x2a0>)
 800118a:	6013      	str	r3, [r2, #0]
	model_output = interpreter->output(0);
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <main+0x29c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fef8 	bl	800af88 <_ZN6tflite16MicroInterpreter6outputEj>
 8001198:	4603      	mov	r3, r0
 800119a:	4a3f      	ldr	r2, [pc, #252]	; (8001298 <main+0x2a4>)
 800119c:	6013      	str	r3, [r2, #0]
	uint32_t start, elapsed;

	while (1)
	{
//	 Calculate an x value to feed into the model
		STLBLE_PRINTF("Running Inference!\n");
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	3b0c      	subs	r3, #12
 80011a4:	493d      	ldr	r1, [pc, #244]	; (800129c <main+0x2a8>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f016 ff0a 	bl	8017fc0 <siprintf>
 80011ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80011b0:	f103 0308 	add.w	r3, r3, #8
 80011b4:	6018      	str	r0, [r3, #0]
 80011b6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80011ba:	f103 0308 	add.w	r3, r3, #8
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	3b0c      	subs	r3, #12
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fb75 	bl	80018b8 <CDC_Fill_Buffer>
		model_input->data.int8 = audio_buffer;
 80011ce:	4b31      	ldr	r3, [pc, #196]	; (8001294 <main+0x2a0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80011d6:	605a      	str	r2, [r3, #4]

		// Run inference, and report any error
	    start = HAL_GetTick();
 80011d8:	f000 fd8a 	bl	8001cf0 <HAL_GetTick>
 80011dc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80011e0:	f103 0304 	add.w	r3, r3, #4
 80011e4:	6018      	str	r0, [r3, #0]
		TfLiteStatus invoke_status = interpreter->Invoke();
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <main+0x29c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fe0a 	bl	800ae04 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80011f6:	f102 0203 	add.w	r2, r2, #3
 80011fa:	7013      	strb	r3, [r2, #0]
		elapsed = HAL_GetTick() - start;
 80011fc:	f000 fd78 	bl	8001cf0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001206:	f103 0304 	add.w	r3, r3, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001212:	f102 021c 	add.w	r2, r2, #28
 8001216:	6013      	str	r3, [r2, #0]
		printf("helloo!!");
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <main+0x2ac>)
 800121a:	f016 febf 	bl	8017f9c <iprintf>
//		{
//			STLBLE_PRINTF("Invoke failed\n");
//		}

//		 Read the predicted y value from the model's output tensor
		float x_val = model_input->data.f[0];
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <main+0x2a0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800122a:	f102 0218 	add.w	r2, r2, #24
 800122e:	6013      	str	r3, [r2, #0]
		float y_val = model_output->data.f[0];
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <main+0x2a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800123c:	f102 0214 	add.w	r2, r2, #20
 8001240:	6013      	str	r3, [r2, #0]


			  HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f000 fd59 	bl	8001cfc <HAL_Delay>


		// Do something with the results
//			handle_output(error_reporter, x_val, y_val);
	}
 800124a:	e7a8      	b.n	800119e <main+0x1aa>
 800124c:	20000058 	.word	0x20000058
 8001250:	20015620 	.word	0x20015620
 8001254:	20000158 	.word	0x20000158
 8001258:	20000010 	.word	0x20000010
 800125c:	2001593c 	.word	0x2001593c
 8001260:	08000fc5 	.word	0x08000fc5
 8001264:	2000020c 	.word	0x2000020c
 8001268:	20000004 	.word	0x20000004
 800126c:	08019134 	.word	0x08019134
 8001270:	20000210 	.word	0x20000210
 8001274:	200159c0 	.word	0x200159c0
 8001278:	20015940 	.word	0x20015940
 800127c:	08000fd5 	.word	0x08000fd5
 8001280:	20015a44 	.word	0x20015a44
 8001284:	20000220 	.word	0x20000220
 8001288:	200159c4 	.word	0x200159c4
 800128c:	08000fe5 	.word	0x08000fe5
 8001290:	20000214 	.word	0x20000214
 8001294:	20000218 	.word	0x20000218
 8001298:	2000021c 	.word	0x2000021c
 800129c:	08019e3c 	.word	0x08019e3c
 80012a0:	08019e50 	.word	0x08019e50

080012a4 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim == (&TimHandle))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d102      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
     CDC_TIM_PeriodElapsedCallback(htim);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fb1b 	bl	80018f0 <CDC_TIM_PeriodElapsedCallback>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20015a4c 	.word	0x20015a4c

080012c8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence
 * @param  None
 * @retval None
 */
void Error_Handler( void )
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x4>

080012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80012d6:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
}

template<typename T> const T *GetRoot(const void *buf) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8d3 	bl	8001498 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	0801fa28 	.word	0x0801fa28

0800131c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffe8 	bl	80012fc <_ZN6tflite10OpResolverC1Ev>
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	0801fa04 	.word	0x0801fa04

08001340 <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ffe5 	bl	800131c <_ZN6tflite15MicroOpResolverC1Ev>
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE+0x34>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	665a      	str	r2, [r3, #100]	; 0x64
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	679a      	str	r2, [r3, #120]	; 0x78
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	67da      	str	r2, [r3, #124]	; 0x7c
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0801f9e0 	.word	0x0801f9e0

08001378 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DEv>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_CONV_2D,
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f00f fff1 	bl	801136c <_ZN6tflite3ops5micro16Register_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_CONV_2D,
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <_ZN6tflite22MicroMutableOpResolverILj3EE9AddConv2DEv+0x2c>)
 8001390:	2103      	movs	r1, #3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f892 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001398:	4603      	mov	r3, r0
  }
 800139a:	4618      	mov	r0, r3
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	080053d5 	.word	0x080053d5

080013a8 <_ZN6tflite22MicroMutableOpResolverILj3EE12AddMaxPool2DEv>:
  TfLiteStatus AddMaximum() {
    return AddBuiltin(BuiltinOperator_MAXIMUM,
                      tflite::ops::micro::Register_MAXIMUM(), ParseMaximum);
  }

  TfLiteStatus AddMaxPool2D() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_MAX_POOL_2D,
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f012 fa93 	bl	80138e0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    return AddBuiltin(BuiltinOperator_MAX_POOL_2D,
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <_ZN6tflite22MicroMutableOpResolverILj3EE12AddMaxPool2DEv+0x2c>)
 80013c0:	2111      	movs	r1, #17
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f87a 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80013c8:	4603      	mov	r3, r0
  }
 80013ca:	4618      	mov	r0, r3
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800566d 	.word	0x0800566d

080013d8 <_ZN6tflite22MicroMutableOpResolverILj3EE7AddMeanEv>:

  TfLiteStatus AddMean() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00d f879 	bl	800e4dc <_ZN6tflite3ops5micro13Register_MEANEv>
 80013ea:	f107 0208 	add.w	r2, r7, #8
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <_ZN6tflite22MicroMutableOpResolverILj3EE7AddMeanEv+0x2c>)
 80013f0:	2128      	movs	r1, #40	; 0x28
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f862 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80013f8:	4603      	mov	r3, r0
                      ParseReducer);
  }
 80013fa:	4618      	mov	r0, r3
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	080057ad 	.word	0x080057ad

08001408 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedEv>:
  TfLiteStatus AddFullyConnected() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4618      	mov	r0, r3
 8001416:	f011 f89f 	bl	8012558 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedEv+0x2c>)
 8001420:	2109      	movs	r1, #9
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f84a 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001428:	4603      	mov	r3, r0
  }
 800142a:	4618      	mov	r0, r3
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08005531 	.word	0x08005531

08001438 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxEv>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX,
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f012 feaf 	bl	80141a8 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX,
 800144a:	f107 0208 	add.w	r2, r7, #8
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxEv+0x2c>)
 8001450:	2119      	movs	r1, #25
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f832 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001458:	4603      	mov	r3, r0
  }
 800145a:	4618      	mov	r0, r3
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800586d 	.word	0x0800586d

08001468 <_ZN6tflite22MicroMutableOpResolverILj3EE13AddDequantizeEv>:
  TfLiteStatus AddDequantize() {
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_DEQUANTIZE(),
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f00b f8b3 	bl	800c5e0 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
    return AddBuiltin(BuiltinOperator_DEQUANTIZE,
 800147a:	f107 0208 	add.w	r2, r7, #8
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <_ZN6tflite22MicroMutableOpResolverILj3EE13AddDequantizeEv+0x2c>)
 8001480:	2106      	movs	r1, #6
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f81a 	bl	80014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001488:	4603      	mov	r3, r0
  }
 800148a:	4618      	mov	r0, r3
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08005515 	.word	0x08005515

08001498 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  EndianCheck();
 80014a0:	f7ff fcf8 	bl	8000e94 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff10 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4413      	add	r3, r2
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	460b      	mov	r3, r1
 80014ca:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d10b      	bne.n	80014ea <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fc5f 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e05d      	b.n	80015a6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3310      	adds	r3, #16
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7afa      	ldrb	r2, [r7, #11]
 80014f4:	4611      	mov	r1, r2
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	4798      	blx	r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf14      	ite	ne
 8001500:	2301      	movne	r3, #1
 8001502:	2300      	moveq	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001516:	7afa      	ldrb	r2, [r7, #11]
 8001518:	4926      	ldr	r1, [pc, #152]	; (80015b4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fc42 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001520:	2301      	movs	r3, #1
 8001522:	e040      	b.n	80015a6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001528:	2b02      	cmp	r3, #2
 800152a:	d90c      	bls.n	8001546 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001538:	7afa      	ldrb	r2, [r7, #11]
 800153a:	2303      	movs	r3, #3
 800153c:	491e      	ldr	r1, [pc, #120]	; (80015b8 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 800153e:	f003 fc31 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001542:	2301      	movs	r3, #1
 8001544:	e02f      	b.n	80015a6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	015b      	lsls	r3, r3, #5
 800154e:	4413      	add	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	1d1c      	adds	r4, r3, #4
 8001554:	4615      	mov	r5, r2
 8001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800155e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001566:	7afa      	ldrb	r2, [r7, #11]
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	440b      	add	r3, r1
 800156e:	3318      	adds	r3, #24
 8001570:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	665a      	str	r2, [r3, #100]	; 0x64

    builtin_codes_[num_buitin_ops_] = op;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	7afa      	ldrb	r2, [r7, #11]
 8001586:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	331a      	adds	r3, #26
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	679a      	str	r2, [r3, #120]	; 0x78

    return kTfLiteOk;
 80015a4:	2300      	movs	r3, #0
  }
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08019e5c 	.word	0x08019e5c
 80015b4:	08019ea4 	.word	0x08019ea4
 80015b8:	08019ef4 	.word	0x08019ef4

080015bc <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d101      	bne.n	80015d2 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x16>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e018      	b.n	8001604 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e00f      	b.n	80015f8 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d101      	bne.n	80015f2 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x36>
        return &registration;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	e008      	b.n	8001604 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d3ea      	bcc.n	80015d8 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001602:	2300      	movs	r3, #0
  }
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev+0x20>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fca3 	bl	8000f6c <_ZN6tflite15MicroOpResolverD1Ev>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	0801f9e0 	.word	0x0801f9e0

08001634 <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ffe7 	bl	8001610 <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f015 ffe1 	bl	801760c <_ZdlPvj>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e017      	b.n	8001694 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x40>
      const TfLiteRegistration& registration = registrations_[i];
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2b20      	cmp	r3, #32
 8001676:	d10a      	bne.n	800168e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x3a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	6839      	ldr	r1, [r7, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fda6 	bl	80001d0 <strcmp>
 8001684:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x3a>
        return &registration;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	e008      	b.n	80016a0 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3e2      	bcc.n	8001664 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x10>
    return nullptr;
 800169e:	2300      	movs	r3, #0
  }
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d901      	bls.n	80016c0 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 80016bc:	f016 fa82 	bl	8017bc4 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e011      	b.n	80016ea <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x42>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	3368      	adds	r3, #104	; 0x68
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d106      	bne.n	80016e4 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	331a      	adds	r3, #26
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	e008      	b.n	80016f6 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3e8      	bcc.n	80016c6 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 80016f4:	2300      	movs	r3, #0
  }
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80016fe:	4770      	bx	lr

08001700 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001700:	e7fe      	b.n	8001700 <HardFault_Handler>

08001702 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001702:	b508      	push	{r3, lr}
  HAL_IncTick();
 8001704:	f000 fae8 	bl	8001cd8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 8001708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800170c:	f000 bb71 	b.w	8001df2 <HAL_SYSTICK_IRQHandler>

08001710 <DMA1_Channel4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(&hDmaDfsdm);
 8001710:	4801      	ldr	r0, [pc, #4]	; (8001718 <DMA1_Channel4_IRQHandler+0x8>)
 8001712:	f000 bb72 	b.w	8001dfa <HAL_DMA_IRQHandler>
 8001716:	bf00      	nop
 8001718:	200179a8 	.word	0x200179a8

0800171c <DMA2_Channel3_IRQHandler>:
 * @param  None
 * @retval None
*/
void DMA2_Channel3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutSai.hdmatx);
 800171c:	4b01      	ldr	r3, [pc, #4]	; (8001724 <DMA2_Channel3_IRQHandler+0x8>)
 800171e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001720:	f000 bb6b 	b.w	8001dfa <HAL_DMA_IRQHandler>
 8001724:	20017778 	.word	0x20017778

08001728 <OTG_FS_IRQHandler>:
* @param  None
* @retval None
*/
void OTG_FS_IRQHandler(void)
{
  HAL_PCD_IRQHandler(&hpcd);
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <OTG_FS_IRQHandler+0x8>)
 800172a:	f000 bd35 	b.w	8002198 <HAL_PCD_IRQHandler>
 800172e:	bf00      	nop
 8001730:	200172a8 	.word	0x200172a8

08001734 <TIM3_IRQHandler>:
}

void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001734:	4801      	ldr	r0, [pc, #4]	; (800173c <TIM3_IRQHandler+0x8>)
 8001736:	f002 b815 	b.w	8003764 <HAL_TIM_IRQHandler>
 800173a:	bf00      	nop
 800173c:	20015a4c 	.word	0x20015a4c

08001740 <TIM1_CC_IRQHandler>:
}

void TIM1_CC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimCCHandle);
 8001740:	4801      	ldr	r0, [pc, #4]	; (8001748 <TIM1_CC_IRQHandler+0x8>)
 8001742:	f002 b80f 	b.w	8003764 <HAL_TIM_IRQHandler>
 8001746:	bf00      	nop
 8001748:	200158f0 	.word	0x200158f0

0800174c <_sbrk>:
{
	extern char end /*asm("end")*/;
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <_sbrk+0x2c>)
 800174e:	6811      	ldr	r1, [r2, #0]
{
 8001750:	b508      	push	{r3, lr}
 8001752:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001754:	b909      	cbnz	r1, 800175a <_sbrk+0xe>
		heap_end = &end;
 8001756:	4909      	ldr	r1, [pc, #36]	; (800177c <_sbrk+0x30>)
 8001758:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800175a:	6810      	ldr	r0, [r2, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
#else
	if (heap_end + incr > stack_ptr)
 800175c:	4669      	mov	r1, sp
 800175e:	4403      	add	r3, r0
 8001760:	428b      	cmp	r3, r1
 8001762:	d906      	bls.n	8001772 <_sbrk+0x26>
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001764:	f016 fdf2 	bl	801834c <__errno>
 8001768:	230c      	movs	r3, #12
 800176a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001770:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001772:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001774:	e7fc      	b.n	8001770 <_sbrk+0x24>
 8001776:	bf00      	nop
 8001778:	20015a48 	.word	0x20015a48
 800177c:	20017c58 	.word	0x20017c58

08001780 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001780:	2001      	movs	r0, #1
 8001782:	4770      	bx	lr

08001784 <_kill>:

int _kill(int pid, int sig)
{
 8001784:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001786:	f016 fde1 	bl	801834c <__errno>
 800178a:	2316      	movs	r3, #22
 800178c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800178e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001792:	bd08      	pop	{r3, pc}

08001794 <_exit>:

void _exit (int status)
{
 8001794:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001796:	f016 fdd9 	bl	801834c <__errno>
 800179a:	2316      	movs	r3, #22
 800179c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800179e:	e7fe      	b.n	800179e <_exit+0xa>

080017a0 <_write>:
}

int _write(int file, char *ptr, int len)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	460d      	mov	r5, r1
 80017a4:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	460e      	mov	r6, r1
 80017a8:	1b73      	subs	r3, r6, r5
 80017aa:	429c      	cmp	r4, r3
 80017ac:	dc01      	bgt.n	80017b2 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 80017ae:	4620      	mov	r0, r4
 80017b0:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 80017b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80017b6:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	e7f5      	b.n	80017a8 <_write+0x8>

080017bc <_close>:

int _close(int file)
{
	return -1;
}
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80017c8:	2000      	movs	r0, #0
 80017ca:	4770      	bx	lr

080017cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80017cc:	2001      	movs	r0, #1
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80017d0:	2000      	movs	r0, #0
 80017d2:	4770      	bx	lr

080017d4 <_read>:

int _read(int file, char *ptr, int len)
{
 80017d4:	b510      	push	{r4, lr}
 80017d6:	460c      	mov	r4, r1
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 80017d8:	f3af 8000 	nop.w
 80017dc:	7020      	strb	r0, [r4, #0]
	return 1;
}
 80017de:	2001      	movs	r0, #1
 80017e0:	bd10      	pop	{r4, pc}

080017e2 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80017e2:	2000      	movs	r0, #0
 80017e4:	4770      	bx	lr
	...

080017e8 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80017e8:	2820      	cmp	r0, #32
 80017ea:	d003      	beq.n	80017f4 <CDC_Itf_Control+0xc>
 80017ec:	2821      	cmp	r0, #33	; 0x21
 80017ee:	d00b      	beq.n	8001808 <CDC_Itf_Control+0x20>
  default:
    break;
  }
  
  return (USBD_OK);
}
 80017f0:	2000      	movs	r0, #0
 80017f2:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <CDC_Itf_Control+0x44>)
 80017f6:	680a      	ldr	r2, [r1, #0]
 80017f8:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 80017fa:	790a      	ldrb	r2, [r1, #4]
 80017fc:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80017fe:	794a      	ldrb	r2, [r1, #5]
 8001800:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 8001802:	798a      	ldrb	r2, [r1, #6]
 8001804:	719a      	strb	r2, [r3, #6]
    break;
 8001806:	e7f3      	b.n	80017f0 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <CDC_Itf_Control+0x44>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	0a12      	lsrs	r2, r2, #8
 8001812:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8001814:	885a      	ldrh	r2, [r3, #2]
 8001816:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8001818:	78da      	ldrb	r2, [r3, #3]
 800181a:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800181c:	791a      	ldrb	r2, [r3, #4]
 800181e:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8001820:	795a      	ldrb	r2, [r3, #5]
 8001822:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8001824:	799b      	ldrb	r3, [r3, #6]
 8001826:	718b      	strb	r3, [r1, #6]
    break;
 8001828:	e7e2      	b.n	80017f0 <CDC_Itf_Control+0x8>
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8001830:	2000      	movs	r0, #0
 8001832:	4770      	bx	lr

08001834 <CDC_Itf_Init>:
  TIMx_CLK_ENABLE();
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <CDC_Itf_Init+0x6c>)
{
 8001836:	b507      	push	{r0, r1, r2, lr}
  TIMx_CLK_ENABLE();
 8001838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2106      	movs	r1, #6
 800184c:	201d      	movs	r0, #29
  TIMx_CLK_ENABLE();
 800184e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 8001850:	f000 fa7a 	bl	8001d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001854:	201d      	movs	r0, #29
 8001856:	f000 faa9 	bl	8001dac <HAL_NVIC_EnableIRQ>
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <CDC_Itf_Init+0x70>)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <CDC_Itf_Init+0x74>)
 800185e:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8001860:	f241 3387 	movw	r3, #4999	; 0x1387
 8001864:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 8001866:	234f      	movs	r3, #79	; 0x4f
 8001868:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001870:	f002 f88e 	bl	8003990 <HAL_TIM_Base_Init>
 8001874:	b108      	cbz	r0, 800187a <CDC_Itf_Init+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8001876:	f7ff fd27 	bl	80012c8 <Error_Handler>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800187a:	480a      	ldr	r0, [pc, #40]	; (80018a4 <CDC_Itf_Init+0x70>)
 800187c:	f001 ff34 	bl	80036e8 <HAL_TIM_Base_Start_IT>
 8001880:	b108      	cbz	r0, 8001886 <CDC_Itf_Init+0x52>
    Error_Handler();
 8001882:	f7ff fd21 	bl	80012c8 <Error_Handler>
  USBD_CDC_SetTxBuffer(&hUSBDDevice, UserTxBuffer, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	4908      	ldr	r1, [pc, #32]	; (80018ac <CDC_Itf_Init+0x78>)
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <CDC_Itf_Init+0x7c>)
 800188c:	f002 fe68 	bl	8004560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8001890:	4908      	ldr	r1, [pc, #32]	; (80018b4 <CDC_Itf_Init+0x80>)
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <CDC_Itf_Init+0x7c>)
 8001894:	f002 fe6f 	bl	8004576 <USBD_CDC_SetRxBuffer>
}
 8001898:	2000      	movs	r0, #0
 800189a:	b003      	add	sp, #12
 800189c:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a0:	40021000 	.word	0x40021000
 80018a4:	20015a4c 	.word	0x20015a4c
 80018a8:	40000400 	.word	0x40000400
 80018ac:	20015a98 	.word	0x20015a98
 80018b0:	20015620 	.word	0x20015620
 80018b4:	20016298 	.word	0x20016298

080018b8 <CDC_Fill_Buffer>:
{
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80018ba:	4d0b      	ldr	r5, [pc, #44]	; (80018e8 <CDC_Fill_Buffer+0x30>)
 80018bc:	4e0b      	ldr	r6, [pc, #44]	; (80018ec <CDC_Fill_Buffer+0x34>)
  for (i = 0; i < TotalLen; i++)
 80018be:	2200      	movs	r2, #0
 80018c0:	b294      	uxth	r4, r2
 80018c2:	42a1      	cmp	r1, r4
 80018c4:	f102 0201 	add.w	r2, r2, #1
 80018c8:	d801      	bhi.n	80018ce <CDC_Fill_Buffer+0x16>
}
 80018ca:	2000      	movs	r0, #0
 80018cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80018ce:	f855 3cac 	ldr.w	r3, [r5, #-172]
 80018d2:	5d07      	ldrb	r7, [r0, r4]
 80018d4:	18f4      	adds	r4, r6, r3
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80018d6:	3301      	adds	r3, #1
 80018d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80018dc:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 80018e0:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 80018e4:	e7ec      	b.n	80018c0 <CDC_Fill_Buffer+0x8>
 80018e6:	bf00      	nop
 80018e8:	20016b44 	.word	0x20016b44
 80018ec:	20015a4c 	.word	0x20015a4c

080018f0 <CDC_TIM_PeriodElapsedCallback>:
{
 80018f0:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80018f2:	4d0e      	ldr	r5, [pc, #56]	; (800192c <CDC_TIM_PeriodElapsedCallback+0x3c>)
 80018f4:	e955 432b 	ldrd	r4, r3, [r5, #-172]	; 0xac
 80018f8:	42a3      	cmp	r3, r4
 80018fa:	d016      	beq.n	800192a <CDC_TIM_PeriodElapsedCallback+0x3a>
    USBD_CDC_SetTxBuffer(&hUSBDDevice, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <CDC_TIM_PeriodElapsedCallback+0x40>)
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <CDC_TIM_PeriodElapsedCallback+0x44>)
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8001900:	bf8c      	ite	hi
 8001902:	f5c3 6400 	rsbhi	r4, r3, #2048	; 0x800
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8001906:	1ae4      	subls	r4, r4, r3
    USBD_CDC_SetTxBuffer(&hUSBDDevice, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8001908:	4622      	mov	r2, r4
 800190a:	4419      	add	r1, r3
 800190c:	f002 fe28 	bl	8004560 <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&hUSBDDevice) == USBD_OK)
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <CDC_TIM_PeriodElapsedCallback+0x44>)
 8001912:	f002 fe39 	bl	8004588 <USBD_CDC_TransmitPacket>
 8001916:	b940      	cbnz	r0, 800192a <CDC_TIM_PeriodElapsedCallback+0x3a>
      UserTxBufPtrOut += buffsize;
 8001918:	f855 3ca8 	ldr.w	r3, [r5, #-168]
 800191c:	441c      	add	r4, r3
 800191e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8001922:	bf18      	it	ne
 8001924:	4620      	movne	r0, r4
 8001926:	f845 0ca8 	str.w	r0, [r5, #-168]
}
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	20016b44 	.word	0x20016b44
 8001930:	20015a98 	.word	0x20015a98
 8001934:	20015620 	.word	0x20015620

08001938 <HAL_PCD_MspInit>:
* @brief  Initializes the PCD MSP.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8001938:	b530      	push	{r4, r5, lr}
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 800193a:	6803      	ldr	r3, [r0, #0]
 800193c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001940:	b089      	sub	sp, #36	; 0x24
  if(hpcd->Instance == USB_OTG_FS)
 8001942:	d12a      	bne.n	800199a <HAL_PCD_MspInit+0x62>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 8001944:	4c16      	ldr	r4, [pc, #88]	; (80019a0 <HAL_PCD_MspInit+0x68>)
 8001946:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800194e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	9b01      	ldr	r3, [sp, #4]
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001958:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800195c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2500      	movs	r5, #0
 8001964:	2302      	movs	r3, #2
 8001966:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800196a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800196c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001972:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8001974:	f000 fa8c 	bl	8001e90 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __USB_OTG_FS_CLK_ENABLE();
 8001978:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800197a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001980:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001986:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8001988:	2043      	movs	r0, #67	; 0x43
 800198a:	462a      	mov	r2, r5
 800198c:	2106      	movs	r1, #6
    __USB_OTG_FS_CLK_ENABLE();
 800198e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8001990:	f000 f9da 	bl	8001d48 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001994:	2043      	movs	r0, #67	; 0x43
 8001996:	f000 fa09 	bl	8001dac <HAL_NVIC_EnableIRQ>
  } 
}
 800199a:	b009      	add	sp, #36	; 0x24
 800199c:	bd30      	pop	{r4, r5, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_PCD_SetupStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80019a4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80019a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019ac:	f002 be3f 	b.w	800462e <USBD_LL_SetupStage>

080019b0 <HAL_PCD_DataOutStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80019b0:	231c      	movs	r3, #28
 80019b2:	fb03 0301 	mla	r3, r3, r1, r0
 80019b6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80019be:	f002 be66 	b.w	800468e <USBD_LL_DataOutStage>

080019c2 <HAL_PCD_DataInStageCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80019c2:	231c      	movs	r3, #28
 80019c4:	fb03 0301 	mla	r3, r3, r1, r0
 80019c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ce:	f002 be8e 	b.w	80046ee <USBD_LL_DataInStage>

080019d2 <HAL_PCD_SOFCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80019d2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019d6:	f002 bf20 	b.w	800481a <USBD_LL_SOF>

080019da <HAL_PCD_ResetCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80019da:	b510      	push	{r4, lr}
 80019dc:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80019de:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019e2:	f002 fed6 	bl	8004792 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80019e6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80019ea:	2101      	movs	r1, #1
}
 80019ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80019f0:	f002 befb 	b.w	80047ea <USBD_LL_SetSpeed>

080019f4 <HAL_PCD_SuspendCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 80019f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80019f8:	f002 befa 	b.w	80047f0 <USBD_LL_Suspend>

080019fc <HAL_PCD_ResumeCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80019fc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a00:	f002 bf00 	b.w	8004804 <USBD_LL_Resume>

08001a04 <HAL_PCD_ISOOUTIncompleteCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8001a04:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a08:	f002 bf29 	b.w	800485e <USBD_LL_IsoOUTIncomplete>

08001a0c <HAL_PCD_ISOINIncompleteCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8001a0c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a10:	f002 bf14 	b.w	800483c <USBD_LL_IsoINIncomplete>

08001a14 <HAL_PCD_ConnectCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8001a14:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a18:	f002 bf32 	b.w	8004880 <USBD_LL_DevConnected>

08001a1c <HAL_PCD_DisconnectCallback>:
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8001a1c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8001a20:	f002 bf30 	b.w	8004884 <USBD_LL_DevDisconnected>

08001a24 <USBD_LL_Init>:
*         Initialize the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 8001a24:	b538      	push	{r3, r4, r5, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <USBD_LL_Init+0x58>)
  /* Change Systick prioity */
  NVIC_SetPriority (SysTick_IRQn, 0);  
  
  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8001a28:	4c15      	ldr	r4, [pc, #84]	; (8001a80 <USBD_LL_Init+0x5c>)
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
  hpcd.Init.dev_endpoints = 3; 
 8001a30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a34:	2303      	movs	r3, #3
 8001a36:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.use_dedicated_ep1 = 0;
  hpcd.Init.ep0_mps = 0x40;  
 8001a3a:	2340      	movs	r3, #64	; 0x40
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8001a3c:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  hpcd.Init.dma_enable = 0;
 8001a40:	e9c4 5304 	strd	r5, r3, [r4, #16]
  pdev->pData = &hpcd;
 8001a44:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
 8001a48:	2302      	movs	r3, #2
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8001a4a:	4620      	mov	r0, r4
  hpcd.Init.Sof_enable = 0;
 8001a4c:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8001a50:	60e3      	str	r3, [r4, #12]
  hpcd.Init.use_dedicated_ep1 = 0;
 8001a52:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.low_power_enable = 0;
 8001a54:	6225      	str	r5, [r4, #32]
  hpcd.Init.vbus_sensing_enable = 0;
 8001a56:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 8001a58:	f000 faf6 	bl	8002048 <HAL_PCD_Init>
  
   HAL_PCD_SetRxFiFo(&hpcd, 0x64);
 8001a5c:	2164      	movs	r1, #100	; 0x64
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f000 ff59 	bl	8002916 <HAL_PCDEx_SetRxFiFo>
   HAL_PCD_SetTxFiFo(&hpcd, 0, 0x32);
 8001a64:	4629      	mov	r1, r5
 8001a66:	2232      	movs	r2, #50	; 0x32
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f000 ff34 	bl	80028d6 <HAL_PCDEx_SetTxFiFo>
   HAL_PCD_SetTxFiFo(&hpcd, 1, 0x64);
 8001a6e:	2264      	movs	r2, #100	; 0x64
 8001a70:	2101      	movs	r1, #1
 8001a72:	4620      	mov	r0, r4
 8001a74:	f000 ff2f 	bl	80028d6 <HAL_PCDEx_SetTxFiFo>

  
  return USBD_OK;
}
 8001a78:	4628      	mov	r0, r5
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	200172a8 	.word	0x200172a8

08001a84 <USBD_LL_Start>:
*         Start the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001a84:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8001a86:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001a8a:	f000 fb68 	bl	800215e <HAL_PCD_Start>
  return USBD_OK; 
}
 8001a8e:	2000      	movs	r0, #0
 8001a90:	bd08      	pop	{r3, pc}

08001a92 <USBD_LL_OpenEP>:
*/
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                     uint8_t  ep_addr,                                      
                                     uint8_t  ep_type,
                                     uint16_t ep_mps)
{
 8001a92:	b510      	push	{r4, lr}
 8001a94:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData, 
 8001a96:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8001a9a:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, 
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	f000 fe03 	bl	80026a8 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
}
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	bd10      	pop	{r4, pc}

08001aa6 <USBD_LL_CloseEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001aa6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001aa8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001aac:	f000 fe34 	bl	8002718 <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	bd08      	pop	{r3, pc}

08001ab4 <USBD_LL_StallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001ab4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001ab6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001aba:	f000 fe9d 	bl	80027f8 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 8001abe:	2000      	movs	r0, #0
 8001ac0:	bd08      	pop	{r3, pc}

08001ac2 <USBD_LL_ClearStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001ac2:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8001ac4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001ac8:	f000 fecf 	bl	800286a <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8001acc:	2000      	movs	r0, #0
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <USBD_LL_IsStallEP>:
*/
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 8001ad0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8001ad4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8001ad8:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001adc:	bf1b      	ittet	ne
 8001ade:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001ae2:	fb02 3301 	mlane	r3, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001ae6:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001aea:	f893 003e 	ldrbne.w	r0, [r3, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001aee:	bf08      	it	eq
 8001af0:	f893 01fe 	ldrbeq.w	r0, [r3, #510]	; 0x1fe
  }
}
 8001af4:	4770      	bx	lr

08001af6 <USBD_LL_SetUSBAddress>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8001af6:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001af8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001afc:	f000 fdc0 	bl	8002680 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	bd08      	pop	{r3, pc}

08001b04 <USBD_LL_Transmit>:
* @param  pbuf:pointer to data to be sent    
* @param  size: data size    
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, uint8_t  ep_addr,   uint8_t  *pbuf,uint16_t  size)
{
 8001b04:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001b06:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b0a:	f000 fe5a 	bl	80027c2 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
}
 8001b0e:	2000      	movs	r0, #0
 8001b10:	bd08      	pop	{r3, pc}

08001b12 <USBD_LL_PrepareReceive>:
*/
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8001b12:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001b14:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b18:	f000 fe2d 	bl	8002776 <HAL_PCD_EP_Receive>
  return USBD_OK;   
}
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	bd08      	pop	{r3, pc}

08001b20 <USBD_LL_GetRxDataSize>:
* @param  ep_addr: Endpoint Number
* @retval Recived Data Size
*/
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8001b20:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8001b24:	f000 be45 	b.w	80027b2 <HAL_PCD_EP_GetRxCount>

08001b28 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8001b28:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 8001b2a:	4801      	ldr	r0, [pc, #4]	; (8001b30 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8001b2c:	800b      	strh	r3, [r1, #0]
}
 8001b2e:	4770      	bx	lr
 8001b30:	20000024 	.word	0x20000024

08001b34 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8001b34:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8001b36:	4801      	ldr	r0, [pc, #4]	; (8001b3c <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8001b38:	800b      	strh	r3, [r1, #0]
}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000038 	.word	0x20000038

08001b40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001b40:	2300      	movs	r3, #0
 8001b42:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001b44:	1c4d      	adds	r5, r1, #1
 8001b46:	461e      	mov	r6, r3
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b48:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 8001b4a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b4e:	bf34      	ite	cc
 8001b50:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001b52:	3437      	addcs	r4, #55	; 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001b54:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8001b58:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0 ; idx < len ; idx ++)
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2dc      	uxtb	r4, r3
 8001b60:	42a2      	cmp	r2, r4
    value = value << 4;
 8001b62:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 8001b66:	d8ef      	bhi.n	8001b48 <IntToUnicode+0x8>
  }
}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b6c <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8001b6c:	231a      	movs	r3, #26
{
 8001b6e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8001b70:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <USBD_VCP_SerialStrDescriptor+0x30>)
 8001b74:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial0 += deviceserial2;
 8001b78:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8001b7c:	1880      	adds	r0, r0, r2
 8001b7e:	d00a      	beq.n	8001b96 <USBD_VCP_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8001b80:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8001b84:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <USBD_VCP_SerialStrDescriptor+0x34>)
 8001b86:	2208      	movs	r2, #8
 8001b88:	f7ff ffda 	bl	8001b40 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	3110      	adds	r1, #16
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff ffd5 	bl	8001b40 <IntToUnicode>
}
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <USBD_VCP_SerialStrDescriptor+0x38>)
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	1fff7000 	.word	0x1fff7000
 8001ba0:	2000003e 	.word	0x2000003e
 8001ba4:	2000003c 	.word	0x2000003c

08001ba8 <USBD_VCP_ProductStrDescriptor>:
{  
 8001ba8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001baa:	4c04      	ldr	r4, [pc, #16]	; (8001bbc <USBD_VCP_ProductStrDescriptor+0x14>)
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <USBD_VCP_ProductStrDescriptor+0x18>)
{  
 8001bae:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	f003 f88b 	bl	8004ccc <USBD_GetString>
}
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop
 8001bbc:	200176b0 	.word	0x200176b0
 8001bc0:	0801fa4c 	.word	0x0801fa4c

08001bc4 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8001bc4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001bc6:	4c04      	ldr	r4, [pc, #16]	; (8001bd8 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 8001bca:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f003 f87d 	bl	8004ccc <USBD_GetString>
}
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200176b0 	.word	0x200176b0
 8001bdc:	0801fa6d 	.word	0x0801fa6d

08001be0 <USBD_VCP_ConfigStrDescriptor>:
{ 
 8001be0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8001be2:	4c04      	ldr	r4, [pc, #16]	; (8001bf4 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <USBD_VCP_ConfigStrDescriptor+0x18>)
{ 
 8001be6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8001be8:	4621      	mov	r1, r4
 8001bea:	f003 f86f 	bl	8004ccc <USBD_GetString>
}
 8001bee:	4620      	mov	r0, r4
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200176b0 	.word	0x200176b0
 8001bf8:	0801fa80 	.word	0x0801fa80

08001bfc <USBD_VCP_InterfaceStrDescriptor>:
{
 8001bfc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001bfe:	4c04      	ldr	r4, [pc, #16]	; (8001c10 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 8001c02:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001c04:	4621      	mov	r1, r4
 8001c06:	f003 f861 	bl	8004ccc <USBD_GetString>
}
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	bf00      	nop
 8001c10:	200176b0 	.word	0x200176b0
 8001c14:	0801fa8b 	.word	0x0801fa8b

08001c18 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <SystemInit+0x40>)
 8001c1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <SystemInit+0x44>)
 8001c28:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c2a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001c32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001c3a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c54:	608b      	str	r3, [r1, #8]
#endif
}
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c66:	4e0f      	ldr	r6, [pc, #60]	; (8001ca4 <HAL_InitTick+0x40>)
 8001c68:	7832      	ldrb	r2, [r6, #0]
{
 8001c6a:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001c6c:	b90a      	cbnz	r2, 8001c72 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_InitTick+0x44>)
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c82:	f000 f8a1 	bl	8001dc8 <HAL_SYSTICK_Config>
 8001c86:	4604      	mov	r4, r0
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8c:	2d0f      	cmp	r5, #15
 8001c8e:	d8ee      	bhi.n	8001c6e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	4602      	mov	r2, r0
 8001c92:	4629      	mov	r1, r5
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	f000 f856 	bl	8001d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9c:	6075      	str	r5, [r6, #4]
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	e7e6      	b.n	8001c70 <HAL_InitTick+0xc>
 8001ca2:	bf00      	nop
 8001ca4:	20000078 	.word	0x20000078
 8001ca8:	20000074 	.word	0x20000074

08001cac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_Init+0x28>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001cb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cba:	f000 f833 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff ffd0 	bl	8001c64 <HAL_InitTick>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	b918      	cbnz	r0, 8001cd0 <HAL_Init+0x24>
    HAL_MspInit();
 8001cc8:	f7ff ffca 	bl	8001c60 <HAL_MspInit>
}
 8001ccc:	4620      	mov	r0, r4
 8001cce:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001cd0:	2401      	movs	r4, #1
 8001cd2:	e7fb      	b.n	8001ccc <HAL_Init+0x20>
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_IncTick+0x10>)
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_IncTick+0x14>)
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20017a70 	.word	0x20017a70
 8001cec:	20000078 	.word	0x20000078

08001cf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cf0:	4b01      	ldr	r3, [pc, #4]	; (8001cf8 <HAL_GetTick+0x8>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20017a70 	.word	0x20017a70

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fff6 	bl	8001cf0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d04:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001d06:	bf1c      	itt	ne
 8001d08:	4b05      	ldrne	r3, [pc, #20]	; (8001d20 <HAL_Delay+0x24>)
 8001d0a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001d0e:	bf18      	it	ne
 8001d10:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	f7ff ffed 	bl	8001cf0 <HAL_GetTick>
 8001d16:	1b43      	subs	r3, r0, r5
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	d3fa      	bcc.n	8001d12 <HAL_Delay+0x16>
  {
  }
}
 8001d1c:	bd38      	pop	{r3, r4, r5, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000078 	.word	0x20000078

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b530      	push	{r4, r5, lr}
 8001d4c:	68dc      	ldr	r4, [r3, #12]
 8001d4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	bf28      	it	cs
 8001d5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d64:	bf8c      	ite	hi
 8001d66:	3c03      	subhi	r4, #3
 8001d68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6a:	fa05 f303 	lsl.w	r3, r5, r3
 8001d6e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d72:	40a5      	lsls	r5, r4
 8001d74:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	bfac      	ite	ge
 8001d82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	4a08      	ldrlt	r2, [pc, #32]	; (8001da8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	bfb8      	it	lt
 8001d8e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	bfaa      	itet	ge
 8001d96:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001da0:	bd30      	pop	{r4, r5, pc}
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	e000ed14 	.word	0xe000ed14

08001dac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001dac:	2800      	cmp	r0, #0
 8001dae:	db07      	blt.n	8001dc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db0:	0941      	lsrs	r1, r0, #5
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_NVIC_EnableIRQ+0x18>)
 8001db4:	f000 001f 	and.w	r0, r0, #31
 8001db8:	2301      	movs	r3, #1
 8001dba:	4083      	lsls	r3, r0
 8001dbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	3801      	subs	r0, #1
 8001dca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001dce:	d20b      	bcs.n	8001de8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	21f0      	movs	r1, #240	; 0xf0
 8001dda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dde:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001de8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001df0:	4770      	bx	lr

08001df2 <HAL_SYSTICK_IRQHandler>:
{
 8001df2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001df4:	f7ff fffc 	bl	8001df0 <HAL_SYSTICK_Callback>
}
 8001df8:	bd08      	pop	{r3, pc}

08001dfa <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dfa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001dfe:	6803      	ldr	r3, [r0, #0]
{
 8001e00:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e02:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e06:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e08:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e0a:	2404      	movs	r4, #4
 8001e0c:	4094      	lsls	r4, r2
 8001e0e:	4234      	tst	r4, r6
 8001e10:	d00e      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x36>
 8001e12:	f015 0f04 	tst.w	r5, #4
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e1c:	bf5e      	ittt	pl
 8001e1e:	681a      	ldrpl	r2, [r3, #0]
 8001e20:	f022 0204 	bicpl.w	r2, r2, #4
 8001e24:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e26:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e28:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8001e2a:	b373      	cbz	r3, 8001e8a <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8001e2c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001e2e:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e30:	2402      	movs	r4, #2
 8001e32:	4094      	lsls	r4, r2
 8001e34:	4234      	tst	r4, r6
 8001e36:	d012      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x64>
 8001e38:	f015 0f02 	tst.w	r5, #2
 8001e3c:	d00f      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	0695      	lsls	r5, r2, #26
 8001e42:	d406      	bmi.n	8001e52 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f022 020a 	bic.w	r2, r2, #10
 8001e4a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e52:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e54:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e56:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001e5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e5c:	e7e5      	b.n	8001e2a <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e5e:	2408      	movs	r4, #8
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4234      	tst	r4, r6
 8001e64:	d011      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x90>
 8001e66:	072c      	lsls	r4, r5, #28
 8001e68:	d50f      	bpl.n	8001e8a <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6a:	681c      	ldr	r4, [r3, #0]
 8001e6c:	f024 040e 	bic.w	r4, r4, #14
 8001e70:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e72:	2301      	movs	r3, #1
 8001e74:	fa03 f202 	lsl.w	r2, r3, r2
 8001e78:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e80:	2300      	movs	r3, #0
 8001e82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e88:	e7cf      	b.n	8001e2a <HAL_DMA_IRQHandler+0x30>
}
 8001e8a:	bc70      	pop	{r4, r5, r6}
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002044 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e98:	4d68      	ldr	r5, [pc, #416]	; (800203c <HAL_GPIO_Init+0x1ac>)
  uint32_t position = 0x00u;
 8001e9a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9c:	680a      	ldr	r2, [r1, #0]
 8001e9e:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ea2:	d102      	bne.n	8001eaa <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eaa:	f04f 0a01 	mov.w	sl, #1
 8001eae:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8001eb2:	ea1a 0202 	ands.w	r2, sl, r2
 8001eb6:	f000 80b3 	beq.w	8002020 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eba:	684c      	ldr	r4, [r1, #4]
 8001ebc:	f024 0e10 	bic.w	lr, r4, #16
 8001ec0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec4:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec6:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eca:	fa06 f608 	lsl.w	r6, r6, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ece:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed0:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed4:	d810      	bhi.n	8001ef8 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8001ed6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed8:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001edc:	68cf      	ldr	r7, [r1, #12]
 8001ede:	fa07 f708 	lsl.w	r7, r7, r8
 8001ee2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8001ee6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ee8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001eee:	0927      	lsrs	r7, r4, #4
 8001ef0:	409f      	lsls	r7, r3
 8001ef2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001ef6:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ef8:	f004 0c03 	and.w	ip, r4, #3
 8001efc:	f1bc 0f03 	cmp.w	ip, #3
 8001f00:	d108      	bne.n	8001f14 <HAL_GPIO_Init+0x84>
        temp = GPIOx->ASCR;
 8001f02:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f04:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f08:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8001f0c:	409f      	lsls	r7, r3
 8001f0e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8001f12:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001f14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f16:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f1a:	688f      	ldr	r7, [r1, #8]
 8001f1c:	fa07 f708 	lsl.w	r7, r7, r8
 8001f20:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f24:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8001f28:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	d116      	bne.n	8001f5a <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8001f2c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001f30:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f34:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001f38:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f40:	f04f 0e0f 	mov.w	lr, #15
 8001f44:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001f48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4c:	690f      	ldr	r7, [r1, #16]
 8001f4e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001f52:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001f56:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001f5a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5c:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f60:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f62:	ea4c 0707 	orr.w	r7, ip, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f66:	00e6      	lsls	r6, r4, #3
      GPIOx->MODER = temp;
 8001f68:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6a:	d559      	bpl.n	8002020 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f70:	f046 0601 	orr.w	r6, r6, #1
 8001f74:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001f78:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f7c:	f023 0703 	bic.w	r7, r3, #3
 8001f80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001f84:	f006 0601 	and.w	r6, r6, #1
 8001f88:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001f8c:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f94:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f96:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f9a:	f04f 0c0f 	mov.w	ip, #15
 8001f9e:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001faa:	d03b      	beq.n	8002024 <HAL_GPIO_Init+0x194>
 8001fac:	4e24      	ldr	r6, [pc, #144]	; (8002040 <HAL_GPIO_Init+0x1b0>)
 8001fae:	42b0      	cmp	r0, r6
 8001fb0:	d03a      	beq.n	8002028 <HAL_GPIO_Init+0x198>
 8001fb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fb6:	42b0      	cmp	r0, r6
 8001fb8:	d038      	beq.n	800202c <HAL_GPIO_Init+0x19c>
 8001fba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fbe:	42b0      	cmp	r0, r6
 8001fc0:	d036      	beq.n	8002030 <HAL_GPIO_Init+0x1a0>
 8001fc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fc6:	42b0      	cmp	r0, r6
 8001fc8:	d034      	beq.n	8002034 <HAL_GPIO_Init+0x1a4>
 8001fca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fce:	42b0      	cmp	r0, r6
 8001fd0:	d032      	beq.n	8002038 <HAL_GPIO_Init+0x1a8>
 8001fd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fd6:	42b0      	cmp	r0, r6
 8001fd8:	bf0c      	ite	eq
 8001fda:	2606      	moveq	r6, #6
 8001fdc:	2607      	movne	r6, #7
 8001fde:	fa06 f60e 	lsl.w	r6, r6, lr
 8001fe2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001fe8:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8001fea:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001ff0:	bf0c      	ite	eq
 8001ff2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ff4:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001ff6:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8001ff8:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001ffe:	bf0c      	ite	eq
 8002000:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002002:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002004:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8002006:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002008:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800200c:	bf0c      	ite	eq
 800200e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002010:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002012:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8002014:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002016:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002018:	bf54      	ite	pl
 800201a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800201c:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800201e:	60ee      	str	r6, [r5, #12]
    position++;
 8002020:	3301      	adds	r3, #1
 8002022:	e73b      	b.n	8001e9c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002024:	2600      	movs	r6, #0
 8002026:	e7da      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 8002028:	2601      	movs	r6, #1
 800202a:	e7d8      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 800202c:	2602      	movs	r6, #2
 800202e:	e7d6      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 8002030:	2603      	movs	r6, #3
 8002032:	e7d4      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 8002034:	2604      	movs	r6, #4
 8002036:	e7d2      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 8002038:	2605      	movs	r6, #5
 800203a:	e7d0      	b.n	8001fde <HAL_GPIO_Init+0x14e>
 800203c:	40010400 	.word	0x40010400
 8002040:	48000400 	.word	0x48000400
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800204a:	4604      	mov	r4, r0
{
 800204c:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800204e:	b360      	cbz	r0, 80020aa <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002050:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002054:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002056:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800205a:	b91b      	cbnz	r3, 8002064 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002060:	f7ff fc6a 	bl	8001938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002064:	2303      	movs	r3, #3
 8002066:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800206a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800206c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800206e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002072:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002076:	bf08      	it	eq
 8002078:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800207a:	f001 fd61 	bl	8003b40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002080:	466e      	mov	r6, sp
 8002082:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002086:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800208c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002090:	4625      	mov	r5, r4
 8002092:	1d27      	adds	r7, r4, #4
 8002094:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002098:	f855 0b10 	ldr.w	r0, [r5], #16
 800209c:	f001 fcac 	bl	80039f8 <USB_CoreInit>
 80020a0:	4606      	mov	r6, r0
 80020a2:	b120      	cbz	r0, 80020ae <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80020aa:	2501      	movs	r5, #1
 80020ac:	e054      	b.n	8002158 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020ae:	4601      	mov	r1, r0
 80020b0:	6820      	ldr	r0, [r4, #0]
 80020b2:	f001 fd4b 	bl	8003b4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	4630      	mov	r0, r6
 80020b8:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020bc:	261c      	movs	r6, #28
 80020be:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c2:	4601      	mov	r1, r0
 80020c4:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	4594      	cmp	ip, r2
 80020c8:	f100 0001 	add.w	r0, r0, #1
 80020cc:	d81c      	bhi.n	8002108 <HAL_PCD_Init+0xc0>
 80020ce:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d0:	261c      	movs	r6, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	4584      	cmp	ip, r0
 80020d8:	f103 0301 	add.w	r3, r3, #1
 80020dc:	d822      	bhi.n	8002124 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e0:	466e      	mov	r6, sp
 80020e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ec:	e886 0003 	stmia.w	r6, {r0, r1}
 80020f0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80020f4:	6820      	ldr	r0, [r4, #0]
 80020f6:	f001 fd6b 	bl	8003bd0 <USB_DevInit>
 80020fa:	2301      	movs	r3, #1
 80020fc:	4605      	mov	r5, r0
 80020fe:	b1f0      	cbz	r0, 800213e <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002100:	2202      	movs	r2, #2
 8002102:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002106:	e7d0      	b.n	80020aa <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8002108:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8002110:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002118:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8002120:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	e7cf      	b.n	80020c4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002124:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002128:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 800212c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002130:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002134:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002138:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	e7ca      	b.n	80020d4 <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 800213e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002142:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800214c:	4620      	mov	r0, r4
 800214e:	f000 fbe6 	bl	800291e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	f002 f82a 	bl	80041ac <USB_DevDisconnect>

  return HAL_OK;
}
 8002158:	4628      	mov	r0, r5
 800215a:	b00b      	add	sp, #44	; 0x2c
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800215e:	b510      	push	{r4, lr}
 8002160:	4604      	mov	r4, r0
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002162:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002164:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002168:	2b01      	cmp	r3, #1
 800216a:	d012      	beq.n	8002192 <HAL_PCD_Start+0x34>
 800216c:	2301      	movs	r3, #1
 800216e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002172:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002174:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002176:	bf02      	ittt	eq
 8002178:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 800217a:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800217e:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002180:	f001 fcd8 	bl	8003b34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	f002 f803 	bl	8004190 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800218a:	2000      	movs	r0, #0
 800218c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8002190:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002192:	2002      	movs	r0, #2
 8002194:	e7fc      	b.n	8002190 <HAL_PCD_Start+0x32>
	...

08002198 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219c:	6805      	ldr	r5, [r0, #0]
{
 800219e:	b085      	sub	sp, #20
 80021a0:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021a2:	4628      	mov	r0, r5
 80021a4:	f002 f83e 	bl	8004224 <USB_GetMode>
 80021a8:	9000      	str	r0, [sp, #0]
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f040 813e 	bne.w	800242c <HAL_PCD_IRQHandler+0x294>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	f002 f809 	bl	80041c8 <USB_ReadInterrupts>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	f000 8138 	beq.w	800242c <HAL_PCD_IRQHandler+0x294>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	f002 f803 	bl	80041c8 <USB_ReadInterrupts>
 80021c2:	0786      	lsls	r6, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021c4:	bf48      	it	mi
 80021c6:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021c8:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021ca:	bf42      	ittt	mi
 80021cc:	6953      	ldrmi	r3, [r2, #20]
 80021ce:	f003 0302 	andmi.w	r3, r3, #2
 80021d2:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021d4:	f001 fff8 	bl	80041c8 <USB_ReadInterrupts>
 80021d8:	06c0      	lsls	r0, r0, #27
 80021da:	d52a      	bpl.n	8002232 <HAL_PCD_IRQHandler+0x9a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021dc:	6822      	ldr	r2, [r4, #0]
 80021de:	6993      	ldr	r3, [r2, #24]
 80021e0:	f023 0310 	bic.w	r3, r3, #16
 80021e4:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80021e6:	6a2f      	ldr	r7, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e8:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80021ec:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021ee:	f007 060f 	and.w	r6, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021f2:	f040 811e 	bne.w	8002432 <HAL_PCD_IRQHandler+0x29a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021fa:	421f      	tst	r7, r3
 80021fc:	d014      	beq.n	8002228 <HAL_PCD_IRQHandler+0x90>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fe:	231c      	movs	r3, #28
 8002200:	fb03 4606 	mla	r6, r3, r6, r4
 8002204:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8002208:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800220c:	4642      	mov	r2, r8
 800220e:	4628      	mov	r0, r5
 8002210:	f001 ff4c 	bl	80040ac <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002214:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8002218:	4443      	add	r3, r8
 800221a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8002222:	4443      	add	r3, r8
 8002224:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	6993      	ldr	r3, [r2, #24]
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	f001 ffc8 	bl	80041c8 <USB_ReadInterrupts>
 8002238:	0301      	lsls	r1, r0, #12
 800223a:	f100 810e 	bmi.w	800245a <HAL_PCD_IRQHandler+0x2c2>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800223e:	6820      	ldr	r0, [r4, #0]
 8002240:	f001 ffc2 	bl	80041c8 <USB_ReadInterrupts>
 8002244:	0342      	lsls	r2, r0, #13
 8002246:	d50d      	bpl.n	8002264 <HAL_PCD_IRQHandler+0xcc>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	f001 ffc9 	bl	80041e0 <USB_ReadDevAllInEpInterrupt>
 800224e:	4626      	mov	r6, r4
 8002250:	4681      	mov	r9, r0

      epnum = 0U;

      while (ep_intr != 0U)
 8002252:	f505 6810 	add.w	r8, r5, #2304	; 0x900
      epnum = 0U;
 8002256:	f04f 0a00 	mov.w	sl, #0
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800225a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800225c:	f1b9 0f00 	cmp.w	r9, #0
 8002260:	f040 815d 	bne.w	800251e <HAL_PCD_IRQHandler+0x386>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002264:	6820      	ldr	r0, [r4, #0]
 8002266:	f001 ffaf 	bl	80041c8 <USB_ReadInterrupts>
 800226a:	2800      	cmp	r0, #0
 800226c:	da15      	bge.n	800229a <HAL_PCD_IRQHandler+0x102>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800226e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 800227a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 81cb 	bne.w	800261a <HAL_PCD_IRQHandler+0x482>
      {
        hpcd->LPM_State = LPM_L0;
 8002284:	2100      	movs	r1, #0
 8002286:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800228a:	4620      	mov	r0, r4
 800228c:	f000 fb5a 	bl	8002944 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002290:	6822      	ldr	r2, [r4, #0]
 8002292:	6953      	ldr	r3, [r2, #20]
 8002294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002298:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	f001 ff94 	bl	80041c8 <USB_ReadInterrupts>
 80022a0:	0500      	lsls	r0, r0, #20
 80022a2:	d50b      	bpl.n	80022bc <HAL_PCD_IRQHandler+0x124>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022a4:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80022a8:	07d9      	lsls	r1, r3, #31
 80022aa:	d502      	bpl.n	80022b2 <HAL_PCD_IRQHandler+0x11a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7ff fba1 	bl	80019f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	6953      	ldr	r3, [r2, #20]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	f001 ff83 	bl	80041c8 <USB_ReadInterrupts>
 80022c2:	0102      	lsls	r2, r0, #4
 80022c4:	d514      	bpl.n	80022f0 <HAL_PCD_IRQHandler+0x158>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80022ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80022d0:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	f040 81a4 	bne.w	8002622 <HAL_PCD_IRQHandler+0x48a>
      {
        hpcd->LPM_State = LPM_L1;
 80022da:	2101      	movs	r1, #1
 80022dc:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80022e6:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 fb2a 	bl	8002944 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	f001 ff69 	bl	80041c8 <USB_ReadInterrupts>
 80022f6:	04c3      	lsls	r3, r0, #19
 80022f8:	d536      	bpl.n	8002368 <HAL_PCD_IRQHandler+0x1d0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022fa:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022fe:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002300:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002304:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002306:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800230a:	f001 fc37 	bl	8003b7c <USB_FlushTxFifo>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800230e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8002312:	f505 6310 	add.w	r3, r5, #2304	; 0x900

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002316:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	6862      	ldr	r2, [r4, #4]
 800231c:	9800      	ldr	r0, [sp, #0]
 800231e:	4282      	cmp	r2, r0
 8002320:	f200 8183 	bhi.w	800262a <HAL_PCD_IRQHandler+0x492>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002324:	69f3      	ldr	r3, [r6, #28]
 8002326:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800232a:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800232c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8197 	beq.w	8002662 <HAL_PCD_IRQHandler+0x4ca>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002334:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8002338:	f043 030b 	orr.w	r3, r3, #11
 800233c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002340:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002342:	f043 030b 	orr.w	r3, r3, #11
 8002346:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002348:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800234c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800234e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002352:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002356:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800235a:	f001 ff77 	bl	800424c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	6953      	ldr	r3, [r2, #20]
 8002362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002366:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002368:	6820      	ldr	r0, [r4, #0]
 800236a:	f001 ff2d 	bl	80041c8 <USB_ReadInterrupts>
 800236e:	0487      	lsls	r7, r0, #18
 8002370:	d516      	bpl.n	80023a0 <HAL_PCD_IRQHandler+0x208>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	f001 ff5a 	bl	800422c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	f001 fcd1 	bl	8003d20 <USB_GetDevSpeed>
 800237e:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002380:	6825      	ldr	r5, [r4, #0]
 8002382:	f000 fea7 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 8002386:	7b22      	ldrb	r2, [r4, #12]
 8002388:	4601      	mov	r1, r0
 800238a:	4628      	mov	r0, r5
 800238c:	f001 fb62 	bl	8003a54 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fb22 	bl	80019da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	6953      	ldr	r3, [r2, #20]
 800239a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239e:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f001 ff11 	bl	80041c8 <USB_ReadInterrupts>
 80023a6:	0706      	lsls	r6, r0, #28
 80023a8:	d507      	bpl.n	80023ba <HAL_PCD_IRQHandler+0x222>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fb11 	bl	80019d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	6953      	ldr	r3, [r2, #20]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ba:	6820      	ldr	r0, [r4, #0]
 80023bc:	f001 ff04 	bl	80041c8 <USB_ReadInterrupts>
 80023c0:	02c5      	lsls	r5, r0, #11
 80023c2:	d508      	bpl.n	80023d6 <HAL_PCD_IRQHandler+0x23e>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023c4:	2100      	movs	r1, #0
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff fb20 	bl	8001a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	6953      	ldr	r3, [r2, #20]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d6:	6820      	ldr	r0, [r4, #0]
 80023d8:	f001 fef6 	bl	80041c8 <USB_ReadInterrupts>
 80023dc:	0280      	lsls	r0, r0, #10
 80023de:	d508      	bpl.n	80023f2 <HAL_PCD_IRQHandler+0x25a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e0:	2100      	movs	r1, #0
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fb0e 	bl	8001a04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6953      	ldr	r3, [r2, #20]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	f001 fee8 	bl	80041c8 <USB_ReadInterrupts>
 80023f8:	0041      	lsls	r1, r0, #1
 80023fa:	d507      	bpl.n	800240c <HAL_PCD_IRQHandler+0x274>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff fb09 	bl	8001a14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	6953      	ldr	r3, [r2, #20]
 8002406:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800240a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	f001 fedb 	bl	80041c8 <USB_ReadInterrupts>
 8002412:	0742      	lsls	r2, r0, #29
 8002414:	d50a      	bpl.n	800242c <HAL_PCD_IRQHandler+0x294>
    {
      temp = hpcd->Instance->GOTGINT;
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800241a:	076b      	lsls	r3, r5, #29
 800241c:	d502      	bpl.n	8002424 <HAL_PCD_IRQHandler+0x28c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fafc 	bl	8001a1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	6853      	ldr	r3, [r2, #4]
 8002428:	432b      	orrs	r3, r5
 800242a:	6053      	str	r3, [r2, #4]
    }
  }
}
 800242c:	b005      	add	sp, #20
 800242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002432:	2b06      	cmp	r3, #6
 8002434:	f47f aef8 	bne.w	8002228 <HAL_PCD_IRQHandler+0x90>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002438:	2208      	movs	r2, #8
 800243a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800243e:	4628      	mov	r0, r5
 8002440:	f001 fe34 	bl	80040ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002444:	231c      	movs	r3, #28
 8002446:	fb03 4606 	mla	r6, r3, r6, r4
 800244a:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800244e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8002452:	441f      	add	r7, r3
 8002454:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
 8002458:	e6e6      	b.n	8002228 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800245a:	6820      	ldr	r0, [r4, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800245c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8002678 <HAL_PCD_IRQHandler+0x4e0>
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002460:	f8df a218 	ldr.w	sl, [pc, #536]	; 800267c <HAL_PCD_IRQHandler+0x4e4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002464:	f001 feb4 	bl	80041d0 <USB_ReadDevAllOutEpInterrupt>
 8002468:	f505 6b30 	add.w	fp, r5, #2816	; 0xb00
 800246c:	4606      	mov	r6, r0
      epnum = 0U;
 800246e:	2700      	movs	r7, #0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002470:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002472:	2e00      	cmp	r6, #0
 8002474:	f43f aee3 	beq.w	800223e <HAL_PCD_IRQHandler+0xa6>
        if ((ep_intr & 0x1U) != 0U)
 8002478:	07f3      	lsls	r3, r6, #31
 800247a:	d543      	bpl.n	8002504 <HAL_PCD_IRQHandler+0x36c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247c:	b2f9      	uxtb	r1, r7
 800247e:	9101      	str	r1, [sp, #4]
 8002480:	f001 feb6 	bl	80041f0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002484:	f010 0f01 	tst.w	r0, #1
 8002488:	9901      	ldr	r1, [sp, #4]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800248a:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800248c:	d010      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x318>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800248e:	2201      	movs	r2, #1
 8002490:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002494:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002496:	6c10      	ldr	r0, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800249c:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024a0:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024a2:	6893      	ldr	r3, [r2, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024a4:	d137      	bne.n	8002516 <HAL_PCD_IRQHandler+0x37e>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024a6:	0418      	lsls	r0, r3, #16
 80024a8:	d531      	bpl.n	800250e <HAL_PCD_IRQHandler+0x376>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ae:	6091      	str	r1, [r2, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024b0:	f018 0f08 	tst.w	r8, #8
 80024b4:	d013      	beq.n	80024de <HAL_PCD_IRQHandler+0x346>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024b6:	2208      	movs	r2, #8
 80024b8:	f8cb 2008 	str.w	r2, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024bc:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024be:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024c4:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	4549      	cmp	r1, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ca:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024cc:	d904      	bls.n	80024d8 <HAL_PCD_IRQHandler+0x340>
 80024ce:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d0:	bf44      	itt	mi
 80024d2:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80024d6:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff fa63 	bl	80019a4 <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024de:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024e2:	bf1c      	itt	ne
 80024e4:	2210      	movne	r2, #16
 80024e6:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ea:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ee:	bf1c      	itt	ne
 80024f0:	2220      	movne	r2, #32
 80024f2:	f8cb 2008 	strne.w	r2, [fp, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024f6:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024fa:	bf1c      	itt	ne
 80024fc:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8002500:	f8cb 3008 	strne.w	r3, [fp, #8]
        epnum++;
 8002504:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8002506:	0876      	lsrs	r6, r6, #1
 8002508:	f10b 0b20 	add.w	fp, fp, #32
 800250c:	e7b0      	b.n	8002470 <HAL_PCD_IRQHandler+0x2d8>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800250e:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002510:	bf44      	itt	mi
 8002512:	2020      	movmi	r0, #32
 8002514:	6090      	strmi	r0, [r2, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff fa4a 	bl	80019b0 <HAL_PCD_DataOutStageCallback>
 800251c:	e7c8      	b.n	80024b0 <HAL_PCD_IRQHandler+0x318>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800251e:	f019 0f01 	tst.w	r9, #1
 8002522:	d072      	beq.n	800260a <HAL_PCD_IRQHandler+0x472>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002524:	fa5f fb8a 	uxtb.w	fp, sl
 8002528:	4659      	mov	r1, fp
 800252a:	f001 fe6a 	bl	8004202 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800252e:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002530:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002532:	d510      	bpl.n	8002556 <HAL_PCD_IRQHandler+0x3be>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002534:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002538:	2201      	movs	r2, #1
 800253a:	f00a 010f 	and.w	r1, sl, #15
 800253e:	fa02 f101 	lsl.w	r1, r2, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002542:	ea23 0301 	bic.w	r3, r3, r1
 8002546:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800254a:	4659      	mov	r1, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800254c:	f8c8 2008 	str.w	r2, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff fa36 	bl	80019c2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002556:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002558:	bf44      	itt	mi
 800255a:	2308      	movmi	r3, #8
 800255c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002560:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002562:	bf44      	itt	mi
 8002564:	2310      	movmi	r3, #16
 8002566:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800256a:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800256c:	bf44      	itt	mi
 800256e:	2340      	movmi	r3, #64	; 0x40
 8002570:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002574:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002576:	bf44      	itt	mi
 8002578:	2302      	movmi	r3, #2
 800257a:	f8c8 3008 	strmi.w	r3, [r8, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	9301      	str	r3, [sp, #4]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002582:	063f      	lsls	r7, r7, #24
 8002584:	d541      	bpl.n	800260a <HAL_PCD_IRQHandler+0x472>
  if (ep->xfer_count > ep->xfer_len)
 8002586:	e9d6 3114 	ldrd	r3, r1, [r6, #80]	; 0x50
 800258a:	4299      	cmp	r1, r3
 800258c:	d83d      	bhi.n	800260a <HAL_PCD_IRQHandler+0x472>
  len = ep->xfer_len - ep->xfer_count;
 800258e:	1a5b      	subs	r3, r3, r1
  len32b = (len + 3U) / 4U;
 8002590:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8002592:	428b      	cmp	r3, r1
 8002594:	bf28      	it	cs
 8002596:	460b      	movcs	r3, r1
 8002598:	3303      	adds	r3, #3
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	9302      	str	r3, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800259e:	9b01      	ldr	r3, [sp, #4]
 80025a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a4:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80025a8:	9303      	str	r3, [sp, #12]
 80025aa:	9b03      	ldr	r3, [sp, #12]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ac:	9a02      	ldr	r2, [sp, #8]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ae:	6999      	ldr	r1, [r3, #24]
 80025b0:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025b2:	4291      	cmp	r1, r2
 80025b4:	e9d6 7314 	ldrd	r7, r3, [r6, #80]	; 0x50
 80025b8:	d325      	bcc.n	8002606 <HAL_PCD_IRQHandler+0x46e>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ba:	42bb      	cmp	r3, r7
 80025bc:	d30e      	bcc.n	80025dc <HAL_PCD_IRQHandler+0x444>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025be:	9b01      	ldr	r3, [sp, #4]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c0:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c4:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c8:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ca:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d2:	ea23 0302 	bic.w	r3, r3, r2
 80025d6:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80025da:	e016      	b.n	800260a <HAL_PCD_IRQHandler+0x472>
    len = ep->xfer_len - ep->xfer_count;
 80025dc:	1aff      	subs	r7, r7, r3
 80025de:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80025e0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80025e2:	9801      	ldr	r0, [sp, #4]
 80025e4:	429f      	cmp	r7, r3
 80025e6:	bf28      	it	cs
 80025e8:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 80025ea:	1cfb      	adds	r3, r7, #3
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	9302      	str	r3, [sp, #8]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80025f0:	465a      	mov	r2, fp
 80025f2:	b2bb      	uxth	r3, r7
 80025f4:	f001 fc98 	bl	8003f28 <USB_WritePacket>
    ep->xfer_buff  += len;
 80025f8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80025fa:	443b      	add	r3, r7
 80025fc:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80025fe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002600:	443b      	add	r3, r7
 8002602:	6573      	str	r3, [r6, #84]	; 0x54
 8002604:	e7d1      	b.n	80025aa <HAL_PCD_IRQHandler+0x412>
  if (ep->xfer_len <= ep->xfer_count)
 8002606:	42bb      	cmp	r3, r7
 8002608:	d2d9      	bcs.n	80025be <HAL_PCD_IRQHandler+0x426>
        epnum++;
 800260a:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 800260e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8002612:	361c      	adds	r6, #28
 8002614:	f108 0820 	add.w	r8, r8, #32
 8002618:	e61f      	b.n	800225a <HAL_PCD_IRQHandler+0xc2>
        HAL_PCD_ResumeCallback(hpcd);
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff f9ee 	bl	80019fc <HAL_PCD_ResumeCallback>
 8002620:	e636      	b.n	8002290 <HAL_PCD_IRQHandler+0xf8>
        HAL_PCD_SuspendCallback(hpcd);
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff f9e6 	bl	80019f4 <HAL_PCD_SuspendCallback>
 8002628:	e662      	b.n	80022f0 <HAL_PCD_IRQHandler+0x158>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800262a:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002632:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800263a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800263c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002640:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002644:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002648:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800264c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002650:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	9a00      	ldr	r2, [sp, #0]
 800265a:	3201      	adds	r2, #1
 800265c:	9200      	str	r2, [sp, #0]
 800265e:	3320      	adds	r3, #32
 8002660:	e65b      	b.n	800231a <HAL_PCD_IRQHandler+0x182>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002662:	6973      	ldr	r3, [r6, #20]
 8002664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002668:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800266c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800266e:	6933      	ldr	r3, [r6, #16]
 8002670:	f043 030b 	orr.w	r3, r3, #11
 8002674:	6133      	str	r3, [r6, #16]
 8002676:	e667      	b.n	8002348 <HAL_PCD_IRQHandler+0x1b0>
 8002678:	4f54300a 	.word	0x4f54300a
 800267c:	4f54310a 	.word	0x4f54310a

08002680 <HAL_PCD_SetAddress>:
{
 8002680:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002682:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002686:	2a01      	cmp	r2, #1
{
 8002688:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800268a:	d00b      	beq.n	80026a4 <HAL_PCD_SetAddress+0x24>
 800268c:	2201      	movs	r2, #1
 800268e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002692:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002696:	6800      	ldr	r0, [r0, #0]
 8002698:	f001 fd6a 	bl	8004170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800269c:	2000      	movs	r0, #0
 800269e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80026a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80026a4:	2002      	movs	r0, #2
 80026a6:	e7fc      	b.n	80026a2 <HAL_PCD_SetAddress+0x22>

080026a8 <HAL_PCD_EP_Open>:
{
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	f001 060f 	and.w	r6, r1, #15
 80026ae:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80026b2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80026b6:	4605      	mov	r5, r0
 80026b8:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80026bc:	f04f 001c 	mov.w	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	d01f      	beq.n	8002702 <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 80026c2:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 80026ca:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	4429      	add	r1, r5
    ep->is_in = 1U;
 80026ce:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80026d2:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80026d4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d6:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 80026d8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80026da:	b102      	cbz	r2, 80026de <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80026dc:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80026de:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80026e0:	bf04      	itt	eq
 80026e2:	2300      	moveq	r3, #0
 80026e4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80026e6:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d012      	beq.n	8002714 <HAL_PCD_EP_Open+0x6c>
 80026ee:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026f0:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80026f2:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026f6:	f001 fb1d 	bl	8003d34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8002700:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002702:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002706:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800270a:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800270e:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 8002712:	e7de      	b.n	80026d2 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002714:	2002      	movs	r0, #2
 8002716:	e7f3      	b.n	8002700 <HAL_PCD_EP_Open+0x58>

08002718 <HAL_PCD_EP_Close>:
{
 8002718:	b510      	push	{r4, lr}
 800271a:	4604      	mov	r4, r0
 800271c:	f001 000f 	and.w	r0, r1, #15
 8002720:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002724:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002728:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800272c:	f04f 021c 	mov.w	r2, #28
 8002730:	d016      	beq.n	8002760 <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 8002732:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002736:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800273a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273c:	4421      	add	r1, r4
    ep->is_in = 1U;
 800273e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002742:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8002744:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002748:	2b01      	cmp	r3, #1
 800274a:	d012      	beq.n	8002772 <HAL_PCD_EP_Close+0x5a>
 800274c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800274e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002750:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002754:	f001 fb2e 	bl	8003db4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002758:	2000      	movs	r0, #0
 800275a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800275e:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 8002760:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002764:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8002768:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276a:	4421      	add	r1, r4
    ep->is_in = 0U;
 800276c:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8002770:	e7e7      	b.n	8002742 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8002772:	2002      	movs	r0, #2
 8002774:	e7f3      	b.n	800275e <HAL_PCD_EP_Close+0x46>

08002776 <HAL_PCD_EP_Receive>:
{
 8002776:	b538      	push	{r3, r4, r5, lr}
 8002778:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277c:	241c      	movs	r4, #28
 800277e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8002782:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002786:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800278a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800278e:	2300      	movs	r3, #0
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002790:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 8002792:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8002796:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800279a:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800279e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a2:	b91d      	cbnz	r5, 80027ac <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027a4:	f001 fb5c 	bl	8003e60 <USB_EP0StartXfer>
}
 80027a8:	2000      	movs	r0, #0
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ac:	f001 fbcc 	bl	8003f48 <USB_EPStartXfer>
 80027b0:	e7fa      	b.n	80027a8 <HAL_PCD_EP_Receive+0x32>

080027b2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027b2:	f001 010f 	and.w	r1, r1, #15
 80027b6:	231c      	movs	r3, #28
 80027b8:	fb03 0001 	mla	r0, r3, r1, r0
}
 80027bc:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80027c0:	4770      	bx	lr

080027c2 <HAL_PCD_EP_Transmit>:
{
 80027c2:	b538      	push	{r3, r4, r5, lr}
 80027c4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c8:	241c      	movs	r4, #28
 80027ca:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80027ce:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80027d4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80027da:	2301      	movs	r3, #1
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027dc:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 80027de:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80027e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027e8:	b91d      	cbnz	r5, 80027f2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027ea:	f001 fb39 	bl	8003e60 <USB_EP0StartXfer>
}
 80027ee:	2000      	movs	r0, #0
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f2:	f001 fba9 	bl	8003f48 <USB_EPStartXfer>
 80027f6:	e7fa      	b.n	80027ee <HAL_PCD_EP_Transmit+0x2c>

080027f8 <HAL_PCD_EP_SetStall>:
{
 80027f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027fa:	6843      	ldr	r3, [r0, #4]
 80027fc:	f001 050f 	and.w	r5, r1, #15
 8002800:	429d      	cmp	r5, r3
{
 8002802:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002804:	d82d      	bhi.n	8002862 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8002806:	f011 0f80 	tst.w	r1, #128	; 0x80
 800280a:	f04f 021c 	mov.w	r2, #28
 800280e:	d01e      	beq.n	800284e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002810:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8002814:	fb02 0205 	mla	r2, r2, r5, r0
 8002818:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281a:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800281c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 8002820:	2201      	movs	r2, #1
 8002822:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002824:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8002826:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 800282a:	4291      	cmp	r1, r2
 800282c:	d01b      	beq.n	8002866 <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800282e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002830:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002834:	4619      	mov	r1, r3
 8002836:	f001 fc47 	bl	80040c8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800283a:	b925      	cbnz	r5, 8002846 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002842:	f001 fd03 	bl	800424c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002846:	2000      	movs	r0, #0
 8002848:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800284c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800284e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8002852:	fb02 0101 	mla	r1, r2, r1, r0
 8002856:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002858:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800285c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8002860:	e7de      	b.n	8002820 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	e7f2      	b.n	800284c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002866:	2002      	movs	r0, #2
 8002868:	e7f0      	b.n	800284c <HAL_PCD_EP_SetStall+0x54>

0800286a <HAL_PCD_EP_ClrStall>:
{
 800286a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800286c:	6843      	ldr	r3, [r0, #4]
 800286e:	f001 020f 	and.w	r2, r1, #15
 8002872:	429a      	cmp	r2, r3
{
 8002874:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002876:	d82a      	bhi.n	80028ce <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8002878:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800287c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002880:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002884:	f04f 001c 	mov.w	r0, #28
 8002888:	d018      	beq.n	80028bc <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 800288a:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8002892:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002896:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 800289a:	2500      	movs	r5, #0
 800289c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80028a0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d014      	beq.n	80028d2 <HAL_PCD_EP_ClrStall+0x68>
 80028a8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80028ac:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028b0:	f001 fc35 	bl	800411e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028b4:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80028b8:	4628      	mov	r0, r5
}
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80028bc:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80028c4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c6:	4421      	add	r1, r4
    ep->is_in = 0U;
 80028c8:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80028cc:	e7e5      	b.n	800289a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	e7f3      	b.n	80028ba <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80028d2:	2002      	movs	r0, #2
 80028d4:	e7f1      	b.n	80028ba <HAL_PCD_EP_ClrStall+0x50>

080028d6 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028d6:	6800      	ldr	r0, [r0, #0]
{
 80028d8:	b570      	push	{r4, r5, r6, lr}

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028da:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 80028de:	b919      	cbnz	r1, 80028e8 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028e0:	4322      	orrs	r2, r4
 80028e2:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80028ea:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	1c5e      	adds	r6, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	429d      	cmp	r5, r3
 80028f8:	d805      	bhi.n	8002906 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028fa:	313f      	adds	r1, #63	; 0x3f
 80028fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002900:	4322      	orrs	r2, r4
 8002902:	6042      	str	r2, [r0, #4]
 8002904:	e7ee      	b.n	80028e4 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002906:	3340      	adds	r3, #64	; 0x40
 8002908:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002912:	4633      	mov	r3, r6
 8002914:	e7ed      	b.n	80028f2 <HAL_PCDEx_SetTxFiFo+0x1c>

08002916 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002916:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002918:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800291a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800291c:	4770      	bx	lr

0800291e <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291e:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8002920:	2100      	movs	r1, #0
 8002922:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8002926:	2301      	movs	r3, #1
 8002928:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800292c:	6993      	ldr	r3, [r2, #24]
 800292e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002932:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002934:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	f043 0303 	orr.w	r3, r3, #3
 800293e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002940:	4608      	mov	r0, r1
 8002942:	4770      	bx	lr

08002944 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002944:	4770      	bx	lr
	...

08002948 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4a02      	ldr	r2, [pc, #8]	; (8002954 <HAL_PWR_EnableBkUpAccess+0xc>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	4770      	bx	lr
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_PWREx_GetVoltageRange+0xc>)
 800295a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800295c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40007000 	.word	0x40007000

08002968 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002968:	4a02      	ldr	r2, [pc, #8]	; (8002974 <HAL_PWREx_EnableVddUSB+0xc>)
 800296a:	6853      	ldr	r3, [r2, #4]
 800296c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002970:	6053      	str	r3, [r2, #4]
}
 8002972:	4770      	bx	lr
 8002974:	40007000 	.word	0x40007000

08002978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002978:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800297a:	4d1e      	ldr	r5, [pc, #120]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800297c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800297e:	00da      	lsls	r2, r3, #3
{
 8002980:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002982:	d518      	bpl.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002984:	f7ff ffe8 	bl	8002958 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002988:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800298c:	d123      	bne.n	80029d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800298e:	2c80      	cmp	r4, #128	; 0x80
 8002990:	d929      	bls.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002992:	2ca0      	cmp	r4, #160	; 0xa0
 8002994:	bf8c      	ite	hi
 8002996:	2402      	movhi	r4, #2
 8002998:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800299a:	4917      	ldr	r1, [pc, #92]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	f022 0207 	bic.w	r2, r2, #7
 80029a2:	4322      	orrs	r2, r4
 80029a4:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a6:	6808      	ldr	r0, [r1, #0]
 80029a8:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80029ac:	1b00      	subs	r0, r0, r4
 80029ae:	bf18      	it	ne
 80029b0:	2001      	movne	r0, #1
 80029b2:	b003      	add	sp, #12
 80029b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	65ab      	str	r3, [r5, #88]	; 0x58
 80029be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80029c8:	f7ff ffc6 	bl	8002958 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80029d4:	e7d8      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80029d6:	2c80      	cmp	r4, #128	; 0x80
 80029d8:	d807      	bhi.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80029da:	d008      	beq.n	80029ee <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80029dc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80029e0:	425c      	negs	r4, r3
 80029e2:	415c      	adcs	r4, r3
 80029e4:	e7d9      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e6:	2400      	movs	r4, #0
 80029e8:	e7d7      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80029ea:	2403      	movs	r4, #3
 80029ec:	e7d5      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ee:	2402      	movs	r4, #2
 80029f0:	e7d3      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40022000 	.word	0x40022000

080029fc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x8c>)
 80029fe:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a00:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a02:	f012 020c 	ands.w	r2, r2, #12
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x18>
 8002a08:	2a0c      	cmp	r2, #12
 8002a0a:	d115      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a10:	2901      	cmp	r1, #1
 8002a12:	d118      	bne.n	8002a46 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a14:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a16:	481d      	ldr	r0, [pc, #116]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a18:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a1a:	bf55      	itete	pl
 8002a1c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a20:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a22:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a26:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a2a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a2e:	b34a      	cbz	r2, 8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a30:	2a0c      	cmp	r2, #12
 8002a32:	d009      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x4c>
 8002a34:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a36:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a38:	2a04      	cmp	r2, #4
 8002a3a:	d022      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a3c:	2a08      	cmp	r2, #8
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a40:	bf18      	it	ne
 8002a42:	2000      	movne	r0, #0
 8002a44:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a46:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002a4e:	2a02      	cmp	r2, #2
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x82>
 8002a52:	490f      	ldr	r1, [pc, #60]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a54:	2a03      	cmp	r2, #3
 8002a56:	bf08      	it	eq
 8002a58:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002a62:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a64:	68d8      	ldr	r0, [r3, #12]
 8002a66:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a6e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a70:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a72:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a74:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002a78:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a7c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a80:	e7eb      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002a82:	4804      	ldr	r0, [pc, #16]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08019f38 	.word	0x08019f38
 8002a90:	007a1200 	.word	0x007a1200
 8002a94:	00f42400 	.word	0x00f42400

08002a98 <HAL_RCC_OscConfig>:
{
 8002a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	b918      	cbnz	r0, 8002aa8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002aa0:	2001      	movs	r0, #1
}
 8002aa2:	b003      	add	sp, #12
 8002aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa8:	4c94      	ldr	r4, [pc, #592]	; (8002cfc <HAL_RCC_OscConfig+0x264>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aaa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aac:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aae:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ab0:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aba:	d53d      	bpl.n	8002b38 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002abc:	b11e      	cbz	r6, 8002ac6 <HAL_RCC_OscConfig+0x2e>
 8002abe:	2e0c      	cmp	r6, #12
 8002ac0:	d166      	bne.n	8002b90 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ac2:	2f01      	cmp	r7, #1
 8002ac4:	d164      	bne.n	8002b90 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	0799      	lsls	r1, r3, #30
 8002aca:	d502      	bpl.n	8002ad2 <HAL_RCC_OscConfig+0x3a>
 8002acc:	69ab      	ldr	r3, [r5, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0e6      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	6a28      	ldr	r0, [r5, #32]
 8002ad6:	071a      	lsls	r2, r3, #28
 8002ad8:	bf56      	itet	pl
 8002ada:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002ade:	6823      	ldrmi	r3, [r4, #0]
 8002ae0:	091b      	lsrpl	r3, r3, #4
 8002ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d93b      	bls.n	8002b62 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aea:	f7ff ff45 	bl	8002978 <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1d6      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	6a2a      	ldr	r2, [r5, #32]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b02:	4313      	orrs	r3, r2
 8002b04:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b06:	6863      	ldr	r3, [r4, #4]
 8002b08:	69ea      	ldr	r2, [r5, #28]
 8002b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b12:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b14:	f7ff ff72 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002b18:	68a3      	ldr	r3, [r4, #8]
 8002b1a:	4a79      	ldr	r2, [pc, #484]	; (8002d00 <HAL_RCC_OscConfig+0x268>)
 8002b1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	40d8      	lsrs	r0, r3
 8002b28:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f7ff f898 	bl	8001c64 <HAL_InitTick>
        if(status != HAL_OK)
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1b4      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	07d9      	lsls	r1, r3, #31
 8002b3c:	d45f      	bmi.n	8002bfe <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	079a      	lsls	r2, r3, #30
 8002b42:	f100 80a2 	bmi.w	8002c8a <HAL_RCC_OscConfig+0x1f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	0719      	lsls	r1, r3, #28
 8002b4a:	f100 80df 	bmi.w	8002d0c <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	075a      	lsls	r2, r3, #29
 8002b52:	f100 8105 	bmi.w	8002d60 <HAL_RCC_OscConfig+0x2c8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b56:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 816e 	bne.w	8002e3a <HAL_RCC_OscConfig+0x3a2>
  return HAL_OK;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e79f      	b.n	8002aa2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b70:	4303      	orrs	r3, r0
 8002b72:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	69ea      	ldr	r2, [r5, #28]
 8002b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b80:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	d1c6      	bne.n	8002b14 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b86:	f7ff fef7 	bl	8002978 <RCC_SetFlashLatencyFromMSIRange>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	d0c2      	beq.n	8002b14 <HAL_RCC_OscConfig+0x7c>
 8002b8e:	e787      	b.n	8002aa0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b90:	69ab      	ldr	r3, [r5, #24]
 8002b92:	b31b      	cbz	r3, 8002bdc <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b9c:	f7ff f8a8 	bl	8001cf0 <HAL_GetTick>
 8002ba0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	079b      	lsls	r3, r3, #30
 8002ba6:	d511      	bpl.n	8002bcc <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	6a2a      	ldr	r2, [r5, #32]
 8002bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbc:	6863      	ldr	r3, [r4, #4]
 8002bbe:	69ea      	ldr	r2, [r5, #28]
 8002bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bc8:	6063      	str	r3, [r4, #4]
 8002bca:	e7b5      	b.n	8002b38 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f890 	bl	8001cf0 <HAL_GetTick>
 8002bd0:	eba0 0008 	sub.w	r0, r0, r8
 8002bd4:	2802      	cmp	r0, #2
 8002bd6:	d9e4      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002bd8:	2003      	movs	r0, #3
 8002bda:	e762      	b.n	8002aa2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002be4:	f7ff f884 	bl	8001cf0 <HAL_GetTick>
 8002be8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	0798      	lsls	r0, r3, #30
 8002bee:	d5a3      	bpl.n	8002b38 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7ff f87e 	bl	8001cf0 <HAL_GetTick>
 8002bf4:	eba0 0008 	sub.w	r0, r0, r8
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d9f6      	bls.n	8002bea <HAL_RCC_OscConfig+0x152>
 8002bfc:	e7ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bfe:	2e08      	cmp	r6, #8
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_OscConfig+0x172>
 8002c02:	2e0c      	cmp	r6, #12
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c06:	2f03      	cmp	r7, #3
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	039b      	lsls	r3, r3, #14
 8002c0e:	d596      	bpl.n	8002b3e <HAL_RCC_OscConfig+0xa6>
 8002c10:	686b      	ldr	r3, [r5, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d193      	bne.n	8002b3e <HAL_RCC_OscConfig+0xa6>
 8002c16:	e743      	b.n	8002aa0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	686b      	ldr	r3, [r5, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d112      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1ae>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c28:	f7ff f862 	bl	8001cf0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0398      	lsls	r0, r3, #14
 8002c36:	d482      	bmi.n	8002b3e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff f85a 	bl	8001cf0 <HAL_GetTick>
 8002c3c:	eba0 0008 	sub.w	r0, r0, r8
 8002c40:	4548      	cmp	r0, r9
 8002c42:	d9f6      	bls.n	8002c32 <HAL_RCC_OscConfig+0x19a>
 8002c44:	e7c8      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4a:	d104      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1be>
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	e7e4      	b.n	8002c20 <HAL_RCC_OscConfig+0x188>
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c5c:	6022      	str	r2, [r4, #0]
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c64:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1de      	bne.n	8002c28 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f841 	bl	8001cf0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	0399      	lsls	r1, r3, #14
 8002c78:	f57f af61 	bpl.w	8002b3e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f838 	bl	8001cf0 <HAL_GetTick>
 8002c80:	eba0 0008 	sub.w	r0, r0, r8
 8002c84:	4548      	cmp	r0, r9
 8002c86:	d9f5      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1dc>
 8002c88:	e7a6      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8a:	2e04      	cmp	r6, #4
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1fe>
 8002c8e:	2e0c      	cmp	r6, #12
 8002c90:	d110      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x21c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c92:	2f02      	cmp	r7, #2
 8002c94:	d10e      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	055a      	lsls	r2, r3, #21
 8002c9a:	d503      	bpl.n	8002ca4 <HAL_RCC_OscConfig+0x20c>
 8002c9c:	68eb      	ldr	r3, [r5, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f43f aefe 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	692a      	ldr	r2, [r5, #16]
 8002ca8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002cac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cb0:	6063      	str	r3, [r4, #4]
 8002cb2:	e748      	b.n	8002b46 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb4:	68eb      	ldr	r3, [r5, #12]
 8002cb6:	b17b      	cbz	r3, 8002cd8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f816 	bl	8001cf0 <HAL_GetTick>
 8002cc4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	055b      	lsls	r3, r3, #21
 8002cca:	d4eb      	bmi.n	8002ca4 <HAL_RCC_OscConfig+0x20c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7ff f810 	bl	8001cf0 <HAL_GetTick>
 8002cd0:	1bc0      	subs	r0, r0, r7
 8002cd2:	2802      	cmp	r0, #2
 8002cd4:	d9f7      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x22e>
 8002cd6:	e77f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f806 	bl	8001cf0 <HAL_GetTick>
 8002ce4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	0558      	lsls	r0, r3, #21
 8002cea:	f57f af2c 	bpl.w	8002b46 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fe ffff 	bl	8001cf0 <HAL_GetTick>
 8002cf2:	1bc0      	subs	r0, r0, r7
 8002cf4:	2802      	cmp	r0, #2
 8002cf6:	d9f6      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x24e>
 8002cf8:	e76e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08019f68 	.word	0x08019f68
 8002d04:	20000074 	.word	0x20000074
 8002d08:	2000007c 	.word	0x2000007c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0c:	696b      	ldr	r3, [r5, #20]
 8002d0e:	b19b      	cbz	r3, 8002d38 <HAL_RCC_OscConfig+0x2a0>
      __HAL_RCC_LSI_ENABLE();
 8002d10:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d1c:	f7fe ffe8 	bl	8001cf0 <HAL_GetTick>
 8002d20:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d22:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d26:	079b      	lsls	r3, r3, #30
 8002d28:	f53f af11 	bmi.w	8002b4e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe ffe0 	bl	8001cf0 <HAL_GetTick>
 8002d30:	1bc0      	subs	r0, r0, r7
 8002d32:	2802      	cmp	r0, #2
 8002d34:	d9f5      	bls.n	8002d22 <HAL_RCC_OscConfig+0x28a>
 8002d36:	e74f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002d38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d44:	f7fe ffd4 	bl	8001cf0 <HAL_GetTick>
 8002d48:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d4e:	0798      	lsls	r0, r3, #30
 8002d50:	f57f aefd 	bpl.w	8002b4e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe ffcc 	bl	8001cf0 <HAL_GetTick>
 8002d58:	1bc0      	subs	r0, r0, r7
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f5      	bls.n	8002d4a <HAL_RCC_OscConfig+0x2b2>
 8002d5e:	e73b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d62:	00d9      	lsls	r1, r3, #3
 8002d64:	d429      	bmi.n	8002dba <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d78:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	4f89      	ldr	r7, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x50c>)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	05da      	lsls	r2, r3, #23
 8002d82:	d51d      	bpl.n	8002dc0 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	68ab      	ldr	r3, [r5, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d12b      	bne.n	8002de2 <HAL_RCC_OscConfig+0x34a>
 8002d8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002d96:	f7fe ffab 	bl	8001cf0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d9e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002da4:	0798      	lsls	r0, r3, #30
 8002da6:	d542      	bpl.n	8002e2e <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8002da8:	f1b8 0f00 	cmp.w	r8, #0
 8002dac:	f43f aed3 	beq.w	8002b56 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002db8:	e6cd      	b.n	8002b56 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	f04f 0800 	mov.w	r8, #0
 8002dbe:	e7dd      	b.n	8002d7c <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002dc8:	f7fe ff92 	bl	8001cf0 <HAL_GetTick>
 8002dcc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	d4d7      	bmi.n	8002d84 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe ff8c 	bl	8001cf0 <HAL_GetTick>
 8002dd8:	eba0 0009 	sub.w	r0, r0, r9
 8002ddc:	2802      	cmp	r0, #2
 8002dde:	d9f6      	bls.n	8002dce <HAL_RCC_OscConfig+0x336>
 8002de0:	e6fa      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x35c>
 8002de6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002df2:	e7ca      	b.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
 8002df4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002e00:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e04:	f022 0204 	bic.w	r2, r2, #4
 8002e08:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1c2      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8002e10:	f7fe ff6e 	bl	8001cf0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e18:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e1e:	0799      	lsls	r1, r3, #30
 8002e20:	d5c2      	bpl.n	8002da8 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe ff65 	bl	8001cf0 <HAL_GetTick>
 8002e26:	1bc0      	subs	r0, r0, r7
 8002e28:	4548      	cmp	r0, r9
 8002e2a:	d9f6      	bls.n	8002e1a <HAL_RCC_OscConfig+0x382>
 8002e2c:	e6d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe ff5f 	bl	8001cf0 <HAL_GetTick>
 8002e32:	1bc0      	subs	r0, r0, r7
 8002e34:	4548      	cmp	r0, r9
 8002e36:	d9b3      	bls.n	8002da0 <HAL_RCC_OscConfig+0x308>
 8002e38:	e6ce      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	f040 808f 	bne.w	8002f5e <HAL_RCC_OscConfig+0x4c6>
      pll_config = RCC->PLLCFGR;
 8002e40:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002e44:	f003 0103 	and.w	r1, r3, #3
 8002e48:	4291      	cmp	r1, r2
 8002e4a:	d124      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e52:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e58:	d11d      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e5a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e60:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e64:	d117      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e66:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002e68:	3a07      	subs	r2, #7
 8002e6a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002e6e:	bf18      	it	ne
 8002e70:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e72:	4291      	cmp	r1, r2
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e76:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002e78:	0852      	lsrs	r2, r2, #1
 8002e7a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002e7e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e80:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e86:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002e8e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e90:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e94:	d04a      	beq.n	8002f2c <HAL_RCC_OscConfig+0x494>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e96:	2e0c      	cmp	r6, #12
 8002e98:	f43f ae02 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	f53f adfe 	bmi.w	8002aa0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	f53f adfa 	bmi.w	8002aa0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002eb4:	f7fe ff1c 	bl	8001cf0 <HAL_GetTick>
 8002eb8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	019f      	lsls	r7, r3, #6
 8002ebe:	d42f      	bmi.n	8002f20 <HAL_RCC_OscConfig+0x488>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	68e2      	ldr	r2, [r4, #12]
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x510>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ed0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ed8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002eda:	0912      	lsrs	r2, r2, #4
 8002edc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002ee0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ee2:	0852      	lsrs	r2, r2, #1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002eea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002eec:	0852      	lsrs	r2, r2, #1
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002ef4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002efe:	68e3      	ldr	r3, [r4, #12]
 8002f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f04:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002f06:	f7fe fef3 	bl	8001cf0 <HAL_GetTick>
 8002f0a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	0198      	lsls	r0, r3, #6
 8002f10:	f53f ae25 	bmi.w	8002b5e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe feec 	bl	8001cf0 <HAL_GetTick>
 8002f18:	1b40      	subs	r0, r0, r5
 8002f1a:	2802      	cmp	r0, #2
 8002f1c:	d9f6      	bls.n	8002f0c <HAL_RCC_OscConfig+0x474>
 8002f1e:	e65b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fee6 	bl	8001cf0 <HAL_GetTick>
 8002f24:	1b80      	subs	r0, r0, r6
 8002f26:	2802      	cmp	r0, #2
 8002f28:	d9c7      	bls.n	8002eba <HAL_RCC_OscConfig+0x422>
 8002f2a:	e655      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	0199      	lsls	r1, r3, #6
 8002f30:	f53f ae15 	bmi.w	8002b5e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f3c:	68e3      	ldr	r3, [r4, #12]
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002f44:	f7fe fed4 	bl	8001cf0 <HAL_GetTick>
 8002f48:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	019a      	lsls	r2, r3, #6
 8002f4e:	f53f ae06 	bmi.w	8002b5e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fecd 	bl	8001cf0 <HAL_GetTick>
 8002f56:	1b40      	subs	r0, r0, r5
 8002f58:	2802      	cmp	r0, #2
 8002f5a:	d9f6      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4b2>
 8002f5c:	e63c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5e:	2e0c      	cmp	r6, #12
 8002f60:	f43f ad9e 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f72:	bf02      	ittt	eq
 8002f74:	68e3      	ldreq	r3, [r4, #12]
 8002f76:	f023 0303 	biceq.w	r3, r3, #3
 8002f7a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f7c:	68e3      	ldr	r3, [r4, #12]
 8002f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002f88:	f7fe feb2 	bl	8001cf0 <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	f57f ade4 	bpl.w	8002b5e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe feab 	bl	8001cf0 <HAL_GetTick>
 8002f9a:	1b40      	subs	r0, r0, r5
 8002f9c:	2802      	cmp	r0, #2
 8002f9e:	d9f6      	bls.n	8002f8e <HAL_RCC_OscConfig+0x4f6>
 8002fa0:	e61a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x140>
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	f99d808c 	.word	0xf99d808c

08002fac <HAL_RCC_ClockConfig>:
{
 8002fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	b910      	cbnz	r0, 8002fbc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <HAL_RCC_ClockConfig+0x114>)
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d32a      	bcc.n	800301e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	07d9      	lsls	r1, r3, #31
 8002fcc:	d432      	bmi.n	8003034 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	078a      	lsls	r2, r1, #30
 8002fd2:	d45b      	bmi.n	800308c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4a3a      	ldr	r2, [pc, #232]	; (80030c0 <HAL_RCC_ClockConfig+0x114>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	d85d      	bhi.n	800309c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	f011 0f04 	tst.w	r1, #4
 8002fe4:	4d37      	ldr	r5, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x118>)
 8002fe6:	d164      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	070b      	lsls	r3, r1, #28
 8002fea:	d506      	bpl.n	8002ffa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fec:	68ab      	ldr	r3, [r5, #8]
 8002fee:	6922      	ldr	r2, [r4, #16]
 8002ff0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ff4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ff8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ffa:	f7ff fcff 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002ffe:	68ab      	ldr	r3, [r5, #8]
 8003000:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <HAL_RCC_ClockConfig+0x11c>)
 8003002:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	40d8      	lsrs	r0, r3
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_RCC_ClockConfig+0x120>)
 8003014:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_RCC_ClockConfig+0x124>)
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	f7fe be23 	b.w	8001c64 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	428b      	cmp	r3, r1
 8003030:	d1c1      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xa>
 8003032:	e7c9      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003034:	6862      	ldr	r2, [r4, #4]
 8003036:	4e23      	ldr	r6, [pc, #140]	; (80030c4 <HAL_RCC_ClockConfig+0x118>)
 8003038:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303c:	d11a      	bne.n	8003074 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003042:	d0b8      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003044:	68b3      	ldr	r3, [r6, #8]
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	4313      	orrs	r3, r2
 800304c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800304e:	f7fe fe4f 	bl	8001cf0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003052:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003056:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	68b3      	ldr	r3, [r6, #8]
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003064:	d0b3      	beq.n	8002fce <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003066:	f7fe fe43 	bl	8001cf0 <HAL_GetTick>
 800306a:	1bc0      	subs	r0, r0, r7
 800306c:	4540      	cmp	r0, r8
 800306e:	d9f3      	bls.n	8003058 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	e7a1      	b.n	8002fb8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003074:	2a02      	cmp	r2, #2
 8003076:	d102      	bne.n	800307e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003078:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800307c:	e7e1      	b.n	8003042 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800307e:	b912      	cbnz	r2, 8003086 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003080:	f013 0f02 	tst.w	r3, #2
 8003084:	e7dd      	b.n	8003042 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003086:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800308a:	e7da      	b.n	8003042 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_RCC_ClockConfig+0x118>)
 800308e:	68a0      	ldr	r0, [r4, #8]
 8003090:	6893      	ldr	r3, [r2, #8]
 8003092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003096:	4303      	orrs	r3, r0
 8003098:	6093      	str	r3, [r2, #8]
 800309a:	e79b      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	432b      	orrs	r3, r5
 80030a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	42ab      	cmp	r3, r5
 80030ae:	d182      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xa>
 80030b0:	e796      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b2:	68ab      	ldr	r3, [r5, #8]
 80030b4:	68e2      	ldr	r2, [r4, #12]
 80030b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60ab      	str	r3, [r5, #8]
 80030be:	e793      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40021000 	.word	0x40021000
 80030c8:	08019f68 	.word	0x08019f68
 80030cc:	20000074 	.word	0x20000074
 80030d0:	2000007c 	.word	0x2000007c

080030d4 <HAL_RCC_GetHCLKFreq>:
}
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <HAL_RCC_GetHCLKFreq+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000074 	.word	0x20000074

080030e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030e2:	4c42      	ldr	r4, [pc, #264]	; (80031ec <RCCEx_PLLSAI1_Config+0x10c>)
 80030e4:	68e2      	ldr	r2, [r4, #12]
 80030e6:	0793      	lsls	r3, r2, #30
{
 80030e8:	4605      	mov	r5, r0
 80030ea:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ec:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ee:	d029      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f0:	68e2      	ldr	r2, [r4, #12]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	4282      	cmp	r2, r0
 80030f8:	d13c      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x94>
       ||
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	d03a      	beq.n	8003174 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030fe:	68e3      	ldr	r3, [r4, #12]
       ||
 8003100:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003102:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003106:	3301      	adds	r3, #1
       ||
 8003108:	4293      	cmp	r3, r2
 800310a:	d133      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003112:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fdec 	bl	8001cf0 <HAL_GetTick>
 8003118:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	011a      	lsls	r2, r3, #4
 800311e:	d432      	bmi.n	8003186 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003120:	68aa      	ldr	r2, [r5, #8]
 8003122:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003124:	2e00      	cmp	r6, #0
 8003126:	d035      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003128:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312a:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800312c:	d14d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312e:	6929      	ldr	r1, [r5, #16]
 8003130:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003134:	0849      	lsrs	r1, r1, #1
 8003136:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800313a:	3901      	subs	r1, #1
 800313c:	4313      	orrs	r3, r2
 800313e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003142:	e031      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8003144:	2802      	cmp	r0, #2
 8003146:	d011      	beq.n	800316c <RCCEx_PLLSAI1_Config+0x8c>
 8003148:	2803      	cmp	r0, #3
 800314a:	d015      	beq.n	8003178 <RCCEx_PLLSAI1_Config+0x98>
 800314c:	2801      	cmp	r0, #1
 800314e:	d111      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	0797      	lsls	r7, r2, #30
 8003154:	d51d      	bpl.n	8003192 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003156:	68e2      	ldr	r2, [r4, #12]
 8003158:	6869      	ldr	r1, [r5, #4]
 800315a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800315e:	3901      	subs	r1, #1
 8003160:	ea42 0300 	orr.w	r3, r2, r0
 8003164:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003168:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 800316a:	e7cf      	b.n	800310c <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003172:	d1f0      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	e00c      	b.n	8003192 <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	0391      	lsls	r1, r2, #14
 800317c:	d4eb      	bmi.n	8003156 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003184:	e7f5      	b.n	8003172 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003186:	f7fe fdb3 	bl	8001cf0 <HAL_GetTick>
 800318a:	1bc0      	subs	r0, r0, r7
 800318c:	2802      	cmp	r0, #2
 800318e:	d9c4      	bls.n	800311a <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8003190:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	68e9      	ldr	r1, [r5, #12]
 8003198:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	0909      	lsrs	r1, r1, #4
 80031a2:	4313      	orrs	r3, r2
 80031a4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a8:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b0:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80031b2:	f7fe fd9d 	bl	8001cf0 <HAL_GetTick>
 80031b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	d510      	bpl.n	80031e0 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031be:	6923      	ldr	r3, [r4, #16]
 80031c0:	69aa      	ldr	r2, [r5, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	6123      	str	r3, [r4, #16]
 80031c6:	2000      	movs	r0, #0
  return status;
 80031c8:	e7e3      	b.n	8003192 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ca:	6969      	ldr	r1, [r5, #20]
 80031cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d0:	0849      	lsrs	r1, r1, #1
 80031d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d6:	3901      	subs	r1, #1
 80031d8:	4313      	orrs	r3, r2
 80031da:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80031de:	e7e3      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e0:	f7fe fd86 	bl	8001cf0 <HAL_GetTick>
 80031e4:	1b80      	subs	r0, r0, r6
 80031e6:	2802      	cmp	r0, #2
 80031e8:	d9e6      	bls.n	80031b8 <RCCEx_PLLSAI1_Config+0xd8>
 80031ea:	e7d1      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb0>
 80031ec:	40021000 	.word	0x40021000

080031f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031f2:	4c3b      	ldr	r4, [pc, #236]	; (80032e0 <RCCEx_PLLSAI2_Config+0xf0>)
 80031f4:	68e2      	ldr	r2, [r4, #12]
 80031f6:	0793      	lsls	r3, r2, #30
{
 80031f8:	4605      	mov	r5, r0
 80031fa:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031fc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fe:	d026      	beq.n	800324e <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003200:	68e2      	ldr	r2, [r4, #12]
 8003202:	f002 0203 	and.w	r2, r2, #3
 8003206:	4282      	cmp	r2, r0
 8003208:	d139      	bne.n	800327e <RCCEx_PLLSAI2_Config+0x8e>
       ||
 800320a:	2a00      	cmp	r2, #0
 800320c:	d037      	beq.n	800327e <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320e:	68e3      	ldr	r3, [r4, #12]
       ||
 8003210:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003212:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003216:	3301      	adds	r3, #1
       ||
 8003218:	4293      	cmp	r3, r2
 800321a:	d130      	bne.n	800327e <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003224:	f7fe fd64 	bl	8001cf0 <HAL_GetTick>
 8003228:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	d42f      	bmi.n	8003290 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003230:	68a9      	ldr	r1, [r5, #8]
 8003232:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003234:	b39e      	cbz	r6, 800329e <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003236:	6963      	ldr	r3, [r4, #20]
 8003238:	692a      	ldr	r2, [r5, #16]
 800323a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800323e:	0852      	lsrs	r2, r2, #1
 8003240:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003244:	3a01      	subs	r2, #1
 8003246:	430b      	orrs	r3, r1
 8003248:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800324c:	e031      	b.n	80032b2 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800324e:	2802      	cmp	r0, #2
 8003250:	d011      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0x86>
 8003252:	2803      	cmp	r0, #3
 8003254:	d015      	beq.n	8003282 <RCCEx_PLLSAI2_Config+0x92>
 8003256:	2801      	cmp	r0, #1
 8003258:	d111      	bne.n	800327e <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	0797      	lsls	r7, r2, #30
 800325e:	d51d      	bpl.n	800329c <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003260:	68e2      	ldr	r2, [r4, #12]
 8003262:	6869      	ldr	r1, [r5, #4]
 8003264:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003268:	3901      	subs	r1, #1
 800326a:	ea42 0300 	orr.w	r3, r2, r0
 800326e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003272:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003274:	e7d2      	b.n	800321c <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327c:	d1f0      	bne.n	8003260 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 800327e:	2001      	movs	r0, #1
 8003280:	e00c      	b.n	800329c <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	0391      	lsls	r1, r2, #14
 8003286:	d4eb      	bmi.n	8003260 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800328e:	e7f5      	b.n	800327c <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003290:	f7fe fd2e 	bl	8001cf0 <HAL_GetTick>
 8003294:	1bc0      	subs	r0, r0, r7
 8003296:	2802      	cmp	r0, #2
 8003298:	d9c7      	bls.n	800322a <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 800329a:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329e:	6963      	ldr	r3, [r4, #20]
 80032a0:	68ea      	ldr	r2, [r5, #12]
 80032a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032aa:	0912      	lsrs	r2, r2, #4
 80032ac:	430b      	orrs	r3, r1
 80032ae:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b2:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80032bc:	f7fe fd18 	bl	8001cf0 <HAL_GetTick>
 80032c0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	d505      	bpl.n	80032d4 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032c8:	6963      	ldr	r3, [r4, #20]
 80032ca:	696a      	ldr	r2, [r5, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6163      	str	r3, [r4, #20]
 80032d0:	2000      	movs	r0, #0
  return status;
 80032d2:	e7e3      	b.n	800329c <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d4:	f7fe fd0c 	bl	8001cf0 <HAL_GetTick>
 80032d8:	1b80      	subs	r0, r0, r6
 80032da:	2802      	cmp	r0, #2
 80032dc:	d9f1      	bls.n	80032c2 <RCCEx_PLLSAI2_Config+0xd2>
 80032de:	e7dc      	b.n	800329a <RCCEx_PLLSAI2_Config+0xaa>
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80032e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	6806      	ldr	r6, [r0, #0]
 80032ea:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80032ee:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f0:	d009      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80032f2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80032f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80032f8:	d022      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032fa:	d813      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032fc:	b331      	cbz	r1, 800334c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80032fe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003302:	d02a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003304:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	04d8      	lsls	r0, r3, #19
 800330a:	d509      	bpl.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800330c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800330e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003312:	d02c      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003314:	d826      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003316:	b381      	cbz	r1, 800337a <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003318:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800331c:	d072      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800331e:	2601      	movs	r6, #1
 8003320:	4635      	mov	r5, r6
 8003322:	e039      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003324:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003328:	d1ec      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800332c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800332e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003332:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003336:	430b      	orrs	r3, r1
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800333c:	2600      	movs	r6, #0
 800333e:	e7e2      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003340:	4a36      	ldr	r2, [pc, #216]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003342:	68d3      	ldr	r3, [r2, #12]
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800334a:	e7ee      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334c:	3004      	adds	r0, #4
 800334e:	f7ff fec7 	bl	80030e0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003352:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003354:	2800      	cmp	r0, #0
 8003356:	d1d6      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003358:	e7e7      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800335a:	2100      	movs	r1, #0
 800335c:	3020      	adds	r0, #32
 800335e:	f7ff ff47 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 8003362:	e7f6      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003364:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003368:	d1d9      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800336a:	4635      	mov	r5, r6
 800336c:	e009      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336e:	4a2b      	ldr	r2, [pc, #172]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003370:	68d3      	ldr	r3, [r2, #12]
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]
      break;
 8003378:	e7f7      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800337a:	1d20      	adds	r0, r4, #4
 800337c:	f7ff feb0 	bl	80030e0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003380:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003382:	2d00      	cmp	r5, #0
 8003384:	d144      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003386:	4a25      	ldr	r2, [pc, #148]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003388:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800338a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800338e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003392:	430b      	orrs	r3, r1
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	0399      	lsls	r1, r3, #14
 800339c:	f140 815d 	bpl.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a0:	4f1e      	ldr	r7, [pc, #120]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80033a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a4:	00da      	lsls	r2, r3, #3
 80033a6:	d435      	bmi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80033b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033ba:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033be:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8003420 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033c2:	f8d9 3000 	ldr.w	r3, [r9]
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80033ce:	f7fe fc8f 	bl	8001cf0 <HAL_GetTick>
 80033d2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d4:	f8d9 3000 	ldr.w	r3, [r9]
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	d523      	bpl.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80033dc:	bb4d      	cbnz	r5, 8003432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033e2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80033ea:	f040 810e 	bne.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033f2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003400:	4635      	mov	r5, r6
 8003402:	e016      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003404:	2100      	movs	r1, #0
 8003406:	f104 0020 	add.w	r0, r4, #32
 800340a:	f7ff fef1 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 800340e:	e7b7      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003410:	462e      	mov	r6, r5
 8003412:	e7c1      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8003414:	f04f 0800 	mov.w	r8, #0
 8003418:	e7d1      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xda>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fc64 	bl	8001cf0 <HAL_GetTick>
 8003428:	eba0 000a 	sub.w	r0, r0, sl
 800342c:	2802      	cmp	r0, #2
 800342e:	d9d1      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8003430:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8003432:	f1b8 0f00 	cmp.w	r8, #0
 8003436:	d003      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	07da      	lsls	r2, r3, #31
 8003444:	d508      	bpl.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003446:	499b      	ldr	r1, [pc, #620]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003448:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800344a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800344e:	f022 0203 	bic.w	r2, r2, #3
 8003452:	4302      	orrs	r2, r0
 8003454:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003458:	079f      	lsls	r7, r3, #30
 800345a:	d508      	bpl.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800345c:	4995      	ldr	r1, [pc, #596]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800345e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003460:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003464:	f022 020c 	bic.w	r2, r2, #12
 8003468:	4302      	orrs	r2, r0
 800346a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346e:	075e      	lsls	r6, r3, #29
 8003470:	d508      	bpl.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003472:	4990      	ldr	r1, [pc, #576]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003474:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003476:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800347a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800347e:	4302      	orrs	r2, r0
 8003480:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003484:	0718      	lsls	r0, r3, #28
 8003486:	d508      	bpl.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003488:	498a      	ldr	r1, [pc, #552]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800348a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800348c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003490:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003494:	4302      	orrs	r2, r0
 8003496:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800349a:	06d9      	lsls	r1, r3, #27
 800349c:	d508      	bpl.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349e:	4985      	ldr	r1, [pc, #532]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80034a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034aa:	4302      	orrs	r2, r0
 80034ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b0:	069a      	lsls	r2, r3, #26
 80034b2:	d508      	bpl.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b4:	497f      	ldr	r1, [pc, #508]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80034b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034c0:	4302      	orrs	r2, r0
 80034c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c6:	059f      	lsls	r7, r3, #22
 80034c8:	d508      	bpl.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ca:	497a      	ldr	r1, [pc, #488]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034cc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80034ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80034d6:	4302      	orrs	r2, r0
 80034d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034dc:	055e      	lsls	r6, r3, #21
 80034de:	d508      	bpl.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e0:	4974      	ldr	r1, [pc, #464]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80034e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80034ec:	4302      	orrs	r2, r0
 80034ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f2:	0658      	lsls	r0, r3, #25
 80034f4:	d508      	bpl.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f6:	496f      	ldr	r1, [pc, #444]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80034f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80034fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003502:	4302      	orrs	r2, r0
 8003504:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003508:	0619      	lsls	r1, r3, #24
 800350a:	d508      	bpl.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800350c:	4969      	ldr	r1, [pc, #420]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800350e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003510:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003514:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003518:	4302      	orrs	r2, r0
 800351a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800351e:	05da      	lsls	r2, r3, #23
 8003520:	d508      	bpl.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003522:	4964      	ldr	r1, [pc, #400]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800352a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800352e:	4302      	orrs	r2, r0
 8003530:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003534:	049b      	lsls	r3, r3, #18
 8003536:	d510      	bpl.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003538:	4a5e      	ldr	r2, [pc, #376]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800353a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800353c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003540:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003544:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003546:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800354a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800354e:	f040 8086 	bne.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003552:	68d3      	ldr	r3, [r2, #12]
 8003554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003558:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	031f      	lsls	r7, r3, #12
 800355e:	d50f      	bpl.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003562:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003568:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800356c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800356e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003572:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003576:	d17e      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	68d3      	ldr	r3, [r2, #12]
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	035e      	lsls	r6, r3, #13
 8003584:	d50f      	bpl.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003586:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003588:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800358a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800358e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003592:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003594:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800359c:	d176      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359e:	68d3      	ldr	r3, [r2, #12]
 80035a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	0458      	lsls	r0, r3, #17
 80035aa:	d512      	bpl.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ac:	4941      	ldr	r1, [pc, #260]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035ae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80035b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80035b8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ba:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035c2:	d16e      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035c4:	2102      	movs	r1, #2
 80035c6:	1d20      	adds	r0, r4, #4
 80035c8:	f7ff fd8a 	bl	80030e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	bf18      	it	ne
 80035d0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	0411      	lsls	r1, r2, #16
 80035d6:	d508      	bpl.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035d8:	4936      	ldr	r1, [pc, #216]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035da:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80035dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035e4:	4303      	orrs	r3, r0
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ea:	03d3      	lsls	r3, r2, #15
 80035ec:	d509      	bpl.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ee:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80035f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80035f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035fc:	430b      	orrs	r3, r1
 80035fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003602:	4628      	mov	r0, r5
 8003604:	b002      	add	sp, #8
 8003606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800360a:	429a      	cmp	r2, r3
 800360c:	f43f aeef 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003610:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003620:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003624:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800362c:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800362e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003632:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003636:	f57f aeda 	bpl.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 800363a:	f7fe fb59 	bl	8001cf0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003642:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003648:	0799      	lsls	r1, r3, #30
 800364a:	f53f aed0 	bmi.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fb4f 	bl	8001cf0 <HAL_GetTick>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	4548      	cmp	r0, r9
 8003656:	d9f5      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003658:	e6ea      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800365a:	4635      	mov	r5, r6
 800365c:	e6f0      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800365e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003662:	f47f af7a 	bne.w	800355a <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003666:	2101      	movs	r1, #1
 8003668:	1d20      	adds	r0, r4, #4
 800366a:	f7ff fd39 	bl	80030e0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800366e:	2800      	cmp	r0, #0
 8003670:	bf18      	it	ne
 8003672:	4605      	movne	r5, r0
 8003674:	e771      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003676:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800367a:	d181      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367c:	2101      	movs	r1, #1
 800367e:	1d20      	adds	r0, r4, #4
 8003680:	f7ff fd2e 	bl	80030e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003684:	2800      	cmp	r0, #0
 8003686:	bf18      	it	ne
 8003688:	4605      	movne	r5, r0
 800368a:	e779      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800368c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003690:	d189      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003692:	2101      	movs	r1, #1
 8003694:	1d20      	adds	r0, r4, #4
 8003696:	f7ff fd23 	bl	80030e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800369a:	2800      	cmp	r0, #0
 800369c:	bf18      	it	ne
 800369e:	4605      	movne	r5, r0
 80036a0:	e781      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036a2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80036a6:	d194      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036a8:	2102      	movs	r1, #2
 80036aa:	f104 0020 	add.w	r0, r4, #32
 80036ae:	f7ff fd9f 	bl	80031f0 <RCCEx_PLLSAI2_Config>
 80036b2:	e78b      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_DisableLSECSS+0x18>)
 80036ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036be:	f022 0220 	bic.w	r2, r2, #32
 80036c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	4770      	bx	lr
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	6013      	str	r3, [r2, #0]
}
 80036de:	4770      	bx	lr
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d12f      	bne.n	8003750 <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_TIM_Base_Start_IT+0x6c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d016      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d013      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 800370c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 8003714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 800371c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 8003724:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x4c>
 800372c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003730:	4293      	cmp	r3, r2
 8003732:	d107      	bne.n	8003744 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <HAL_TIM_Base_Start_IT+0x70>)
 8003738:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	2a06      	cmp	r2, #6
 800373c:	d006      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x64>
 800373e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003742:	d003      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2000      	movs	r0, #0
}
 800374e:	4770      	bx	lr
    return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	00010007 	.word	0x00010007

0800375c <HAL_TIM_OC_DelayElapsedCallback>:
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_IC_CaptureCallback>:
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003760:	4770      	bx	lr

08003762 <HAL_TIM_TriggerCallback>:
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003764:	6803      	ldr	r3, [r0, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	0791      	lsls	r1, r2, #30
{
 800376a:	b510      	push	{r4, lr}
 800376c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800376e:	d50f      	bpl.n	8003790 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	0792      	lsls	r2, r2, #30
 8003774:	d50c      	bpl.n	8003790 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003776:	f06f 0202 	mvn.w	r2, #2
 800377a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377c:	2201      	movs	r2, #1
 800377e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	0799      	lsls	r1, r3, #30
 8003784:	f000 8085 	beq.w	8003892 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003788:	f7ff ffe9 	bl	800375e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378c:	2300      	movs	r3, #0
 800378e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	0752      	lsls	r2, r2, #29
 8003796:	d510      	bpl.n	80037ba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	0750      	lsls	r0, r2, #29
 800379c:	d50d      	bpl.n	80037ba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800379e:	f06f 0204 	mvn.w	r2, #4
 80037a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a4:	2202      	movs	r2, #2
 80037a6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b0:	d075      	beq.n	800389e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	f7ff ffd4 	bl	800375e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	2300      	movs	r3, #0
 80037b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	0711      	lsls	r1, r2, #28
 80037c0:	d50f      	bpl.n	80037e2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	0712      	lsls	r2, r2, #28
 80037c6:	d50c      	bpl.n	80037e2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	2204      	movs	r2, #4
 80037d0:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	d067      	beq.n	80038aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	f7ff ffc0 	bl	800375e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	2300      	movs	r3, #0
 80037e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	06d0      	lsls	r0, r2, #27
 80037e8:	d510      	bpl.n	800380c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	06d1      	lsls	r1, r2, #27
 80037ee:	d50d      	bpl.n	800380c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f0:	f06f 0210 	mvn.w	r2, #16
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f6:	2208      	movs	r2, #8
 80037f8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003802:	d058      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003804:	f7ff ffab 	bl	800375e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003808:	2300      	movs	r3, #0
 800380a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	07d2      	lsls	r2, r2, #31
 8003812:	d508      	bpl.n	8003826 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	07d0      	lsls	r0, r2, #31
 8003818:	d505      	bpl.n	8003826 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381a:	f06f 0201 	mvn.w	r2, #1
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003820:	4620      	mov	r0, r4
 8003822:	f7fd fd3f 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	0611      	lsls	r1, r2, #24
 800382c:	d508      	bpl.n	8003840 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	0612      	lsls	r2, r2, #24
 8003832:	d505      	bpl.n	8003840 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383a:	4620      	mov	r0, r4
 800383c:	f000 f8d9 	bl	80039f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	05d0      	lsls	r0, r2, #23
 8003846:	d508      	bpl.n	800385a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	0611      	lsls	r1, r2, #24
 800384c:	d505      	bpl.n	800385a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800384e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003854:	4620      	mov	r0, r4
 8003856:	f000 f8cd 	bl	80039f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	d508      	bpl.n	8003874 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	0650      	lsls	r0, r2, #25
 8003866:	d505      	bpl.n	8003874 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff ff77 	bl	8003762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	0691      	lsls	r1, r2, #26
 800387a:	d522      	bpl.n	80038c2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	0692      	lsls	r2, r2, #26
 8003880:	d51f      	bpl.n	80038c2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003882:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003886:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003888:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800388e:	f000 b8af 	b.w	80039f0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	f7ff ff63 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff ff62 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 800389c:	e776      	b.n	800378c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	f7ff ff5d 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff5c 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 80038a8:	e785      	b.n	80037b6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	f7ff ff57 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff ff56 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 80038b4:	e793      	b.n	80037de <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	f7ff ff51 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7ff ff50 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 80038c0:	e7a2      	b.n	8003808 <HAL_TIM_IRQHandler+0xa4>
}
 80038c2:	bd10      	pop	{r4, pc}

080038c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80038c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c8:	4290      	cmp	r0, r2
 80038ca:	d012      	beq.n	80038f2 <TIM_Base_SetConfig+0x2e>
 80038cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0x2e>
 80038d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80038d6:	4290      	cmp	r0, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x2e>
 80038da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038de:	4290      	cmp	r0, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x2e>
 80038e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038e6:	4290      	cmp	r0, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x2e>
 80038ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80038ee:	4290      	cmp	r0, r2
 80038f0:	d119      	bne.n	8003926 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80038f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	4a23      	ldr	r2, [pc, #140]	; (8003988 <TIM_Base_SetConfig+0xc4>)
 80038fc:	4290      	cmp	r0, r2
 80038fe:	d01d      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 8003900:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003904:	d01a      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 8003906:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800390a:	4290      	cmp	r0, r2
 800390c:	d016      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 800390e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003912:	4290      	cmp	r0, r2
 8003914:	d012      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 8003916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800391a:	4290      	cmp	r0, r2
 800391c:	d00e      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 800391e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003922:	4290      	cmp	r0, r2
 8003924:	d00a      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 8003926:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_Base_SetConfig+0xc8>)
 8003928:	4290      	cmp	r0, r2
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 800392c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003930:	4290      	cmp	r0, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x78>
 8003934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003938:	4290      	cmp	r0, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	694a      	ldr	r2, [r1, #20]
 8003946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800394c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394e:	688b      	ldr	r3, [r1, #8]
 8003950:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003952:	680b      	ldr	r3, [r1, #0]
 8003954:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <TIM_Base_SetConfig+0xc4>)
 8003958:	4298      	cmp	r0, r3
 800395a:	d00f      	beq.n	800397c <TIM_Base_SetConfig+0xb8>
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	4298      	cmp	r0, r3
 8003962:	d00b      	beq.n	800397c <TIM_Base_SetConfig+0xb8>
 8003964:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003968:	4298      	cmp	r0, r3
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0xb8>
 800396c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003970:	4298      	cmp	r0, r3
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0xb8>
 8003974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003978:	4298      	cmp	r0, r3
 800397a:	d101      	bne.n	8003980 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003980:	2301      	movs	r3, #1
 8003982:	6143      	str	r3, [r0, #20]
}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000

08003990 <HAL_TIM_Base_Init>:
{
 8003990:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003992:	4604      	mov	r4, r0
 8003994:	b350      	cbz	r0, 80039ec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800399a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800399e:	b91b      	cbnz	r3, 80039a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039a4:	f7ff fe9e 	bl	80036e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039aa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b0:	1d21      	adds	r1, r4, #4
 80039b2:	f7ff ff87 	bl	80038c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80039bc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80039c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80039ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80039e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80039ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039ec:	2001      	movs	r0, #1
 80039ee:	e7fc      	b.n	80039ea <HAL_TIM_Base_Init+0x5a>

080039f0 <HAL_TIMEx_CommutCallback>:
 80039f0:	4770      	bx	lr

080039f2 <HAL_TIMEx_BreakCallback>:
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_Break2Callback>:
 80039f4:	4770      	bx	lr
	...

080039f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f8:	b084      	sub	sp, #16
 80039fa:	b510      	push	{r4, lr}
 80039fc:	4604      	mov	r4, r0
 80039fe:	a803      	add	r0, sp, #12
 8003a00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a04:	68e3      	ldr	r3, [r4, #12]
 8003a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0a:	60e3      	str	r3, [r4, #12]
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <USB_CoreInit+0x58>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	d017      	beq.n	8003a42 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a12:	6922      	ldr	r2, [r4, #16]
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	dafa      	bge.n	8003a0e <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a18:	6923      	ldr	r3, [r4, #16]
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6123      	str	r3, [r4, #16]
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <USB_CoreInit+0x58>)

  do
  {
    if (++count > 200000U)
 8003a22:	3b01      	subs	r3, #1
 8003a24:	d00d      	beq.n	8003a42 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a26:	6920      	ldr	r0, [r4, #16]
 8003a28:	f010 0001 	ands.w	r0, r0, #1
 8003a2c:	d1f9      	bne.n	8003a22 <USB_CoreInit+0x2a>
  if (cfg.battery_charging_enable == 0U)
 8003a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a30:	b94b      	cbnz	r3, 8003a46 <USB_CoreInit+0x4e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a38:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a3e:	b004      	add	sp, #16
 8003a40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003a42:	2003      	movs	r0, #3
 8003a44:	e7f3      	b.n	8003a2e <USB_CoreInit+0x36>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	e7f4      	b.n	8003a38 <USB_CoreInit+0x40>
 8003a4e:	bf00      	nop
 8003a50:	00030d41 	.word	0x00030d41

08003a54 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003a54:	2a02      	cmp	r2, #2
 8003a56:	d14a      	bne.n	8003aee <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <USB_SetTurnaroundTime+0xa4>)
 8003a5a:	4a28      	ldr	r2, [pc, #160]	; (8003afc <USB_SetTurnaroundTime+0xa8>)
 8003a5c:	440b      	add	r3, r1
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d939      	bls.n	8003ad6 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <USB_SetTurnaroundTime+0xac>)
 8003a64:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <USB_SetTurnaroundTime+0xb0>)
 8003a66:	440b      	add	r3, r1
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d936      	bls.n	8003ada <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a6c:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <USB_SetTurnaroundTime+0xb4>)
 8003a6e:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003a72:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d931      	bls.n	8003ade <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a7a:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <USB_SetTurnaroundTime+0xb8>)
 8003a7c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003a80:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d32c      	bcc.n	8003ae2 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <USB_SetTurnaroundTime+0xbc>)
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <USB_SetTurnaroundTime+0xc0>)
 8003a8c:	440b      	add	r3, r1
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d929      	bls.n	8003ae6 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <USB_SetTurnaroundTime+0xc4>)
 8003a94:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <USB_SetTurnaroundTime+0xc8>)
 8003a96:	440b      	add	r3, r1
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d326      	bcc.n	8003aea <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <USB_SetTurnaroundTime+0xcc>)
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <USB_SetTurnaroundTime+0xd0>)
 8003aa0:	440b      	add	r3, r1
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d323      	bcc.n	8003aee <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003aa6:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <USB_SetTurnaroundTime+0xd4>)
 8003aa8:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8003aac:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d31e      	bcc.n	8003af2 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 8003ab6:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ab8:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bf34      	ite	cc
 8003abe:	2307      	movcc	r3, #7
 8003ac0:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ac2:	68c2      	ldr	r2, [r0, #12]
 8003ac4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003ac8:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003aca:	68c2      	ldr	r2, [r0, #12]
 8003acc:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003ad0:	60c3      	str	r3, [r0, #12]
}
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	4770      	bx	lr
      UsbTrd = 0xFU;
 8003ad6:	230f      	movs	r3, #15
 8003ad8:	e7f3      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8003ada:	230e      	movs	r3, #14
 8003adc:	e7f1      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8003ade:	230d      	movs	r3, #13
 8003ae0:	e7ef      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	e7ed      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8003ae6:	230b      	movs	r3, #11
 8003ae8:	e7eb      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8003aea:	230a      	movs	r3, #10
 8003aec:	e7e9      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003aee:	2309      	movs	r3, #9
 8003af0:	e7e7      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8003af2:	2308      	movs	r3, #8
 8003af4:	e7e5      	b.n	8003ac2 <USB_SetTurnaroundTime+0x6e>
 8003af6:	bf00      	nop
 8003af8:	ff275340 	.word	0xff275340
 8003afc:	000c34ff 	.word	0x000c34ff
 8003b00:	ff1b1e40 	.word	0xff1b1e40
 8003b04:	000f423f 	.word	0x000f423f
 8003b08:	00124f7f 	.word	0x00124f7f
 8003b0c:	0013d620 	.word	0x0013d620
 8003b10:	fee5b660 	.word	0xfee5b660
 8003b14:	0016e35f 	.word	0x0016e35f
 8003b18:	feced300 	.word	0xfeced300
 8003b1c:	001b7740 	.word	0x001b7740
 8003b20:	feb35bc0 	.word	0xfeb35bc0
 8003b24:	002191c0 	.word	0x002191c0
 8003b28:	00387520 	.word	0x00387520
 8003b2c:	fe5954e0 	.word	0xfe5954e0
 8003b30:	00419ce0 	.word	0x00419ce0

08003b34 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b34:	6883      	ldr	r3, [r0, #8]
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6083      	str	r3, [r0, #8]
}
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4770      	bx	lr

08003b40 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b40:	6883      	ldr	r3, [r0, #8]
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6083      	str	r3, [r0, #8]
}
 8003b48:	2000      	movs	r0, #0
 8003b4a:	4770      	bx	lr

08003b4c <USB_SetCurrentMode>:
{
 8003b4c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b4e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b50:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b52:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b56:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003b58:	d108      	bne.n	8003b6c <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b5a:	68c3      	ldr	r3, [r0, #12]
 8003b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b60:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003b62:	2032      	movs	r0, #50	; 0x32
 8003b64:	f7fe f8ca 	bl	8001cfc <HAL_Delay>
  return HAL_OK;
 8003b68:	2000      	movs	r0, #0
}
 8003b6a:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003b6c:	b919      	cbnz	r1, 8003b76 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b6e:	68c3      	ldr	r3, [r0, #12]
 8003b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b74:	e7f4      	b.n	8003b60 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	e7f7      	b.n	8003b6a <USB_SetCurrentMode+0x1e>
	...

08003b7c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b7c:	0189      	lsls	r1, r1, #6
 8003b7e:	f041 0120 	orr.w	r1, r1, #32
 8003b82:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <USB_FlushTxFifo+0x20>)
 8003b84:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003b86:	3a01      	subs	r2, #1
 8003b88:	d005      	beq.n	8003b96 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b8a:	6903      	ldr	r3, [r0, #16]
 8003b8c:	f013 0320 	ands.w	r3, r3, #32
 8003b90:	d1f9      	bne.n	8003b86 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003b92:	4618      	mov	r0, r3
 8003b94:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b96:	2003      	movs	r0, #3
}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	00030d41 	.word	0x00030d41

08003ba0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <USB_FlushRxFifo+0x1c>)
 8003ba4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	d005      	beq.n	8003bb6 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003baa:	6903      	ldr	r3, [r0, #16]
 8003bac:	f013 0310 	ands.w	r3, r3, #16
 8003bb0:	d1f9      	bne.n	8003ba6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003bb6:	2003      	movs	r0, #3
}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	00030d41 	.word	0x00030d41

08003bc0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003bc0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003bc4:	4319      	orrs	r1, r3
 8003bc6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	4770      	bx	lr
	...

08003bd0 <USB_DevInit>:
{
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	a809      	add	r0, sp, #36	; 0x24
 8003bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003bde:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8003be4:	4619      	mov	r1, r3
 8003be6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003bea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003bee:	3301      	adds	r3, #1
 8003bf0:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003bf2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003bf4:	d1f7      	bne.n	8003be6 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bf6:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003bfa:	2f00      	cmp	r7, #0
 8003bfc:	d164      	bne.n	8003cc8 <USB_DevInit+0xf8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bfe:	6873      	ldr	r3, [r6, #4]
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c14:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003c1e:	2500      	movs	r5, #0
 8003c20:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c24:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003c28:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c2c:	2103      	movs	r1, #3
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ffc6 	bl	8003bc0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c34:	2110      	movs	r1, #16
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff ffa0 	bl	8003b7c <USB_FlushTxFifo>
 8003c3c:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff ffae 	bl	8003ba0 <USB_FlushRxFifo>
 8003c44:	4308      	orrs	r0, r1
 8003c46:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 8003c48:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 8003c4a:	6135      	str	r5, [r6, #16]
    ret = HAL_ERROR;
 8003c4c:	bf18      	it	ne
 8003c4e:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8003c50:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c52:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003c56:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c58:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c5a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c5e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c62:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c66:	4545      	cmp	r5, r8
 8003c68:	d133      	bne.n	8003cd2 <USB_DevInit+0x102>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c70:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c72:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c76:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c7a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7e:	4542      	cmp	r2, r8
 8003c80:	d139      	bne.n	8003cf6 <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c82:	6933      	ldr	r3, [r6, #16]
 8003c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c88:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c8e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003c92:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c94:	69a3      	ldr	r3, [r4, #24]
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c9c:	69a2      	ldr	r2, [r4, #24]
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <USB_DevInit+0x14c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ca6:	b11b      	cbz	r3, 8003cb0 <USB_DevInit+0xe0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ca8:	69a3      	ldr	r3, [r4, #24]
 8003caa:	f043 0308 	orr.w	r3, r3, #8
 8003cae:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003cb0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cb2:	bf01      	itttt	eq
 8003cb4:	69a3      	ldreq	r3, [r4, #24]
 8003cb6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003cba:	f043 0304 	orreq.w	r3, r3, #4
 8003cbe:	61a3      	streq	r3, [r4, #24]
}
 8003cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	b004      	add	sp, #16
 8003cc6:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cce:	63a3      	str	r3, [r4, #56]	; 0x38
 8003cd0:	e7a5      	b.n	8003c1e <USB_DevInit+0x4e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cd2:	f8d3 9000 	ldr.w	r9, [r3]
 8003cd6:	f1b9 0f00 	cmp.w	r9, #0
 8003cda:	da0a      	bge.n	8003cf2 <USB_DevInit+0x122>
      if (i == 0U)
 8003cdc:	b93d      	cbnz	r5, 8003cee <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cde:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ce2:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce4:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ce6:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cea:	3320      	adds	r3, #32
 8003cec:	e7bb      	b.n	8003c66 <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cee:	6019      	str	r1, [r3, #0]
 8003cf0:	e7f7      	b.n	8003ce2 <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e7f5      	b.n	8003ce2 <USB_DevInit+0x112>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf6:	f8d3 9000 	ldr.w	r9, [r3]
 8003cfa:	f1b9 0f00 	cmp.w	r9, #0
 8003cfe:	da0a      	bge.n	8003d16 <USB_DevInit+0x146>
      if (i == 0U)
 8003d00:	b93a      	cbnz	r2, 8003d12 <USB_DevInit+0x142>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d02:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d06:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d08:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d0a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0e:	3320      	adds	r3, #32
 8003d10:	e7b5      	b.n	8003c7e <USB_DevInit+0xae>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d12:	601d      	str	r5, [r3, #0]
 8003d14:	e7f7      	b.n	8003d06 <USB_DevInit+0x136>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d16:	6019      	str	r1, [r3, #0]
 8003d18:	e7f5      	b.n	8003d06 <USB_DevInit+0x136>
 8003d1a:	bf00      	nop
 8003d1c:	803c3800 	.word	0x803c3800

08003d20 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d20:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
    speed = 0xFU;
 8003d24:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d28:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 8003d2c:	bf14      	ite	ne
 8003d2e:	2002      	movne	r0, #2
 8003d30:	200f      	moveq	r0, #15
 8003d32:	4770      	bx	lr

08003d34 <USB_ActivateEndpoint>:
{
 8003d34:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003d36:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f004 050f 	and.w	r5, r4, #15
 8003d3e:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 8003d40:	784d      	ldrb	r5, [r1, #1]
 8003d42:	2d01      	cmp	r5, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d44:	f500 6300 	add.w	r3, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d48:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
 8003d4c:	d119      	bne.n	8003d82 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d4e:	69dd      	ldr	r5, [r3, #28]
 8003d50:	432a      	orrs	r2, r5
 8003d52:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	d410      	bmi.n	8003d7e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d5c:	688a      	ldr	r2, [r1, #8]
 8003d5e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8003d62:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d66:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d68:	432b      	orrs	r3, r5
 8003d6a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003d6e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003d7e:	2000      	movs	r0, #0
 8003d80:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d82:	69dc      	ldr	r4, [r3, #28]
 8003d84:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003d88:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	d4f5      	bmi.n	8003d7e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d92:	688b      	ldr	r3, [r1, #8]
 8003d94:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9c:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8003d9e:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003da0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003db0:	e7e5      	b.n	8003d7e <USB_ActivateEndpoint+0x4a>
	...

08003db4 <USB_DeactivateEndpoint>:
{
 8003db4:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003db6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003db8:	7849      	ldrb	r1, [r1, #1]
 8003dba:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dbc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003dc0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003dc4:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 8003dc8:	d122      	bne.n	8003e10 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dca:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003dce:	2900      	cmp	r1, #0
 8003dd0:	da0b      	bge.n	8003dea <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dd2:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003dd6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003dda:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dde:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003de2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003de6:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f202 	lsl.w	r2, r1, r2
 8003df2:	ea24 0402 	bic.w	r4, r4, r2
 8003df6:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003df8:	69c1      	ldr	r1, [r0, #28]
 8003dfa:	ea21 0202 	bic.w	r2, r1, r2
 8003dfe:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e00:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <USB_DeactivateEndpoint+0xa4>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e10:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e14:	2900      	cmp	r1, #0
 8003e16:	da0b      	bge.n	8003e30 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e18:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e1c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003e20:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e24:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e28:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003e2c:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e30:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003e32:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	ea24 0402 	bic.w	r4, r4, r2
 8003e3e:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e40:	69c1      	ldr	r1, [r0, #28]
 8003e42:	ea21 0202 	bic.w	r2, r1, r2
 8003e46:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e48:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003e4c:	4a03      	ldr	r2, [pc, #12]	; (8003e5c <USB_DeactivateEndpoint+0xa8>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003e54:	e7da      	b.n	8003e0c <USB_DeactivateEndpoint+0x58>
 8003e56:	bf00      	nop
 8003e58:	ec337800 	.word	0xec337800
 8003e5c:	eff37800 	.word	0xeff37800

08003e60 <USB_EP0StartXfer>:
{
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003e62:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003e64:	780d      	ldrb	r5, [r1, #0]
    if (ep->xfer_len == 0U)
 8003e66:	694e      	ldr	r6, [r1, #20]
 8003e68:	4f2d      	ldr	r7, [pc, #180]	; (8003f20 <USB_EP0StartXfer+0xc0>)
 8003e6a:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003f24 <USB_EP0StartXfer+0xc4>
  if (ep->is_in == 1U)
 8003e6e:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e70:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 8003e74:	d134      	bne.n	8003ee0 <USB_EP0StartXfer+0x80>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e76:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003e7a:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0U)
 8003e7c:	b9e6      	cbnz	r6, 8003eb8 <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e7e:	403a      	ands	r2, r7
 8003e80:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e88:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	ea02 020c 	and.w	r2, r2, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e90:	611a      	str	r2, [r3, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e92:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e9a:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8003e9e:	694b      	ldr	r3, [r1, #20]
 8003ea0:	b143      	cbz	r3, 8003eb4 <USB_EP0StartXfer+0x54>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ea2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003ea6:	f005 050f 	and.w	r5, r5, #15
 8003eaa:	2301      	movs	r3, #1
 8003eac:	40ab      	lsls	r3, r5
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb8:	ea02 020c 	and.w	r2, r2, ip
 8003ebc:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	403a      	ands	r2, r7
 8003ec2:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003ec4:	688a      	ldr	r2, [r1, #8]
 8003ec6:	42b2      	cmp	r2, r6
        ep->xfer_len = ep->maxpacket;
 8003ec8:	bf38      	it	cc
 8003eca:	614a      	strcc	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ed2:	611a      	str	r2, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ed4:	694a      	ldr	r2, [r1, #20]
 8003ed6:	691e      	ldr	r6, [r3, #16]
 8003ed8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003edc:	4332      	orrs	r2, r6
 8003ede:	e7d7      	b.n	8003e90 <USB_EP0StartXfer+0x30>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ee0:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8003ee4:	ea02 020c 	and.w	r2, r2, ip
 8003ee8:	f8c4 2b10 	str.w	r2, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003eec:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 8003ef0:	403a      	ands	r2, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ef2:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ef6:	611a      	str	r2, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003ef8:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8003efa:	b106      	cbz	r6, 8003efe <USB_EP0StartXfer+0x9e>
      ep->xfer_len = ep->maxpacket;
 8003efc:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003efe:	6919      	ldr	r1, [r3, #16]
 8003f00:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8003f04:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f06:	6919      	ldr	r1, [r3, #16]
 8003f08:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f10:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f18:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003f1c:	e7ca      	b.n	8003eb4 <USB_EP0StartXfer+0x54>
 8003f1e:	bf00      	nop
 8003f20:	e007ffff 	.word	0xe007ffff
 8003f24:	fff80000 	.word	0xfff80000

08003f28 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8003f28:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f2a:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 8003f2c:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f2e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003f32:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 8003f36:	4299      	cmp	r1, r3
 8003f38:	d101      	bne.n	8003f3e <USB_WritePacket+0x16>
}
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f3e:	f851 2b04 	ldr.w	r2, [r1], #4
 8003f42:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 8003f44:	e7f7      	b.n	8003f36 <USB_WritePacket+0xe>
	...

08003f48 <USB_EPStartXfer>:
{
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8003f4a:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4c:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 8003f4e:	694b      	ldr	r3, [r1, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003f50:	78ce      	ldrb	r6, [r1, #3]
 8003f52:	4f53      	ldr	r7, [pc, #332]	; (80040a0 <USB_EPStartXfer+0x158>)
 8003f54:	f8df c150 	ldr.w	ip, [pc, #336]	; 80040a8 <USB_EPStartXfer+0x160>
  if (ep->is_in == 1U)
 8003f58:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f5a:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8003f5e:	d15e      	bne.n	800401e <USB_EPStartXfer+0xd6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f60:	f505 6410 	add.w	r4, r5, #2304	; 0x900
 8003f64:	f8d4 e010 	ldr.w	lr, [r4, #16]
    if (ep->xfer_len == 0U)
 8003f68:	b9f3      	cbnz	r3, 8003fa8 <USB_EPStartXfer+0x60>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f6a:	ea0e 0707 	and.w	r7, lr, r7
 8003f6e:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f70:	6927      	ldr	r7, [r4, #16]
 8003f72:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8003f76:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f78:	6927      	ldr	r7, [r4, #16]
 8003f7a:	ea07 070c 	and.w	r7, r7, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f7e:	6127      	str	r7, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f80:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8003f84:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f86:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003f8a:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8003f8e:	d034      	beq.n	8003ffa <USB_EPStartXfer+0xb2>
      if (ep->xfer_len > 0U)
 8003f90:	b143      	cbz	r3, 8003fa4 <USB_EPStartXfer+0x5c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f92:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003f96:	f002 010f 	and.w	r1, r2, #15
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	408a      	lsls	r2, r1
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa8:	ea0e 0c0c 	and.w	ip, lr, ip
 8003fac:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb0:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003fb4:	ea0c 0707 	and.w	r7, ip, r7
 8003fb8:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003fba:	688f      	ldr	r7, [r1, #8]
 8003fbc:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003fc0:	eb07 0c03 	add.w	ip, r7, r3
 8003fc4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003fc8:	fbbc fcf7 	udiv	ip, ip, r7
 8003fcc:	4f35      	ldr	r7, [pc, #212]	; (80040a4 <USB_EPStartXfer+0x15c>)
 8003fce:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8003fd2:	ea47 070e 	orr.w	r7, r7, lr
 8003fd6:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fd8:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003fdc:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8003fe0:	ea47 070c 	orr.w	r7, r7, ip
      if (ep->type == EP_TYPE_ISOC)
 8003fe4:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fe6:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003fe8:	d1ca      	bne.n	8003f80 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fea:	6927      	ldr	r7, [r4, #16]
 8003fec:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8003ff0:	6127      	str	r7, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ff2:	6927      	ldr	r7, [r4, #16]
 8003ff4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8003ff8:	e7c1      	b.n	8003f7e <USB_EPStartXfer+0x36>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ffa:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003ffe:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004000:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004004:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8004008:	bf0c      	ite	eq
 800400a:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800400e:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8004012:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004016:	b29b      	uxth	r3, r3
 8004018:	f7ff ff86 	bl	8003f28 <USB_WritePacket>
 800401c:	e7c2      	b.n	8003fa4 <USB_EPStartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800401e:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004022:	6889      	ldr	r1, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004024:	ea04 040c 	and.w	r4, r4, ip
 8004028:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800402c:	f8d5 4b10 	ldr.w	r4, [r5, #2832]	; 0xb10
 8004030:	403c      	ands	r4, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004032:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004036:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 8004038:	b9f3      	cbnz	r3, 8004078 <USB_EPStartXfer+0x130>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800403a:	6913      	ldr	r3, [r2, #16]
 800403c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8004040:	4319      	orrs	r1, r3
 8004042:	6111      	str	r1, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004044:	6913      	ldr	r3, [r2, #16]
 8004046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (ep->type == EP_TYPE_ISOC)
 800404a:	2e01      	cmp	r6, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800404c:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800404e:	d10c      	bne.n	800406a <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004050:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004054:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004058:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800405c:	bf0c      	ite	eq
 800405e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004062:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8004066:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800406a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800406e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004072:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 8004076:	e795      	b.n	8003fa4 <USB_EPStartXfer+0x5c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004078:	4f0a      	ldr	r7, [pc, #40]	; (80040a4 <USB_EPStartXfer+0x15c>)
 800407a:	f8d2 c010 	ldr.w	ip, [r2, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800407e:	440b      	add	r3, r1
 8004080:	3b01      	subs	r3, #1
 8004082:	fbb3 f3f1 	udiv	r3, r3, r1
 8004086:	b29c      	uxth	r4, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004088:	ea07 43c3 	and.w	r3, r7, r3, lsl #19
 800408c:	ea43 030c 	orr.w	r3, r3, ip
 8004090:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004092:	6917      	ldr	r7, [r2, #16]
 8004094:	fb01 f304 	mul.w	r3, r1, r4
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	433b      	orrs	r3, r7
 800409e:	e7d4      	b.n	800404a <USB_EPStartXfer+0x102>
 80040a0:	e007ffff 	.word	0xe007ffff
 80040a4:	1ff80000 	.word	0x1ff80000
 80040a8:	fff80000 	.word	0xfff80000

080040ac <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80040ac:	3203      	adds	r2, #3
 80040ae:	0892      	lsrs	r2, r2, #2
 80040b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040b4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80040b8:	4291      	cmp	r1, r2
 80040ba:	d101      	bne.n	80040c0 <USB_ReadPacket+0x14>
}
 80040bc:	4608      	mov	r0, r1
 80040be:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040c0:	6803      	ldr	r3, [r0, #0]
 80040c2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80040c6:	e7f7      	b.n	80040b8 <USB_ReadPacket+0xc>

080040c8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80040c8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80040ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80040cc:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040ce:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80040d2:	d112      	bne.n	80040fa <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040d4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80040d8:	2a00      	cmp	r2, #0
 80040da:	db06      	blt.n	80040ea <USB_EPSetStall+0x22>
 80040dc:	b12b      	cbz	r3, 80040ea <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80040f6:	2000      	movs	r0, #0
 80040f8:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040fa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80040fe:	2a00      	cmp	r2, #0
 8004100:	db06      	blt.n	8004110 <USB_EPSetStall+0x48>
 8004102:	b12b      	cbz	r3, 8004110 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004104:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800410c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004110:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004118:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800411c:	e7eb      	b.n	80040f6 <USB_EPSetStall+0x2e>

0800411e <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800411e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004120:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004122:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004126:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 8004128:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800412a:	f1a3 0302 	sub.w	r3, r3, #2
 800412e:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8004130:	d10f      	bne.n	8004152 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004132:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004136:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004138:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800413c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004140:	d805      	bhi.n	800414e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004142:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800414e:	2000      	movs	r0, #0
 8004150:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004152:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004156:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800415a:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800415c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004160:	bf9e      	ittt	ls
 8004162:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8004166:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800416a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800416e:	e7ee      	b.n	800414e <USB_EPClearStall+0x30>

08004170 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004170:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004174:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004178:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800417c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004180:	0109      	lsls	r1, r1, #4
 8004182:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004186:	4319      	orrs	r1, r3
 8004188:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800418c:	2000      	movs	r0, #0
 800418e:	4770      	bx	lr

08004190 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004190:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004194:	f023 0303 	bic.w	r3, r3, #3
 8004198:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800419c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80041a8:	2000      	movs	r0, #0
 80041aa:	4770      	bx	lr

080041ac <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ac:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80041c4:	2000      	movs	r0, #0
 80041c6:	4770      	bx	lr

080041c8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80041c8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80041ca:	6980      	ldr	r0, [r0, #24]
}
 80041cc:	4010      	ands	r0, r2
 80041ce:	4770      	bx	lr

080041d0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041d0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041d4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041d8:	69c0      	ldr	r0, [r0, #28]
 80041da:	4018      	ands	r0, r3
}
 80041dc:	0c00      	lsrs	r0, r0, #16
 80041de:	4770      	bx	lr

080041e0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041e4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041e8:	69c0      	ldr	r0, [r0, #28]
 80041ea:	4018      	ands	r0, r3
}
 80041ec:	b280      	uxth	r0, r0
 80041ee:	4770      	bx	lr

080041f0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041fc:	6940      	ldr	r0, [r0, #20]
}
 80041fe:	4010      	ands	r0, r2
 8004200:	4770      	bx	lr

08004202 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004202:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004206:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800420a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800420e:	f001 010f 	and.w	r1, r1, #15
 8004212:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004214:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004218:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800421a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4313      	orrs	r3, r2
}
 8004220:	4018      	ands	r0, r3
 8004222:	4770      	bx	lr

08004224 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004224:	6940      	ldr	r0, [r0, #20]
}
 8004226:	f000 0001 	and.w	r0, r0, #1
 800422a:	4770      	bx	lr

0800422c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800422c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004234:	f023 0307 	bic.w	r3, r3, #7
 8004238:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800423c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004248:	2000      	movs	r0, #0
 800424a:	4770      	bx	lr

0800424c <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800424c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <USB_EP0_OutStart+0x34>)
 8004250:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004252:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004256:	d903      	bls.n	8004260 <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004258:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800425c:	2a00      	cmp	r2, #0
 800425e:	db0d      	blt.n	800427c <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800426a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	f042 0218 	orr.w	r2, r2, #24
 8004272:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800427a:	611a      	str	r2, [r3, #16]
}
 800427c:	2000      	movs	r0, #0
 800427e:	4770      	bx	lr
 8004280:	4f54300a 	.word	0x4f54300a

08004284 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004284:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004286:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800428a:	b184      	cbz	r4, 80042ae <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800428c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004290:	b15b      	cbz	r3, 80042aa <USBD_CDC_EP0_RxReady+0x26>
 8004292:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004296:	28ff      	cmp	r0, #255	; 0xff
 8004298:	d007      	beq.n	80042aa <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80042a0:	4621      	mov	r1, r4
 80042a2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80042a4:	23ff      	movs	r3, #255	; 0xff
 80042a6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80042aa:	2000      	movs	r0, #0
 80042ac:	e000      	b.n	80042b0 <USBD_CDC_EP0_RxReady+0x2c>
    return (uint8_t)USBD_FAIL;
 80042ae:	2003      	movs	r0, #3
}
 80042b0:	bd10      	pop	{r4, pc}
	...

080042b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80042b4:	2343      	movs	r3, #67	; 0x43
 80042b6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80042b8:	4800      	ldr	r0, [pc, #0]	; (80042bc <USBD_CDC_GetFSCfgDesc+0x8>)
 80042ba:	4770      	bx	lr
 80042bc:	20000080 	.word	0x20000080

080042c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80042c0:	2343      	movs	r3, #67	; 0x43
 80042c2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80042c4:	4800      	ldr	r0, [pc, #0]	; (80042c8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80042c6:	4770      	bx	lr
 80042c8:	200000c4 	.word	0x200000c4

080042cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80042cc:	2343      	movs	r3, #67	; 0x43
 80042ce:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80042d0:	4800      	ldr	r0, [pc, #0]	; (80042d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80042d2:	4770      	bx	lr
 80042d4:	20000108 	.word	0x20000108

080042d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80042d8:	230a      	movs	r3, #10
 80042da:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80042dc:	4800      	ldr	r0, [pc, #0]	; (80042e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80042de:	4770      	bx	lr
 80042e0:	2000014c 	.word	0x2000014c

080042e4 <USBD_CDC_DataOut>:
{
 80042e4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042e6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 80042ea:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 80042ec:	b16c      	cbz	r4, 800430a <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042ee:	f7fd fc17 	bl	8001b20 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042f2:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042f6:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004300:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004304:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004306:	2000      	movs	r0, #0
}
 8004308:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800430a:	2003      	movs	r0, #3
 800430c:	e7fc      	b.n	8004308 <USBD_CDC_DataOut+0x24>

0800430e <USBD_CDC_DataIn>:
{
 800430e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8004310:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004314:	f8d0 72c4 	ldr.w	r7, [r0, #708]	; 0x2c4
{
 8004318:	4603      	mov	r3, r0
 800431a:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800431c:	b325      	cbz	r5, 8004368 <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800431e:	2614      	movs	r6, #20
 8004320:	fb06 0601 	mla	r6, r6, r1, r0
 8004324:	69b4      	ldr	r4, [r6, #24]
 8004326:	b184      	cbz	r4, 800434a <USBD_CDC_DataIn+0x3c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004328:	f04f 0c1c 	mov.w	ip, #28
 800432c:	fb0c 7701 	mla	r7, ip, r1, r7
 8004330:	6c7f      	ldr	r7, [r7, #68]	; 0x44
 8004332:	fbb4 fcf7 	udiv	ip, r4, r7
 8004336:	fb07 441c 	mls	r4, r7, ip, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800433a:	b934      	cbnz	r4, 800434a <USBD_CDC_DataIn+0x3c>
    pdev->ep_in[epnum].total_length = 0U;
 800433c:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800433e:	4623      	mov	r3, r4
 8004340:	4622      	mov	r2, r4
 8004342:	f7fd fbdf 	bl	8001b04 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004346:	4620      	mov	r0, r4
 8004348:	e00d      	b.n	8004366 <USBD_CDC_DataIn+0x58>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800434a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800434e:	691c      	ldr	r4, [r3, #16]
    hcdc->TxState = 0U;
 8004350:	2600      	movs	r6, #0
 8004352:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004356:	2c00      	cmp	r4, #0
 8004358:	d0f5      	beq.n	8004346 <USBD_CDC_DataIn+0x38>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800435a:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800435e:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8004362:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8004364:	4630      	mov	r0, r6
}
 8004366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8004368:	2003      	movs	r0, #3
 800436a:	e7fc      	b.n	8004366 <USBD_CDC_DataIn+0x58>

0800436c <USBD_CDC_Setup>:
{
 800436c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004370:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8004374:	f04f 0800 	mov.w	r8, #0
{
 8004378:	4605      	mov	r5, r0
 800437a:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800437c:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8004380:	f8ad 8006 	strh.w	r8, [sp, #6]
  if (hcdc == NULL)
 8004384:	2f00      	cmp	r7, #0
 8004386:	d06a      	beq.n	800445e <USBD_CDC_Setup+0xf2>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004388:	780a      	ldrb	r2, [r1, #0]
 800438a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
 800438e:	d02b      	beq.n	80043e8 <USBD_CDC_Setup+0x7c>
 8004390:	2c20      	cmp	r4, #32
 8004392:	d160      	bne.n	8004456 <USBD_CDC_Setup+0xea>
      if (req->wLength != 0U)
 8004394:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004396:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength != 0U)
 8004398:	b1fc      	cbz	r4, 80043da <USBD_CDC_Setup+0x6e>
        if ((req->bmRequest & 0x80U) != 0U)
 800439a:	0612      	lsls	r2, r2, #24
 800439c:	d514      	bpl.n	80043c8 <USBD_CDC_Setup+0x5c>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800439e:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80043a2:	4639      	mov	r1, r7
 80043a4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80043a8:	4618      	mov	r0, r3
 80043aa:	4622      	mov	r2, r4
 80043ac:	47c8      	blx	r9
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80043ae:	88f2      	ldrh	r2, [r6, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80043b0:	2a07      	cmp	r2, #7
 80043b2:	bf28      	it	cs
 80043b4:	2207      	movcs	r2, #7
 80043b6:	4639      	mov	r1, r7
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fca3 	bl	8004d04 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043be:	4644      	mov	r4, r8
}
 80043c0:	4620      	mov	r0, r4
 80043c2:	b003      	add	sp, #12
 80043c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80043c8:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80043cc:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80043d0:	4622      	mov	r2, r4
 80043d2:	4639      	mov	r1, r7
 80043d4:	f000 fcab 	bl	8004d2e <USBD_CtlPrepareRx>
 80043d8:	e7f1      	b.n	80043be <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043da:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80043de:	4618      	mov	r0, r3
 80043e0:	6895      	ldr	r5, [r2, #8]
 80043e2:	4622      	mov	r2, r4
 80043e4:	47a8      	blx	r5
 80043e6:	e7eb      	b.n	80043c0 <USBD_CDC_Setup+0x54>
      switch (req->bRequest)
 80043e8:	784f      	ldrb	r7, [r1, #1]
 80043ea:	2f0b      	cmp	r7, #11
 80043ec:	d833      	bhi.n	8004456 <USBD_CDC_Setup+0xea>
 80043ee:	a301      	add	r3, pc, #4	; (adr r3, 80043f4 <USBD_CDC_Setup+0x88>)
 80043f0:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80043f4:	08004425 	.word	0x08004425
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	08004457 	.word	0x08004457
 8004400:	08004457 	.word	0x08004457
 8004404:	08004457 	.word	0x08004457
 8004408:	08004457 	.word	0x08004457
 800440c:	08004457 	.word	0x08004457
 8004410:	08004457 	.word	0x08004457
 8004414:	08004457 	.word	0x08004457
 8004418:	08004457 	.word	0x08004457
 800441c:	0800443b 	.word	0x0800443b
 8004420:	0800444f 	.word	0x0800444f
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004424:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004428:	2b03      	cmp	r3, #3
 800442a:	d114      	bne.n	8004456 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800442c:	2202      	movs	r2, #2
 800442e:	f10d 0106 	add.w	r1, sp, #6
 8004432:	f000 fc67 	bl	8004d04 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004436:	463c      	mov	r4, r7
 8004438:	e7c2      	b.n	80043c0 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800443a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800443e:	2b03      	cmp	r3, #3
 8004440:	d109      	bne.n	8004456 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004442:	2201      	movs	r2, #1
 8004444:	f10d 0105 	add.w	r1, sp, #5
 8004448:	f000 fc5c 	bl	8004d04 <USBD_CtlSendData>
 800444c:	e7b8      	b.n	80043c0 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800444e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004452:	2b03      	cmp	r3, #3
 8004454:	d0b4      	beq.n	80043c0 <USBD_CDC_Setup+0x54>
          USBD_CtlError(pdev, req);
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	f000 fc2c 	bl	8004cb6 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800445e:	2403      	movs	r4, #3
 8004460:	e7ae      	b.n	80043c0 <USBD_CDC_Setup+0x54>
 8004462:	bf00      	nop

08004464 <USBD_CDC_DeInit>:
{
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004468:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800446a:	2181      	movs	r1, #129	; 0x81
 800446c:	f7fd fb1b 	bl	8001aa6 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004470:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004472:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004474:	4620      	mov	r0, r4
 8004476:	f7fd fb16 	bl	8001aa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800447a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800447e:	2182      	movs	r1, #130	; 0x82
 8004480:	4620      	mov	r0, r4
 8004482:	f7fd fb10 	bl	8001aa6 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004486:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800448a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800448c:	b14b      	cbz	r3, 80044a2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800448e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004496:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800449a:	f013 fbc7 	bl	8017c2c <free>
    pdev->pClassData = NULL;
 800449e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80044a2:	2000      	movs	r0, #0
 80044a4:	bd38      	pop	{r3, r4, r5, pc}

080044a6 <USBD_CDC_Init>:
{
 80044a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044aa:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044b0:	f013 fbb4 	bl	8017c1c <malloc>
  if (hcdc == NULL)
 80044b4:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 80044b6:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 80044ba:	b918      	cbnz	r0, 80044c4 <USBD_CDC_Init+0x1e>
    return (uint8_t)USBD_EMEM;
 80044bc:	2602      	movs	r6, #2
}
 80044be:	4630      	mov	r0, r6
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044c4:	7c23      	ldrb	r3, [r4, #16]
 80044c6:	bb8b      	cbnz	r3, 800452c <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044cc:	2181      	movs	r1, #129	; 0x81
 80044ce:	2202      	movs	r2, #2
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7fd fade 	bl	8001a92 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044d6:	2101      	movs	r1, #1
 80044d8:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044da:	f44f 7300 	mov.w	r3, #512	; 0x200
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044de:	2202      	movs	r2, #2
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7fd fad6 	bl	8001a92 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044e6:	2701      	movs	r7, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80044e8:	2310      	movs	r3, #16
 80044ea:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044ee:	2203      	movs	r2, #3
 80044f0:	2308      	movs	r3, #8
 80044f2:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044f4:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7fd faca 	bl	8001a92 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044fe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004502:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800450a:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 800450c:	f04f 0800 	mov.w	r8, #0
 8004510:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8004514:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004518:	b996      	cbnz	r6, 8004540 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800451a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800451e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004522:	4639      	mov	r1, r7
 8004524:	4620      	mov	r0, r4
 8004526:	f7fd faf4 	bl	8001b12 <USBD_LL_PrepareReceive>
 800452a:	e7c8      	b.n	80044be <USBD_CDC_Init+0x18>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	2181      	movs	r1, #129	; 0x81
 8004530:	2202      	movs	r2, #2
 8004532:	4620      	mov	r0, r4
 8004534:	f7fd faad 	bl	8001a92 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004538:	2101      	movs	r1, #1
 800453a:	8721      	strh	r1, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800453c:	2340      	movs	r3, #64	; 0x40
 800453e:	e7ce      	b.n	80044de <USBD_CDC_Init+0x38>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004540:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	4639      	mov	r1, r7
 8004548:	4620      	mov	r0, r4
 800454a:	f7fd fae2 	bl	8001b12 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800454e:	4646      	mov	r6, r8
 8004550:	e7b5      	b.n	80044be <USBD_CDC_Init+0x18>

08004552 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004552:	b119      	cbz	r1, 800455c <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004554:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004558:	2000      	movs	r0, #0
 800455a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800455c:	2003      	movs	r0, #3
}
 800455e:	4770      	bx	lr

08004560 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004560:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8004564:	b12b      	cbz	r3, 8004572 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8004566:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800456a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800456e:	2000      	movs	r0, #0
 8004570:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004572:	2003      	movs	r0, #3
}
 8004574:	4770      	bx	lr

08004576 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004576:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800457a:	b11b      	cbz	r3, 8004584 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800457c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004580:	2000      	movs	r0, #0
 8004582:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004584:	2003      	movs	r0, #3
}
 8004586:	4770      	bx	lr

08004588 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004588:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800458c:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800458e:	b182      	cbz	r2, 80045b2 <USBD_CDC_TransmitPacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8004590:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004594:	2301      	movs	r3, #1
 8004596:	b974      	cbnz	r4, 80045b6 <USBD_CDC_TransmitPacket+0x2e>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004598:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800459c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80045a0:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80045a2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2181      	movs	r1, #129	; 0x81
 80045aa:	f7fd faab 	bl	8001b04 <USBD_LL_Transmit>

    ret = USBD_OK;
 80045ae:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 80045b0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80045b2:	2003      	movs	r0, #3
 80045b4:	e7fc      	b.n	80045b0 <USBD_CDC_TransmitPacket+0x28>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80045b6:	4618      	mov	r0, r3
 80045b8:	e7fa      	b.n	80045b0 <USBD_CDC_TransmitPacket+0x28>

080045ba <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045ba:	b178      	cbz	r0, 80045dc <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80045c2:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80045c6:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045ca:	b109      	cbz	r1, 80045d0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80045cc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80045d6:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80045d8:	f7fd ba24 	b.w	8001a24 <USBD_LL_Init>

  return ret;
}
 80045dc:	2003      	movs	r0, #3
 80045de:	4770      	bx	lr

080045e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80045e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 80045e2:	2500      	movs	r5, #0
{
 80045e4:	4604      	mov	r4, r0
  uint16_t len = 0U;
 80045e6:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 80045ea:	b159      	cbz	r1, 8004604 <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80045ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 80045ee:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80045f2:	b14b      	cbz	r3, 8004608 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80045f4:	f10d 0006 	add.w	r0, sp, #6
 80045f8:	4798      	blx	r3
 80045fa:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80045fe:	4628      	mov	r0, r5
}
 8004600:	b003      	add	sp, #12
 8004602:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8004604:	2003      	movs	r0, #3
 8004606:	e7fb      	b.n	8004600 <USBD_RegisterClass+0x20>
  return USBD_OK;
 8004608:	4618      	mov	r0, r3
 800460a:	e7f9      	b.n	8004600 <USBD_RegisterClass+0x20>

0800460c <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800460c:	f7fd ba3a 	b.w	8001a84 <USBD_LL_Start>

08004610 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004610:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004614:	b10b      	cbz	r3, 800461a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4718      	bx	r3
  }

  return ret;
}
 800461a:	2003      	movs	r0, #3
 800461c:	4770      	bx	lr

0800461e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800461e:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004620:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004624:	b10b      	cbz	r3, 800462a <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4798      	blx	r3
  }

  return USBD_OK;
}
 800462a:	2000      	movs	r0, #0
 800462c:	bd08      	pop	{r3, pc}

0800462e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800462e:	b538      	push	{r3, r4, r5, lr}
 8004630:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004632:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004636:	4628      	mov	r0, r5
 8004638:	f000 fb32 	bl	8004ca0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800463c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800463e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8004642:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004646:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800464a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800464e:	f001 031f 	and.w	r3, r1, #31
 8004652:	2b01      	cmp	r3, #1
 8004654:	d008      	beq.n	8004668 <USBD_LL_SetupStage+0x3a>
 8004656:	2b02      	cmp	r3, #2
 8004658:	d00c      	beq.n	8004674 <USBD_LL_SetupStage+0x46>
 800465a:	b98b      	cbnz	r3, 8004680 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800465c:	4629      	mov	r1, r5
 800465e:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004664:	f000 b926 	b.w	80048b4 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004668:	4629      	mov	r1, r5
 800466a:	4620      	mov	r0, r4
}
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004670:	f000 ba62 	b.w	8004b38 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004674:	4629      	mov	r1, r5
 8004676:	4620      	mov	r0, r4
}
 8004678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800467c:	f000 ba82 	b.w	8004b84 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004680:	4620      	mov	r0, r4
 8004682:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800468a:	f7fd ba13 	b.w	8001ab4 <USBD_LL_StallEP>

0800468e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800468e:	b570      	push	{r4, r5, r6, lr}
 8004690:	4604      	mov	r4, r0
 8004692:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004694:	b9f9      	cbnz	r1, 80046d6 <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004696:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800469a:	2b03      	cmp	r3, #3
 800469c:	d10c      	bne.n	80046b8 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 800469e:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d90a      	bls.n	80046bc <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 80046a6:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046a8:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80046aa:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046ae:	bf28      	it	cs
 80046b0:	461a      	movcs	r2, r3
 80046b2:	4629      	mov	r1, r5
 80046b4:	f000 fb48 	bl	8004d48 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 80046b8:	2000      	movs	r0, #0
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d104      	bne.n	80046ce <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 80046c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	b103      	cbz	r3, 80046ce <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 80046cc:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80046ce:	4620      	mov	r0, r4
 80046d0:	f000 fb42 	bl	8004d58 <USBD_CtlSendStatus>
 80046d4:	e7f0      	b.n	80046b8 <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d1ec      	bne.n	80046b8 <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 80046de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0e7      	beq.n	80046b8 <USBD_LL_DataOutStage+0x2a>
}
 80046e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80046ec:	4718      	bx	r3

080046ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80046ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d13f      	bne.n	8004778 <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80046f8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80046fc:	2a02      	cmp	r2, #2
 80046fe:	d10f      	bne.n	8004720 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8004700:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8004704:	4295      	cmp	r5, r2
 8004706:	d915      	bls.n	8004734 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004708:	1aaa      	subs	r2, r5, r2
 800470a:	9101      	str	r1, [sp, #4]
 800470c:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800470e:	4631      	mov	r1, r6
 8004710:	f000 fb05 	bl	8004d1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004714:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004716:	461a      	mov	r2, r3
 8004718:	4619      	mov	r1, r3
 800471a:	4620      	mov	r0, r4
 800471c:	f7fd f9f9 	bl	8001b12 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004720:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d102      	bne.n	800472e <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800472e:	2000      	movs	r0, #0
 8004730:	b002      	add	sp, #8
 8004732:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8004734:	d10e      	bne.n	8004754 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004736:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004738:	4295      	cmp	r5, r2
 800473a:	d80b      	bhi.n	8004754 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800473c:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004740:	42aa      	cmp	r2, r5
 8004742:	d207      	bcs.n	8004754 <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004744:	460a      	mov	r2, r1
 8004746:	9101      	str	r1, [sp, #4]
 8004748:	f000 fae9 	bl	8004d1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800474c:	9b01      	ldr	r3, [sp, #4]
 800474e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004752:	e7e0      	b.n	8004716 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004754:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004758:	2b03      	cmp	r3, #3
 800475a:	d105      	bne.n	8004768 <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 800475c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	b10b      	cbz	r3, 8004768 <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 8004764:	4620      	mov	r0, r4
 8004766:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	4620      	mov	r0, r4
 800476c:	f7fd f9a2 	bl	8001ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fafc 	bl	8004d6e <USBD_CtlReceiveStatus>
 8004776:	e7d3      	b.n	8004720 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004778:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800477c:	2b03      	cmp	r3, #3
 800477e:	d1d6      	bne.n	800472e <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 8004780:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0d1      	beq.n	800472e <USBD_LL_DataInStage+0x40>
}
 800478a:	b002      	add	sp, #8
 800478c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004790:	4718      	bx	r3

08004792 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004792:	2301      	movs	r3, #1
{
 8004794:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004796:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800479a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800479e:	2100      	movs	r1, #0
{
 80047a0:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 80047a2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80047a6:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80047a8:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80047ac:	b1db      	cbz	r3, 80047e6 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80047ae:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80047b2:	b112      	cbz	r2, 80047ba <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b103      	cbz	r3, 80047ba <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ba:	2200      	movs	r2, #0
 80047bc:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047be:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047c0:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047c2:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7fd f964 	bl	8001a92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047ca:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047ce:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047d2:	462b      	mov	r3, r5
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	4620      	mov	r0, r4
 80047da:	f7fd f95a 	bl	8001a92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80047de:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80047e0:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80047e2:	2000      	movs	r0, #0
}
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80047e6:	2003      	movs	r0, #3
 80047e8:	e7fc      	b.n	80047e4 <USBD_LL_Reset+0x52>

080047ea <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80047ea:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80047ec:	2000      	movs	r0, #0
 80047ee:	4770      	bx	lr

080047f0 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80047f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80047fa:	2304      	movs	r3, #4
 80047fc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004800:	2000      	movs	r0, #0
 8004802:	4770      	bx	lr

08004804 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004804:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004808:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800480a:	bf02      	ittt	eq
 800480c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004810:	b2db      	uxtbeq	r3, r3
 8004812:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004816:	2000      	movs	r0, #0
 8004818:	4770      	bx	lr

0800481a <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800481a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800481e:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004820:	b142      	cbz	r2, 8004834 <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004822:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004826:	2b03      	cmp	r3, #3
 8004828:	d102      	bne.n	8004830 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 800482a:	69d3      	ldr	r3, [r2, #28]
 800482c:	b123      	cbz	r3, 8004838 <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 800482e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004830:	2000      	movs	r0, #0
 8004832:	e000      	b.n	8004836 <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 8004834:	2003      	movs	r0, #3
}
 8004836:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004838:	4618      	mov	r0, r3
 800483a:	e7fc      	b.n	8004836 <USBD_LL_SOF+0x1c>

0800483c <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800483c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004840:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004842:	b142      	cbz	r2, 8004856 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004844:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004848:	2b03      	cmp	r3, #3
 800484a:	d102      	bne.n	8004852 <USBD_LL_IsoINIncomplete+0x16>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800484c:	6a13      	ldr	r3, [r2, #32]
 800484e:	b123      	cbz	r3, 800485a <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004850:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004852:	2000      	movs	r0, #0
 8004854:	e000      	b.n	8004858 <USBD_LL_IsoINIncomplete+0x1c>
    return USBD_FAIL;
 8004856:	2003      	movs	r0, #3
}
 8004858:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800485a:	4618      	mov	r0, r3
 800485c:	e7fc      	b.n	8004858 <USBD_LL_IsoINIncomplete+0x1c>

0800485e <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800485e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004862:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004864:	b142      	cbz	r2, 8004878 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004866:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800486a:	2b03      	cmp	r3, #3
 800486c:	d102      	bne.n	8004874 <USBD_LL_IsoOUTIncomplete+0x16>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800486e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004870:	b123      	cbz	r3, 800487c <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004874:	2000      	movs	r0, #0
 8004876:	e000      	b.n	800487a <USBD_LL_IsoOUTIncomplete+0x1c>
    return USBD_FAIL;
 8004878:	2003      	movs	r0, #3
}
 800487a:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800487c:	4618      	mov	r0, r3
 800487e:	e7fc      	b.n	800487a <USBD_LL_IsoOUTIncomplete+0x1c>

08004880 <USBD_LL_DevConnected>:
 8004880:	2000      	movs	r0, #0
 8004882:	4770      	bx	lr

08004884 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004884:	2201      	movs	r2, #1
{
 8004886:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004888:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800488c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8004890:	b112      	cbz	r2, 8004898 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004892:	6852      	ldr	r2, [r2, #4]
 8004894:	7901      	ldrb	r1, [r0, #4]
 8004896:	4790      	blx	r2
  }

  return USBD_OK;
}
 8004898:	2000      	movs	r0, #0
 800489a:	bd08      	pop	{r3, pc}

0800489c <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800489c:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800489e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 80048a0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80048a2:	f7fd f907 	bl	8001ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80048a6:	4620      	mov	r0, r4
 80048a8:	2100      	movs	r1, #0
}
 80048aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80048ae:	f7fd b901 	b.w	8001ab4 <USBD_LL_StallEP>
	...

080048b4 <USBD_StdDevReq>:
{
 80048b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b6:	780d      	ldrb	r5, [r1, #0]
 80048b8:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048bc:	2d20      	cmp	r5, #32
{
 80048be:	4604      	mov	r4, r0
 80048c0:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048c2:	d014      	beq.n	80048ee <USBD_StdDevReq+0x3a>
 80048c4:	2d40      	cmp	r5, #64	; 0x40
 80048c6:	d012      	beq.n	80048ee <USBD_StdDevReq+0x3a>
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	f040 8100 	bne.w	8004ace <USBD_StdDevReq+0x21a>
      switch (req->bRequest)
 80048ce:	784f      	ldrb	r7, [r1, #1]
 80048d0:	2f09      	cmp	r7, #9
 80048d2:	f200 80fc 	bhi.w	8004ace <USBD_StdDevReq+0x21a>
 80048d6:	e8df f017 	tbh	[pc, r7, lsl #1]
 80048da:	0101      	.short	0x0101
 80048dc:	00fa0121 	.word	0x00fa0121
 80048e0:	00fa0117 	.word	0x00fa0117
 80048e4:	00130082 	.word	0x00130082
 80048e8:	00e900fa 	.word	0x00e900fa
 80048ec:	009e      	.short	0x009e
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048ee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4631      	mov	r1, r6
 80048f6:	4620      	mov	r0, r4
}
 80048f8:	b003      	add	sp, #12
 80048fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048fe:	4718      	bx	r3
  uint16_t len = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004906:	884b      	ldrh	r3, [r1, #2]
 8004908:	0a1a      	lsrs	r2, r3, #8
 800490a:	3a01      	subs	r2, #1
 800490c:	2a06      	cmp	r2, #6
 800490e:	d837      	bhi.n	8004980 <USBD_StdDevReq+0xcc>
 8004910:	e8df f002 	tbb	[pc, r2]
 8004914:	36291c04 	.word	0x36291c04
 8004918:	5036      	.short	0x5036
 800491a:	5a          	.byte	0x5a
 800491b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800491c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004920:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004922:	7c20      	ldrb	r0, [r4, #16]
 8004924:	f10d 0106 	add.w	r1, sp, #6
 8004928:	4798      	blx	r3
  if (req->wLength != 0U)
 800492a:	88f2      	ldrh	r2, [r6, #6]
 800492c:	2a00      	cmp	r2, #0
 800492e:	f000 80f1 	beq.w	8004b14 <USBD_StdDevReq+0x260>
    if (len != 0U)
 8004932:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004936:	b31b      	cbz	r3, 8004980 <USBD_StdDevReq+0xcc>
      len = MIN(len, req->wLength);
 8004938:	429a      	cmp	r2, r3
 800493a:	bf28      	it	cs
 800493c:	461a      	movcs	r2, r3
 800493e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004942:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004944:	4620      	mov	r0, r4
 8004946:	f000 f9dd 	bl	8004d04 <USBD_CtlSendData>
        break;
 800494a:	e01c      	b.n	8004986 <USBD_StdDevReq+0xd2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800494c:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800494e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004952:	b932      	cbnz	r2, 8004962 <USBD_StdDevReq+0xae>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004956:	f10d 0006 	add.w	r0, sp, #6
 800495a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800495c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800495e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004960:	e7e3      	b.n	800492a <USBD_StdDevReq+0x76>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	e7f7      	b.n	8004956 <USBD_StdDevReq+0xa2>
      switch ((uint8_t)(req->wValue))
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b05      	cmp	r3, #5
 800496a:	d809      	bhi.n	8004980 <USBD_StdDevReq+0xcc>
 800496c:	e8df f003 	tbb	[pc, r3]
 8004970:	16120e03 	.word	0x16120e03
 8004974:	1e1a      	.short	0x1e1a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004976:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800497a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1d0      	bne.n	8004922 <USBD_StdDevReq+0x6e>
      USBD_CtlError(pdev, req);
 8004980:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 8004982:	f7ff ff8b 	bl	800489c <USBD_CtlError.constprop.0>
}
 8004986:	4628      	mov	r0, r5
 8004988:	b003      	add	sp, #12
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800498c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	e7f3      	b.n	800497c <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004994:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	e7ef      	b.n	800497c <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800499c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	e7eb      	b.n	800497c <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80049a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	e7e7      	b.n	800497c <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80049ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	e7e3      	b.n	800497c <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049b4:	7c03      	ldrb	r3, [r0, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e2      	bne.n	8004980 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80049ba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049be:	f10d 0006 	add.w	r0, sp, #6
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	4798      	blx	r3
  if (err != 0U)
 80049c6:	e7b0      	b.n	800492a <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049c8:	7c03      	ldrb	r3, [r0, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d8      	bne.n	8004980 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80049ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049d2:	f10d 0006 	add.w	r0, sp, #6
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80049da:	2307      	movs	r3, #7
 80049dc:	e7bf      	b.n	800495e <USBD_StdDevReq+0xaa>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80049de:	888b      	ldrh	r3, [r1, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1cd      	bne.n	8004980 <USBD_StdDevReq+0xcc>
 80049e4:	88cb      	ldrh	r3, [r1, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ca      	bne.n	8004980 <USBD_StdDevReq+0xcc>
 80049ea:	884e      	ldrh	r6, [r1, #2]
 80049ec:	2e7f      	cmp	r6, #127	; 0x7f
 80049ee:	d8c7      	bhi.n	8004980 <USBD_StdDevReq+0xcc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d0c3      	beq.n	8004980 <USBD_StdDevReq+0xcc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80049f8:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80049fa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049fe:	f7fd f87a 	bl	8001af6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 f9a8 	bl	8004d58 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004a08:	b11e      	cbz	r6, 8004a12 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a0a:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a0c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004a10:	e7b9      	b.n	8004986 <USBD_StdDevReq+0xd2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7fa      	b.n	8004a0c <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8004a16:	788e      	ldrb	r6, [r1, #2]
 8004a18:	4f46      	ldr	r7, [pc, #280]	; (8004b34 <USBD_StdDevReq+0x280>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004a1a:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004a1c:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004a1e:	d903      	bls.n	8004a28 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8004a20:	f7ff ff3c 	bl	800489c <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004a24:	2503      	movs	r5, #3
      break;
 8004a26:	e7ae      	b.n	8004986 <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004a28:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	d008      	beq.n	8004a44 <USBD_StdDevReq+0x190>
 8004a32:	2a03      	cmp	r2, #3
 8004a34:	d014      	beq.n	8004a60 <USBD_StdDevReq+0x1ac>
      USBD_CtlError(pdev, req);
 8004a36:	f7ff ff31 	bl	800489c <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004a3a:	7839      	ldrb	r1, [r7, #0]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff fdee 	bl	800461e <USBD_ClrClassConfig>
 8004a42:	e7ef      	b.n	8004a24 <USBD_StdDevReq+0x170>
      if (cfgidx != 0U)
 8004a44:	2e00      	cmp	r6, #0
 8004a46:	d065      	beq.n	8004b14 <USBD_StdDevReq+0x260>
        pdev->dev_config = cfgidx;
 8004a48:	2101      	movs	r1, #1
 8004a4a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004a4c:	f7ff fde0 	bl	8004610 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004a50:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8004a52:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	d194      	bne.n	8004982 <USBD_StdDevReq+0xce>
          (void)USBD_CtlSendStatus(pdev);
 8004a58:	f000 f97e 	bl	8004d58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e7d5      	b.n	8004a0c <USBD_StdDevReq+0x158>
      if (cfgidx == 0U)
 8004a60:	b95e      	cbnz	r6, 8004a7a <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a62:	2302      	movs	r3, #2
 8004a64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8004a68:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	f7ff fdd7 	bl	800461e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f971 	bl	8004d58 <USBD_CtlSendStatus>
 8004a76:	4635      	mov	r5, r6
 8004a78:	e785      	b.n	8004986 <USBD_StdDevReq+0xd2>
      else if (cfgidx != pdev->dev_config)
 8004a7a:	6841      	ldr	r1, [r0, #4]
 8004a7c:	2901      	cmp	r1, #1
 8004a7e:	d049      	beq.n	8004b14 <USBD_StdDevReq+0x260>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004a80:	b2c9      	uxtb	r1, r1
 8004a82:	f7ff fdcc 	bl	800461e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004a86:	7839      	ldrb	r1, [r7, #0]
 8004a88:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7ff fdc0 	bl	8004610 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004a90:	4606      	mov	r6, r0
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d03e      	beq.n	8004b14 <USBD_StdDevReq+0x260>
          USBD_CtlError(pdev, req);
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff ff00 	bl	800489c <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004a9c:	7921      	ldrb	r1, [r4, #4]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff fdbd 	bl	800461e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004aaa:	e7e4      	b.n	8004a76 <USBD_StdDevReq+0x1c2>
  if (req->wLength != 1U)
 8004aac:	88ca      	ldrh	r2, [r1, #6]
 8004aae:	2a01      	cmp	r2, #1
 8004ab0:	f47f af66 	bne.w	8004980 <USBD_StdDevReq+0xcc>
    switch (pdev->dev_state)
 8004ab4:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8004ab8:	2902      	cmp	r1, #2
 8004aba:	b2cb      	uxtb	r3, r1
 8004abc:	d805      	bhi.n	8004aca <USBD_StdDevReq+0x216>
 8004abe:	b133      	cbz	r3, 8004ace <USBD_StdDevReq+0x21a>
        pdev->dev_default_config = 0U;
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004ac8:	e73c      	b.n	8004944 <USBD_StdDevReq+0x90>
    switch (pdev->dev_state)
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d004      	beq.n	8004ad8 <USBD_StdDevReq+0x224>
        USBD_CtlError(pdev, req);
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff fee4 	bl	800489c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ad4:	2500      	movs	r5, #0
        break;
 8004ad6:	e756      	b.n	8004986 <USBD_StdDevReq+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004ad8:	1d01      	adds	r1, r0, #4
 8004ada:	e733      	b.n	8004944 <USBD_StdDevReq+0x90>
  switch (pdev->dev_state)
 8004adc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d8f3      	bhi.n	8004ace <USBD_StdDevReq+0x21a>
      if (req->wLength != 0x2U)
 8004ae6:	88ca      	ldrh	r2, [r1, #6]
 8004ae8:	2a02      	cmp	r2, #2
 8004aea:	f47f af49 	bne.w	8004980 <USBD_StdDevReq+0xcc>
      if (pdev->dev_remote_wakeup != 0U)
 8004aee:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004af2:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2303      	movne	r3, #3
 8004afa:	2301      	moveq	r3, #1
 8004afc:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004b00:	f000 f900 	bl	8004d04 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b04:	463d      	mov	r5, r7
      break;
 8004b06:	e73e      	b.n	8004986 <USBD_StdDevReq+0xd2>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004b08:	884b      	ldrh	r3, [r1, #2]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f47f af3b 	bne.w	8004986 <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004b10:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 f91f 	bl	8004d58 <USBD_CtlSendStatus>
 8004b1a:	e734      	b.n	8004986 <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004b1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b20:	3b01      	subs	r3, #1
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d8d3      	bhi.n	8004ace <USBD_StdDevReq+0x21a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004b26:	884b      	ldrh	r3, [r1, #2]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f47f af2c 	bne.w	8004986 <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e7ee      	b.n	8004b10 <USBD_StdDevReq+0x25c>
 8004b32:	bf00      	nop
 8004b34:	20017a74 	.word	0x20017a74

08004b38 <USBD_StdItfReq>:
{
 8004b38:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b3a:	780b      	ldrb	r3, [r1, #0]
 8004b3c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004b40:	2a40      	cmp	r2, #64	; 0x40
{
 8004b42:	4604      	mov	r4, r0
 8004b44:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b46:	d001      	beq.n	8004b4c <USBD_StdItfReq+0x14>
 8004b48:	065b      	lsls	r3, r3, #25
 8004b4a:	d416      	bmi.n	8004b7a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004b4c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004b50:	3b01      	subs	r3, #1
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d811      	bhi.n	8004b7a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b56:	7933      	ldrb	r3, [r6, #4]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d80e      	bhi.n	8004b7a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b5c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004b60:	4631      	mov	r1, r6
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4620      	mov	r0, r4
 8004b66:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b68:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b6a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b6c:	b91b      	cbnz	r3, 8004b76 <USBD_StdItfReq+0x3e>
 8004b6e:	b910      	cbnz	r0, 8004b76 <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 f8f1 	bl	8004d58 <USBD_CtlSendStatus>
}
 8004b76:	4628      	mov	r0, r5
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7ff fe8e 	bl	800489c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b80:	2500      	movs	r5, #0
          break;
 8004b82:	e7f8      	b.n	8004b76 <USBD_StdItfReq+0x3e>

08004b84 <USBD_StdEPReq>:
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8004b88:	888a      	ldrh	r2, [r1, #4]
 8004b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b8e:	2b20      	cmp	r3, #32
{
 8004b90:	4604      	mov	r4, r0
 8004b92:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b94:	d058      	beq.n	8004c48 <USBD_StdEPReq+0xc4>
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d056      	beq.n	8004c48 <USBD_StdEPReq+0xc4>
 8004b9a:	bb9b      	cbnz	r3, 8004c04 <USBD_StdEPReq+0x80>
      switch (req->bRequest)
 8004b9c:	786b      	ldrb	r3, [r5, #1]
 8004b9e:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8004ba0:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004ba2:	d040      	beq.n	8004c26 <USBD_StdEPReq+0xa2>
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d026      	beq.n	8004bf6 <USBD_StdEPReq+0x72>
 8004ba8:	bb63      	cbnz	r3, 8004c04 <USBD_StdEPReq+0x80>
          switch (pdev->dev_state)
 8004baa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	b2d8      	uxtb	r0, r3
 8004bb2:	d05a      	beq.n	8004c6a <USBD_StdEPReq+0xe6>
 8004bb4:	2803      	cmp	r0, #3
 8004bb6:	d125      	bne.n	8004c04 <USBD_StdEPReq+0x80>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bb8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004bbc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bc0:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bc4:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 8004bc8:	d05e      	beq.n	8004c88 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bcc:	b1d3      	cbz	r3, 8004c04 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bce:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004bd2:	3501      	adds	r5, #1
 8004bd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004bd8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004bdc:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 8004be0:	d005      	beq.n	8004bee <USBD_StdEPReq+0x6a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7fc ff74 	bl	8001ad0 <USBD_LL_IsStallEP>
 8004be8:	3800      	subs	r0, #0
 8004bea:	bf18      	it	ne
 8004bec:	2001      	movne	r0, #1
                pep->status = 0x0000U;
 8004bee:	6028      	str	r0, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	e044      	b.n	8004c80 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 8004bf6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	d02b      	beq.n	8004c58 <USBD_StdEPReq+0xd4>
 8004c00:	2a03      	cmp	r2, #3
 8004c02:	d003      	beq.n	8004c0c <USBD_StdEPReq+0x88>
              USBD_CtlError(pdev, req);
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff fe49 	bl	800489c <USBD_CtlError.constprop.0>
              break;
 8004c0a:	e00a      	b.n	8004c22 <USBD_StdEPReq+0x9e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c0c:	886b      	ldrh	r3, [r5, #2]
 8004c0e:	b92b      	cbnz	r3, 8004c1c <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c10:	064a      	lsls	r2, r1, #25
 8004c12:	d003      	beq.n	8004c1c <USBD_StdEPReq+0x98>
 8004c14:	88eb      	ldrh	r3, [r5, #6]
 8004c16:	b90b      	cbnz	r3, 8004c1c <USBD_StdEPReq+0x98>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c18:	f7fc ff4c 	bl	8001ab4 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f000 f89b 	bl	8004d58 <USBD_CtlSendStatus>
}
 8004c22:	2000      	movs	r0, #0
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004c26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	d013      	beq.n	8004c58 <USBD_StdEPReq+0xd4>
 8004c30:	2a03      	cmp	r2, #3
 8004c32:	d1e7      	bne.n	8004c04 <USBD_StdEPReq+0x80>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c34:	886b      	ldrh	r3, [r5, #2]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f3      	bne.n	8004c22 <USBD_StdEPReq+0x9e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c3a:	064e      	lsls	r6, r1, #25
 8004c3c:	d001      	beq.n	8004c42 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c3e:	f7fc ff40 	bl	8001ac2 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8004c42:	4620      	mov	r0, r4
 8004c44:	f000 f888 	bl	8004d58 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c48:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4620      	mov	r0, r4
 8004c50:	689b      	ldr	r3, [r3, #8]
}
 8004c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c56:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c58:	064b      	lsls	r3, r1, #25
 8004c5a:	d0d3      	beq.n	8004c04 <USBD_StdEPReq+0x80>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c5c:	f7fc ff2a 	bl	8001ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7fc ff26 	bl	8001ab4 <USBD_LL_StallEP>
 8004c68:	e7db      	b.n	8004c22 <USBD_StdEPReq+0x9e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c6a:	0649      	lsls	r1, r1, #25
 8004c6c:	d1ca      	bne.n	8004c04 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c6e:	0613      	lsls	r3, r2, #24
 8004c70:	bf4c      	ite	mi
 8004c72:	f104 0114 	addmi.w	r1, r4, #20
 8004c76:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c7e:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 f83f 	bl	8004d04 <USBD_CtlSendData>
              break;
 8004c86:	e7cc      	b.n	8004c22 <USBD_StdEPReq+0x9e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c88:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0b9      	beq.n	8004c04 <USBD_StdEPReq+0x80>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c90:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004c94:	2314      	movs	r3, #20
 8004c96:	fb03 4505 	mla	r5, r3, r5, r4
 8004c9a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004c9e:	e79d      	b.n	8004bdc <USBD_StdEPReq+0x58>

08004ca0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004ca0:	780b      	ldrb	r3, [r1, #0]
 8004ca2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004ca4:	784b      	ldrb	r3, [r1, #1]
 8004ca6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8004ca8:	884b      	ldrh	r3, [r1, #2]
 8004caa:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8004cac:	888b      	ldrh	r3, [r1, #4]
 8004cae:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8004cb0:	88cb      	ldrh	r3, [r1, #6]
 8004cb2:	80c3      	strh	r3, [r0, #6]
}
 8004cb4:	4770      	bx	lr

08004cb6 <USBD_CtlError>:
{
 8004cb6:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cb8:	2180      	movs	r1, #128	; 0x80
{
 8004cba:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cbc:	f7fc fefa 	bl	8001ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	2100      	movs	r1, #0
}
 8004cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004cc8:	f7fc bef4 	b.w	8001ab4 <USBD_LL_StallEP>

08004ccc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004ccc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004cce:	b188      	cbz	r0, 8004cf4 <USBD_GetString+0x28>
 8004cd0:	2400      	movs	r4, #0
 8004cd2:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	3401      	adds	r4, #1
 8004cd8:	5d05      	ldrb	r5, [r0, r4]
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d1fa      	bne.n	8004cd4 <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8004ce6:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	704b      	strb	r3, [r1, #1]
  idx++;
 8004cec:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004cee:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004cf2:	b902      	cbnz	r2, 8004cf6 <USBD_GetString+0x2a>
}
 8004cf4:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8004cf6:	54ca      	strb	r2, [r1, r3]
    idx++;
 8004cf8:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8004cfa:	b2d2      	uxtb	r2, r2
    idx++;
 8004cfc:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8004cfe:	548d      	strb	r5, [r1, r2]
    idx++;
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e7f4      	b.n	8004cee <USBD_GetString+0x22>

08004d04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004d04:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d06:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004d08:	b293      	uxth	r3, r2
  pdev->ep_in[0].rem_length = len;
 8004d0a:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004d0e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004d12:	460a      	mov	r2, r1
 8004d14:	2100      	movs	r1, #0
 8004d16:	f7fc fef5 	bl	8001b04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004d1e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004d20:	b293      	uxth	r3, r2
 8004d22:	460a      	mov	r2, r1
 8004d24:	2100      	movs	r1, #0
 8004d26:	f7fc feed 	bl	8001b04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	bd08      	pop	{r3, pc}

08004d2e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004d2e:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d30:	2403      	movs	r4, #3
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d32:	b293      	uxth	r3, r2
  pdev->ep_out[0].rem_length = len;
 8004d34:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004d38:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f7fc fee7 	bl	8001b12 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d44:	2000      	movs	r0, #0
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004d48:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d4a:	b293      	uxth	r3, r2
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f7fc fedf 	bl	8001b12 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d54:	2000      	movs	r0, #0
 8004d56:	bd08      	pop	{r3, pc}

08004d58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004d58:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d5a:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004d5c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d5e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004d62:	4619      	mov	r1, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	f7fc fecd 	bl	8001b04 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	bd08      	pop	{r3, pc}

08004d6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004d6e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004d70:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d72:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004d74:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d78:	4619      	mov	r1, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc fec9 	bl	8001b12 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d80:	2000      	movs	r0, #0
 8004d82:	bd08      	pop	{r3, pc}

08004d84 <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8004d84:	3001      	adds	r0, #1
}
 8004d86:	0080      	lsls	r0, r0, #2
 8004d88:	4770      	bx	lr
	...

08004d8c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 8004d8c:	280b      	cmp	r0, #11
 8004d8e:	bf9a      	itte	ls
 8004d90:	4b02      	ldrls	r3, [pc, #8]	; (8004d9c <TfLiteTypeGetName+0x10>)
 8004d92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 8004d96:	4802      	ldrhi	r0, [pc, #8]	; (8004da0 <TfLiteTypeGetName+0x14>)
      return "FLOAT16";
    case kTfLiteFloat64:
      return "FLOAT64";
  }
  return "Unknown type";
}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	08019f80 	.word	0x08019f80
 8004da0:	0801fa99 	.word	0x0801fa99

08004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8004da4:	b40e      	push	{r1, r2, r3}
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8004dae:	f107 0320 	add.w	r3, r7, #32
 8004db2:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	69f9      	ldr	r1, [r7, #28]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd2:	b003      	add	sp, #12
 8004dd4:	4770      	bx	lr

08004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8004dd6:	b40c      	push	{r2, r3}
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8004de2:	f107 031c 	add.w	r3, r7, #28
 8004de6:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	69b9      	ldr	r1, [r7, #24]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e06:	b002      	add	sp, #8
 8004e08:	4770      	bx	lr

08004e0a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8004e22:	b590      	push	{r4, r7, lr}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8004e2a:	687c      	ldr	r4, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fd9a 	bl	8005968 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	425b      	negs	r3, r3
 8004e38:	4423      	add	r3, r4
  }
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd90      	pop	{r4, r7, pc}

08004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ffe7 	bl	8004e22 <_ZNK11flatbuffers5Table9GetVTableEv>
 8004e54:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fd6a 	bl	8005930 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004e60:	887a      	ldrh	r2, [r7, #2]
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d207      	bcs.n	8004e78 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8004e68:	887b      	ldrh	r3, [r7, #2]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd5e 	bl	8005930 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e000      	b.n	8004e7a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8004e78:	2300      	movs	r3, #0
  }
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZNK6tflite13Conv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2104      	movs	r1, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fdd4 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004e96:	4603      	mov	r3, r0
 8004e98:	b2db      	uxtb	r3, r3
  }
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2106      	movs	r1, #6
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fd96 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004eb6:	4603      	mov	r3, r0
  }
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2108      	movs	r1, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fd87 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004ed4:	4603      	mov	r3, r0
  }
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	210a      	movs	r1, #10
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fda6 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	b2db      	uxtb	r3, r3
  }
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	210c      	movs	r1, #12
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fd68 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004f12:	4603      	mov	r3, r0
  }
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	210e      	movs	r1, #14
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fd59 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004f30:	4603      	mov	r3, r0
  }
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <_ZNK6tflite13Pool2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2104      	movs	r1, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fd78 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	b2db      	uxtb	r3, r3
  }
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2106      	movs	r1, #6
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fd3a 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004f6e:	4603      	mov	r3, r0
  }
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	2108      	movs	r1, #8
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fd2b 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004f8c:	4603      	mov	r3, r0
  }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	210a      	movs	r1, #10
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fd1c 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004faa:	4603      	mov	r3, r0
  }
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	210c      	movs	r1, #12
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fd0d 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004fc8:	4603      	mov	r3, r0
  }
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	210e      	movs	r1, #14
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fd2c 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	b2db      	uxtb	r3, r3
  }
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2104      	movs	r1, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd1c 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005006:	4603      	mov	r3, r0
 8005008:	b2db      	uxtb	r3, r3
  }
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	2106      	movs	r1, #6
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fd0c 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005026:	4603      	mov	r3, r0
 8005028:	b2db      	uxtb	r3, r3
  }
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	2108      	movs	r1, #8
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fc9f 	bl	8005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
  }
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	210a      	movs	r1, #10
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fc8b 	bl	8005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
  }
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80050a8 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8005092:	2104      	movs	r1, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fcf2 	bl	8005a7e <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800509a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800509e:	eeb0 0a67 	vmov.f32	s0, s15
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00000000 	.word	0x00000000

080050ac <_ZNK6tflite14ReducerOptions9keep_dimsEv>:
  bool keep_dims() const {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2104      	movs	r1, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fc62 	bl	8005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
  }
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	210a      	movs	r1, #10
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fc4e 	bl	8005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80050e8:	4603      	mov	r3, r0
  }
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	210c      	movs	r1, #12
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc5f 	bl	80059c2 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8005104:	4603      	mov	r3, r0
  }
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ffdc 	bl	80050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d104      	bne.n	800512c <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff ffe5 	bl	80050f2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8005128:	4603      	mov	r3, r0
 800512a:	e000      	b.n	800512e <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 800512c:	2300      	movs	r3, #0
  }
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ffc8 	bl	80050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8005144:	4603      	mov	r3, r0
 8005146:	2b05      	cmp	r3, #5
 8005148:	d104      	bne.n	8005154 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ffd1 	bl	80050f2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8005150:	4603      	mov	r3, r0
 8005152:	e000      	b.n	8005156 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8005154:	2300      	movs	r3, #0
  }
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ffb4 	bl	80050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 800516c:	4603      	mov	r3, r0
 800516e:	2b08      	cmp	r3, #8
 8005170:	d104      	bne.n	800517c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ffbd 	bl	80050f2 <_ZNK6tflite8Operator15builtin_optionsEv>
 8005178:	4603      	mov	r3, r0
 800517a:	e000      	b.n	800517e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 800517c:	2300      	movs	r3, #0
  }
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ffa0 	bl	80050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8005194:	4603      	mov	r3, r0
 8005196:	2b09      	cmp	r3, #9
 8005198:	d104      	bne.n	80051a4 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff ffa9 	bl	80050f2 <_ZNK6tflite8Operator15builtin_optionsEv>
 80051a0:	4603      	mov	r3, r0
 80051a2:	e000      	b.n	80051a6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 80051a4:	2300      	movs	r3, #0
  }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv>:
  const tflite::ReducerOptions *builtin_options_as_ReducerOptions() const {
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff ff8c 	bl	80050d4 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b1b      	cmp	r3, #27
 80051c0:	d104      	bne.n	80051cc <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv+0x1e>
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ff95 	bl	80050f2 <_ZNK6tflite8Operator15builtin_optionsEv>
 80051c8:	4603      	mov	r3, r0
 80051ca:	e000      	b.n	80051ce <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv+0x20>
 80051cc:	2300      	movs	r3, #0
  }
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3304      	adds	r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	4610      	mov	r0, r2
 8005210:	4798      	blx	r3
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 800524c:	f012 fcba 	bl	8017bc4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8005256:	f012 fcb5 	bl	8017bc4 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8005260:	f012 fcb0 	bl	8017bc4 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 800526a:	f012 fcab 	bl	8017bc4 <abort>
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d81b      	bhi.n	80052c0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052ad 	.word	0x080052ad
 8005298:	080052b1 	.word	0x080052b1
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052b9 	.word	0x080052b9
 80052a4:	080052bd 	.word	0x080052bd
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e00a      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e008      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80052b0:	2302      	movs	r3, #2
 80052b2:	e006      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e004      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80052b8:	2304      	movs	r3, #4
 80052ba:	e002      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80052bc:	2305      	movs	r3, #5
 80052be:	e000      	b.n	80052c2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 80052e4:	e003      	b.n	80052ee <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e002      	b.n	80052f0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 80052ea:	2302      	movs	r3, #2
 80052ec:	e000      	b.n	80052f0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b0a      	cmp	r3, #10
 800530e:	d850      	bhi.n	80053b2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800534f 	.word	0x0800534f
 800531c:	08005345 	.word	0x08005345
 8005320:	0800536d 	.word	0x0800536d
 8005324:	08005377 	.word	0x08005377
 8005328:	0800538b 	.word	0x0800538b
 800532c:	08005395 	.word	0x08005395
 8005330:	0800539f 	.word	0x0800539f
 8005334:	08005363 	.word	0x08005363
 8005338:	080053a9 	.word	0x080053a9
 800533c:	08005381 	.word	0x08005381
 8005340:	08005359 	.word	0x08005359
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	220a      	movs	r2, #10
 8005348:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800534a:	2300      	movs	r3, #0
 800534c:	e03b      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005354:	2300      	movs	r3, #0
 8005356:	e036      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	220b      	movs	r2, #11
 800535c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800535e:	2300      	movs	r3, #0
 8005360:	e031      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2207      	movs	r2, #7
 8005366:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005368:	2300      	movs	r3, #0
 800536a:	e02c      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2202      	movs	r2, #2
 8005370:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005372:	2300      	movs	r3, #0
 8005374:	e027      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2203      	movs	r2, #3
 800537a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800537c:	2300      	movs	r3, #0
 800537e:	e022      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2209      	movs	r2, #9
 8005384:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005386:	2300      	movs	r3, #0
 8005388:	e01d      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2204      	movs	r2, #4
 800538e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005390:	2300      	movs	r3, #0
 8005392:	e018      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2205      	movs	r2, #5
 8005398:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800539a:	2300      	movs	r3, #0
 800539c:	e013      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2206      	movs	r2, #6
 80053a2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e00e      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2208      	movs	r2, #8
 80053ac:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e009      	b.n	80053c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	461a      	mov	r2, r3
 80053bc:	4904      	ldr	r1, [pc, #16]	; (80053d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff fcf0 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80053c4:	2301      	movs	r3, #1
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0801a198 	.word	0x0801a198

080053d4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff ff25 	bl	8005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80053ee:	f107 0318 	add.w	r3, r7, #24
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff10 	bl	800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	f107 0218 	add.w	r2, r7, #24
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fb91 	bl	8005b2c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800540a:	f107 0310 	add.w	r3, r7, #16
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fbcb 	bl	8005bac <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8005416:	4603      	mov	r3, r0
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4b37      	ldr	r3, [pc, #220]	; (800550c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800542e:	4a38      	ldr	r2, [pc, #224]	; (8005510 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68b8      	ldr	r0, [r7, #8]
 8005434:	f7ff fccf 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005438:	2401      	movs	r4, #1
 800543a:	e05b      	b.n	80054f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff fe66 	bl	800510e <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8005442:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d04b      	beq.n	80054e2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 800544a:	69f8      	ldr	r0, [r7, #28]
 800544c:	f7ff fd19 	bl	8004e82 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8005450:	4603      	mov	r3, r0
 8005452:	461d      	mov	r5, r3
 8005454:	f107 0310 	add.w	r3, r7, #16
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fbb4 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800545e:	4604      	mov	r4, r0
 8005460:	4628      	mov	r0, r5
 8005462:	f7ff ff35 	bl	80052d0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8005466:	4603      	mov	r3, r0
 8005468:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 800546a:	f107 0310 	add.w	r3, r7, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fba9 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005474:	4604      	mov	r4, r0
 8005476:	69f8      	ldr	r0, [r7, #28]
 8005478:	f7ff fd13 	bl	8004ea2 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 800547c:	4603      	mov	r3, r0
 800547e:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8005480:	f107 0310 	add.w	r3, r7, #16
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fb9e 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800548a:	4604      	mov	r4, r0
 800548c:	69f8      	ldr	r0, [r7, #28]
 800548e:	f7ff fd17 	bl	8004ec0 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 8005492:	4603      	mov	r3, r0
 8005494:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8005496:	69f8      	ldr	r0, [r7, #28]
 8005498:	f7ff fd21 	bl	8004ede <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 800549c:	4603      	mov	r3, r0
 800549e:	461d      	mov	r5, r3
    params->activation =
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fb8e 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80054aa:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80054ac:	4628      	mov	r0, r5
 80054ae:	f7ff fee3 	bl	8005278 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80054b2:	4603      	mov	r3, r0
    params->activation =
 80054b4:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80054b6:	f107 0310 	add.w	r3, r7, #16
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fb83 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80054c0:	4604      	mov	r4, r0
 80054c2:	69f8      	ldr	r0, [r7, #28]
 80054c4:	f7ff fd1b 	bl	8004efe <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 80054c8:	4603      	mov	r3, r0
 80054ca:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fb78 	bl	8005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80054d6:	4604      	mov	r4, r0
 80054d8:	69f8      	ldr	r0, [r7, #28]
 80054da:	f7ff fd1f 	bl	8004f1c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 80054de:	4603      	mov	r3, r0
 80054e0:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80054e2:	f107 0310 	add.w	r3, r7, #16
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb79 	bl	8005bde <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80054ec:	4602      	mov	r2, r0
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80054f2:	2400      	movs	r4, #0
}
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fb35 	bl	8005b68 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80054fe:	4623      	mov	r3, r4
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bdb0      	pop	{r4, r5, r7, pc}
 8005508:	0801a110 	.word	0x0801a110
 800550c:	0801a044 	.word	0x0801a044
 8005510:	0801a0f8 	.word	0x0801a0f8

08005514 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// We have this parse function instead of directly returning kTfLiteOk from the
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParseDequantize(const Operator*, ErrorReporter*,
                             BuiltinDataAllocator*, void**) {
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fe77 	bl	8005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800554a:	f107 0318 	add.w	r3, r7, #24
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fe62 	bl	800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8005556:	f107 0310 	add.w	r3, r7, #16
 800555a:	f107 0218 	add.w	r2, r7, #24
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb49 	bl	8005bf8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005566:	f107 0310 	add.w	r3, r7, #16
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fb83 	bl	8005c78 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8005572:	4603      	mov	r3, r0
 8005574:	f083 0301 	eor.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800557e:	4b37      	ldr	r3, [pc, #220]	; (800565c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	f240 434f 	movw	r3, #1103	; 0x44f
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4b35      	ldr	r3, [pc, #212]	; (8005660 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 800558a:	4a36      	ldr	r2, [pc, #216]	; (8005664 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68b8      	ldr	r0, [r7, #8]
 8005590:	f7ff fc21 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005594:	2401      	movs	r4, #1
 8005596:	e056      	b.n	8005646 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff fde0 	bl	800515e <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 800559e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d046      	beq.n	8005634 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80055a6:	69f8      	ldr	r0, [r7, #28]
 80055a8:	f7ff fd23 	bl	8004ff2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461d      	mov	r5, r3
    params->activation =
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fb6c 	bl	8005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80055ba:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80055bc:	4628      	mov	r0, r5
 80055be:	f7ff fe5b 	bl	8005278 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80055c2:	4603      	mov	r3, r0
    params->activation =
 80055c4:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb61 	bl	8005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80055d0:	4604      	mov	r4, r0
 80055d2:	69f8      	ldr	r0, [r7, #28]
 80055d4:	f7ff fd2d 	bl	8005032 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 80055d8:	4603      	mov	r3, r0
 80055da:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 80055dc:	f107 0310 	add.w	r3, r7, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fb56 	bl	8005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80055e6:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80055e8:	69f8      	ldr	r0, [r7, #28]
 80055ea:	f7ff fd36 	bl	800505a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80055ee:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80055f0:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80055f2:	69f8      	ldr	r0, [r7, #28]
 80055f4:	f7ff fd0d 	bl	8005012 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d009      	beq.n	8005616 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 8005602:	e011      	b.n	8005628 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fb42 	bl	8005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800560e:	4603      	mov	r3, r0
 8005610:	2200      	movs	r2, #0
 8005612:	705a      	strb	r2, [r3, #1]
        break;
 8005614:	e00e      	b.n	8005634 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8005616:	f107 0310 	add.w	r3, r7, #16
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fb39 	bl	8005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005620:	4603      	mov	r3, r0
 8005622:	2201      	movs	r2, #1
 8005624:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8005626:	e005      	b.n	8005634 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8005628:	490f      	ldr	r1, [pc, #60]	; (8005668 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f7ff fbba 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8005630:	2401      	movs	r4, #1
 8005632:	e008      	b.n	8005646 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fb36 	bl	8005caa <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800563e:	4602      	mov	r2, r0
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005644:	2400      	movs	r4, #0
}
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	4618      	mov	r0, r3
 800564c:	f000 faf2 	bl	8005c34 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005650:	4623      	mov	r3, r4
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bdb0      	pop	{r4, r5, r7, pc}
 800565a:	bf00      	nop
 800565c:	0801a110 	.word	0x0801a110
 8005660:	0801a044 	.word	0x0801a044
 8005664:	0801a0f8 	.word	0x0801a0f8
 8005668:	0801a1bc 	.word	0x0801a1bc

0800566c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 800566c:	b5b0      	push	{r4, r5, r7, lr}
 800566e:	b08a      	sub	sp, #40	; 0x28
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fdd9 	bl	8005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fdc4 	bl	800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	f107 0218 	add.w	r2, r7, #24
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fb11 	bl	8005cc4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80056a2:	f107 0310 	add.w	r3, r7, #16
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fb4b 	bl	8005d44 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f083 0301 	eor.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f240 5346 	movw	r3, #1350	; 0x546
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4b37      	ldr	r3, [pc, #220]	; (80057a4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80056c6:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68b8      	ldr	r0, [r7, #8]
 80056cc:	f7ff fb83 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80056d0:	2401      	movs	r4, #1
 80056d2:	e05b      	b.n	800578c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fd2e 	bl	8005136 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 80056da:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d04b      	beq.n	800577a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 80056e2:	69f8      	ldr	r0, [r7, #28]
 80056e4:	f7ff fc29 	bl	8004f3a <_ZNK6tflite13Pool2DOptions7paddingEv>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461d      	mov	r5, r3
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb34 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056f6:	4604      	mov	r4, r0
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7ff fde9 	bl	80052d0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80056fe:	4603      	mov	r3, r0
 8005700:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fb29 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800570c:	4604      	mov	r4, r0
 800570e:	69f8      	ldr	r0, [r7, #28]
 8005710:	f7ff fc23 	bl	8004f5a <_ZNK6tflite13Pool2DOptions8stride_wEv>
 8005714:	4603      	mov	r3, r0
 8005716:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8005718:	f107 0310 	add.w	r3, r7, #16
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fb1e 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005722:	4604      	mov	r4, r0
 8005724:	69f8      	ldr	r0, [r7, #28]
 8005726:	f7ff fc27 	bl	8004f78 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 800572a:	4603      	mov	r3, r0
 800572c:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb13 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005738:	4604      	mov	r4, r0
 800573a:	69f8      	ldr	r0, [r7, #28]
 800573c:	f7ff fc2b 	bl	8004f96 <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 8005740:	4603      	mov	r3, r0
 8005742:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 8005744:	f107 0310 	add.w	r3, r7, #16
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fb08 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800574e:	4604      	mov	r4, r0
 8005750:	69f8      	ldr	r0, [r7, #28]
 8005752:	f7ff fc2f 	bl	8004fb4 <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 8005756:	4603      	mov	r3, r0
 8005758:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800575a:	69f8      	ldr	r0, [r7, #28]
 800575c:	f7ff fc39 	bl	8004fd2 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 8005760:	4603      	mov	r3, r0
 8005762:	461d      	mov	r5, r3
    params->activation =
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	4618      	mov	r0, r3
 800576a:	f000 faf8 	bl	8005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800576e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8005770:	4628      	mov	r0, r5
 8005772:	f7ff fd81 	bl	8005278 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8005776:	4603      	mov	r3, r0
    params->activation =
 8005778:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800577a:	f107 0310 	add.w	r3, r7, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f000 faf9 	bl	8005d76 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005784:	4602      	mov	r2, r0
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800578a:	2400      	movs	r4, #0
}
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fab5 	bl	8005d00 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005796:	4623      	mov	r3, r4
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bdb0      	pop	{r4, r5, r7, pc}
 80057a0:	0801a110 	.word	0x0801a110
 80057a4:	0801a044 	.word	0x0801a044
 80057a8:	0801a0f8 	.word	0x0801a0f8

080057ac <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReducer(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b08b      	sub	sp, #44	; 0x2c
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff fd39 	bl	8005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80057c6:	f107 0318 	add.w	r3, r7, #24
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fd24 	bl	800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReducerParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReducerParams>();
 80057d2:	f107 0310 	add.w	r3, r7, #16
 80057d6:	f107 0218 	add.w	r2, r7, #24
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fad7 	bl	8005d90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReducerParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80057e2:	f107 0310 	add.w	r3, r7, #16
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fb11 	bl	8005e10 <_ZStneI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f083 0301 	eor.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80057fa:	4b19      	ldr	r3, [pc, #100]	; (8005860 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	f240 5376 	movw	r3, #1398	; 0x576
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7ff fae3 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005810:	2401      	movs	r4, #1
 8005812:	e01a      	b.n	800584a <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>

  const ReducerOptions* schema_params = op->builtin_options_as_ReducerOptions();
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fcca 	bl	80051ae <_ZNK6tflite8Operator33builtin_options_as_ReducerOptionsEv>
 800581a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    params->keep_dims = schema_params->keep_dims();
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f000 faff 	bl	8005e2a <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800582c:	4604      	mov	r4, r0
 800582e:	69f8      	ldr	r0, [r7, #28]
 8005830:	f7ff fc3c 	bl	80050ac <_ZNK6tflite14ReducerOptions9keep_dimsEv>
 8005834:	4603      	mov	r3, r0
 8005836:	7023      	strb	r3, [r4, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8005838:	f107 0310 	add.w	r3, r7, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fb00 	bl	8005e42 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005842:	4602      	mov	r2, r0
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005848:	2400      	movs	r4, #0
}
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fabc 	bl	8005dcc <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005854:	4623      	mov	r3, r4
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}
 800585e:	bf00      	nop
 8005860:	0801a110 	.word	0x0801a110
 8005864:	0801a044 	.word	0x0801a044
 8005868:	0801a0f8 	.word	0x0801a0f8

0800586c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b08b      	sub	sp, #44	; 0x2c
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff fcd9 	bl	8005238 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fcc4 	bl	800521a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	f107 0218 	add.w	r2, r7, #24
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fadd 	bl	8005e5c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80058a2:	f107 0310 	add.w	r3, r7, #16
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fb17 	bl	8005edc <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80058ba:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4b18      	ldr	r3, [pc, #96]	; (8005928 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7ff fa83 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80058d0:	2401      	movs	r4, #1
 80058d2:	e01c      	b.n	800590e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fc56 	bl	8005186 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80058da:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb05 	bl	8005ef6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80058ec:	4604      	mov	r4, r0
 80058ee:	69f8      	ldr	r0, [r7, #28]
 80058f0:	f7ff fbc8 	bl	8005084 <_ZNK6tflite14SoftmaxOptions4betaEv>
 80058f4:	eef0 7a40 	vmov.f32	s15, s0
 80058f8:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb04 	bl	8005f0e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005906:	4602      	mov	r2, r0
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800590c:	2400      	movs	r4, #0
}
 800590e:	f107 0310 	add.w	r3, r7, #16
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fac0 	bl	8005e98 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8005918:	4623      	mov	r3, r4
 800591a:	4618      	mov	r0, r3
 800591c:	3724      	adds	r7, #36	; 0x24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd90      	pop	{r4, r7, pc}
 8005922:	bf00      	nop
 8005924:	0801a110 	.word	0x0801a110
 8005928:	0801a044 	.word	0x0801a044
 800592c:	0801a0f8 	.word	0x0801a0f8

08005930 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fafe 	bl	8005f3e <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8005942:	4603      	mov	r3, r0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb fcb8 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800595e:	4603      	mov	r3, r0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fad7 	bl	8005f28 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800597a:	4603      	mov	r3, r0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fa52 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800599e:	4603      	mov	r3, r0
 80059a0:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	4413      	add	r3, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fadd 	bl	8005f6e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 80059b4:	4603      	mov	r3, r0
 80059b6:	e000      	b.n	80059ba <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 80059b8:	787b      	ldrb	r3, [r7, #1]
  }
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fad9 	bl	8005f8a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 80059d8:	4603      	mov	r3, r0
  }
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b086      	sub	sp, #24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	460b      	mov	r3, r1
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	4619      	mov	r1, r3
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff fa24 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80059fa:	4603      	mov	r3, r0
 80059fc:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	8afb      	ldrh	r3, [r7, #22]
 8005a08:	4413      	add	r3, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff ffac 	bl	8005968 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8005a10:	4603      	mov	r3, r0
 8005a12:	e000      	b.n	8005a16 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8005a14:	687b      	ldr	r3, [r7, #4]
  }
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 facb 	bl	8005fca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005a34:	4603      	mov	r3, r0
  }
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	807b      	strh	r3, [r7, #2]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff f9f5 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005a5c:	89fb      	ldrh	r3, [r7, #14]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	89fb      	ldrh	r3, [r7, #14]
 8005a66:	4413      	add	r3, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 face 	bl	800600a <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	e001      	b.n	8005a76 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8005a72:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	460b      	mov	r3, r1
 8005a88:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a8c:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	4619      	mov	r1, r3
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff f9d5 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005a9c:	8afb      	ldrh	r3, [r7, #22]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	8afb      	ldrh	r3, [r7, #22]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fabd 	bl	8006028 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8005aae:	eef0 7a40 	vmov.f32	s15, s0
 8005ab2:	e001      	b.n	8005ab8 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8005ab4:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8005ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fb fbfd 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ffe9 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005af0:	4602      	mov	r2, r0
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d306      	bcc.n	8005b06 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8005af8:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8005afc:	f240 1101 	movw	r1, #257	; 0x101
 8005b00:	4809      	ldr	r0, [pc, #36]	; (8005b28 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8005b02:	f012 f867 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fab2 	bl	8006070 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fa9b 	bl	800604c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8005b16:	4603      	mov	r3, r0
  }
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0801a1f0 	.word	0x0801a1f0
 8005b24:	0801a1fc 	.word	0x0801a1fc
 8005b28:	0801a2cc 	.word	0x0801a2cc

08005b2c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005b2c:	b590      	push	{r4, r7, lr}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 faa4 	bl	8006088 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8005b40:	4604      	mov	r4, r0
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f107 030c 	add.w	r3, r7, #12
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fb42 	bl	80051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	461a      	mov	r2, r3
 8005b58:	4621      	mov	r1, r4
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fabb 	bl	80060d6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd90      	pop	{r4, r7, pc}

08005b68 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fac4 	bl	8006100 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005b78:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fac9 	bl	800611a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fad2 	bl	8006134 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005b90:	4603      	mov	r3, r0
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff fb2c 	bl	80051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
      }
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd90      	pop	{r4, r7, pc}

08005bac <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    { return __x.get() != __y.get(); }

  /// unique_ptr comparison with nullptr
  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fac7 	bl	800614a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
	return get();
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 facc 	bl	800616c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005bd4:	4603      	mov	r3, r0
      }
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 facc 	bl	8006186 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fad2 	bl	80061b0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fadc 	bl	80051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	461a      	mov	r2, r3
 8005c24:	4621      	mov	r1, r4
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fae9 	bl	80061fe <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}

08005c34 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 faf2 	bl	8006228 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005c44:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 faf7 	bl	8006242 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005c54:	4604      	mov	r4, r0
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fb00 	bl	800625c <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff fac6 	bl	80051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
      }
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd90      	pop	{r4, r7, pc}

08005c78 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 faf5 	bl	8006272 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
	return get();
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fafa 	bl	8006294 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005ca0:	4603      	mov	r3, r0
      }
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fafa 	bl	80062ae <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb00 	bl	80062d8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fa76 	bl	80051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb17 	bl	8006326 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd90      	pop	{r4, r7, pc}

08005d00 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fb20 	bl	8006350 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005d10:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb25 	bl	800636a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005d20:	4604      	mov	r4, r0
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fb2e 	bl	8006384 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fa60 	bl	80051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
      }
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd90      	pop	{r4, r7, pc}

08005d44 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fb23 	bl	800639a <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005d54:	4603      	mov	r3, r0
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
	return get();
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fb28 	bl	80063bc <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005d6c:	4603      	mov	r3, r0
      }
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fb28 	bl	80063d6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReducerParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb2e 	bl	8006400 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReducerParamsEEPT_v>
 8005da4:	4604      	mov	r4, r0
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	f107 030c 	add.w	r3, r7, #12
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fa10 	bl	80051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb45 	bl	800644e <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd90      	pop	{r4, r7, pc}

08005dcc <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fb4e 	bl	8006478 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005ddc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00c      	beq.n	8005e00 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fb53 	bl	8006492 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005dec:	4604      	mov	r4, r0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fb5c 	bl	80064ac <_ZSt4moveIRP19TfLiteReducerParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005df4:	4603      	mov	r3, r0
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f7ff f9fa 	bl	80051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
      }
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd90      	pop	{r4, r7, pc}

08005e10 <_ZStneI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fb51 	bl	80064c2 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
	return get();
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb56 	bl	80064e4 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005e38:	4603      	mov	r3, r0
      }
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fb56 	bl	80064fe <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fb5c 	bl	8006528 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8005e70:	4604      	mov	r4, r0
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff f9aa 	bl	80051d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005e82:	f107 030c 	add.w	r3, r7, #12
 8005e86:	461a      	mov	r2, r3
 8005e88:	4621      	mov	r1, r4
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb73 	bl	8006576 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}

08005e98 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fb7c 	bl	80065a0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005ea8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb81 	bl	80065ba <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fb8a 	bl	80065d4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff f994 	bl	80051f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
      }
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd90      	pop	{r4, r7, pc}

08005edc <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fb7f 	bl	80065ea <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
	return get();
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb84 	bl	800660c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005f04:	4603      	mov	r3, r0
      }
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fb84 	bl	8006626 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    return t;
 8005f30:	687b      	ldr	r3, [r7, #4]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	4603      	mov	r3, r0
 8005f46:	80fb      	strh	r3, [r7, #6]
    return t;
 8005f48:	88fb      	ldrh	r3, [r7, #6]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	71fb      	strb	r3, [r7, #7]
    return t;
 8005f60:	79fb      	ldrb	r3, [r7, #7]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ffeb 	bl	8005f56 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8005f80:	4603      	mov	r3, r0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	460b      	mov	r3, r1
 8005f94:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fe ff51 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	89fb      	ldrh	r3, [r7, #14]
 8005fa8:	4413      	add	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d006      	beq.n	8005fc0 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f7ff fcca 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4413      	add	r3, r2
                        : nullptr;
 8005fbe:	e000      	b.n	8005fc2 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005fc0:	2300      	movs	r3, #0
  }
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fe ff31 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	89fb      	ldrh	r3, [r7, #14]
 8005fe8:	4413      	add	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005fec:	89fb      	ldrh	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f7ff fcaa 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4413      	add	r3, r2
                        : nullptr;
 8005ffe:	e000      	b.n	8006002 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006000:	2300      	movs	r3, #0
  }
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f993 3000 	ldrsb.w	r3, [r3]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fb19 	bl	8006650 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800601e:	4603      	mov	r3, r0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	eeb0 0a67 	vmov.f32	s0, s15
 800603a:	f000 fb16 	bl	800666a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800603e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006042:	eeb0 0a67 	vmov.f32	s0, s15
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ff61 	bl	8005f28 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8006066:	4603      	mov	r3, r0
  }
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
  }
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	2118      	movs	r1, #24
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
 800609e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4619      	mov	r1, r3
 80060a4:	2018      	movs	r0, #24
 80060a6:	f7fe feb0 	bl	8004e0a <_ZnwjPv>
 80060aa:	4603      	mov	r3, r0
  }
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZNSt15__uniq_ptr_dataI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fae9 	bl	800669e <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80060d6:	b590      	push	{r4, r7, lr}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80060e2:	68fc      	ldr	r4, [r7, #12]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 facf 	bl	8006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ffdf 	bl	80060b4 <_ZNSt15__uniq_ptr_dataI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}

08006100 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fadd 	bl	80066ca <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006110:	4603      	mov	r3, r0
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fadd 	bl	80066e4 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800612a:	4603      	mov	r3, r0
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f80a 	bl	800616c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fac1 	bl	80066fe <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800617c:	4603      	mov	r3, r0
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ffb6 	bl	8006100 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006194:	4603      	mov	r3, r0
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ffb0 	bl	8006100 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
	return __p;
 80061a6:	68fb      	ldr	r3, [r7, #12]
      }
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	2104      	movs	r1, #4
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4619      	mov	r1, r3
 80061cc:	2004      	movs	r0, #4
 80061ce:	f7fe fe1c 	bl	8004e0a <_ZnwjPv>
 80061d2:	4603      	mov	r3, r0
  }
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fa93 	bl	800671a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80061fe:	b590      	push	{r4, r7, lr}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800620a:	68fc      	ldr	r4, [r7, #12]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fa3b 	bl	8006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006212:	4603      	mov	r3, r0
 8006214:	461a      	mov	r2, r3
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff ffdf 	bl	80061dc <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bd90      	pop	{r4, r7, pc}

08006228 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa87 	bl	8006746 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006238:	4603      	mov	r3, r0
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fa87 	bl	8006760 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8006252:	4603      	mov	r3, r0
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f80a 	bl	8006294 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fa6b 	bl	800677a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ffb6 	bl	8006228 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80062bc:	4603      	mov	r3, r0
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ffb0 	bl	8006228 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
	return __p;
 80062ce:	68fb      	ldr	r3, [r7, #12]
      }
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2204      	movs	r2, #4
 80062e8:	2128      	movs	r1, #40	; 0x28
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
 80062ee:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4619      	mov	r1, r3
 80062f4:	2028      	movs	r0, #40	; 0x28
 80062f6:	f7fe fd88 	bl	8004e0a <_ZnwjPv>
 80062fa:	4603      	mov	r3, r0
  }
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <_ZNSt15__uniq_ptr_dataI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fa3d 	bl	8006796 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006326:	b590      	push	{r4, r7, lr}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006332:	68fc      	ldr	r4, [r7, #12]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9a7 	bl	8006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff ffdf 	bl	8006304 <_ZNSt15__uniq_ptr_dataI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bd90      	pop	{r4, r7, pc}

08006350 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fa31 	bl	80067c2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006360:	4603      	mov	r3, r0
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fa31 	bl	80067dc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800637a:	4603      	mov	r3, r0
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f80a 	bl	80063bc <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fa15 	bl	80067f6 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff ffb6 	bl	8006350 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80063e4:	4603      	mov	r3, r0
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ffb0 	bl	8006350 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
	return __p;
 80063f6:	68fb      	ldr	r3, [r7, #12]
      }
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReducerParamsEEPT_v>:
  T* AllocatePOD() {
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2201      	movs	r2, #1
 8006410:	2101      	movs	r1, #1
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4619      	mov	r1, r3
 800641c:	2001      	movs	r0, #1
 800641e:	f7fe fcf4 	bl	8004e0a <_ZnwjPv>
 8006422:	4603      	mov	r3, r0
  }
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZNSt15__uniq_ptr_dataI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f9e7 	bl	8006812 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800644e:	b590      	push	{r4, r7, lr}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800645a:	68fc      	ldr	r4, [r7, #12]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f913 	bl	8006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff ffdf 	bl	800642c <_ZNSt15__uniq_ptr_dataI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bd90      	pop	{r4, r7, pc}

08006478 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f9db 	bl	800683e <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006488:	4603      	mov	r3, r0
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <_ZNSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f9db 	bl	8006858 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80064a2:	4603      	mov	r3, r0
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZSt4moveIRP19TfLiteReducerParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f80a 	bl	80064e4 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNKSt10unique_ptrI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f9bf 	bl	8006872 <_ZNKSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ffb6 	bl	8006478 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800650c:	4603      	mov	r3, r0
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ffb0 	bl	8006478 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006518:	4603      	mov	r3, r0
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
	return __p;
 800651e:	68fb      	ldr	r3, [r7, #12]
      }
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2204      	movs	r2, #4
 8006538:	2104      	movs	r1, #4
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
 800653e:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4619      	mov	r1, r3
 8006544:	2004      	movs	r0, #4
 8006546:	f7fe fc60 	bl	8004e0a <_ZnwjPv>
 800654a:	4603      	mov	r3, r0
  }
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f991 	bl	800688e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8006576:	b590      	push	{r4, r7, lr}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8006582:	68fc      	ldr	r4, [r7, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f87f 	bl	8006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff ffdf 	bl	8006554 <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bd90      	pop	{r4, r7, pc}

080065a0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f985 	bl	80068ba <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f985 	bl	80068d4 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f80a 	bl	800660c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f969 	bl	80068ee <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800661c:	4603      	mov	r3, r0
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff ffb6 	bl	80065a0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006634:	4603      	mov	r3, r0
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ffb0 	bl	80065a0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8006640:	4603      	mov	r3, r0
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	return __p;
 8006646:	68fb      	ldr	r3, [r7, #12]
      }
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
    return t;
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	ee07 3a90 	vmov	s15, r3
}
 800667a:	eeb0 0a67 	vmov.f32	s0, s15
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80066aa:	68fc      	ldr	r4, [r7, #12]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f92c 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80066b2:	4602      	mov	r2, r0
 80066b4:	f107 0308 	add.w	r3, r7, #8
 80066b8:	4619      	mov	r1, r3
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f930 	bl	8006920 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f93c 	bl	8006952 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80066da:	4603      	mov	r3, r0
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f93b 	bl	800696a <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80066f4:	4603      	mov	r3, r0
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f93b 	bl	8006984 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800670e:	4603      	mov	r3, r0
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800671a:	b590      	push	{r4, r7, lr}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006726:	68fc      	ldr	r4, [r7, #12]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8ee 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800672e:	4602      	mov	r2, r0
 8006730:	f107 0308 	add.w	r3, r7, #8
 8006734:	4619      	mov	r1, r3
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f931 	bl	800699e <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bd90      	pop	{r4, r7, pc}

08006746 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f93d 	bl	80069d0 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006756:	4603      	mov	r3, r0
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f93c 	bl	80069e8 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006770:	4603      	mov	r3, r0
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f93c 	bl	8006a02 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800678a:	4603      	mov	r3, r0
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006796:	b590      	push	{r4, r7, lr}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80067a2:	68fc      	ldr	r4, [r7, #12]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8b0 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80067aa:	4602      	mov	r2, r0
 80067ac:	f107 0308 	add.w	r3, r7, #8
 80067b0:	4619      	mov	r1, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f932 	bl	8006a1c <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}

080067c2 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f93e 	bl	8006a4e <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f93d 	bl	8006a66 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80067ec:	4603      	mov	r3, r0
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f93d 	bl	8006a80 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8006806:	4603      	mov	r3, r0
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006812:	b590      	push	{r4, r7, lr}
 8006814:	b085      	sub	sp, #20
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800681e:	68fc      	ldr	r4, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f872 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006826:	4602      	mov	r2, r0
 8006828:	f107 0308 	add.w	r3, r7, #8
 800682c:	4619      	mov	r1, r3
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f933 	bl	8006a9a <_ZNSt5tupleIJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bd90      	pop	{r4, r7, pc}

0800683e <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f93f 	bl	8006acc <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800684e:	4603      	mov	r3, r0
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <_ZNSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f93e 	bl	8006ae4 <_ZSt3getILj1EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8006868:	4603      	mov	r3, r0
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_ZNKSt15__uniq_ptr_implI19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 f93e 	bl	8006afe <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8006882:	4603      	mov	r3, r0
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800688e:	b590      	push	{r4, r7, lr}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800689a:	68fc      	ldr	r4, [r7, #12]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f834 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80068a2:	4602      	mov	r2, r0
 80068a4:	f107 0308 	add.w	r3, r7, #8
 80068a8:	4619      	mov	r1, r3
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f934 	bl	8006b18 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}

080068ba <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f940 	bl	8006b4a <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f93f 	bl	8006b62 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f93f 	bl	8006b7c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80068fe:	4603      	mov	r3, r0
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8006920:	b5b0      	push	{r4, r5, r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800692c:	68fc      	ldr	r4, [r7, #12]
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f000 f93d 	bl	8006bae <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006934:	4605      	mov	r5, r0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ffe7 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	4629      	mov	r1, r5
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f93e 	bl	8006bc4 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bdb0      	pop	{r4, r5, r7, pc}

08006952 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f950 	bl	8006c00 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8006960:	4603      	mov	r3, r0
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f90e 	bl	8006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800697a:	4603      	mov	r3, r0
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f944 	bl	8006c1c <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006994:	4603      	mov	r3, r0
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800699e:	b5b0      	push	{r4, r5, r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80069aa:	68fc      	ldr	r4, [r7, #12]
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f000 f941 	bl	8006c34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b2:	4605      	mov	r5, r0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ffa8 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	4629      	mov	r1, r5
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f942 	bl	8006c4a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bdb0      	pop	{r4, r5, r7, pc}

080069d0 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f954 	bl	8006c86 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80069de:	4603      	mov	r3, r0
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f8cf 	bl	8006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f948 	bl	8006ca2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006a12:	4603      	mov	r3, r0
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8006a1c:	b5b0      	push	{r4, r5, r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006a28:	68fc      	ldr	r4, [r7, #12]
 8006a2a:	68b8      	ldr	r0, [r7, #8]
 8006a2c:	f000 f945 	bl	8006cba <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006a30:	4605      	mov	r5, r0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff ff69 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f946 	bl	8006cd0 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bdb0      	pop	{r4, r5, r7, pc}

08006a4e <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f958 	bl	8006d0c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f890 	bl	8006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f94c 	bl	8006d28 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006a90:	4603      	mov	r3, r0
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <_ZNSt5tupleIJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8006a9a:	b5b0      	push	{r4, r5, r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006aa6:	68fc      	ldr	r4, [r7, #12]
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	f000 f949 	bl	8006d40 <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006aae:	4605      	mov	r5, r0
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ff2a 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4629      	mov	r1, r5
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 f94a 	bl	8006d56 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bdb0      	pop	{r4, r5, r7, pc}

08006acc <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f95c 	bl	8006d92 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZSt3getILj1EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f851 	bl	8006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8006af4:	4603      	mov	r3, r0
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <_ZSt3getILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f950 	bl	8006dae <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8006b18:	b5b0      	push	{r4, r5, r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006b24:	68fc      	ldr	r4, [r7, #12]
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f000 f94d 	bl	8006dc6 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff feeb 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461a      	mov	r2, r3
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f94e 	bl	8006ddc <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bdb0      	pop	{r4, r5, r7, pc}

08006b4a <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f960 	bl	8006e18 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f812 	bl	8006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8006b72:	4603      	mov	r3, r0
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 f954 	bl	8006e34 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f967 	bl	8006e72 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8006bd0:	68fc      	ldr	r4, [r7, #12]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fe99 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 f935 	bl	8006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1d1c      	adds	r4, r3, #4
 8006be6:	68b8      	ldr	r0, [r7, #8]
 8006be8:	f7ff ffe1 	bl	8006bae <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 f94b 	bl	8006e8c <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
	{ }
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd90      	pop	{r4, r7, pc}

08006c00 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f94e 	bl	8006eae <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f94d 	bl	8006ec4 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8006c56:	68fc      	ldr	r4, [r7, #12]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff fe56 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4619      	mov	r1, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f8f2 	bl	8006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	1d1c      	adds	r4, r3, #4
 8006c6c:	68b8      	ldr	r0, [r7, #8]
 8006c6e:	f7ff ffe1 	bl	8006c34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4619      	mov	r1, r3
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f932 	bl	8006ee0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
	{ }
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd90      	pop	{r4, r7, pc}

08006c86 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f935 	bl	8006f02 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f934 	bl	8006f18 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8006cdc:	68fc      	ldr	r4, [r7, #12]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff fe13 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 f8af 	bl	8006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1d1c      	adds	r4, r3, #4
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f7ff ffe1 	bl	8006cba <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f919 	bl	8006f34 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
	{ }
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd90      	pop	{r4, r7, pc}

08006d0c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f91c 	bl	8006f56 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f91b 	bl	8006f6c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006d56:	b590      	push	{r4, r7, lr}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8006d62:	68fc      	ldr	r4, [r7, #12]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fdd0 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f86c 	bl	8006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1d1c      	adds	r4, r3, #4
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f7ff ffe1 	bl	8006d40 <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4619      	mov	r1, r3
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f900 	bl	8006f88 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EEC1IRS1_EEOT_>
	{ }
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}

08006d92 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f903 	bl	8006faa <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERS2_>
 8006da4:	4603      	mov	r3, r0
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <_ZSt12__get_helperILj0EP19TfLiteReducerParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f902 	bl	8006fc0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8006de8:	68fc      	ldr	r4, [r7, #12]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fd8d 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006df0:	4603      	mov	r3, r0
 8006df2:	4619      	mov	r1, r3
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f829 	bl	8006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1d1c      	adds	r4, r3, #4
 8006dfe:	68b8      	ldr	r0, [r7, #8]
 8006e00:	f7ff ffe1 	bl	8006dc6 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4619      	mov	r1, r3
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f8e7 	bl	8006fdc <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
	{ }
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f8ea 	bl	8006ffe <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8e9 	bl	8007014 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8006e42:	4603      	mov	r3, r0
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8006e56:	687c      	ldr	r4, [r7, #4]
 8006e58:	6838      	ldr	r0, [r7, #0]
 8006e5a:	f7ff fd56 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4619      	mov	r1, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f8e4 	bl	8007030 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
	{ }
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}

08006e72 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f8e8 	bl	8007052 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8006e82:	4603      	mov	r3, r0
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006e96:	6838      	ldr	r0, [r7, #0]
 8006e98:	f7ff fe89 	bl	8006bae <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f8c9 	bl	8007068 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006eea:	6838      	ldr	r0, [r7, #0]
 8006eec:	f7ff fea2 	bl	8006c34 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f8aa 	bl	800707e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006f3e:	6838      	ldr	r0, [r7, #0]
 8006f40:	f7ff febb 	bl	8006cba <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006f44:	4603      	mov	r3, r0
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f88b 	bl	8007094 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006f92:	6838      	ldr	r0, [r7, #0]
 8006f94:	f7ff fed4 	bl	8006d40 <_ZSt7forwardIRP19TfLiteReducerParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <_ZNSt11_Tuple_implILj0EJP19TfLiteReducerParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f86c 	bl	80070aa <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERKS2_>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f7ff feed 	bl	8006dc6 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8006fec:	4603      	mov	r3, r0
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f84d 	bl	80070c0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8007026:	4603      	mov	r3, r0
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f7ff fc65 	bl	800690a <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <_ZNSt10_Head_baseILj0EP19TfLiteReducerParamsLb0EE7_M_headERKS2_>:
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f8d9 	bl	8007298 <_ZNK11flatbuffers6VectorIcE4DataEv>
 80070e6:	4603      	mov	r3, r0
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return names;
 80070f4:	4b02      	ldr	r3, [pc, #8]	; (8007100 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	0801faf4 	.word	0x0801faf4

08007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 800710e:	2300      	movs	r3, #0
 8007110:	72bb      	strb	r3, [r7, #10]
 8007112:	237e      	movs	r3, #126	; 0x7e
 8007114:	72fb      	strb	r3, [r7, #11]
 8007116:	f107 020b 	add.w	r2, r7, #11
 800711a:	f107 010a 	add.w	r1, r7, #10
 800711e:	1dfb      	adds	r3, r7, #7
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f8c5 	bl	80072b0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800712e:	e008      	b.n	8007142 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8007134:	f7ff ffdc 	bl	80070f0 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	681b      	ldr	r3, [r3, #0]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	0801a95c 	.word	0x0801a95c

08007150 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	2104      	movs	r1, #4
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fc6d 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8007164:	4603      	mov	r3, r0
 8007166:	b2db      	uxtb	r3, r3
  }
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2106      	movs	r1, #6
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f8b2 	bl	80072e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8007182:	4603      	mov	r3, r0
  }
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	2108      	movs	r1, #8
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fc21 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80071a0:	4603      	mov	r3, r0
  }
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b089      	sub	sp, #36	; 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80071ba:	2300      	movs	r3, #0
 80071bc:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff ffc3 	bl	8007150 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80071ca:	4603      	mov	r3, r0
 80071cc:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff ffdc 	bl	800718c <_ZNK6tflite12OperatorCode7versionEv>
 80071d4:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 80071d6:	7fbb      	ldrb	r3, [r7, #30]
 80071d8:	2b7e      	cmp	r3, #126	; 0x7e
 80071da:	d908      	bls.n	80071ee <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 80071dc:	7fbb      	ldrb	r3, [r7, #30]
 80071de:	461a      	mov	r2, r3
 80071e0:	492a      	ldr	r1, [pc, #168]	; (800728c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fd fdde 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 80071e8:	2301      	movs	r3, #1
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e049      	b.n	8007282 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 80071ee:	7fbb      	ldrb	r3, [r7, #30]
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	d01b      	beq.n	800722c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
    *registration = op_resolver.FindOp(builtin_code, version);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	7fb9      	ldrb	r1, [r7, #30]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	68b8      	ldr	r0, [r7, #8]
 8007200:	4798      	blx	r3
 8007202:	4602      	mov	r2, r0
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d138      	bne.n	8007282 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      TF_LITE_REPORT_ERROR(
 8007210:	687c      	ldr	r4, [r7, #4]
 8007212:	7fbb      	ldrb	r3, [r7, #30]
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff ff75 	bl	8007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800721a:	4602      	mov	r2, r0
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	491c      	ldr	r1, [pc, #112]	; (8007290 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8007220:	4620      	mov	r0, r4
 8007222:	f7fd fdbf 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8007226:	2301      	movs	r3, #1
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e02a      	b.n	8007282 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
    }
  } else if (!opcode->custom_code()) {
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff ff9f 	bl	8007170 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d006      	beq.n	8007250 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    TF_LITE_REPORT_ERROR(
 8007242:	4914      	ldr	r1, [pc, #80]	; (8007294 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fd fdad 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800724a:	2301      	movs	r3, #1
 800724c:	77fb      	strb	r3, [r7, #31]
 800724e:	e018      	b.n	8007282 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff ff8d 	bl	8007170 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8007256:	4603      	mov	r3, r0
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff3c 	bl	80070d6 <_ZNK11flatbuffers6String5c_strEv>
 800725e:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3304      	adds	r3, #4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	68b8      	ldr	r0, [r7, #8]
 800726e:	4798      	blx	r3
 8007270:	4602      	mov	r2, r0
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800727e:	2301      	movs	r3, #1
 8007280:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8007282:	7ffb      	ldrb	r3, [r7, #31]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3724      	adds	r7, #36	; 0x24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd90      	pop	{r4, r7, pc}
 800728c:	0801a960 	.word	0x0801a960
 8007290:	0801a9b4 	.word	0x0801a9b4
 8007294:	0801a9ec 	.word	0x0801a9ec

08007298 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
  }
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d305      	bcc.n	80072d4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d201      	bcs.n	80072d8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80072f2:	887b      	ldrh	r3, [r7, #2]
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f805 	bl	8007306 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80072fc:	4603      	mov	r3, r0
  }
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fd fd93 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800731c:	4603      	mov	r3, r0
 800731e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	4413      	add	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007328:	89fb      	ldrh	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d006      	beq.n	800733c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800732e:	68b8      	ldr	r0, [r7, #8]
 8007330:	f7fe fb0c 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007334:	4602      	mov	r2, r0
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4413      	add	r3, r2
                        : nullptr;
 800733a:	e000      	b.n	800733e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800733c:	2300      	movs	r3, #0
  }
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007354:	f083 0301 	eor.w	r3, r3, #1
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 800735e:	2300      	movs	r3, #0
 8007360:	e01e      	b.n	80073a0 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b09      	cmp	r3, #9
 800736c:	d102      	bne.n	8007374 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e009      	b.n	8007394 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x4e>
    *raw_ptr = value;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3301      	adds	r3, #1
 800738c:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d3f0      	bcc.n	8007380 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x3a>
  }
#endif
  return kTfLiteOk;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80073b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80073ba:	f010 fb11 	bl	80179e0 <roundf>
 80073be:	eef0 7a40 	vmov.f32	s15, s0
 80073c2:	eeb0 0a67 	vmov.f32	s0, s15
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80073d4:	4618      	mov	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80073e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e4:	b088      	sub	sp, #32
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fc:	f7f9 fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
    return;
 8007412:	e068      	b.n	80074e6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8007414:	6838      	ldr	r0, [r7, #0]
 8007416:	ed97 0b02 	vldr	d0, [r7, #8]
 800741a:	f010 f927 	bl	801766c <frexp>
 800741e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	4b32      	ldr	r3, [pc, #200]	; (80074f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8007428:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800742c:	f7f9 f8ec 	bl	8000608 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	ec43 2b17 	vmov	d7, r2, r3
 8007438:	eeb0 0a47 	vmov.f32	s0, s14
 800743c:	eef0 0a67 	vmov.f32	s1, s15
 8007440:	f000 f97b 	bl	800773a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8007444:	ec53 2b10 	vmov	r2, r3, d0
 8007448:	4610      	mov	r0, r2
 800744a:	4619      	mov	r1, r3
 800744c:	f7f9 fbee 	bl	8000c2c <__aeabi_d2lz>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8007458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800745c:	4925      	ldr	r1, [pc, #148]	; (80074f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800745e:	428a      	cmp	r2, r1
 8007460:	f173 0300 	sbcs.w	r3, r3, #0
 8007464:	db01      	blt.n	800746a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8007466:	f010 fbad 	bl	8017bc4 <abort>
  if (q_fixed == (1ll << 31)) {
 800746a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8007472:	430b      	orrs	r3, r1
 8007474:	d118      	bne.n	80074a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8007476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800747a:	0fd9      	lsrs	r1, r3, #31
 800747c:	2000      	movs	r0, #0
 800747e:	468a      	mov	sl, r1
 8007480:	4683      	mov	fp, r0
 8007482:	eb1a 0402 	adds.w	r4, sl, r2
 8007486:	eb4b 0503 	adc.w	r5, fp, r3
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	0862      	lsrs	r2, r4, #1
 8007494:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8007498:	106b      	asrs	r3, r5, #1
 800749a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 80074a8:	f7ff ff90 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 80074ac:	4603      	mov	r3, r0
 80074ae:	17da      	asrs	r2, r3, #31
 80074b0:	4698      	mov	r8, r3
 80074b2:	4691      	mov	r9, r2
 80074b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b8:	4590      	cmp	r8, r2
 80074ba:	eb79 0303 	sbcs.w	r3, r9, r3
 80074be:	da01      	bge.n	80074c4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 80074c0:	f010 fb80 	bl	8017bc4 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f113 0f1f 	cmn.w	r3, #31
 80074cc:	da08      	bge.n	80074e0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
}
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ee:	bf00      	nop
 80074f0:	41e00000 	.word	0x41e00000
 80074f4:	80000001 	.word	0x80000001

080074f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800750c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007510:	f7f9 fb0a 	bl	8000b28 <__aeabi_dcmpgt>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800751a:	f010 fb53 	bl	8017bc4 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	ed97 0b02 	vldr	d0, [r7, #8]
 8007526:	f7ff ff5b 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da01      	bge.n	8007536 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8007532:	f010 fb47 	bl	8017bc4 <abort>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	3ff00000 	.word	0x3ff00000

08007544 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f9 fac7 	bl	8000aec <__aeabi_dcmplt>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	e000      	b.n	800756a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8007568:	687b      	ldr	r3, [r7, #4]
    }
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	0000      	movs	r0, r0
 8007574:	0000      	movs	r0, r0
	...

08007578 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8007578:	b5b0      	push	{r4, r5, r7, lr}
 800757a:	b08e      	sub	sp, #56	; 0x38
 800757c:	af00      	add	r7, sp, #0
 800757e:	ed87 0b06 	vstr	d0, [r7, #24]
 8007582:	ed87 1b04 	vstr	d1, [r7, #16]
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800758c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007590:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007594:	f7f9 f838 	bl	8000608 <__aeabi_dmul>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4614      	mov	r4, r2
 800759e:	461d      	mov	r5, r3
 80075a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	fa22 f303 	lsr.w	r3, r2, r3
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7f8 ffc2 	bl	8000534 <__aeabi_i2d>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f9 f826 	bl	8000608 <__aeabi_dmul>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80075c4:	a30e      	add	r3, pc, #56	; (adr r3, 8007600 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  const double input_beta_real_multiplier = std::min(
 80075ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80075d2:	f107 0320 	add.w	r3, r7, #32
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ffb3 	bl	8007544 <_ZSt3minIdERKT_S2_S2_>
 80075de:	4603      	mov	r3, r0
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	68b8      	ldr	r0, [r7, #8]
 80075ec:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80075f0:	f7ff ff82 	bl	80074f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80075f4:	bf00      	nop
 80075f6:	3738      	adds	r7, #56	; 0x38
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bdb0      	pop	{r4, r5, r7, pc}
 80075fc:	f3af 8000 	nop.w
 8007600:	ffc00000 	.word	0xffc00000
 8007604:	41dfffff 	.word	0x41dfffff

08007608 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b087      	sub	sp, #28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8007616:	2201      	movs	r2, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	4618      	mov	r0, r3
 8007622:	f7f8 ff87 	bl	8000534 <__aeabi_i2d>
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1ad1      	subs	r1, r2, r3
 8007630:	f04f 0201 	mov.w	r2, #1
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	f1a1 0620 	sub.w	r6, r1, #32
 800763c:	f1c1 0020 	rsb	r0, r1, #32
 8007640:	fa03 f901 	lsl.w	r9, r3, r1
 8007644:	fa02 f606 	lsl.w	r6, r2, r6
 8007648:	ea49 0906 	orr.w	r9, r9, r6
 800764c:	fa22 f000 	lsr.w	r0, r2, r0
 8007650:	ea49 0900 	orr.w	r9, r9, r0
 8007654:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f8 ffa6 	bl	80005ac <__aeabi_l2d>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4650      	mov	r0, sl
 8007666:	4659      	mov	r1, fp
 8007668:	f7f8 ffce 	bl	8000608 <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4690      	mov	r8, r2
 8007672:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8007674:	f04f 0201 	mov.w	r2, #1
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	f1a1 0620 	sub.w	r6, r1, #32
 8007682:	f1c1 0020 	rsb	r0, r1, #32
 8007686:	fa03 f501 	lsl.w	r5, r3, r1
 800768a:	fa02 f606 	lsl.w	r6, r2, r6
 800768e:	4335      	orrs	r5, r6
 8007690:	fa22 f000 	lsr.w	r0, r2, r0
 8007694:	4305      	orrs	r5, r0
 8007696:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 ff85 	bl	80005ac <__aeabi_l2d>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f9 f8d7 	bl	800085c <__aeabi_ddiv>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 80076b6:	ed97 0b04 	vldr	d0, [r7, #16]
 80076ba:	f010 f8c9 	bl	8017850 <floor>
 80076be:	ec53 2b10 	vmov	r2, r3, d0
 80076c2:	4610      	mov	r0, r2
 80076c4:	4619      	mov	r1, r3
 80076c6:	f7f9 fa39 	bl	8000b3c <__aeabi_d2iz>
 80076ca:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076d6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	ed93 7a00 	vldr	s14, [r3]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	edd3 7a00 	vldr	s15, [r3]
 80076ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	d501      	bpl.n	80076fa <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	e000      	b.n	80076fc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80076fa:	687b      	ldr	r3, [r7, #4]
    }
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	ed93 7a00 	vldr	s14, [r3]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	edd3 7a00 	vldr	s15, [r3]
 800771e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	d501      	bpl.n	800772c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	e000      	b.n	800772e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800772c:	687b      	ldr	r3, [r7, #4]
    }
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	ed87 0b00 	vstr	d0, [r7]
 8007744:	ed97 0b00 	vldr	d0, [r7]
 8007748:	f010 f902 	bl	8017950 <round>
 800774c:	eeb0 7a40 	vmov.f32	s14, s0
 8007750:	eef0 7a60 	vmov.f32	s15, s1
 8007754:	eeb0 0a47 	vmov.f32	s0, s14
 8007758:	eef0 0a67 	vmov.f32	s1, s15
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	ed87 0a01 	vstr	s0, [r7, #4]
 800776c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007770:	f7ff fe1c 	bl	80073ac <_ZSt5roundf>
 8007774:	eef0 7a40 	vmov.f32	s15, s0
 8007778:	eeb0 0a67 	vmov.f32	s0, s15
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8007782:	b480      	push	{r7}
 8007784:	af00      	add	r7, sp, #0
 8007786:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800778a:	4618      	mov	r0, r3
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
 8007798:	237f      	movs	r3, #127	; 0x7f
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	23ff      	movs	r3, #255	; 0xff
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80077ca:	4618      	mov	r0, r3
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	ffff8000 	.word	0xffff8000

080077d8 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
 80077dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80077e0:	4618      	mov	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	685b      	ldr	r3, [r3, #4]
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
}
#endif  // TF_LITE_STATIC_MEMORY
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }

inline int64_t NumElements(const TfLiteIntArray* dims) {
 8007826:	b4b0      	push	{r4, r5, r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800782e:	f04f 0001 	mov.w	r0, #1
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800783a:	2100      	movs	r1, #0
 800783c:	60f9      	str	r1, [r7, #12]
 800783e:	e01a      	b.n	8007876 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x50>
    count *= dims->data[i];
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	0089      	lsls	r1, r1, #2
 8007846:	4401      	add	r1, r0
 8007848:	6849      	ldr	r1, [r1, #4]
 800784a:	17c8      	asrs	r0, r1, #31
 800784c:	460c      	mov	r4, r1
 800784e:	4605      	mov	r5, r0
 8007850:	6979      	ldr	r1, [r7, #20]
 8007852:	fb04 f001 	mul.w	r0, r4, r1
 8007856:	6939      	ldr	r1, [r7, #16]
 8007858:	fb05 f101 	mul.w	r1, r5, r1
 800785c:	4401      	add	r1, r0
 800785e:	6938      	ldr	r0, [r7, #16]
 8007860:	fba0 2304 	umull	r2, r3, r0, r4
 8007864:	4419      	add	r1, r3
 8007866:	460b      	mov	r3, r1
 8007868:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800786c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	3101      	adds	r1, #1
 8007874:	60f9      	str	r1, [r7, #12]
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	6809      	ldr	r1, [r1, #0]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	4288      	cmp	r0, r1
 800787e:	dbdf      	blt.n	8007840 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x1a>
  }
  return count;
 8007880:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bcb0      	pop	{r4, r5, r7}
 800788e:	4770      	bx	lr

08007890 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ffc2 	bl	8007826 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
}
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	ed87 0b00 	vstr	d0, [r7]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078c2:	ec43 2b17 	vmov	d7, r2, r3
 80078c6:	eeb0 0a47 	vmov.f32	s0, s14
 80078ca:	eef0 0a67 	vmov.f32	s1, s15
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 80078d8:	b5b0      	push	{r4, r5, r7, lr}
 80078da:	b09a      	sub	sp, #104	; 0x68
 80078dc:	af04      	add	r7, sp, #16
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d013      	beq.n	8007918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	695c      	ldr	r4, [r3, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078fa:	461a      	mov	r2, r3
 80078fc:	2301      	movs	r3, #1
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	9202      	str	r2, [sp, #8]
 8007902:	4b98      	ldr	r3, [pc, #608]	; (8007b64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	4b98      	ldr	r3, [pc, #608]	; (8007b68 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2335      	movs	r3, #53	; 0x35
 800790c:	4a97      	ldr	r2, [pc, #604]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800790e:	4998      	ldr	r1, [pc, #608]	; (8007b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	47a0      	blx	r4
 8007914:	2301      	movs	r3, #1
 8007916:	e171      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800791e:	2b01      	cmp	r3, #1
 8007920:	d013      	beq.n	800794a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	695c      	ldr	r4, [r3, #20]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800792c:	461a      	mov	r2, r3
 800792e:	2301      	movs	r3, #1
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	9202      	str	r2, [sp, #8]
 8007934:	4b8b      	ldr	r3, [pc, #556]	; (8007b64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	4b8e      	ldr	r3, [pc, #568]	; (8007b74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2337      	movs	r3, #55	; 0x37
 800793e:	4a8b      	ldr	r2, [pc, #556]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007940:	498b      	ldr	r1, [pc, #556]	; (8007b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	47a0      	blx	r4
 8007946:	2301      	movs	r3, #1
 8007948:	e158      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	653b      	str	r3, [r7, #80]	; 0x50
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8007950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	695c      	ldr	r4, [r3, #20]
 800795a:	4b87      	ldr	r3, [pc, #540]	; (8007b78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	2342      	movs	r3, #66	; 0x42
 8007960:	4a82      	ldr	r2, [pc, #520]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007962:	4986      	ldr	r1, [pc, #536]	; (8007b7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	47a0      	blx	r4
 8007968:	2301      	movs	r3, #1
 800796a:	e147      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800796c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	695c      	ldr	r4, [r3, #20]
 8007978:	4b81      	ldr	r3, [pc, #516]	; (8007b80 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2343      	movs	r3, #67	; 0x43
 800797e:	4a7b      	ldr	r2, [pc, #492]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007980:	497e      	ldr	r1, [pc, #504]	; (8007b7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	47a0      	blx	r4
 8007986:	2301      	movs	r3, #1
 8007988:	e138      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	bfcc      	ite	gt
 8007994:	2301      	movgt	r3, #1
 8007996:	2300      	movle	r3, #0
 8007998:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (is_per_channel) {
 800799c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d067      	beq.n	8007a74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b09      	cmp	r3, #9
 80079aa:	d00e      	beq.n	80079ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b07      	cmp	r3, #7
 80079b2:	d00a      	beq.n	80079ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	695c      	ldr	r4, [r3, #20]
 80079b8:	4b72      	ldr	r3, [pc, #456]	; (8007b84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2347      	movs	r3, #71	; 0x47
 80079be:	4a6b      	ldr	r2, [pc, #428]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80079c0:	496e      	ldr	r1, [pc, #440]	; (8007b7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	47a0      	blx	r4
 80079c6:	2301      	movs	r3, #1
 80079c8:	e118      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d012      	beq.n	80079f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	695c      	ldr	r4, [r3, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	2309      	movs	r3, #9
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	9202      	str	r2, [sp, #8]
 80079e2:	4b69      	ldr	r3, [pc, #420]	; (8007b88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	4b69      	ldr	r3, [pc, #420]	; (8007b8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2349      	movs	r3, #73	; 0x49
 80079ec:	4a5f      	ldr	r2, [pc, #380]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80079ee:	4960      	ldr	r1, [pc, #384]	; (8007b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	47a0      	blx	r4
 80079f4:	2301      	movs	r3, #1
 80079f6:	e101      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80079f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d013      	beq.n	8007a2e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	695c      	ldr	r4, [r3, #20]
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a14:	9203      	str	r2, [sp, #12]
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	4b5d      	ldr	r3, [pc, #372]	; (8007b90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	4b5d      	ldr	r3, [pc, #372]	; (8007b94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	234a      	movs	r3, #74	; 0x4a
 8007a22:	4a52      	ldr	r2, [pc, #328]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a24:	4952      	ldr	r1, [pc, #328]	; (8007b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	47a0      	blx	r4
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e0e6      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
    TF_LITE_ENSURE_EQ(
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d017      	beq.n	8007a74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	695c      	ldr	r4, [r3, #20]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	9303      	str	r3, [sp, #12]
 8007a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	4b4e      	ldr	r3, [pc, #312]	; (8007b98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	4b4b      	ldr	r3, [pc, #300]	; (8007b90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	234b      	movs	r3, #75	; 0x4b
 8007a68:	4a40      	ldr	r2, [pc, #256]	; (8007b6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8007a6a:	4941      	ldr	r1, [pc, #260]	; (8007b70 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	47a0      	blx	r4
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0c3      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	64bb      	str	r3, [r7, #72]	; 0x48
  const float output_scale = output->params.scale;
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	647b      	str	r3, [r7, #68]	; 0x44
  const float* filter_scales = affine_quantization->scale->data;
 8007a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	643b      	str	r3, [r7, #64]	; 0x40
  for (int i = 0; i < num_channels; ++i) {
 8007a88:	2300      	movs	r3, #0
 8007a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a8c:	e046      	b.n	8007b1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8007a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ca>
 8007a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9c:	4413      	add	r3, r2
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	e001      	b.n	8007aa6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ce>
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    const double filter_scale = static_cast<double>(scale);
 8007aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aaa:	f7f8 fd55 	bl	8000558 <__aeabi_f2d>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double effective_output_scale = static_cast<double>(input_scale) *
 8007ab6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007ab8:	f7f8 fd4e 	bl	8000558 <__aeabi_f2d>
 8007abc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ac0:	f7f8 fda2 	bl	8000608 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8007acc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007ace:	f7f8 fd43 	bl	8000558 <__aeabi_f2d>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 febf 	bl	800085c <__aeabi_ddiv>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8007ae6:	f107 0220 	add.w	r2, r7, #32
 8007aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8007af6:	f7ff fc73 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8007afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b02:	4413      	add	r3, r2
 8007b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b06:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8007b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b10:	4413      	add	r3, r2
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8007b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b18:	3301      	adds	r3, #1
 8007b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b22:	429a      	cmp	r2, r3
 8007b24:	dbb3      	blt.n	8007a8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b6>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d146      	bne.n	8007bbc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8007b3a:	f107 0318 	add.w	r3, r7, #24
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f85c 	bl	8007c08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007b56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01e      	beq.n	8007b9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8007b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b62:	e04b      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
 8007b64:	0801aaf4 	.word	0x0801aaf4
 8007b68:	0801ab10 	.word	0x0801ab10
 8007b6c:	0801aa30 	.word	0x0801aa30
 8007b70:	0801aad8 	.word	0x0801aad8
 8007b74:	0801ab2c 	.word	0x0801ab2c
 8007b78:	0801ab60 	.word	0x0801ab60
 8007b7c:	0801ab48 	.word	0x0801ab48
 8007b80:	0801ab74 	.word	0x0801ab74
 8007b84:	0801ab90 	.word	0x0801ab90
 8007b88:	0801abcc 	.word	0x0801abcc
 8007b8c:	0801abd8 	.word	0x0801abd8
 8007b90:	0801abe8 	.word	0x0801abe8
 8007b94:	0801abf8 	.word	0x0801abf8
 8007b98:	0801ac1c 	.word	0x0801ac1c
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8007b9c:	ed97 7b06 	vldr	d7, [r7, #24]
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8007bac:	eef0 0a67 	vmov.f32	s1, s15
 8007bb0:	f7ff fc16 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	425a      	negs	r2, r3
 8007bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bba:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	d007      	beq.n	8007bd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d003      	beq.n	8007bd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	d112      	bne.n	8007bfa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	7819      	ldrb	r1, [r3, #0]
 8007bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f99b 	bl	8007f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007bec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x322>
 8007bf4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007bf8:	e000      	b.n	8007bfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x324>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3758      	adds	r7, #88	; 0x58
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bdb0      	pop	{r4, r5, r7, pc}
 8007c04:	0000      	movs	r0, r0
	...

08007c08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8007c08:	b5b0      	push	{r4, r5, r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7f8 fc9c 	bl	8000558 <__aeabi_f2d>
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f8 fc95 	bl	8000558 <__aeabi_f2d>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8007c32:	4620      	mov	r0, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 fce7 	bl	8000608 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d04a      	beq.n	8007cde <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f8 fc83 	bl	8000558 <__aeabi_f2d>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8007c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c62:	f7f8 fb19 	bl	8000298 <__aeabi_dsub>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	ec43 2b17 	vmov	d7, r2, r3
 8007c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8007c72:	eef0 0a67 	vmov.f32	s1, s15
 8007c76:	f7ff fe1b 	bl	80078b0 <_ZSt3absd>
 8007c7a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8007c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7f8 fc68 	bl	8000558 <__aeabi_f2d>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8007c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c98:	f7f8 fde0 	bl	800085c <__aeabi_ddiv>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	a318      	add	r3, pc, #96	; (adr r3, 8007d0c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 ff27 	bl	8000b00 <__aeabi_dcmple>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	461c      	mov	r4, r3
 8007cbc:	b2e3      	uxtb	r3, r4
 8007cbe:	f083 0301 	eor.w	r3, r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	695c      	ldr	r4, [r3, #20]
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	239a      	movs	r3, #154	; 0x9a
 8007cd2:	4a0c      	ldr	r2, [pc, #48]	; (8007d04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8007cd4:	490c      	ldr	r1, [pc, #48]	; (8007d08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	47a0      	blx	r4
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e009      	b.n	8007cf2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8007cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f813 	bl	8007d14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8007cee:	4603      	mov	r3, r0
                                          multiplier);
 8007cf0:	bf00      	nop
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3730      	adds	r7, #48	; 0x30
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	0801ac5c 	.word	0x0801ac5c
 8007d04:	0801aa30 	.word	0x0801aa30
 8007d08:	0801ab48 	.word	0x0801ab48
 8007d0c:	47ae147b 	.word	0x47ae147b
 8007d10:	3f947ae1 	.word	0x3f947ae1

08007d14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b089      	sub	sp, #36	; 0x24
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	ed93 7a03 	vldr	s14, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8007d32:	ee17 0a90 	vmov	r0, s15
 8007d36:	f7f8 fc0f 	bl	8000558 <__aeabi_f2d>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8007d42:	2301      	movs	r3, #1
 8007d44:	461c      	mov	r4, r3
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d52:	f7f8 fedf 	bl	8000b14 <__aeabi_dcmpge>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	461c      	mov	r4, r3
 8007d60:	b2e3      	uxtb	r3, r4
 8007d62:	f083 0301 	eor.w	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	695c      	ldr	r4, [r3, #20]
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	23a7      	movs	r3, #167	; 0xa7
 8007d76:	4a0e      	ldr	r2, [pc, #56]	; (8007db0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8007d78:	490e      	ldr	r1, [pc, #56]	; (8007db4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	47a0      	blx	r4
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e010      	b.n	8007da4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7f8 fbe6 	bl	8000558 <__aeabi_f2d>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d94:	f7f8 fd62 	bl	800085c <__aeabi_ddiv>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d9e:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd90      	pop	{r4, r7, pc}
 8007dac:	0801ac80 	.word	0x0801ac80
 8007db0:	0801aa30 	.word	0x0801aa30
 8007db4:	0801ab48 	.word	0x0801ab48

08007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	ed87 0a00 	vstr	s0, [r7]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8007dca:	ed97 7a00 	vldr	s14, [r7]
 8007dce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8007dd6:	f7ff fcc4 	bl	8007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8007dda:	eef0 7a40 	vmov.f32	s15, s0
 8007dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de2:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8007dea:	4413      	add	r3, r2
  };
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d118      	bne.n	8007e50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8007e1e:	f107 0314 	add.w	r3, r7, #20
 8007e22:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8007f18 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff ffc6 	bl	8007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	f107 021c 	add.w	r2, r7, #28
 8007e34:	f107 0308 	add.w	r3, r7, #8
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f8d6 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 8007e40:	4603      	mov	r3, r0
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8007e4e:	e05f      	b.n	8007f10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d129      	bne.n	8007eaa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8007e56:	f107 0314 	add.w	r3, r7, #20
 8007e5a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8007f18 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff ffaa 	bl	8007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007e64:	4603      	mov	r3, r0
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	f107 0220 	add.w	r2, r7, #32
 8007e6c:	f107 0308 	add.w	r3, r7, #8
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f8ba 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7e:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8007e80:	f107 0314 	add.w	r3, r7, #20
 8007e84:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff ff95 	bl	8007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
 8007e92:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007e96:	1d3b      	adds	r3, r7, #4
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f8ba 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea6:	601a      	str	r2, [r3, #0]
}
 8007ea8:	e032      	b.n	8007f10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d129      	bne.n	8007f04 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff ff7d 	bl	8007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ec6:	f107 0308 	add.w	r3, r7, #8
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f88d 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8007eda:	f107 0314 	add.w	r3, r7, #20
 8007ede:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff ff68 	bl	8007db8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007ef0:	1d3b      	adds	r3, r7, #4
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f88d 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8007efa:	4603      	mov	r3, r0
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	e005      	b.n	8007f10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f08:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3738      	adds	r7, #56	; 0x38
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	00000000 	.word	0x00000000

08007f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b089      	sub	sp, #36	; 0x24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d108      	bne.n	8007f4e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8007f3c:	f7ff fc32 	bl	80077a4 <_ZNSt14numeric_limitsIhE3minEv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8007f44:	f7ff fc36 	bl	80077b4 <_ZNSt14numeric_limitsIhE3maxEv>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	e024      	b.n	8007f98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d108      	bne.n	8007f68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8007f56:	f7ff fc14 	bl	8007782 <_ZNSt14numeric_limitsIaE3minEv>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8007f5e:	f7ff fc19 	bl	8007794 <_ZNSt14numeric_limitsIaE3maxEv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	613b      	str	r3, [r7, #16]
 8007f66:	e017      	b.n	8007f98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	d108      	bne.n	8007f82 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8007f70:	f7ff fc28 	bl	80077c4 <_ZNSt14numeric_limitsIsE3minEv>
 8007f74:	4603      	mov	r3, r0
 8007f76:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8007f78:	f7ff fc2e 	bl	80077d8 <_ZNSt14numeric_limitsIsE3maxEv>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	e00a      	b.n	8007f98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	695c      	ldr	r4, [r3, #20]
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	23da      	movs	r3, #218	; 0xda
 8007f8c:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8007f8e:	490c      	ldr	r1, [pc, #48]	; (8007fc0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	47a0      	blx	r4
 8007f94:	2301      	movs	r3, #1
 8007f96:	e00a      	b.n	8007fae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8007f98:	7af8      	ldrb	r0, [r7, #11]
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	6979      	ldr	r1, [r7, #20]
 8007fa8:	f7ff ff24 	bl	8007df4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd90      	pop	{r4, r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	0801ac9c 	.word	0x0801ac9c
 8007fbc:	0801aa30 	.word	0x0801aa30
 8007fc0:	0801ab48 	.word	0x0801ab48

08007fc4 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	da01      	bge.n	8007fde <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	e000      	b.n	8007fe0 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8007fde:	687b      	ldr	r3, [r7, #4]
    }
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	da01      	bge.n	8008006 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	e000      	b.n	8008008 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8008006:	687b      	ldr	r3, [r7, #4]
    }
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	da01      	bge.n	800802e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	e000      	b.n	8008030 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800802e:	687b      	ldr	r3, [r7, #4]
    }
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2104      	movs	r1, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7fd fce8 	bl	8005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800804e:	4603      	mov	r3, r0
  }
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	2106      	movs	r1, #6
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fce9 	bl	8005a3e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800806c:	4603      	mov	r3, r0
 800806e:	b2db      	uxtb	r3, r3
  }
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f866 	bl	800817c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	dd08      	ble.n	80080dc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f00f fa9a 	bl	8017610 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b05      	cmp	r3, #5
 800810c:	dd02      	ble.n	8008114 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	e001      	b.n	8008118 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
  }
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b05      	cmp	r3, #5
 8008134:	dd08      	ble.n	8008148 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4618      	mov	r0, r3
 8008144:	f00f fa64 	bl	8017610 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b05      	cmp	r3, #5
 8008152:	dd0f      	ble.n	8008174 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800815a:	4293      	cmp	r3, r2
 800815c:	d201      	bcs.n	8008162 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	e001      	b.n	8008166 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8008162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008166:	4618      	mov	r0, r3
 8008168:	f00f fa74 	bl	8017654 <_Znaj>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff ffca 	bl	8008124 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ffb4 	bl	80080fe <_ZN6tflite12RuntimeShape8DimsDataEv>
 8008196:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	461a      	mov	r2, r3
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	f010 f900 	bl	80183a6 <memcpy>
  }
 80081a6:	bf00      	nop
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b086      	sub	sp, #24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ff5a 	bl	8008078 <_ZN6tflite12RuntimeShapeC1Ev>
 80081c4:	e00d      	b.n	80081e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3304      	adds	r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	6939      	ldr	r1, [r7, #16]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff59 	bl	8008094 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	fbb2 f3f3 	udiv	r3, r2, r3
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800820c:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800820e:	68bb      	ldr	r3, [r7, #8]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8008238:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800823a:	68bb      	ldr	r3, [r7, #8]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	1e5a      	subs	r2, r3, #1
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8008268:	68fb      	ldr	r3, [r7, #12]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	3b01      	subs	r3, #1
 8008288:	2b08      	cmp	r3, #8
 800828a:	d835      	bhi.n	80082f8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x80>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c9 	.word	0x080082c9
 800829c:	080082d1 	.word	0x080082d1
 80082a0:	080082e1 	.word	0x080082e1
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	080082d9 	.word	0x080082d9
    case kTfLiteFloat32:
      *size = sizeof(float);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2204      	movs	r2, #4
 80082bc:	601a      	str	r2, [r3, #0]
      break;
 80082be:	e01d      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2202      	movs	r2, #2
 80082c4:	601a      	str	r2, [r3, #0]
      break;
 80082c6:	e019      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2204      	movs	r2, #4
 80082cc:	601a      	str	r2, [r3, #0]
      break;
 80082ce:	e015      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
      break;
 80082d6:	e011      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2201      	movs	r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
      break;
 80082de:	e00d      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2208      	movs	r2, #8
 80082e4:	601a      	str	r2, [r3, #0]
      break;
 80082e6:	e009      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteBool:
      *size = sizeof(bool);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
      break;
 80082ee:	e005      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2208      	movs	r2, #8
 80082f4:	601a      	str	r2, [r3, #0]
      break;
 80082f6:	e001      	b.n	80082fc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x84>
    default:
      return kTfLiteError;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x86>
  }
  return kTfLiteOk;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop

0800830c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800831a:	2301      	movs	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff fe8c 	bl	800803c <_ZNK6tflite6Tensor5shapeEv>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	bf14      	ite	ne
 800832a:	2301      	movne	r3, #1
 800832c:	2300      	moveq	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d022      	beq.n	800837a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e00f      	b.n	800835a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fe7e 	bl	800803c <_ZNK6tflite6Tensor5shapeEv>
 8008340:	4603      	mov	r3, r0
 8008342:	69b9      	ldr	r1, [r7, #24]
 8008344:	4618      	mov	r0, r3
 8008346:	f7fd fbcb 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800834a:	4602      	mov	r2, r0
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	fb02 f303 	mul.w	r3, r2, r3
 8008352:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	3301      	adds	r3, #1
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fe6e 	bl	800803c <_ZNK6tflite6Tensor5shapeEv>
 8008360:	4603      	mov	r3, r0
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f833 	bl	80083ce <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008368:	4602      	mov	r2, r0
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	4293      	cmp	r3, r2
 800836e:	bf34      	ite	cc
 8008370:	2301      	movcc	r3, #1
 8008372:	2300      	movcs	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1df      	bne.n	800833a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2e>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff fe6c 	bl	8008058 <_ZNK6tflite6Tensor4typeEv>
 8008380:	4603      	mov	r3, r0
 8008382:	4618      	mov	r0, r3
 8008384:	f107 0315 	add.w	r3, r7, #21
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	4619      	mov	r1, r3
 800838c:	f7fc ffb6 	bl	80052fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	e013      	b.n	80083c6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800839e:	7d7b      	ldrb	r3, [r7, #21]
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff ff68 	bl	8008278 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80083a8:	4603      	mov	r3, r0
 80083aa:	75bb      	strb	r3, [r7, #22]
 80083ac:	7dbb      	ldrb	r3, [r7, #22]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 80083b2:	7dbb      	ldrb	r3, [r7, #22]
 80083b4:	e007      	b.n	80083c6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	fb03 f202 	mul.w	r2, r3, r2
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3720      	adds	r7, #32
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fd fb73 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80083dc:	4603      	mov	r3, r0
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2108      	movs	r1, #8
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fc68 	bl	8009cc8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80083f8:	4603      	mov	r3, r0
  }
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	210a      	movs	r1, #10
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fc6a 	bl	8009ce8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008414:	4603      	mov	r3, r0
  }
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	2110      	movs	r1, #16
 800842c:	4618      	mov	r0, r3
 800842e:	f7fd fad8 	bl	80059e2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008432:	4603      	mov	r3, r0
  }
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	2108      	movs	r1, #8
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fc5c 	bl	8009d08 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8008450:	4603      	mov	r3, r0
  }
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	210c      	movs	r1, #12
 8008466:	4618      	mov	r0, r3
 8008468:	f001 fc6c 	bl	8009d44 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800846c:	4603      	mov	r3, r0
  }
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	210e      	movs	r1, #14
 8008484:	4618      	mov	r0, r3
 8008486:	f7fd fa7d 	bl	8005984 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf14      	ite	ne
 8008490:	2301      	movne	r3, #1
 8008492:	2300      	moveq	r3, #0
 8008494:	b2db      	uxtb	r3, r3
  }
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	2104      	movs	r1, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fc2b 	bl	8009d08 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80084b2:	4603      	mov	r3, r0
  }
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2106      	movs	r1, #6
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd faa8 	bl	8005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80084ce:	4603      	mov	r3, r0
  }
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2108      	movs	r1, #8
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd fa9a 	bl	8005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80084ea:	4603      	mov	r3, r0
  }
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	210e      	movs	r1, #14
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fbd1 	bl	8009ca8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008506:	4603      	mov	r3, r0
  }
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2104      	movs	r1, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fc21 	bl	8009d64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8008522:	4603      	mov	r3, r0
  }
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2106      	movs	r1, #6
 8008538:	4618      	mov	r0, r3
 800853a:	f7fd fa70 	bl	8005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800853e:	4603      	mov	r3, r0
  }
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2108      	movs	r1, #8
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd fa62 	bl	8005a1e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800855a:	4603      	mov	r3, r0
  }
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	210a      	movs	r1, #10
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fc07 	bl	8009d84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8008576:	4603      	mov	r3, r0
  }
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2104      	movs	r1, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fb8b 	bl	8009ca8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008592:	4603      	mov	r3, r0
  }
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2104      	movs	r1, #4
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fe9c 	bl	80072e6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80085ae:	4603      	mov	r3, r0
  }
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	2106      	movs	r1, #6
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fb9e 	bl	8009d08 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80085cc:	4603      	mov	r3, r0
  }
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2106      	movs	r1, #6
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fbde 	bl	8009da4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80085e8:	4603      	mov	r3, r0
  }
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2108      	movs	r1, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 fbe0 	bl	8009dc4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8008604:	4603      	mov	r3, r0
  }
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	210c      	movs	r1, #12
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fbe2 	bl	8009de4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8008620:	4603      	mov	r3, r0
  }
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2110      	movs	r1, #16
 8008636:	4618      	mov	r0, r3
 8008638:	f001 fbe4 	bl	8009e04 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800863c:	4603      	mov	r3, r0
  }
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	4a04      	ldr	r2, [pc, #16]	; (8008664 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	0801fcfc 	.word	0x0801fcfc

08008668 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ffe9 	bl	8008648 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008676:	2104      	movs	r1, #4
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f00e ffc7 	bl	801760c <_ZdlPvj>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	0801fcfc 	.word	0x0801fcfc

080086a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff ffe7 	bl	8008688 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80086ba:	4a05      	ldr	r2, [pc, #20]	; (80086d0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	0801c3c4 	.word	0x0801c3c4

080086d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6858      	ldr	r0, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	330c      	adds	r3, #12
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
  }
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	609a      	str	r2, [r3, #8]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	611a      	str	r2, [r3, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]
    return Allocate();
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f821 	bl	80087ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 800876a:	4603      	mov	r3, r0
  }
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	4413      	add	r3, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
	...

080087ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ffe9 	bl	800878c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6858      	ldr	r0, [r3, #4]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	330c      	adds	r3, #12
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2204      	movs	r2, #4
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	4798      	blx	r3
 80087da:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d108      	bne.n	80087fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4905      	ldr	r1, [pc, #20]	; (8008804 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fc fad7 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	0801b460 	.word	0x0801b460

08008808 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteTensor* runtime_tensors) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b09a      	sub	sp, #104	; 0x68
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008816:	2300      	movs	r3, #0
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800881a:	e04e      	b.n	80088ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xb2>
    AllocationInfo* current = &info_[i];
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6919      	ldr	r1, [r3, #16]
 8008820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008822:	4613      	mov	r3, r2
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	4413      	add	r3, r2
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	440b      	add	r3, r1
 800882c:	617b      	str	r3, [r7, #20]
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 800882e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008830:	019b      	lsls	r3, r3, #6
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4413      	add	r3, r2
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
 800883c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800883e:	019b      	lsls	r3, r3, #6
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	4413      	add	r3, r2
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008850:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008858:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 800885a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885c:	019b      	lsls	r3, r3, #6
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4413      	add	r3, r2
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d113      	bne.n	8008890 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f7ff fe51 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 800886e:	4603      	mov	r3, r0
 8008870:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fb5e 	bl	8009f34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008878:	4603      	mov	r3, r0
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fdfb 	bl	8008476 <_ZNK6tflite6Tensor11is_variableEv>
 8008880:	4603      	mov	r3, r0
 8008882:	f083 0301 	eor.w	r3, r3, #1
 8008886:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
 800888c:	2201      	movs	r2, #1
 800888e:	e000      	b.n	8008892 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x8a>
 8008890:	2200      	movs	r2, #0
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xa4>
      current->offline_offset = offline_offsets[i];
 800889c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	611a      	str	r2, [r3, #16]
 80088aa:	e003      	b.n	80088b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xac>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b2:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 80088b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b6:	3301      	adds	r3, #1
 80088b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d3ab      	bcc.n	800881c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x14>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80088c8:	e017      	b.n	80088fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xf2>
    const int tensor_index = subgraph->inputs()->Get(i);
 80088ca:	68b8      	ldr	r0, [r7, #8]
 80088cc:	f7ff fe2e 	bl	800852c <_ZNK6tflite8SubGraph6inputsEv>
 80088d0:	4603      	mov	r3, r0
 80088d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fd f903 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80088da:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6919      	ldr	r1, [r3, #16]
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	4613      	mov	r3, r2
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4413      	add	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	440b      	add	r3, r1
 80088ec:	61bb      	str	r3, [r7, #24]
    current->first_created = 0;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2200      	movs	r2, #0
 80088f2:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80088f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088f6:	3301      	adds	r3, #1
 80088f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80088fa:	68b8      	ldr	r0, [r7, #8]
 80088fc:	f7ff fe16 	bl	800852c <_ZNK6tflite8SubGraph6inputsEv>
 8008900:	4603      	mov	r3, r0
 8008902:	4618      	mov	r0, r3
 8008904:	f7fd f8dd 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008908:	4602      	mov	r2, r0
 800890a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800890c:	4293      	cmp	r3, r2
 800890e:	bf34      	ite	cc
 8008910:	2301      	movcc	r3, #1
 8008912:	2300      	movcs	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1d7      	bne.n	80088ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xc2>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800891a:	2300      	movs	r3, #0
 800891c:	657b      	str	r3, [r7, #84]	; 0x54
 800891e:	e020      	b.n	8008962 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x15a>
    const int tensor_index = subgraph->outputs()->Get(i);
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f7ff fe11 	bl	8008548 <_ZNK6tflite8SubGraph7outputsEv>
 8008926:	4603      	mov	r3, r0
 8008928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd f8d8 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008930:	6278      	str	r0, [r7, #36]	; 0x24
    AllocationInfo* current = &info_[tensor_index];
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6919      	ldr	r1, [r3, #16]
 8008936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008938:	4613      	mov	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	4413      	add	r3, r2
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	440b      	add	r3, r1
 8008942:	623b      	str	r3, [r7, #32]
    current->last_used = subgraph->operators()->size() - 1;
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	f7ff fe0d 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800894a:	4603      	mov	r3, r0
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fb17 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008952:	4603      	mov	r3, r0
 8008954:	3b01      	subs	r3, #1
 8008956:	461a      	mov	r2, r3
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800895c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895e:	3301      	adds	r3, #1
 8008960:	657b      	str	r3, [r7, #84]	; 0x54
 8008962:	68b8      	ldr	r0, [r7, #8]
 8008964:	f7ff fdf0 	bl	8008548 <_ZNK6tflite8SubGraph7outputsEv>
 8008968:	4603      	mov	r3, r0
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd f8a9 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008970:	4602      	mov	r2, r0
 8008972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008974:	4293      	cmp	r3, r2
 8008976:	bf34      	ite	cc
 8008978:	2301      	movcc	r3, #1
 800897a:	2300      	movcs	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1ce      	bne.n	8008920 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x118>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008982:	68b8      	ldr	r0, [r7, #8]
 8008984:	f7ff fdee 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 8008988:	4603      	mov	r3, r0
 800898a:	4618      	mov	r0, r3
 800898c:	f001 faf8 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008990:	4603      	mov	r3, r0
 8008992:	3b01      	subs	r3, #1
 8008994:	653b      	str	r3, [r7, #80]	; 0x50
 8008996:	e076      	b.n	8008a86 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x27e>
    const auto* op = subgraph->operators()->Get(i);
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	f7ff fde3 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800899e:	4602      	mov	r2, r0
 80089a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f001 faf9 	bl	8009f9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80089aa:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80089ac:	2300      	movs	r3, #0
 80089ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089b0:	e021      	b.n	80089f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1ee>
      const int tensor_index = op->inputs()->Get(n);
 80089b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089b4:	f7ff fd82 	bl	80084bc <_ZNK6tflite8Operator6inputsEv>
 80089b8:	4603      	mov	r3, r0
 80089ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fd f88f 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80089c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6919      	ldr	r1, [r3, #16]
 80089c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ca:	4613      	mov	r3, r2
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089de:	d004      	beq.n	80089ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e2>
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089e6:	429a      	cmp	r2, r3
 80089e8:	dd02      	ble.n	80089f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e8>
        current->last_used = i;
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ee:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80089f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f2:	3301      	adds	r3, #1
 80089f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089f8:	f7ff fd60 	bl	80084bc <_ZNK6tflite8Operator6inputsEv>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd f85f 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	bf34      	ite	cc
 8008a0c:	2301      	movcc	r3, #1
 8008a0e:	2300      	movcs	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1cd      	bne.n	80089b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1aa>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8008a16:	2300      	movs	r3, #0
 8008a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a1a:	e021      	b.n	8008a60 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x258>
      const int tensor_index = op->outputs()->Get(n);
 8008a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a1e:	f7ff fd5b 	bl	80084d8 <_ZNK6tflite8Operator7outputsEv>
 8008a22:	4603      	mov	r3, r0
 8008a24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd f85a 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008a2c:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6919      	ldr	r1, [r3, #16]
 8008a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a34:	4613      	mov	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	4413      	add	r3, r2
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	440b      	add	r3, r1
 8008a3e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a48:	d004      	beq.n	8008a54 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x24c>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a50:	429a      	cmp	r2, r3
 8008a52:	da02      	bge.n	8008a5a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x252>
        current->first_created = i;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a58:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8008a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a62:	f7ff fd39 	bl	80084d8 <_ZNK6tflite8Operator7outputsEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd f82a 	bl	8005ac2 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a72:	4293      	cmp	r3, r2
 8008a74:	bf34      	ite	cc
 8008a76:	2301      	movcc	r3, #1
 8008a78:	2300      	movcs	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1cd      	bne.n	8008a1c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x214>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8008a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a82:	3b01      	subs	r3, #1
 8008a84:	653b      	str	r3, [r7, #80]	; 0x50
 8008a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da85      	bge.n	8008998 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x190>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a90:	e04d      	b.n	8008b2e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x326>
    AllocationInfo* current = &info_[i];
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6919      	ldr	r1, [r3, #16]
 8008a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a98:	4613      	mov	r3, r2
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	4413      	add	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	440b      	add	r3, r1
 8008aa2:	643b      	str	r3, [r7, #64]	; 0x40
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aac:	d106      	bne.n	8008abc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 8008aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab6:	d001      	beq.n	8008abc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b6>
 8008abc:	2300      	movs	r3, #0
    const bool is_read_only =
 8008abe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (is_read_only) {
 8008ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2c8>
      current->needs_allocating = false;
 8008aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008acc:	2200      	movs	r2, #0
 8008ace:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 8008ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ad4:	f083 0301 	eor.w	r3, r3, #1
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00b      	beq.n	8008af6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        ((current->first_created == -1) || (current->last_used == -1));
 8008ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae0:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae6:	d004      	beq.n	8008af2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ea>
        ((current->first_created == -1) || (current->last_used == -1));
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af0:	d101      	bne.n	8008af6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        !is_read_only &&
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f0>
 8008af6:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8008af8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    if (has_partial_lifetime && current->needs_allocating) {
 8008afc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d011      	beq.n	8008b28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
 8008b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b06:	7d1b      	ldrb	r3, [r3, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
      TF_LITE_REPORT_ERROR(
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b1e:	4909      	ldr	r1, [pc, #36]	; (8008b44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x33c>)
 8008b20:	f7fc f940 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e008      	b.n	8008b3a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x332>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8008b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3ac      	bcc.n	8008a92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x28a>
    }
  }
  return kTfLiteOk;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3760      	adds	r7, #96	; 0x60
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	0801b4a4 	.word	0x0801b4a4

08008b48 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08c      	sub	sp, #48	; 0x30
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8008b54:	68b8      	ldr	r0, [r7, #8]
 8008b56:	f7ff fd68 	bl	800862a <_ZNK6tflite5Model8metadataEv>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d060      	beq.n	8008c2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b6e:	e04d      	b.n	8008c0c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xc4>
      auto metadata = model->metadata()->Get(i);
 8008b70:	68b8      	ldr	r0, [r7, #8]
 8008b72:	f7ff fd5a 	bl	800862a <_ZNK6tflite5Model8metadataEv>
 8008b76:	4603      	mov	r3, r0
 8008b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fade 	bl	800a13c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8008b80:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b84:	f7ff fd0a 	bl	800859c <_ZNK6tflite8Metadata4nameEv>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe faa3 	bl	80070d6 <_ZNK11flatbuffers6String5c_strEv>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2217      	movs	r2, #23
 8008b94:	4928      	ldr	r1, [pc, #160]	; (8008c38 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8008b96:	4618      	mov	r0, r3
 8008b98:	f00f fb2c 	bl	80181f4 <strncmp>
 8008b9c:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d02c      	beq.n	8008c06 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8008bac:	68b8      	ldr	r0, [r7, #8]
 8008bae:	f7ff fd2e 	bl	800860e <_ZNK6tflite5Model7buffersEv>
 8008bb2:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8008bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb6:	f7ff fcff 	bl	80085b8 <_ZNK6tflite8Metadata6bufferEv>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bc0:	f001 faf0 	bl	800a1a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8008bc4:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8008bc6:	6a38      	ldr	r0, [r7, #32]
 8008bc8:	f7ff fcda 	bl	8008580 <_ZNK6tflite6Buffer4dataEv>
 8008bcc:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8008bce:	69f8      	ldr	r0, [r7, #28]
 8008bd0:	f001 faf6 	bl	800a1c0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8008bd4:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d009      	beq.n	8008c06 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
          TF_LITE_REPORT_ERROR(reporter_,
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	490f      	ldr	r1, [pc, #60]	; (8008c3c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8008bfe:	f7fc f8d1 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e013      	b.n	8008c2e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	3301      	adds	r3, #1
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0c:	68b8      	ldr	r0, [r7, #8]
 8008c0e:	f7ff fd0c 	bl	800862a <_ZNK6tflite5Model8metadataEv>
 8008c12:	4603      	mov	r3, r0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fa83 	bl	800a120 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	bf34      	ite	cc
 8008c22:	2301      	movcc	r3, #1
 8008c24:	2300      	movcs	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1a1      	bne.n	8008b70 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x28>
        }
      }
    }
  }
  return kTfLiteOk;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3730      	adds	r7, #48	; 0x30
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	0801b304 	.word	0x0801b304
 8008c3c:	0801b414 	.word	0x0801b414

08008c40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	e02d      	b.n	8008cae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x6e>
    AllocationInfo* current = &info_[i];
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6919      	ldr	r1, [r3, #16]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	1ad2      	subs	r2, r2, r3
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ca6:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	3301      	adds	r3, #1
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d3c9      	bcc.n	8008c52 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b08b      	sub	sp, #44	; 0x2c
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	e046      	b.n	8008d6e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
    const AllocationInfo* current = &allocation_info[i];
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	461a      	mov	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	7d1b      	ldrb	r3, [r3, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d036      	beq.n	8008d68 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2110      	movs	r1, #16
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff faa1 	bl	8008248 <_ZN6tflite11AlignSizeUpEjj>
 8008d06:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d10:	d114      	bne.n	8008d3c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x70>
        TF_LITE_ENSURE_STATUS(
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	681c      	ldr	r4, [r3, #0]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	6899      	ldr	r1, [r3, #8]
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	460b      	mov	r3, r1
 8008d28:	68f9      	ldr	r1, [r7, #12]
 8008d2a:	68b8      	ldr	r0, [r7, #8]
 8008d2c:	47a0      	blx	r4
 8008d2e:	4603      	mov	r3, r0
 8008d30:	74bb      	strb	r3, [r7, #18]
 8008d32:	7cbb      	ldrb	r3, [r7, #18]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d017      	beq.n	8008d68 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 8008d38:	7cbb      	ldrb	r3, [r7, #18]
 8008d3a:	e01d      	b.n	8008d78 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	6898      	ldr	r0, [r3, #8]
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	6912      	ldr	r2, [r2, #16]
 8008d4a:	9201      	str	r2, [sp, #4]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	4603      	mov	r3, r0
 8008d50:	460a      	mov	r2, r1
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	68b8      	ldr	r0, [r7, #8]
 8008d56:	f00b fe67 	bl	8014a28 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	74fb      	strb	r3, [r7, #19]
 8008d5e:	7cfb      	ldrb	r3, [r7, #19]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 8008d64:	7cfb      	ldrb	r3, [r7, #19]
 8008d66:	e007      	b.n	8008d78 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d3b4      	bcc.n	8008ce0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x14>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3724      	adds	r7, #36	; 0x24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd90      	pop	{r4, r7, pc}

08008d80 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b08b      	sub	sp, #44	; 0x2c
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008d92:	2300      	movs	r3, #0
 8008d94:	623b      	str	r3, [r7, #32]
 8008d96:	e02d      	b.n	8008df4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
    const AllocationInfo* current = &allocation_info[i];
 8008d98:	6a3a      	ldr	r2, [r7, #32]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4413      	add	r3, r2
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	461a      	mov	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	7d1b      	ldrb	r3, [r3, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01d      	beq.n	8008dee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x6e>
      int offset = -1;
 8008db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008db6:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3314      	adds	r3, #20
 8008dbe:	681c      	ldr	r4, [r3, #0]
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	68b8      	ldr	r0, [r7, #8]
 8008dca:	47a0      	blx	r4
 8008dcc:	4603      	mov	r3, r0
 8008dce:	76fb      	strb	r3, [r7, #27]
 8008dd0:	7efb      	ldrb	r3, [r7, #27]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x5a>
 8008dd6:	7efb      	ldrb	r3, [r7, #27]
 8008dd8:	e011      	b.n	8008dfe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	440a      	add	r2, r1
 8008de6:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	3301      	adds	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	3301      	adds	r3, #1
 8008df2:	623b      	str	r3, [r7, #32]
 8008df4:	6a3a      	ldr	r2, [r7, #32]
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d3cd      	bcc.n	8008d98 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
    }
  }
  return kTfLiteOk;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	372c      	adds	r7, #44	; 0x2c
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd90      	pop	{r4, r7, pc}
	...

08008e08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
}

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8008e08:	b5b0      	push	{r4, r5, r7, lr}
 8008e0a:	b090      	sub	sp, #64	; 0x40
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  *result = {};
 8008e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e18:	4618      	mov	r0, r3
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2100      	movs	r1, #0
 8008e20:	f00f f9e0 	bl	80181e4 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8008e24:	68b8      	ldr	r0, [r7, #8]
 8008e26:	f7ff f917 	bl	8008058 <_ZNK6tflite6Tensor4typeEv>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	4619      	mov	r1, r3
 8008e34:	f7fc fa62 	bl	80052fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 8008e46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e4a:	e125      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	f7ff fb12 	bl	8008476 <_ZNK6tflite6Tensor11is_variableEv>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8008e5c:	68b8      	ldr	r0, [r7, #8]
 8008e5e:	f7ff faed 	bl	800843c <_ZNK6tflite6Tensor6bufferEv>
 8008e62:	4603      	mov	r3, r0
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f99c 	bl	800a1a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8008e6c:	6378      	str	r0, [r7, #52]	; 0x34
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01a      	beq.n	8008eaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8008e74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008e76:	f7ff fb83 	bl	8008580 <_ZNK6tflite6Buffer4dataEv>
 8008e7a:	6338      	str	r0, [r7, #48]	; 0x30
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d013      	beq.n	8008eaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8008e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e84:	f000 ffce 	bl	8009e24 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf14      	ite	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	2300      	moveq	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 8008e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9a:	f001 f991 	bl	800a1c0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8008e9e:	4602      	mov	r2, r0
        result->data.data =
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea2:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8008eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8008eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eba:	f103 0118 	add.w	r1, r3, #24
 8008ebe:	f107 0214 	add.w	r2, r7, #20
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68b8      	ldr	r0, [r7, #8]
 8008ec6:	f7ff fa21 	bl	800830c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 8008ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008edc:	e0dc      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8008ede:	68b8      	ldr	r0, [r7, #8]
 8008ee0:	f7ff f8ac 	bl	800803c <_ZNK6tflite6Tensor5shapeEv>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bf0c      	ite	eq
 8008eea:	2301      	moveq	r3, #1
 8008eec:	2300      	movne	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8008ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef6:	4a6a      	ldr	r2, [pc, #424]	; (80090a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x298>)
 8008ef8:	609a      	str	r2, [r3, #8]
 8008efa:	e013      	b.n	8008f24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f7ff f89d 	bl	800803c <_ZNK6tflite6Tensor5shapeEv>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f06:	3308      	adds	r3, #8
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 f964 	bl	800a1d8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008f16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
 8008f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f22:	e0b9      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f7ff fa98 	bl	800845a <_ZNK6tflite6Tensor12quantizationEv>
 8008f2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d021      	beq.n	8008f76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
  if (src_quantization && src_quantization->scale() &&
 8008f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f34:	f7ff fa57 	bl	80083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01b      	beq.n	8008f76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->scale()->size() > 0) &&
 8008f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f40:	f7ff fa51 	bl	80083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008f44:	4603      	mov	r3, r0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 ff7a 	bl	8009e40 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008f4c:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d011      	beq.n	8008f76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      src_quantization->zero_point() &&
 8008f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f54:	f7ff fa55 	bl	8008402 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f58:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->zero_point()->size() > 0)) {
 8008f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f60:	f7ff fa4f 	bl	8008402 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f64:	4603      	mov	r3, r0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 ffa0 	bl	8009eac <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8008f6c:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
 8008f76:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 808c 	beq.w	8009096 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8008f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f80:	f7ff fa31 	bl	80083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2100      	movs	r1, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 ff67 	bl	8009e5c <_ZNK11flatbuffers6VectorIfE3GetEm>
 8008f8e:	eef0 7a40 	vmov.f32	s15, s0
 8008f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f94:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8008f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9a:	f7ff fa32 	bl	8008402 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 ff90 	bl	8009ec8 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
    result->params.zero_point =
 8008fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fae:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb2:	f7ff fa18 	bl	80083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 ff41 	bl	8009e40 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	210c      	movs	r1, #12
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	4798      	blx	r3
 8008fd2:	6238      	str	r0, [r7, #32]
                                        alignof(TfLiteAffineQuantization)));
    if (quantization == nullptr) {
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d105      	bne.n	8008fe6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1de>
      TF_LITE_REPORT_ERROR(error_reporter,
 8008fda:	4932      	ldr	r1, [pc, #200]	; (80090a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29c>)
 8008fdc:	6838      	ldr	r0, [r7, #0]
 8008fde:	f7fb fee1 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e058      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>

    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8008fe6:	68fd      	ldr	r5, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	330c      	adds	r3, #12
 8008fee:	681c      	ldr	r4, [r3, #0]
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 8008ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ff2:	f7fb fec7 	bl	8004d84 <TfLiteIntArrayGetSizeInBytes>
 8008ff6:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47a0      	blx	r4
 8009000:	4602      	mov	r2, r0
    quantization->zero_point =
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x212>
      TF_LITE_REPORT_ERROR(error_reporter,
 800900e:	4926      	ldr	r1, [pc, #152]	; (80090a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>)
 8009010:	6838      	ldr	r0, [r7, #0]
 8009012:	f7fb fec7 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8009016:	2301      	movs	r3, #1
 8009018:	e03e      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800901a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800901c:	f7ff f9e3 	bl	80083e6 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8009020:	4602      	mov	r2, r0
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f001 f8ef 	bl	800a20a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800902c:	4603      	mov	r3, r0
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	7ffb      	ldrb	r3, [r7, #31]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8009036:	7ffb      	ldrb	r3, [r7, #31]
 8009038:	e02e      	b.n	8009098 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009040:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 800904a:	2300      	movs	r3, #0
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904e:	e011      	b.n	8009074 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26c>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8009050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009052:	f7ff f9d6 	bl	8008402 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009056:	4602      	mov	r2, r0
 8009058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f000 ff33 	bl	8009ec8 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	4413      	add	r3, r2
 800906a:	4602      	mov	r2, r0
 800906c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800906e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009070:	3301      	adds	r3, #1
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	429a      	cmp	r2, r3
 800907a:	dbe9      	blt.n	8009050 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 800907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907e:	f7ff f9ce 	bl	800841e <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8009082:	4602      	mov	r2, r0
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8009088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8009090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009092:	6a3a      	ldr	r2, [r7, #32]
 8009094:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3740      	adds	r7, #64	; 0x40
 800909c:	46bd      	mov	sp, r7
 800909e:	bdb0      	pop	{r4, r5, r7, pc}
 80090a0:	0801b31c 	.word	0x0801b31c
 80090a4:	0801b508 	.word	0x0801b508
 80090a8:	0801b538 	.word	0x0801b538

080090ac <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 80090b8:	4a0c      	ldr	r2, [pc, #48]	; (80090ec <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]
    : memory_allocator_(memory_allocator),
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	605a      	str	r2, [r3, #4]
      error_reporter_(error_reporter),
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
      model_is_allocating_(false) {}
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	731a      	strb	r2, [r3, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	615a      	str	r2, [r3, #20]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	0801c3dc 	.word	0x0801c3dc

080090f0 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	4a04      	ldr	r2, [pc, #16]	; (800910c <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	0801c3dc 	.word	0x0801c3dc

08009110 <_ZN6tflite14MicroAllocatorD0Ev>:
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ffe9 	bl	80090f0 <_ZN6tflite14MicroAllocatorD1Ev>
 800911e:	2118      	movs	r1, #24
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f00e fa73 	bl	801760c <_ZdlPvj>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800913c:	2110      	movs	r1, #16
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff f853 	bl	80081ea <_ZN6tflite14AlignPointerUpEPhj>
 8009144:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	429a      	cmp	r2, r3
 800914c:	d007      	beq.n	800915e <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	461a      	mov	r2, r3
 8009156:	490c      	ldr	r1, [pc, #48]	; (8009188 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x58>)
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7fb fe23 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	441a      	add	r2, r3
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	6979      	ldr	r1, [r7, #20]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f002 faf2 	bl	800b758 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8009174:	4603      	mov	r3, r0
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 f807 	bl	800918c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800917e:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	0801b568 	.word	0x0801b568

0800918c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 800918c:	b590      	push	{r4, r7, lr}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 800919c:	f00e fd12 	bl	8017bc4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 80091a6:	f00e fd0d 	bl	8017bc4 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	330c      	adds	r3, #12
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2204      	movs	r2, #4
 80091b4:	2118      	movs	r1, #24
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
 80091ba:	60f8      	str	r0, [r7, #12]
      sizeof(MicroAllocator), alignof(MicroAllocator));
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4619      	mov	r1, r3
 80091c0:	2018      	movs	r0, #24
 80091c2:	f7fb fe22 	bl	8004e0a <_ZnwjPv>
 80091c6:	4604      	mov	r4, r0
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4620      	mov	r0, r4
 80091ce:	f7ff ff6d 	bl	80090ac <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 80091d2:	60bc      	str	r4, [r7, #8]
  return allocator;
 80091d4:	68bb      	ldr	r3, [r7, #8]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd90      	pop	{r4, r7, pc}
	...

080091e0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, TfLiteContext* context,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x18>
 80091f4:	f00e fce6 	bl	8017bc4 <abort>
  TFLITE_DCHECK(context != nullptr);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x22>
 80091fe:	f00e fce1 	bl	8017bc4 <abort>

  if (model_is_allocating_) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	7b1b      	ldrb	r3, [r3, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	492c      	ldr	r1, [pc, #176]	; (80092c0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xe0>)
 8009210:	4618      	mov	r0, r3
 8009212:	f7fb fdc7 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8009216:	2301      	movs	r3, #1
 8009218:	e04e      	b.n	80092b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fbc3 	bl	80099a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8009222:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x4e>
 800922a:	f00e fccb 	bl	8017bc4 <abort>
  model_is_allocating_ = true;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
 8009246:	74fb      	strb	r3, [r7, #19]
 8009248:	7cfb      	ldrb	r3, [r7, #19]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x72>
 800924e:	7cfb      	ldrb	r3, [r7, #19]
 8009250:	e032      	b.n	80092b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
  TF_LITE_ENSURE_STATUS(
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	47a0      	blx	r4
 8009264:	4603      	mov	r3, r0
 8009266:	74bb      	strb	r3, [r7, #18]
 8009268:	7cbb      	ldrb	r3, [r7, #18]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x92>
 800926e:	7cbb      	ldrb	r3, [r7, #18]
 8009270:	e022      	b.n	80092b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  TF_LITE_ENSURE_STATUS(
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3310      	adds	r3, #16
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800927c:	6979      	ldr	r1, [r7, #20]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	747b      	strb	r3, [r7, #17]
 8009286:	7c7b      	ldrb	r3, [r7, #17]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb0>
 800928c:	7c7b      	ldrb	r3, [r7, #17]
 800928e:	e013      	b.n	80092b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      AllocateNodeAndRegistrations(subgraph, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3314      	adds	r3, #20
 8009296:	681c      	ldr	r4, [r3, #0]
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	47a0      	blx	r4
 80092a8:	4603      	mov	r3, r0
 80092aa:	743b      	strb	r3, [r7, #16]
 80092ac:	7c3b      	ldrb	r3, [r7, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd6>
 80092b2:	7c3b      	ldrb	r3, [r7, #16]
 80092b4:	e000      	b.n	80092b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xd8>
      model, subgraph, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}
 80092c0:	0801b5d4 	.word	0x0801b5d4

080092c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:

TfLiteStatus MicroAllocator::FinishModelAllocation(const Model* model,
                                                   TfLiteContext* context) {
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	7b1b      	ldrb	r3, [r3, #12]
 80092d4:	f083 0301 	eor.w	r3, r3, #1
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	491b      	ldr	r1, [pc, #108]	; (8009350 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x8c>)
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fb fd5d 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e02c      	b.n	8009348 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fb59 	bl	80099a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80092f6:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3e>
 80092fe:	f00e fc61 	bl	8017bc4 <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	331c      	adds	r3, #28
 8009308:	681c      	ldr	r4, [r3, #0]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	47a0      	blx	r4
 8009314:	4603      	mov	r3, r0
 8009316:	74fb      	strb	r3, [r7, #19]
 8009318:	7cfb      	ldrb	r3, [r7, #19]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5e>
 800931e:	7cfb      	ldrb	r3, [r7, #19]
 8009320:	e012      	b.n	8009348 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3318      	adds	r3, #24
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	4798      	blx	r3
 8009332:	4603      	mov	r3, r0
 8009334:	74bb      	strb	r3, [r7, #18]
 8009336:	7cbb      	ldrb	r3, [r7, #18]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x7c>
 800933c:	7cbb      	ldrb	r3, [r7, #18]
 800933e:	e003      	b.n	8009348 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>

  model_is_allocating_ = false;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd90      	pop	{r4, r7, pc}
 8009350:	0801b62c 	.word	0x0801b62c

08009354 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6858      	ldr	r0, [r3, #4]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	330c      	adds	r3, #12
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2210      	movs	r2, #16
 8009370:	68b9      	ldr	r1, [r7, #8]
 8009372:	4798      	blx	r3
 8009374:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d108      	bne.n	800938e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	4907      	ldr	r1, [pc, #28]	; (80093a0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8009384:	4618      	mov	r0, r3
 8009386:	f7fb fd0d 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 800938a:	2301      	movs	r3, #1
 800938c:	e003      	b.n	8009396 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	0801b678 	.word	0x0801b678

080093a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 fa8c 	bl	800b8e0 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 80093c8:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d001      	beq.n	80093d2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	491d      	ldr	r1, [pc, #116]	; (8009454 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fb fce0 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e030      	b.n	800944a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6858      	ldr	r0, [r3, #4]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2204      	movs	r2, #4
 80093f8:	210c      	movs	r1, #12
 80093fa:	4798      	blx	r3
 80093fc:	6178      	str	r0, [r7, #20]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d108      	bne.n	8009416 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	4913      	ldr	r1, [pc, #76]	; (8009458 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 800940c:	4618      	mov	r0, r3
 800940e:	f7fb fcc9 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 8009412:	2301      	movs	r3, #1
 8009414:	e019      	b.n	800944a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	461a      	mov	r2, r3
 800941a:	2300      	movs	r3, #0
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	6053      	str	r3, [r2, #4]
 8009420:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	461a      	mov	r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	bd90      	pop	{r4, r7, pc}
 8009452:	bf00      	nop
 8009454:	0801b6a8 	.word	0x0801b6a8
 8009458:	0801b70c 	.word	0x0801b70c

0800945c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695a      	ldr	r2, [r3, #20]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d809      	bhi.n	8009484 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6898      	ldr	r0, [r3, #8]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	490b      	ldr	r1, [pc, #44]	; (80094a8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 800947c:	f7fb fc92 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 8009480:	2300      	movs	r3, #0
 8009482:	e00c      	b.n	800949e <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6919      	ldr	r1, [r3, #16]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	4613      	mov	r3, r2
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	3b0c      	subs	r3, #12
 800949a:	440b      	add	r3, r1
 800949c:	681b      	ldr	r3, [r3, #0]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	0801b744 	.word	0x0801b744

080094ac <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  context->tensors_size = subgraph->tensors()->size();
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff f829 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 80094be:	4603      	mov	r3, r0
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fd29 	bl	8009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	601a      	str	r2, [r3, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6858      	ldr	r0, [r3, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	330c      	adds	r3, #12
 80094d8:	681b      	ldr	r3, [r3, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80094de:	0191      	lsls	r1, r2, #6
 80094e0:	2204      	movs	r2, #4
 80094e2:	4798      	blx	r3
 80094e4:	4602      	mov	r2, r0
  context->tensors =
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	609a      	str	r2, [r3, #8]
  if (context->tensors == nullptr) {
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    TF_LITE_REPORT_ERROR(
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6898      	ldr	r0, [r3, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	019b      	lsls	r3, r3, #6
 80094fc:	461a      	mov	r2, r3
 80094fe:	4905      	ldr	r1, [pc, #20]	; (8009514 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x68>)
 8009500:	f7fb fc50 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5e>
  }
  return kTfLiteOk;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	0801b770 	.word	0x0801b770

08009518 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 8009518:	b5b0      	push	{r4, r5, r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	603b      	str	r3, [r7, #0]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	e02c      	b.n	8009586 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6e>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 8009530:	6838      	ldr	r0, [r7, #0]
 8009532:	f7fe ffed 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 8009536:	4603      	mov	r3, r0
 8009538:	6979      	ldr	r1, [r7, #20]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fcfa 	bl	8009f34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009540:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 8009542:	68b8      	ldr	r0, [r7, #8]
 8009544:	f7ff f863 	bl	800860e <_ZNK6tflite5Model7buffersEv>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context->tensors[i]);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 8009554:	4413      	add	r3, r2
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	460b      	mov	r3, r1
 800955a:	4602      	mov	r2, r0
 800955c:	4629      	mov	r1, r5
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff fc52 	bl	8008e08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8009564:	4603      	mov	r3, r0
 8009566:	74fb      	strb	r3, [r7, #19]
    if (status != kTfLiteOk) {
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d008      	beq.n	8009580 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x68>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	490e      	ldr	r1, [pc, #56]	; (80095b0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>)
 8009576:	4618      	mov	r0, r3
 8009578:	f7fb fc14 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 800957c:	2301      	movs	r3, #1
 800957e:	e013      	b.n	80095a8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	3301      	adds	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	6838      	ldr	r0, [r7, #0]
 8009588:	f7fe ffc2 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 800958c:	4603      	mov	r3, r0
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fcc2 	bl	8009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009594:	4602      	mov	r2, r0
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4293      	cmp	r3, r2
 800959a:	bf34      	ite	cc
 800959c:	2301      	movcc	r3, #1
 800959e:	2300      	movcs	r3, #0
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1c2      	bne.n	800952c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14>
    }
  }
  return kTfLiteOk;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bdb0      	pop	{r4, r5, r7, pc}
 80095b0:	0801b7b4 	.word	0x0801b7b4

080095b4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
 80095b4:	b5b0      	push	{r4, r5, r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685d      	ldr	r5, [r3, #4]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330c      	adds	r3, #12
 80095cc:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f7fe ffc8 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 80095d4:	4603      	mov	r3, r0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fcd2 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80095dc:	4602      	mov	r2, r0
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 80095e6:	2204      	movs	r2, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4628      	mov	r0, r5
 80095ec:	47a0      	blx	r4
 80095ee:	6178      	str	r0, [r7, #20]
          alignof(NodeAndRegistration)));
  if (output == nullptr) {
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d107      	bne.n	8009606 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x52>
    TF_LITE_REPORT_ERROR(
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	4907      	ldr	r1, [pc, #28]	; (8009618 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x64>)
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fb fbd1 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8009602:	2301      	movs	r3, #1
 8009604:	e003      	b.n	800960e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x5a>
  }
  *node_and_registrations = output;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bdb0      	pop	{r4, r5, r7, pc}
 8009616:	bf00      	nop
 8009618:	0801b7d4 	.word	0x0801b7d4

0800961c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const SubGraph* subgraph,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 800961c:	b5b0      	push	{r4, r5, r7, lr}
 800961e:	b096      	sub	sp, #88	; 0x58
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800962a:	2300      	movs	r3, #0
 800962c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model->operator_codes();
 8009630:	68b8      	ldr	r0, [r7, #8]
 8009632:	f7fe ffd0 	bl	80085d6 <_ZNK6tflite5Model14operator_codesEv>
 8009636:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	f107 031c 	add.w	r3, r7, #28
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff f830 	bl	80086a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8009648:	2300      	movs	r3, #0
 800964a:	657b      	str	r3, [r7, #84]	; 0x54
 800964c:	e12a      	b.n	80098a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>
    const auto* op = subgraph->operators()->Get(i);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe ff88 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 8009654:	4603      	mov	r3, r0
 8009656:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc9f 	bl	8009f9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800965e:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 8009660:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009662:	f7fe ff1c 	bl	800849e <_ZNK6tflite8Operator12opcode_indexEv>
 8009666:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 8009668:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800966a:	f000 fcbd 	bl	8009fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800966e:	4602      	mov	r2, r0
 8009670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009672:	4293      	cmp	r3, r2
 8009674:	bf2c      	ite	cs
 8009676:	2301      	movcs	r3, #1
 8009678:	2300      	movcc	r3, #0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x76>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009686:	4995      	ldr	r1, [pc, #596]	; (80098dc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c0>)
 8009688:	4618      	mov	r0, r3
 800968a:	f7fb fb8b 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 800968e:	2401      	movs	r4, #1
 8009690:	e11a      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    auto* opcode = (*opcodes)[index];
 8009692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009694:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009696:	f000 fdd1 	bl	800a23c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800969a:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 80096a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	461a      	mov	r2, r3
 80096ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096b0:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	4602      	mov	r2, r0
 80096b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096b8:	f7fd fd78 	bl	80071ac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 80096c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d011      	beq.n	80096ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xd2>
      TF_LITE_REPORT_ERROR(error_reporter_,
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689c      	ldr	r4, [r3, #8]
 80096ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096d0:	f7fd fd3e 	bl	8007150 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fd fd14 	bl	8007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	497f      	ldr	r1, [pc, #508]	; (80098e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c4>)
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7fb fb5e 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 80096e8:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 80096ec:	e0ec      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    const auto* registration = node_and_registrations[i].registration;
 80096ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	461a      	mov	r2, r3
 80096fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096fc:	4413      	add	r3, r2
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xfe>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800970e:	4975      	ldr	r1, [pc, #468]	; (80098e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
 8009710:	4618      	mov	r0, r3
 8009712:	f7fb fb47 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 8009716:	2401      	movs	r4, #1
 8009718:	e0d6      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 800971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971c:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    const char* custom_data = nullptr;
 8009722:	2300      	movs	r3, #0
 8009724:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 800972a:	2300      	movs	r3, #0
 800972c:	61bb      	str	r3, [r7, #24]

    if (op_type == BuiltinOperator_CUSTOM) {
 800972e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009732:	2b20      	cmp	r3, #32
 8009734:	d11b      	bne.n	800976e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x152>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 8009736:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009738:	f7fe fedc 	bl	80084f4 <_ZNK6tflite8Operator14custom_optionsEv>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	bf14      	ite	ne
 8009742:	2301      	movne	r3, #1
 8009744:	2300      	moveq	r3, #0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d059      	beq.n	8009800 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 800974c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800974e:	f7fe fed1 	bl	80084f4 <_ZNK6tflite8Operator14custom_optionsEv>
 8009752:	4603      	mov	r3, r0
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fd33 	bl	800a1c0 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800975a:	6538      	str	r0, [r7, #80]	; 0x50
        custom_data_size = op->custom_options()->size();
 800975c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800975e:	f7fe fec9 	bl	80084f4 <_ZNK6tflite8Operator14custom_optionsEv>
 8009762:	4603      	mov	r3, r0
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fb5d 	bl	8009e24 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800976a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800976c:	e048      	b.n	8009800 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
      }
    } else {
      if (op->custom_options() != nullptr) {
 800976e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009770:	f7fe fec0 	bl	80084f4 <_ZNK6tflite8Operator14custom_optionsEv>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf14      	ite	ne
 800977a:	2301      	movne	r3, #1
 800977c:	2300      	moveq	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x186>
        TF_LITE_REPORT_ERROR(
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689c      	ldr	r4, [r3, #8]
 8009788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800978c:	4618      	mov	r0, r3
 800978e:	f7fd fcb9 	bl	8007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8009792:	4603      	mov	r3, r0
 8009794:	461a      	mov	r2, r3
 8009796:	4954      	ldr	r1, [pc, #336]	; (80098e8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
 8009798:	4620      	mov	r0, r4
 800979a:	f7fb fb03 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 800979e:	2401      	movs	r4, #1
 80097a0:	e092      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3318      	adds	r3, #24
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80097ae:	4611      	mov	r1, r2
 80097b0:	6838      	ldr	r0, [r7, #0]
 80097b2:	4798      	blx	r3
 80097b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (parser == nullptr) {
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10e      	bne.n	80097da <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1be>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	689c      	ldr	r4, [r3, #8]
 80097c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd fc9d 	bl	8007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80097ca:	4603      	mov	r3, r0
 80097cc:	461a      	mov	r2, r3
 80097ce:	4947      	ldr	r1, [pc, #284]	; (80098ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7fb fae7 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 80097d6:	2401      	movs	r4, #1
 80097d8:	e076      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6899      	ldr	r1, [r3, #8]
 80097de:	f107 0318 	add.w	r3, r7, #24
 80097e2:	f107 021c 	add.w	r2, r7, #28
 80097e6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80097e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097ea:	47a0      	blx	r4
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e4>
 80097fa:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80097fe:	e063      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685c      	ldr	r4, [r3, #4]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689d      	ldr	r5, [r3, #8]
 8009808:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800980a:	f7fe fe57 	bl	80084bc <_ZNK6tflite8Operator6inputsEv>
 800980e:	4602      	mov	r2, r0
 8009810:	f107 0314 	add.w	r3, r7, #20
 8009814:	4629      	mov	r1, r5
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fcde 	bl	800a1d8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009822:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x214>
 800982a:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
 800982e:	e04b      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685c      	ldr	r4, [r3, #4]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689d      	ldr	r5, [r3, #8]
 8009838:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800983a:	f7fe fe4d 	bl	80084d8 <_ZNK6tflite8Operator7outputsEv>
 800983e:	4602      	mov	r2, r0
 8009840:	f107 0310 	add.w	r3, r7, #16
 8009844:	4629      	mov	r1, r5
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fcc6 	bl	800a1d8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009852:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x244>
 800985a:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 800985e:	e033      	b.n	80098c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ac>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8009860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	461a      	mov	r2, r3
 800986c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800986e:	4413      	add	r3, r2
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
    *node = {};
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	4618      	mov	r0, r3
 8009876:	2324      	movs	r3, #36	; 0x24
 8009878:	461a      	mov	r2, r3
 800987a:	2100      	movs	r1, #0
 800987c:	f00e fcb2 	bl	80181e4 <memset>
    node->inputs = inputs_array;
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009896:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 8009898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800989e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a0:	3301      	adds	r3, #1
 80098a2:	657b      	str	r3, [r7, #84]	; 0x54
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7fe fe5d 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fb67 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80098b2:	4602      	mov	r2, r0
 80098b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bf34      	ite	cc
 80098ba:	2301      	movcc	r3, #1
 80098bc:	2300      	movcs	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f47f aec4 	bne.w	800964e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x32>
  }

  return kTfLiteOk;
 80098c6:	2400      	movs	r4, #0
}
 80098c8:	f107 031c 	add.w	r3, r7, #28
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 ff21 	bl	800a714 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80098d2:	4623      	mov	r3, r4
 80098d4:	4618      	mov	r0, r3
 80098d6:	3758      	adds	r7, #88	; 0x58
 80098d8:	46bd      	mov	sp, r7
 80098da:	bdb0      	pop	{r4, r5, r7, pc}
 80098dc:	0801b80c 	.word	0x0801b80c
 80098e0:	0801b838 	.word	0x0801b838
 80098e4:	0801b868 	.word	0x0801b868
 80098e8:	0801b88c 	.word	0x0801b88c
 80098ec:	0801b8d4 	.word	0x0801b8d4

080098f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
 80098f0:	b5b0      	push	{r4, r5, r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < context->tensors_size; ++i) {
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e046      	b.n	8009990 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xa0>
    if (subgraph->tensors()->Get(i)->is_variable()) {
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7fe fe04 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 8009908:	4603      	mov	r3, r0
 800990a:	6979      	ldr	r1, [r7, #20]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fb11 	bl	8009f34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009912:	4603      	mov	r3, r0
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe fdae 	bl	8008476 <_ZNK6tflite6Tensor11is_variableEv>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d02c      	beq.n	800997a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6858      	ldr	r0, [r3, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	681b      	ldr	r3, [r3, #0]
          context->tensors[i].bytes, kBufferAlignment);
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	6891      	ldr	r1, [r2, #8]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	0192      	lsls	r2, r2, #6
 8009936:	440a      	add	r2, r1
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 8009938:	6995      	ldr	r5, [r2, #24]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	6891      	ldr	r1, [r2, #8]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	0192      	lsls	r2, r2, #6
 8009942:	188c      	adds	r4, r1, r2
 8009944:	2210      	movs	r2, #16
 8009946:	4629      	mov	r1, r5
 8009948:	4798      	blx	r3
 800994a:	4603      	mov	r3, r0
 800994c:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (context->tensors[i].data.data == nullptr) {
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	019b      	lsls	r3, r3, #6
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10d      	bne.n	800997a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6898      	ldr	r0, [r3, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	019b      	lsls	r3, r3, #6
 800996a:	4413      	add	r3, r2
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	461a      	mov	r2, r3
 8009970:	490c      	ldr	r1, [pc, #48]	; (80099a4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb4>)
 8009972:	f7fb fa17 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
 8009976:	2301      	movs	r3, #1
 8009978:	e010      	b.n	800999c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xac>
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	019b      	lsls	r3, r3, #6
 8009982:	4413      	add	r3, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f7fd fcde 	bl	8007346 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	3301      	adds	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	429a      	cmp	r2, r3
 8009998:	d3b3      	bcc.n	8009902 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x12>
  }

  return kTfLiteOk;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bdb0      	pop	{r4, r5, r7, pc}
 80099a4:	0801b8f4 	.word	0x0801b8f4

080099a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 80099b2:	6838      	ldr	r0, [r7, #0]
 80099b4:	f7fe fe1d 	bl	80085f2 <_ZNK6tflite5Model9subgraphsEv>
 80099b8:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fb48 	bl	800a050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	bf14      	ite	ne
 80099c6:	2301      	movne	r3, #1
 80099c8:	2300      	moveq	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d007      	beq.n	80099e0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4907      	ldr	r1, [pc, #28]	; (80099f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fb f9e4 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 80099dc:	2300      	movs	r3, #0
 80099de:	e004      	b.n	80099ea <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 fbd0 	bl	800a188 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	0801b924 	.word	0x0801b924

080099f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
 80099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fa:	b0a7      	sub	sp, #156	; 0x9c
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	2400      	movs	r4, #0
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 ff59 	bl	800b8c8 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8009a16:	4606      	mov	r6, r0
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 ff5f 	bl	800b8e0 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8009a28:	4632      	mov	r2, r6
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f001 fe5e 	bl	800b6ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6899      	ldr	r1, [r3, #8]
 8009a34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fe69 	bl	8008714 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8009a42:	6838      	ldr	r0, [r7, #0]
 8009a44:	f7fe fd64 	bl	8008510 <_ZNK6tflite8SubGraph7tensorsEv>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fa64 	bl	8009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009a50:	4601      	mov	r1, r0
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	695a      	ldr	r2, [r3, #20]
 8009a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fe76 	bl	800874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8009a66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7e>
 8009a6e:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8009a72:	2500      	movs	r5, #0
 8009a74:	e0ff      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 8009a76:	2300      	movs	r3, #0
 8009a78:	643b      	str	r3, [r7, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(
 8009a7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff f85f 	bl	8008b48 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8009a90:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xa8>
 8009a98:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 8009a9c:	2500      	movs	r5, #0
 8009a9e:	e0ea      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
 8009aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	f7fe feac 	bl	8008808 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8009ab6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
 8009abe:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	e0d7      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
                                             context->tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	691a      	ldr	r2, [r3, #16]
 8009aca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ace:	4611      	mov	r1, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff f8b5 	bl	8008c40 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8009adc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf4>
 8009ae4:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8009ae8:	2500      	movs	r5, #0
 8009aea:	e0c4      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    const AllocationInfo* allocation_info = builder.Finish();
 8009aec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fe3f 	bl	8008774 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 8009af6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 8009afa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 fefa 	bl	800b8f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8009b04:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 8009b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fe76 	bl	800b804 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8009b18:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8009b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10f      	bne.n	8009b44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6898      	ldr	r0, [r3, #8]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6899      	ldr	r1, [r3, #8]
 8009b2c:	4b59      	ldr	r3, [pc, #356]	; (8009c94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x29c>)
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	f240 338f 	movw	r3, #911	; 0x38f
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	4b58      	ldr	r3, [pc, #352]	; (8009c98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8009b38:	4a58      	ldr	r2, [pc, #352]	; (8009c9c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8009b3a:	f7fb f94c 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009b3e:	2401      	movs	r4, #1
 8009b40:	2500      	movs	r5, #0
 8009b42:	e098      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8009b44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009b50:	4618      	mov	r0, r3
 8009b52:	f00a febb 	bl	80148cc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689d      	ldr	r5, [r3, #8]
 8009b5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fe14 	bl	800878c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f107 0114 	add.w	r1, r7, #20
 8009b6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f7ff f8ac 	bl	8008ccc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009b7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x192>
 8009b82:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8009b86:	2500      	movs	r5, #0
 8009b88:	e06b      	b.n	8009c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f001 feb2 	bl	800b8f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8009b94:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f00b f950 	bl	8014e40 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf34      	ite	cc
 8009ba8:	2301      	movcc	r3, #1
 8009baa:	2300      	movcs	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1da>
      TF_LITE_REPORT_ERROR(
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	689c      	ldr	r4, [r3, #8]
 8009bb6:	f107 0314 	add.w	r3, r7, #20
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f00b f940 	bl	8014e40 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bc4:	4936      	ldr	r1, [pc, #216]	; (8009ca0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a8>)
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7fb f8ec 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 8009bcc:	2401      	movs	r4, #1
 8009bce:	2500      	movs	r5, #0
 8009bd0:	e047      	b.n	8009c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689d      	ldr	r5, [r3, #8]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fe74 	bl	800b8c8 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8009be0:	4606      	mov	r6, r0
 8009be2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe fdd0 	bl	800878c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f107 0114 	add.w	r1, r7, #20
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7ff f8c0 	bl	8008d80 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21e>
 8009c0e:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8009c12:	2500      	movs	r5, #0
 8009c14:	e025      	b.n	8009c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685e      	ldr	r6, [r3, #4]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3308      	adds	r3, #8
 8009c22:	681d      	ldr	r5, [r3, #0]
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f00b f909 	bl	8014e40 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2201      	movs	r2, #1
 8009c32:	4619      	mov	r1, r3
 8009c34:	4630      	mov	r0, r6
 8009c36:	47a8      	blx	r5
 8009c38:	6738      	str	r0, [r7, #112]	; 0x70
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8009c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10f      	bne.n	8009c60 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6898      	ldr	r0, [r3, #8]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6899      	ldr	r1, [r3, #8]
 8009c48:	4b16      	ldr	r3, [pc, #88]	; (8009ca4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>)
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	f44f 736a 	mov.w	r3, #936	; 0x3a8
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8009c54:	4a11      	ldr	r2, [pc, #68]	; (8009c9c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8009c56:	f7fb f8be 	bl	8004dd6 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8009c5a:	2401      	movs	r4, #1
 8009c5c:	2500      	movs	r5, #0
 8009c5e:	e000      	b.n	8009c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
  }
 8009c60:	2501      	movs	r5, #1
 8009c62:	f107 0314 	add.w	r3, r7, #20
 8009c66:	4618      	mov	r0, r3
 8009c68:	f00a fe82 	bl	8014970 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8009c6c:	2d01      	cmp	r5, #1
 8009c6e:	d101      	bne.n	8009c74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27c>
 8009c70:	2501      	movs	r5, #1
 8009c72:	e000      	b.n	8009c76 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
 8009c74:	2500      	movs	r5, #0
 8009c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 fda2 	bl	800b7c4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009c80:	2d01      	cmp	r5, #1
 8009c82:	d101      	bne.n	8009c88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x290>
 8009c84:	bf00      	nop
  return kTfLiteOk;
 8009c86:	2400      	movs	r4, #0
}
 8009c88:	4623      	mov	r3, r4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3794      	adds	r7, #148	; 0x94
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	0801ba10 	.word	0x0801ba10
 8009c98:	0801b950 	.word	0x0801b950
 8009c9c:	0801b9f8 	.word	0x0801b9f8
 8009ca0:	0801ba2c 	.word	0x0801ba2c
 8009ca4:	0801ba84 	.word	0x0801ba84

08009ca8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009cb4:	887b      	ldrh	r3, [r7, #2]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 facd 	bl	800a258 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8009cbe:	4603      	mov	r3, r0
  }
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009cd4:	887b      	ldrh	r3, [r7, #2]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fadd 	bl	800a298 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8009cde:	4603      	mov	r3, r0
  }
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009cf4:	887b      	ldrh	r3, [r7, #2]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 faed 	bl	800a2d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8009cfe:	4603      	mov	r3, r0
  }
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	460b      	mov	r3, r1
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8009d16:	897b      	ldrh	r3, [r7, #10]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7fb f891 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009d20:	4603      	mov	r3, r0
 8009d22:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8009d24:	8afb      	ldrh	r3, [r7, #22]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	8afb      	ldrh	r3, [r7, #22]
 8009d2e:	4413      	add	r3, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fb fe0b 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009d36:	4603      	mov	r3, r0
 8009d38:	e000      	b.n	8009d3c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8009d3a:	687b      	ldr	r3, [r7, #4]
  }
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009d50:	887b      	ldrh	r3, [r7, #2]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fadf 	bl	800a318 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8009d5a:	4603      	mov	r3, r0
  }
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009d70:	887b      	ldrh	r3, [r7, #2]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 faef 	bl	800a358 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8009d7a:	4603      	mov	r3, r0
  }
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009d90:	887b      	ldrh	r3, [r7, #2]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 faff 	bl	800a398 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8009d9a:	4603      	mov	r3, r0
  }
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009db0:	887b      	ldrh	r3, [r7, #2]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fb0f 	bl	800a3d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8009dba:	4603      	mov	r3, r0
  }
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009dd0:	887b      	ldrh	r3, [r7, #2]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fb1f 	bl	800a418 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8009dda:	4603      	mov	r3, r0
  }
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009df0:	887b      	ldrh	r3, [r7, #2]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fb2f 	bl	800a458 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8009dfa:	4603      	mov	r3, r0
  }
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8009e10:	887b      	ldrh	r3, [r7, #2]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb3f 	bl	800a498 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8009e1a:	4603      	mov	r3, r0
  }
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f7 fa4c 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009e36:	4603      	mov	r3, r0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7f7 fa3e 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff ffea 	bl	8009e40 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d306      	bcc.n	8009e82 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8009e76:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8009e78:	f240 1101 	movw	r1, #257	; 0x101
 8009e7c:	480a      	ldr	r0, [pc, #40]	; (8009ea8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8009e7e:	f00d fea9 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb4a 	bl	800a51c <_ZNK11flatbuffers6VectorIfE4DataEv>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 fb2f 	bl	800a4f0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8009e92:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009e96:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	0801baa8 	.word	0x0801baa8
 8009ea4:	0801bab4 	.word	0x0801bab4
 8009ea8:	0801bb7c 	.word	0x0801bb7c

08009eac <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7f7 fa08 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ffea 	bl	8009eac <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d306      	bcc.n	8009eee <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8009ee2:	4a0b      	ldr	r2, [pc, #44]	; (8009f10 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8009ee4:	f240 1101 	movw	r1, #257	; 0x101
 8009ee8:	480a      	ldr	r0, [pc, #40]	; (8009f14 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8009eea:	f00d fe73 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fb36 	bl	800a560 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fb1b 	bl	800a534 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
  }
 8009f02:	4610      	mov	r0, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	0801baa8 	.word	0x0801baa8
 8009f10:	0801bc2c 	.word	0x0801bc2c
 8009f14:	0801bb7c 	.word	0x0801bb7c

08009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f7 f9d2 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff ffea 	bl	8009f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009f44:	4602      	mov	r2, r0
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d306      	bcc.n	8009f5a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8009f4e:	4a0a      	ldr	r2, [pc, #40]	; (8009f78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8009f50:	f240 1101 	movw	r1, #257	; 0x101
 8009f54:	4809      	ldr	r0, [pc, #36]	; (8009f7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8009f56:	f00d fe3d 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb20 	bl	800a5a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8009f60:	4603      	mov	r3, r0
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fb07 	bl	800a578 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8009f6a:	4603      	mov	r3, r0
  }
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	0801baa8 	.word	0x0801baa8
 8009f78:	0801bdd4 	.word	0x0801bdd4
 8009f7c:	0801bb7c 	.word	0x0801bb7c

08009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f7 f99e 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009f92:	4603      	mov	r3, r0
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff ffea 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009fac:	4602      	mov	r2, r0
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d306      	bcc.n	8009fc2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8009fb4:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8009fb6:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8009fb8:	f240 1101 	movw	r1, #257	; 0x101
 8009fbc:	4809      	ldr	r0, [pc, #36]	; (8009fe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8009fbe:	f00d fe09 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fb0c 	bl	800a5e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 faf3 	bl	800a5b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8009fd2:	4603      	mov	r3, r0
  }
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	0801baa8 	.word	0x0801baa8
 8009fe0:	0801becc 	.word	0x0801becc
 8009fe4:	0801bb7c 	.word	0x0801bb7c

08009fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7f7 f96a 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff ffea 	bl	8009fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a014:	4602      	mov	r2, r0
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	4293      	cmp	r3, r2
 800a01a:	d306      	bcc.n	800a02a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800a01c:	4b09      	ldr	r3, [pc, #36]	; (800a044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800a020:	f240 1101 	movw	r1, #257	; 0x101
 800a024:	4809      	ldr	r0, [pc, #36]	; (800a04c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800a026:	f00d fdd5 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 faf8 	bl	800a620 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800a030:	4603      	mov	r3, r0
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fadf 	bl	800a5f8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800a03a:	4603      	mov	r3, r0
  }
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	0801baa8 	.word	0x0801baa8
 800a048:	0801bfc8 	.word	0x0801bfc8
 800a04c:	0801bb7c 	.word	0x0801bb7c

0800a050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7f7 f936 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a062:	4603      	mov	r3, r0
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ffea 	bl	800a050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800a07c:	4602      	mov	r2, r0
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	4293      	cmp	r3, r2
 800a082:	d306      	bcc.n	800a092 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 800a084:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800a086:	4a0a      	ldr	r2, [pc, #40]	; (800a0b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800a088:	f240 1101 	movw	r1, #257	; 0x101
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800a08e:	f00d fda1 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fae4 	bl	800a660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800a098:	4603      	mov	r3, r0
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 facb 	bl	800a638 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 800a0a2:	4603      	mov	r3, r0
  }
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	0801baa8 	.word	0x0801baa8
 800a0b0:	0801c0cc 	.word	0x0801c0cc
 800a0b4:	0801bb7c 	.word	0x0801bb7c

0800a0b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f7 f902 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff ffea 	bl	800a0b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d306      	bcc.n	800a0fa <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 800a0ec:	4b09      	ldr	r3, [pc, #36]	; (800a114 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 800a0ee:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 800a0f0:	f240 1101 	movw	r1, #257	; 0x101
 800a0f4:	4809      	ldr	r0, [pc, #36]	; (800a11c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800a0f6:	f00d fd6d 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fad0 	bl	800a6a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 800a100:	4603      	mov	r3, r0
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fab7 	bl	800a678 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800a10a:	4603      	mov	r3, r0
  }
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	0801baa8 	.word	0x0801baa8
 800a118:	0801c1c8 	.word	0x0801c1c8
 800a11c:	0801bb7c 	.word	0x0801bb7c

0800a120 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f7 f8ce 	bl	80012ce <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800a132:	4603      	mov	r3, r0
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff ffea 	bl	800a120 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800a14c:	4602      	mov	r2, r0
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	4293      	cmp	r3, r2
 800a152:	d306      	bcc.n	800a162 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800a154:	4b09      	ldr	r3, [pc, #36]	; (800a17c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800a156:	4a0a      	ldr	r2, [pc, #40]	; (800a180 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800a158:	f240 1101 	movw	r1, #257	; 0x101
 800a15c:	4809      	ldr	r0, [pc, #36]	; (800a184 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 800a15e:	f00d fd39 	bl	8017bd4 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fabc 	bl	800a6e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800a168:	4603      	mov	r3, r0
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 faa3 	bl	800a6b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800a172:	4603      	mov	r3, r0
  }
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	0801baa8 	.word	0x0801baa8
 800a180:	0801c2c0 	.word	0x0801c2c0
 800a184:	0801bb7c 	.word	0x0801bb7c

0800a188 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff ff69 	bl	800a06c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a19a:	4603      	mov	r3, r0
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ff8f 	bl	800a0d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f985 	bl	800a4d8 <_ZNK11flatbuffers6VectorIhE4DataEv>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a1ec:	f00d fcea 	bl	8017bc4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a1f6:	f00d fce5 	bl	8017bc4 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 800a21e:	f00d fcd1 	bl	8017bc4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800a228:	f00d fccc 	bl	8017bc4 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff fedb 	bl	800a004 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800a24e:	4603      	mov	r3, r0
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a264:	887b      	ldrh	r3, [r7, #2]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7fa fdea 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a26e:	4603      	mov	r3, r0
 800a270:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	4413      	add	r3, r2
 800a278:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d006      	beq.n	800a28e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800a280:	68b8      	ldr	r0, [r7, #8]
 800a282:	f7fb fb63 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a286:	4602      	mov	r2, r0
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4413      	add	r3, r2
                        : nullptr;
 800a28c:	e000      	b.n	800a290 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a28e:	2300      	movs	r3, #0
  }
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a2a4:	887b      	ldrh	r3, [r7, #2]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7fa fdca 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	89fb      	ldrh	r3, [r7, #14]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2ba:	89fb      	ldrh	r3, [r7, #14]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800a2c0:	68b8      	ldr	r0, [r7, #8]
 800a2c2:	f7fb fb43 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4413      	add	r3, r2
                        : nullptr;
 800a2cc:	e000      	b.n	800a2d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2ce:	2300      	movs	r3, #0
  }
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fa fdaa 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a2fa:	89fb      	ldrh	r3, [r7, #14]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800a300:	68b8      	ldr	r0, [r7, #8]
 800a302:	f7fb fb23 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a306:	4602      	mov	r2, r0
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4413      	add	r3, r2
                        : nullptr;
 800a30c:	e000      	b.n	800a310 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a30e:	2300      	movs	r3, #0
  }
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a324:	887b      	ldrh	r3, [r7, #2]
 800a326:	4619      	mov	r1, r3
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7fa fd8a 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a32e:	4603      	mov	r3, r0
 800a330:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	89fb      	ldrh	r3, [r7, #14]
 800a336:	4413      	add	r3, r2
 800a338:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a33a:	89fb      	ldrh	r3, [r7, #14]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800a340:	68b8      	ldr	r0, [r7, #8]
 800a342:	f7fb fb03 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a346:	4602      	mov	r2, r0
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4413      	add	r3, r2
                        : nullptr;
 800a34c:	e000      	b.n	800a350 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a34e:	2300      	movs	r3, #0
  }
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a364:	887b      	ldrh	r3, [r7, #2]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7fa fd6a 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a36e:	4603      	mov	r3, r0
 800a370:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	4413      	add	r3, r2
 800a378:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a37a:	89fb      	ldrh	r3, [r7, #14]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d006      	beq.n	800a38e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800a380:	68b8      	ldr	r0, [r7, #8]
 800a382:	f7fb fae3 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a386:	4602      	mov	r2, r0
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4413      	add	r3, r2
                        : nullptr;
 800a38c:	e000      	b.n	800a390 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a38e:	2300      	movs	r3, #0
  }
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a3a4:	887b      	ldrh	r3, [r7, #2]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7fa fd4a 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	89fb      	ldrh	r3, [r7, #14]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a3ba:	89fb      	ldrh	r3, [r7, #14]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800a3c0:	68b8      	ldr	r0, [r7, #8]
 800a3c2:	f7fb fac3 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4413      	add	r3, r2
                        : nullptr;
 800a3cc:	e000      	b.n	800a3d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a3ce:	2300      	movs	r3, #0
  }
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a3e4:	887b      	ldrh	r3, [r7, #2]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fa fd2a 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a3fa:	89fb      	ldrh	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d006      	beq.n	800a40e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800a400:	68b8      	ldr	r0, [r7, #8]
 800a402:	f7fb faa3 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a406:	4602      	mov	r2, r0
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4413      	add	r3, r2
                        : nullptr;
 800a40c:	e000      	b.n	800a410 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a40e:	2300      	movs	r3, #0
  }
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7fa fd0a 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a42e:	4603      	mov	r3, r0
 800a430:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	4413      	add	r3, r2
 800a438:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a43a:	89fb      	ldrh	r3, [r7, #14]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d006      	beq.n	800a44e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800a440:	68b8      	ldr	r0, [r7, #8]
 800a442:	f7fb fa83 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a446:	4602      	mov	r2, r0
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4413      	add	r3, r2
                        : nullptr;
 800a44c:	e000      	b.n	800a450 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a44e:	2300      	movs	r3, #0
  }
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7fa fcea 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a46e:	4603      	mov	r3, r0
 800a470:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	89fb      	ldrh	r3, [r7, #14]
 800a476:	4413      	add	r3, r2
 800a478:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a47a:	89fb      	ldrh	r3, [r7, #14]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800a480:	68b8      	ldr	r0, [r7, #8]
 800a482:	f7fb fa63 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a486:	4602      	mov	r2, r0
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4413      	add	r3, r2
                        : nullptr;
 800a48c:	e000      	b.n	800a490 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a48e:	2300      	movs	r3, #0
  }
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800a4a4:	887b      	ldrh	r3, [r7, #2]
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7fa fcca 	bl	8004e42 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	89fb      	ldrh	r3, [r7, #14]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a4ba:	89fb      	ldrh	r3, [r7, #14]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d006      	beq.n	800a4ce <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800a4c0:	68b8      	ldr	r0, [r7, #8]
 800a4c2:	f7fb fa43 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	4413      	add	r3, r2
                        : nullptr;
 800a4cc:	e000      	b.n	800a4d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800a4ce:	2300      	movs	r3, #0
  }
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
  }
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4413      	add	r3, r2
 800a502:	edd3 7a00 	vldr	s15, [r3]
 800a506:	eeb0 0a67 	vmov.f32	s0, s15
 800a50a:	f7fc f8ae 	bl	800666a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800a50e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a512:	eeb0 0a67 	vmov.f32	s0, s15
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
  }
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	4413      	add	r3, r2
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4610      	mov	r0, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	f000 f8d3 	bl	800a6f8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
  }
 800a556:	4610      	mov	r0, r2
 800a558:	4619      	mov	r1, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3304      	adds	r3, #4
  }
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	4413      	add	r3, r2
 800a58a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7fb f9dd 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a592:	4602      	mov	r2, r0
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4413      	add	r3, r2
  }
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3304      	adds	r3, #4
  }
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fb f9bd 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4413      	add	r3, r2
  }
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3304      	adds	r3, #4
  }
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	4413      	add	r3, r2
 800a60a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fb f99d 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a612:	4602      	mov	r2, r0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4413      	add	r3, r2
  }
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3304      	adds	r3, #4
  }
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7fb f97d 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a652:	4602      	mov	r2, r0
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4413      	add	r3, r2
  }
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3304      	adds	r3, #4
  }
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	4413      	add	r3, r2
 800a68a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7fb f95d 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a692:	4602      	mov	r2, r0
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4413      	add	r3, r2
  }
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3304      	adds	r3, #4
  }
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7fb f93d 	bl	800594c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4413      	add	r3, r2
  }
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3304      	adds	r3, #4
  }
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800a702:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a706:	4610      	mov	r0, r2
 800a708:	4619      	mov	r1, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	4a05      	ldr	r2, [pc, #20]	; (800a734 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4618      	mov	r0, r3
 800a726:	f7fd ff8f 	bl	8008648 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	0801c3c4 	.word	0x0801c3c4

0800a738 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ffe7 	bl	800a714 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800a746:	2108      	movs	r1, #8
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f00c ff5f 	bl	801760c <_ZdlPvj>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b0c4      	sub	sp, #272	; 0x110
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a766:	6018      	str	r0, [r3, #0]
 800a768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a770:	6019      	str	r1, [r3, #0]
 800a772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a776:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a77a:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800a77c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a784:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800a788:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a78c:	f107 0010 	add.w	r0, r7, #16
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a798:	f000 fe30 	bl	800b3fc <MicroVsnprintf>
  DebugLog(log_buffer);
 800a79c:	f107 0310 	add.w	r3, r7, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7f6 fc05 	bl	8000fb0 <DebugLog>
  DebugLog("\r\n");
 800a7a6:	4804      	ldr	r0, [pc, #16]	; (800a7b8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x60>)
 800a7a8:	f7f6 fc02 	bl	8000fb0 <DebugLog>
#endif
  return 0;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	0801c400 	.word	0x0801c400

0800a7bc <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b089      	sub	sp, #36	; 0x24
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	681c      	ldr	r4, [r3, #0]
 800a7d0:	f04f 0200 	mov.w	r2, #0
 800a7d4:	f04f 0300 	mov.w	r3, #0
 800a7d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	47a0      	blx	r4
 800a7ec:	4603      	mov	r3, r0
  }
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd90      	pop	{r4, r7, pc}

0800a7f6 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b086      	sub	sp, #24
 800a7fa:	af02      	add	r7, sp, #8
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	605a      	str	r2, [r3, #4]
    if (profiler) {
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00c      	beq.n	800a830 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a81e:	e9cd 2300 	strd	r2, r3, [sp]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	f7ff ffc9 	bl	800a7bc <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 800a82a:	4602      	mov	r2, r0
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	605a      	str	r2, [r3, #4]
    }
  }
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3310      	adds	r3, #16
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	6852      	ldr	r2, [r2, #4]
 800a85c:	4611      	mov	r1, r2
 800a85e:	4798      	blx	r3
    }
  }
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 800a86a:	b5b0      	push	{r4, r5, r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af02      	add	r7, sp, #8
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
 800a876:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2200      	movs	r2, #0
 800a87e:	461c      	mov	r4, r3
 800a880:	4615      	mov	r5, r2
 800a882:	e9cd 4500 	strd	r4, r5, [sp]
 800a886:	2302      	movs	r3, #2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	f7ff ffb3 	bl	800a7f6 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bdb0      	pop	{r4, r5, r7, pc}

0800a89a <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	605a      	str	r2, [r3, #4]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8b8:	609a      	str	r2, [r3, #8]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	609a      	str	r2, [r3, #8]
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fd fe1b 	bl	800852c <_ZNK6tflite8SubGraph6inputsEv>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd fd68 	bl	80083ce <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800a8fe:	4603      	mov	r3, r0
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a914:	4618      	mov	r0, r3
 800a916:	f7fd fe09 	bl	800852c <_ZNK6tflite8SubGraph6inputsEv>
 800a91a:	4603      	mov	r3, r0
  }
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fe09 	bl	8008548 <_ZNK6tflite8SubGraph7outputsEv>
 800a936:	4603      	mov	r3, r0
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fd fd48 	bl	80083ce <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800a93e:	4603      	mov	r3, r0
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a954:	4618      	mov	r0, r3
 800a956:	f7fd fdf7 	bl	8008548 <_ZNK6tflite8SubGraph7outputsEv>
 800a95a:	4603      	mov	r3, r0
  }
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	2b20      	cmp	r3, #32
 800a972:	d102      	bne.n	800a97a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	e007      	b.n	800a98a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	4618      	mov	r0, r3
 800a982:	f7fc fbbf 	bl	8007104 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a986:	4603      	mov	r3, r0
 800a988:	bf00      	nop
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fcd3 	bl	8009354 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 800a9ae:	4603      	mov	r3, r0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	6899      	ldr	r1, [r3, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	f7fe fce5 	bl	80093a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 800a9da:	4603      	mov	r3, r0
      helper->current_node_idx_, bytes, buffer_idx);
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fd30 	bl	800945c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 800a9fc:	4603      	mov	r3, r0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 800aa06:	b40e      	push	{r1, r2, r3}
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 800aa16:	f107 0320 	add.w	r3, r7, #32
 800aa1a:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6858      	ldr	r0, [r3, #4]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	4798      	blx	r3
  va_end(args);
}
 800aa30:	bf00      	nop
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa3a:	b003      	add	sp, #12
 800aa3c:	4770      	bx	lr

0800aa3e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
 800aa4a:	603b      	str	r3, [r7, #0]
      error_reporter_(error_reporter),
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
                                         error_reporter)),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]
    : model_(model),
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	605a      	str	r2, [r3, #4]
      op_resolver_(op_resolver),
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	609a      	str	r2, [r3, #8]
      error_reporter_(error_reporter),
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	60da      	str	r2, [r3, #12]
      context_helper_(error_reporter_, &allocator_) {
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3310      	adds	r3, #16
 800aa68:	2258      	movs	r2, #88	; 0x58
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f00d fbb9 	bl	80181e4 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	69b9      	ldr	r1, [r7, #24]
 800aa76:	6838      	ldr	r0, [r7, #0]
 800aa78:	f7fe fb5a 	bl	8009130 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	669a      	str	r2, [r3, #104]	; 0x68
      tensors_allocated_(false),
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      initialization_status_(kTfLiteError),
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      context_helper_(error_reporter_, &allocator_) {
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68d9      	ldr	r1, [r3, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f7ff fefa 	bl	800a89a <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  Init(profiler);
 800aaa6:	6a39      	ldr	r1, [r7, #32]
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 f84d 	bl	800ab48 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d03a      	beq.n	800ab3e <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aac8:	2300      	movs	r3, #0
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	e025      	b.n	800ab1a <_ZN6tflite16MicroInterpreterD1Ev+0x62>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6819      	ldr	r1, [r3, #0]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	440b      	add	r3, r1
 800aade:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6819      	ldr	r1, [r3, #0]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
        registration->free(&context_, node->user_data);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	f102 0010 	add.w	r0, r2, #16
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	6912      	ldr	r2, [r2, #16]
 800ab10:	4611      	mov	r1, r2
 800ab12:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	3301      	adds	r3, #1
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fd fd20 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800ab24:	4603      	mov	r3, r0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fa2a 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	4293      	cmp	r3, r2
 800ab32:	bf34      	ite	cc
 800ab34:	2301      	movcc	r3, #1
 800ab36:	2300      	movcs	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1c7      	bne.n	800aace <_ZN6tflite16MicroInterpreterD1Ev+0x16>
      }
    }
  }
}
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	3718      	adds	r7, #24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fd fd4b 	bl	80085f2 <_ZNK6tflite5Model9subgraphsEv>
 800ab5c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7ff fa76 	bl	800a050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	bf14      	ite	ne
 800ab6a:	2301      	movne	r3, #1
 800ab6c:	2300      	moveq	r3, #0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	4912      	ldr	r1, [pc, #72]	; (800abc4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x7c>)
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fa f912 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 800ab88:	e018      	b.n	800abbc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x74>
  }
  subgraph_ = (*subgraphs)[0];
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7ff fafb 	bl	800a188 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800ab92:	4602      	mov	r2, r0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>)
 800aba6:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	0801c9fc 	.word	0x0801c9fc
 800abc8:	0800aa07 	.word	0x0800aa07

0800abcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b08f      	sub	sp, #60	; 0x3c
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6859      	ldr	r1, [r3, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f103 0210 	add.w	r2, r3, #16
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689c      	ldr	r4, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4623      	mov	r3, r4
 800abec:	f7fe faf8 	bl	80091e0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 800abf0:	4603      	mov	r3, r0
                                      &node_and_registrations_) != kTfLiteOk) {
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bf14      	ite	ne
 800abf6:	2301      	movne	r3, #1
 800abf8:	2300      	moveq	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	4973      	ldr	r1, [pc, #460]	; (800add4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x208>)
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fa f8cc 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e0d9      	b.n	800adcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a6f      	ldr	r2, [pc, #444]	; (800add8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>)
 800ac1c:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	623b      	str	r3, [r7, #32]
 800ac2e:	e03b      	b.n	800aca8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
    context_helper_.SetNodeIndex(i);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3374      	adds	r3, #116	; 0x74
 800ac34:	6a3a      	ldr	r2, [r7, #32]
 800ac36:	4611      	mov	r1, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff fe45 	bl	800a8c8 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	6a3a      	ldr	r2, [r7, #32]
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	440b      	add	r3, r1
 800ac4e:	60fb      	str	r3, [r7, #12]
    auto* registration = node_and_registrations_[i].registration;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	6a3a      	ldr	r2, [r7, #32]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	440b      	add	r3, r1
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	60bb      	str	r3, [r7, #8]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	2b20      	cmp	r3, #32
 800ac6a:	d106      	bne.n	800ac7a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xae>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = node->custom_initial_data_size;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac78:	e004      	b.n	800ac84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb8>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (registration->init) {
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	f102 0010 	add.w	r0, r2, #16
 800ac96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9a:	4798      	blx	r3
 800ac9c:	4602      	mov	r2, r0
      node->user_data =
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	3301      	adds	r3, #1
 800aca6:	623b      	str	r3, [r7, #32]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acac:	4618      	mov	r0, r3
 800acae:	f7fd fc59 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800acb2:	4603      	mov	r3, r0
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff f963 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800acba:	4602      	mov	r2, r0
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bf34      	ite	cc
 800acc2:	2301      	movcc	r3, #1
 800acc4:	2300      	movcs	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1b1      	bne.n	800ac30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x64>
    }
  }
  context_helper_.SetNodeIndex(-1);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3374      	adds	r3, #116	; 0x74
 800acd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff fdf7 	bl	800a8c8 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a3f      	ldr	r2, [pc, #252]	; (800addc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x210>)
 800acde:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ace0:	2300      	movs	r3, #0
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
 800ace4:	e03b      	b.n	800ad5e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x192>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3374      	adds	r3, #116	; 0x74
 800acea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fdea 	bl	800a8c8 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6819      	ldr	r1, [r3, #0]
 800acf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	00db      	lsls	r3, r3, #3
 800ad02:	440b      	add	r3, r1
 800ad04:	61bb      	str	r3, [r7, #24]
    auto* registration = node_and_registrations_[i].registration;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6819      	ldr	r1, [r3, #0]
 800ad0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	440b      	add	r3, r1
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	617b      	str	r3, [r7, #20]
    if (registration->prepare) {
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01a      	beq.n	800ad58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	3210      	adds	r2, #16
 800ad2a:	69b9      	ldr	r1, [r7, #24]
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	4603      	mov	r3, r0
 800ad32:	74fb      	strb	r3, [r7, #19]
      if (prepare_status != kTfLiteOk) {
 800ad34:	7cfb      	ldrb	r3, [r7, #19]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00e      	beq.n	800ad58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
        TF_LITE_REPORT_ERROR(
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68dc      	ldr	r4, [r3, #12]
 800ad3e:	6978      	ldr	r0, [r7, #20]
 800ad40:	f7ff fe10 	bl	800a964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ad44:	4602      	mov	r2, r0
 800ad46:	7cfb      	ldrb	r3, [r7, #19]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	4924      	ldr	r1, [pc, #144]	; (800ade0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x214>)
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7fa f828 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e039      	b.n	800adcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd fbfe 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff f908 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800ad70:	4602      	mov	r2, r0
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bf34      	ite	cc
 800ad78:	2301      	movcc	r3, #1
 800ad7a:	2300      	movcs	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1b1      	bne.n	800ace6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3374      	adds	r3, #116	; 0x74
 800ad86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff fd9c 	bl	800a8c8 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a11      	ldr	r2, [pc, #68]	; (800ade4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>)
 800ada0:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6859      	ldr	r1, [r3, #4]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3310      	adds	r3, #16
 800adae:	461a      	mov	r2, r3
 800adb0:	f7fe fa88 	bl	80092c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
 800adb4:	4603      	mov	r3, r0
 800adb6:	77fb      	strb	r3, [r7, #31]
 800adb8:	7ffb      	ldrb	r3, [r7, #31]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 800adbe:	7ffb      	ldrb	r3, [r7, #31]
 800adc0:	e004      	b.n	800adcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3734      	adds	r7, #52	; 0x34
 800add0:	46bd      	mov	sp, r7
 800add2:	bd90      	pop	{r4, r7, pc}
 800add4:	0801ca28 	.word	0x0801ca28
 800add8:	0800a993 	.word	0x0800a993
 800addc:	0800a9b9 	.word	0x0800a9b9
 800ade0:	0801ca4c 	.word	0x0801ca4c
 800ade4:	0800a9e5 	.word	0x0800a9e5

0800ade8 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fd21 	bl	800a83a <_ZN6tflite13ScopedProfileD1Ev>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800ae04:	b5b0      	push	{r4, r5, r7, lr}
 800ae06:	b08c      	sub	sp, #48	; 0x30
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	2400      	movs	r4, #0
  if (initialization_status_ != kTfLiteOk) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	4943      	ldr	r1, [pc, #268]	; (800af2c <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>)
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f9 ffc0 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800ae24:	2401      	movs	r4, #1
 800ae26:	e07b      	b.n	800af20 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ae2e:	f083 0301 	eor.w	r3, r3, #1
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00c      	beq.n	800ae52 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fec7 	bl	800abcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
 800ae4c:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800ae50:	e066      	b.n	800af20 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800ae52:	2300      	movs	r3, #0
 800ae54:	627b      	str	r3, [r7, #36]	; 0x24
 800ae56:	e050      	b.n	800aefa <_ZN6tflite16MicroInterpreter6InvokeEv+0xf6>
    auto* node = &(node_and_registrations_[i].node);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6819      	ldr	r1, [r3, #0]
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	440b      	add	r3, r1
 800ae68:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6819      	ldr	r1, [r3, #0]
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	440b      	add	r3, r1
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	61bb      	str	r3, [r7, #24]

    if (registration->invoke) {
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d036      	beq.n	800aef4 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae8a:	617b      	str	r3, [r7, #20]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 800ae8c:	69b8      	ldr	r0, [r7, #24]
 800ae8e:	f7ff fd69 	bl	800a964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800ae92:	4602      	mov	r2, r0
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	f107 0008 	add.w	r0, r7, #8
 800ae9a:	6979      	ldr	r1, [r7, #20]
 800ae9c:	f7ff fce5 	bl	800a86a <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	3210      	adds	r2, #16
 800aea8:	69f9      	ldr	r1, [r7, #28]
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4798      	blx	r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	74fb      	strb	r3, [r7, #19]

      if (invoke_status == kTfLiteError) {
 800aeb2:	7cfb      	ldrb	r3, [r7, #19]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d10f      	bne.n	800aed8 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>
        TF_LITE_REPORT_ERROR(
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68dc      	ldr	r4, [r3, #12]
 800aebc:	69b8      	ldr	r0, [r7, #24]
 800aebe:	f7ff fd51 	bl	800a964 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800aec2:	4602      	mov	r2, r0
 800aec4:	7cfb      	ldrb	r3, [r7, #19]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	4919      	ldr	r1, [pc, #100]	; (800af30 <_ZN6tflite16MicroInterpreter6InvokeEv+0x12c>)
 800aecc:	4620      	mov	r0, r4
 800aece:	f7f9 ff69 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 800aed2:	2401      	movs	r4, #1
 800aed4:	2500      	movs	r5, #0
 800aed6:	e006      	b.n	800aee6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      } else if (invoke_status != kTfLiteOk) {
 800aed8:	7cfb      	ldrb	r3, [r7, #19]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d002      	beq.n	800aee4 <_ZN6tflite16MicroInterpreter6InvokeEv+0xe0>
        return invoke_status;
 800aede:	7cfc      	ldrb	r4, [r7, #19]
 800aee0:	2500      	movs	r5, #0
 800aee2:	e000      	b.n	800aee6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      }
    }
 800aee4:	2501      	movs	r5, #1
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff ff7c 	bl	800ade8 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 800aef0:	2d01      	cmp	r5, #1
 800aef2:	d115      	bne.n	800af20 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	3301      	adds	r3, #1
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fd fb30 	bl	8008564 <_ZNK6tflite8SubGraph9operatorsEv>
 800af04:	4603      	mov	r3, r0
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff f83a 	bl	8009f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	4293      	cmp	r3, r2
 800af12:	bf34      	ite	cc
 800af14:	2301      	movcc	r3, #1
 800af16:	2300      	movcs	r3, #0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d19c      	bne.n	800ae58 <_ZN6tflite16MicroInterpreter6InvokeEv+0x54>
  }
  return kTfLiteOk;
 800af1e:	2400      	movs	r4, #0
}
 800af20:	4623      	mov	r3, r4
 800af22:	4618      	mov	r0, r3
 800af24:	3728      	adds	r7, #40	; 0x28
 800af26:	46bd      	mov	sp, r7
 800af28:	bdb0      	pop	{r4, r5, r7, pc}
 800af2a:	bf00      	nop
 800af2c:	0801ca84 	.word	0x0801ca84
 800af30:	0801cab4 	.word	0x0801cab4

0800af34 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fcd0 	bl	800a8e4 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800af44:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d308      	bcc.n	800af60 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68d8      	ldr	r0, [r3, #12]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	490b      	ldr	r1, [pc, #44]	; (800af84 <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 800af58:	f7f9 ff24 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800af5c:	2300      	movs	r3, #0
 800af5e:	e00c      	b.n	800af7a <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699c      	ldr	r4, [r3, #24]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fccf 	bl	800a908 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800af6a:	4603      	mov	r3, r0
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fa fdb6 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800af74:	4603      	mov	r3, r0
 800af76:	019b      	lsls	r3, r3, #6
 800af78:	4423      	add	r3, r4
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd90      	pop	{r4, r7, pc}
 800af82:	bf00      	nop
 800af84:	0801cae8 	.word	0x0801cae8

0800af88 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800af88:	b590      	push	{r4, r7, lr}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff fcc6 	bl	800a924 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800af98:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d308      	bcc.n	800afb4 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68d8      	ldr	r0, [r3, #12]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	490b      	ldr	r1, [pc, #44]	; (800afd8 <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 800afac:	f7f9 fefa 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e00c      	b.n	800afce <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	699c      	ldr	r4, [r3, #24]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fcc5 	bl	800a948 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800afbe:	4603      	mov	r3, r0
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fa fd8c 	bl	8005ae0 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800afc8:	4603      	mov	r3, r0
 800afca:	019b      	lsls	r3, r3, #6
 800afcc:	4423      	add	r3, r4
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0801cb14 	.word	0x0801cb14

0800afdc <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	3b01      	subs	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800aff0:	e00d      	b.n	800b00e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x32>
    char tmp = *p1;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	617a      	str	r2, [r7, #20]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	7812      	ldrb	r2, [r2, #0]
 800b002:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	613a      	str	r2, [r7, #16]
 800b00a:	7bfa      	ldrb	r2, [r7, #15]
 800b00c:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	d3ed      	bcc.n	800aff2 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x16>
  }
  return start;
 800b016:	687b      	ldr	r3, [r7, #4]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	371c      	adds	r7, #28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  char* current = main;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800b034:	e002      	b.n	800b03c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x18>
    ++current;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	3301      	adds	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f8      	bne.n	800b036 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x12>
  }
  char* current_end = main + (main_max_length - 1);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3b01      	subs	r3, #1
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4413      	add	r3, r2
 800b04c:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800b04e:	e009      	b.n	800b064 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x40>
    *current = *to_append;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	781a      	ldrb	r2, [r3, #0]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	701a      	strb	r2, [r3, #0]
    ++current;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	3301      	adds	r3, #1
 800b05c:	617b      	str	r3, [r7, #20]
    ++to_append;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3301      	adds	r3, #1
 800b062:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	d3ed      	bcc.n	800b050 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2c>
  }
  *current = 0;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
  return current;
 800b07a:	697b      	ldr	r3, [r7, #20]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	371c      	adds	r7, #28
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0a0:	fb01 f202 	mul.w	r2, r1, r2
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	dc04      	bgt.n	800b0b8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	3330      	adds	r3, #48	; 0x30
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e003      	b.n	800b0c0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	3357      	adds	r3, #87	; 0x57
 800b0be:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	60ba      	str	r2, [r7, #8]
 800b0c6:	7ffa      	ldrb	r2, [r7, #31]
 800b0c8:	701a      	strb	r2, [r3, #0]
    i /= base;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d2:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1de      	bne.n	800b098 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	69b8      	ldr	r0, [r7, #24]
 800b0e4:	f7ff ff7a 	bl	800afdc <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3720      	adds	r7, #32
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	da07      	bge.n	800b116 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	603a      	str	r2, [r7, #0]
 800b10c:	222d      	movs	r2, #45	; 0x2d
 800b10e:	701a      	strb	r2, [r3, #0]
    u = -u;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	425b      	negs	r3, r3
 800b114:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800b116:	220a      	movs	r2, #10
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff ffb4 	bl	800b088 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b120:	4603      	mov	r3, r0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b090      	sub	sp, #64	; 0x40
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800b136:	f107 0310 	add.w	r3, r7, #16
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff ffd8 	bl	800b0f2 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800b142:	f107 0310 	add.w	r3, r7, #16
 800b146:	461a      	mov	r2, r3
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff ff6a 	bl	800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b150:	4603      	mov	r3, r0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3740      	adds	r7, #64	; 0x40
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b090      	sub	sp, #64	; 0x40
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800b168:	f107 0310 	add.w	r3, r7, #16
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff ff89 	bl	800b088 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800b176:	f107 0310 	add.w	r3, r7, #16
 800b17a:	461a      	mov	r2, r3
 800b17c:	68b9      	ldr	r1, [r7, #8]
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7ff ff50 	bl	800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b184:	4603      	mov	r3, r0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3740      	adds	r7, #64	; 0x40
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b09b      	sub	sp, #108	; 0x6c
 800b194:	af00      	add	r7, sp, #0
 800b196:	ed87 0a01 	vstr	s0, [r7, #4]
 800b19a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	332f      	adds	r3, #47	; 0x2f
 800b1a4:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800b1a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800b1ac:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800b1b0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800b1b2:	2317      	movs	r3, #23
 800b1b4:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800b1b6:	237f      	movs	r3, #127	; 0x7f
 800b1b8:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800b1ba:	4b69      	ldr	r3, [pc, #420]	; (800b360 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d0>)
 800b1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 800b1be:	1d3b      	adds	r3, r7, #4
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	0ddb      	lsrs	r3, r3, #23
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
  const uint32_t fraction = (u & fraction_mask);
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da05      	bge.n	800b1e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 800b1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1de:	222d      	movs	r2, #45	; 0x2d
 800b1e0:	701a      	strb	r2, [r3, #0]
    current += 1;
 800b1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800b1e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f0:	2b80      	cmp	r3, #128	; 0x80
 800b1f2:	d118      	bne.n	800b226 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 800b1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	4a58      	ldr	r2, [pc, #352]	; (800b364 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800b202:	4619      	mov	r1, r3
 800b204:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b206:	f7ff ff0d 	bl	800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b20a:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800b20c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b20e:	e0a2      	b.n	800b356 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800b210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	4a54      	ldr	r2, [pc, #336]	; (800b368 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800b218:	4619      	mov	r1, r3
 800b21a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b21c:	f7ff ff02 	bl	800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b220:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800b222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b224:	e097      	b.n	800b356 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800b226:	230d      	movs	r3, #13
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800b22a:	4b50      	ldr	r3, [pc, #320]	; (800b36c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800b22c:	f107 040c 	add.w	r4, r7, #12
 800b230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b232:	c407      	stmia	r4!, {r0, r1, r2}
 800b234:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800b23a:	2300      	movs	r3, #0
 800b23c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b23e:	e00e      	b.n	800b25e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800b240:	f107 020c 	add.w	r2, r7, #12
 800b244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b246:	4413      	add	r3, r2
 800b248:	f993 3000 	ldrsb.w	r3, [r3]
 800b24c:	461a      	mov	r2, r3
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	40d3      	lsrs	r3, r2
 800b252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b254:	4413      	add	r3, r2
 800b256:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800b258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b25a:	3301      	adds	r3, #1
 800b25c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b260:	2b0c      	cmp	r3, #12
 800b262:	dded      	ble.n	800b240 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb0>
  }
  *current = '1';
 800b264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b266:	2231      	movs	r2, #49	; 0x31
 800b268:	701a      	strb	r2, [r3, #0]
  current += 1;
 800b26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b26c:	3301      	adds	r3, #1
 800b26e:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800b270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b272:	222e      	movs	r2, #46	; 0x2e
 800b274:	701a      	strb	r2, [r3, #0]
  current += 1;
 800b276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b278:	3301      	adds	r3, #1
 800b27a:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800b27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b27e:	2200      	movs	r2, #0
 800b280:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800b282:	2307      	movs	r3, #7
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800b286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	2b07      	cmp	r3, #7
 800b28e:	dc01      	bgt.n	800b294 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>
    return current;
 800b290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b292:	e060      	b.n	800b356 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1c6>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800b294:	2301      	movs	r3, #1
 800b296:	65bb      	str	r3, [r7, #88]	; 0x58
 800b298:	e007      	b.n	800b2aa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11a>
    *(current + i) = '0';
 800b29a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b29c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b29e:	4413      	add	r3, r2
 800b2a0:	2230      	movs	r2, #48	; 0x30
 800b2a2:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800b2a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2ac:	2b06      	cmp	r3, #6
 800b2ae:	ddf4      	ble.n	800b29a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x10a>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800b2b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800b2b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2b8:	1ad1      	subs	r1, r2, r3
 800b2ba:	230a      	movs	r3, #10
 800b2bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2be:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b2c0:	f7ff ff4b 	bl	800b15a <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800b2c4:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800b2c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	623b      	str	r3, [r7, #32]
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	f1c3 0307 	rsb	r3, r3, #7
 800b2d4:	61fb      	str	r3, [r7, #28]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800b2d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d8:	2230      	movs	r2, #48	; 0x30
 800b2da:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepent zeros.
  for (int i = 0; i < fraction_digits; i++) {
 800b2dc:	2300      	movs	r3, #0
 800b2de:	657b      	str	r3, [r7, #84]	; 0x54
 800b2e0:	e00e      	b.n	800b300 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x170>
    current--;
 800b2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	667b      	str	r3, [r7, #100]	; 0x64
    *(current + leading_zeros) = *current;
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2ec:	4413      	add	r3, r2
 800b2ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2f0:	7812      	ldrb	r2, [r2, #0]
 800b2f2:	701a      	strb	r2, [r3, #0]
    *current = '0';
 800b2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2f6:	2230      	movs	r2, #48	; 0x30
 800b2f8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < fraction_digits; i++) {
 800b2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	657b      	str	r3, [r7, #84]	; 0x54
 800b300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	429a      	cmp	r2, r3
 800b306:	dbec      	blt.n	800b2e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x152>
  }
  current += kMaxFractionalDigits;
 800b308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30a:	3307      	adds	r3, #7
 800b30c:	667b      	str	r3, [r7, #100]	; 0x64

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800b30e:	e002      	b.n	800b316 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x186>
    current--;
 800b310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b312:	3b01      	subs	r3, #1
 800b314:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800b316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b318:	3b01      	subs	r3, #1
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b30      	cmp	r3, #48	; 0x30
 800b31e:	d104      	bne.n	800b32a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19a>
 800b320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b322:	3b01      	subs	r3, #1
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	429a      	cmp	r2, r3
 800b328:	d3f2      	bcc.n	800b310 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x180>
  }
  *current = 0;
 800b32a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800b330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	4a0e      	ldr	r2, [pc, #56]	; (800b370 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800b338:	4619      	mov	r1, r3
 800b33a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b33c:	f7ff fe72 	bl	800b024 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800b340:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800b342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b34a:	4619      	mov	r1, r3
 800b34c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b34e:	f7ff feec 	bl	800b12a <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800b352:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800b354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b356:	4618      	mov	r0, r3
 800b358:	376c      	adds	r7, #108	; 0x6c
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd90      	pop	{r4, r7, pc}
 800b35e:	bf00      	nop
 800b360:	007fffff 	.word	0x007fffff
 800b364:	0801ce34 	.word	0x0801ce34
 800b368:	0801ce38 	.word	0x0801ce38
 800b36c:	0801ce40 	.word	0x0801ce40
 800b370:	0801ce3c 	.word	0x0801ce3c

0800b374 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	6838      	ldr	r0, [r7, #0]
 800b382:	f7ff feb6 	bl	800b0f2 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800b386:	4602      	mov	r2, r0
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	1ad3      	subs	r3, r2, r3
} 
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800b39e:	220a      	movs	r2, #10
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	6838      	ldr	r0, [r7, #0]
 800b3a4:	f7ff fe70 	bl	800b088 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	1ad3      	subs	r3, r2, r3
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800b3c0:	2210      	movs	r2, #16
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	6838      	ldr	r0, [r7, #0]
 800b3c6:	f7ff fe5f 	bl	800b088 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	1ad3      	subs	r3, r2, r3
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	ed97 0a00 	vldr	s0, [r7]
 800b3ea:	f7ff fed1 	bl	800b190 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	1ad3      	subs	r3, r2, r3
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b08b      	sub	sp, #44	; 0x2c
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3b01      	subs	r3, #1
 800b416:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800b418:	e12c      	b.n	800b674 <MicroVsnprintf+0x278>
    if (*current == '%') {
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b25      	cmp	r3, #37	; 0x25
 800b420:	f040 811d 	bne.w	800b65e <MicroVsnprintf+0x262>
      current++;
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	3301      	adds	r3, #1
 800b428:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b25      	cmp	r3, #37	; 0x25
 800b430:	f000 80e3 	beq.w	800b5fa <MicroVsnprintf+0x1fe>
 800b434:	2b25      	cmp	r3, #37	; 0x25
 800b436:	f2c0 811d 	blt.w	800b674 <MicroVsnprintf+0x278>
 800b43a:	2b78      	cmp	r3, #120	; 0x78
 800b43c:	f300 811a 	bgt.w	800b674 <MicroVsnprintf+0x278>
 800b440:	2b64      	cmp	r3, #100	; 0x64
 800b442:	f2c0 8117 	blt.w	800b674 <MicroVsnprintf+0x278>
 800b446:	3b64      	subs	r3, #100	; 0x64
 800b448:	2b14      	cmp	r3, #20
 800b44a:	f200 8113 	bhi.w	800b674 <MicroVsnprintf+0x278>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <MicroVsnprintf+0x58>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b4a9 	.word	0x0800b4a9
 800b458:	0800b675 	.word	0x0800b675
 800b45c:	0800b58f 	.word	0x0800b58f
 800b460:	0800b675 	.word	0x0800b675
 800b464:	0800b675 	.word	0x0800b675
 800b468:	0800b675 	.word	0x0800b675
 800b46c:	0800b675 	.word	0x0800b675
 800b470:	0800b675 	.word	0x0800b675
 800b474:	0800b675 	.word	0x0800b675
 800b478:	0800b675 	.word	0x0800b675
 800b47c:	0800b675 	.word	0x0800b675
 800b480:	0800b675 	.word	0x0800b675
 800b484:	0800b675 	.word	0x0800b675
 800b488:	0800b675 	.word	0x0800b675
 800b48c:	0800b675 	.word	0x0800b675
 800b490:	0800b613 	.word	0x0800b613
 800b494:	0800b675 	.word	0x0800b675
 800b498:	0800b4eb 	.word	0x0800b4eb
 800b49c:	0800b675 	.word	0x0800b675
 800b4a0:	0800b675 	.word	0x0800b675
 800b4a4:	0800b52d 	.word	0x0800b52d
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b0a      	cmp	r3, #10
 800b4b0:	dc09      	bgt.n	800b4c6 <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	627a      	str	r2, [r7, #36]	; 0x24
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	4413      	add	r3, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	e0e8      	b.n	800b698 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	18d0      	adds	r0, r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	603a      	str	r2, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f7ff ff4d 	bl	800b374 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800b4da:	4602      	mov	r2, r0
          output_index +=
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	4413      	add	r3, r2
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	623b      	str	r3, [r7, #32]
          break;
 800b4e8:	e0c4      	b.n	800b674 <MicroVsnprintf+0x278>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2b0a      	cmp	r3, #10
 800b4f2:	dc09      	bgt.n	800b508 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	627a      	str	r2, [r7, #36]	; 0x24
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	2200      	movs	r2, #0
 800b502:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	e0c7      	b.n	800b698 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	18d0      	adds	r0, r2, r3
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	1d1a      	adds	r2, r3, #4
 800b512:	603a      	str	r2, [r7, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	f7ff ff3c 	bl	800b394 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800b51c:	4602      	mov	r2, r0
          output_index +=
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	4413      	add	r3, r2
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	3301      	adds	r3, #1
 800b528:	623b      	str	r3, [r7, #32]
          break;
 800b52a:	e0a3      	b.n	800b674 <MicroVsnprintf+0x278>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b09      	cmp	r3, #9
 800b534:	dc09      	bgt.n	800b54a <MicroVsnprintf+0x14e>
            output[output_index++] = '\0';
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	627a      	str	r2, [r7, #36]	; 0x24
 800b53c:	461a      	mov	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	e0a6      	b.n	800b698 <MicroVsnprintf+0x29c>
          }
          output[output_index++] = '0';
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	627a      	str	r2, [r7, #36]	; 0x24
 800b550:	461a      	mov	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	2230      	movs	r2, #48	; 0x30
 800b558:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	627a      	str	r2, [r7, #36]	; 0x24
 800b560:	461a      	mov	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	2278      	movs	r2, #120	; 0x78
 800b568:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	18d0      	adds	r0, r2, r3
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	603a      	str	r2, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	f7ff ff1c 	bl	800b3b6 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800b57e:	4602      	mov	r2, r0
          output_index +=
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	4413      	add	r3, r2
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	3301      	adds	r3, #1
 800b58a:	623b      	str	r3, [r7, #32]
          break;
 800b58c:	e072      	b.n	800b674 <MicroVsnprintf+0x278>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b59c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800b5a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	d509      	bpl.n	800b5be <MicroVsnprintf+0x1c2>
            output[output_index++] = '\0';
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	e06c      	b.n	800b698 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	18d4      	adds	r4, r2, r3
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	f023 0307 	bic.w	r3, r3, #7
 800b5cc:	f103 0208 	add.w	r2, r3, #8
 800b5d0:	603a      	str	r2, [r7, #0]
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f7f5 fad7 	bl	8000b8c <__aeabi_d2f>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	ee00 3a10 	vmov	s0, r3
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff fef7 	bl	800b3d8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800b5ea:	4602      	mov	r2, r0
          output_index +=
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	4413      	add	r3, r2
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	623b      	str	r3, [r7, #32]
          break;
 800b5f8:	e03c      	b.n	800b674 <MicroVsnprintf+0x278>
        case '%':
          output[output_index++] = *current++;
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	623a      	str	r2, [r7, #32]
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	1c51      	adds	r1, r2, #1
 800b604:	6279      	str	r1, [r7, #36]	; 0x24
 800b606:	4611      	mov	r1, r2
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	440a      	add	r2, r1
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	7013      	strb	r3, [r2, #0]
          break;
 800b610:	e030      	b.n	800b674 <MicroVsnprintf+0x278>
        case 's':
          char* string = va_arg(args, char*);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	603a      	str	r2, [r7, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800b620:	e00d      	b.n	800b63e <MicroVsnprintf+0x242>
                 string[string_idx] != '\0') {
            output[output_index++] = string[string_idx++];
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	1c5a      	adds	r2, r3, #1
 800b626:	61fa      	str	r2, [r7, #28]
 800b628:	461a      	mov	r2, r3
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	441a      	add	r2, r3
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	1c59      	adds	r1, r3, #1
 800b632:	6279      	str	r1, [r7, #36]	; 0x24
 800b634:	4619      	mov	r1, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	440b      	add	r3, r1
 800b63a:	7812      	ldrb	r2, [r2, #0]
 800b63c:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b63e:	69fa      	ldr	r2, [r7, #28]
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	4413      	add	r3, r2
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	429a      	cmp	r2, r3
 800b648:	dd05      	ble.n	800b656 <MicroVsnprintf+0x25a>
                 string[string_idx] != '\0') {
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	4413      	add	r3, r2
 800b650:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e5      	bne.n	800b622 <MicroVsnprintf+0x226>
          }
          current++;
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	3301      	adds	r3, #1
 800b65a:	623b      	str	r3, [r7, #32]
 800b65c:	e00a      	b.n	800b674 <MicroVsnprintf+0x278>
      }
    } else {
      output[output_index++] = *current++;
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	623a      	str	r2, [r7, #32]
 800b664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b666:	1c51      	adds	r1, r2, #1
 800b668:	6279      	str	r1, [r7, #36]	; 0x24
 800b66a:	4611      	mov	r1, r2
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	440a      	add	r2, r1
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d004      	beq.n	800b686 <MicroVsnprintf+0x28a>
 800b67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	429a      	cmp	r2, r3
 800b682:	f6ff aeca 	blt.w	800b41a <MicroVsnprintf+0x1e>
    }
  }
  output[output_index++] = '\0';
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	627a      	str	r2, [r7, #36]	; 0x24
 800b68c:	461a      	mov	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	4413      	add	r3, r2
 800b692:	2200      	movs	r2, #0
 800b694:	701a      	strb	r2, [r3, #0]
  return output_index;
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b698:	4618      	mov	r0, r3
 800b69a:	372c      	adds	r7, #44	; 0x2c
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd90      	pop	{r4, r7, pc}

0800b6a0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	; (800b6e8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x48>)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	609a      	str	r2, [r3, #8]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	68da      	ldr	r2, [r3, #12]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	60da      	str	r2, [r3, #12]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	691a      	ldr	r2, [r3, #16]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	611a      	str	r2, [r3, #16]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695a      	ldr	r2, [r3, #20]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	615a      	str	r2, [r3, #20]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	0801cebc 	.word	0x0801cebc

0800b6ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 800b6fa:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]
    : error_reporter_(error_reporter),
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	605a      	str	r2, [r3, #4]
      buffer_head_(buffer_head),
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	609a      	str	r2, [r3, #8]
      buffer_tail_(buffer_tail),
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	60da      	str	r2, [r3, #12]
      head_(buffer_head),
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	611a      	str	r2, [r3, #16]
      tail_(buffer_tail) {}
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	615a      	str	r2, [r3, #20]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	0801cebc 	.word	0x0801cebc

0800b730 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	4413      	add	r3, r2
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	68b9      	ldr	r1, [r7, #8]
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff ffcf 	bl	800b6ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b08d      	sub	sp, #52	; 0x34
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800b76a:	f00c fa2b 	bl	8017bc4 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800b774:	f00c fa26 	bl	8017bc4 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800b778:	f107 0014 	add.w	r0, r7, #20
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	68f9      	ldr	r1, [r7, #12]
 800b782:	f7ff ffd5 	bl	800b730 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	2204      	movs	r2, #4
 800b78c:	2118      	movs	r1, #24
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 f868 	bl	800b864 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800b794:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	4619      	mov	r1, r3
 800b79a:	2018      	movs	r0, #24
 800b79c:	f7f9 fb35 	bl	8004e0a <_ZnwjPv>
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	f107 0314 	add.w	r3, r7, #20
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f7ff ff79 	bl	800b6a0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
}
 800b7ae:	f107 0314 	add.w	r3, r7, #20
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f806 	bl	800b7c4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800b7b8:	4623      	mov	r3, r4
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3734      	adds	r7, #52	; 0x34
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd90      	pop	{r4, r7, pc}
	...

0800b7c4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	4a04      	ldr	r2, [pc, #16]	; (800b7e0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	0801cebc 	.word	0x0801cebc

0800b7e4 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ffe9 	bl	800b7c4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800b7f2:	2118      	movs	r1, #24
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f00b ff09 	bl	801760c <_ZdlPvj>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af02      	add	r7, sp, #8
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	6879      	ldr	r1, [r7, #4]
 800b816:	4618      	mov	r0, r3
 800b818:	f7fc fce7 	bl	80081ea <_ZN6tflite14AlignPointerUpEPhj>
 800b81c:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	695a      	ldr	r2, [r3, #20]
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d20c      	bcs.n	800b84a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x46>
    TF_LITE_REPORT_ERROR(
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6858      	ldr	r0, [r3, #4]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4907      	ldr	r1, [pc, #28]	; (800b860 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 800b842:	f7f9 faaf 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 800b846:	2300      	movs	r3, #0
 800b848:	e005      	b.n	800b856 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x52>
  }
  head_ = aligned_result + size;
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	441a      	add	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	611a      	str	r2, [r3, #16]
  return aligned_result;
 800b854:	697b      	ldr	r3, [r7, #20]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	0801ce70 	.word	0x0801ce70

0800b864 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	695a      	ldr	r2, [r3, #20]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	425b      	negs	r3, r3
 800b878:	4413      	add	r3, r2
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fc fccd 	bl	800821c <_ZN6tflite16AlignPointerDownEPhj>
 800b882:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d212      	bcs.n	800b8b4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
    const size_t missing_memory = head_ - aligned_result;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6858      	ldr	r0, [r3, #4]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	4906      	ldr	r1, [pc, #24]	; (800b8c4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800b8ac:	f7f9 fa7a 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e003      	b.n	800b8bc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800b8ba:	697b      	ldr	r3, [r7, #20]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	0801ce70 	.word	0x0801ce70

0800b8c8 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	695a      	ldr	r2, [r3, #20]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	1ad3      	subs	r3, r2, r3
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	440b      	add	r3, r1
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	019b      	lsls	r3, r3, #6
 800b934:	4413      	add	r3, r2
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 800b942:	b480      	push	{r7}
 800b944:	b085      	sub	sp, #20
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689a      	ldr	r2, [r3, #8]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	6859      	ldr	r1, [r3, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	019b      	lsls	r3, r3, #6
 800b960:	4413      	add	r3, r2
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800b980:	e000      	b.n	800b984 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	e000      	b.n	800b9a6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor+0x14>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	e000      	b.n	800b9c8 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor+0x16>
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	da01      	bge.n	800b9e8 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800b9e4:	f00c f8ee 	bl	8017bc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	db01      	blt.n	800b9f6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800b9f2:	f00c f8e7 	bl	8017bc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b05      	cmp	r3, #5
 800b9fc:	dd06      	ble.n	800ba0c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	e004      	b.n	800ba16 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	685b      	ldr	r3, [r3, #4]
  }
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b05      	cmp	r3, #5
 800ba2c:	dd02      	ble.n	800ba34 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	e001      	b.n	800ba38 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3304      	adds	r3, #4
  }
 800ba38:	4618      	mov	r0, r3
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff ffe4 	bl	800ba1e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800ba56:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800ba58:	2300      	movs	r3, #0
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	e00b      	b.n	800ba76 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4413      	add	r3, r2
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	fb02 f303 	mul.w	r3, r2, r3
 800ba6e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	3301      	adds	r3, #1
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	dbee      	blt.n	800ba5e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 800ba80:	697b      	ldr	r3, [r7, #20]
  }
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800ba8a:	b590      	push	{r4, r7, lr}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7fc fb26 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	6838      	ldr	r0, [r7, #0]
 800ba9e:	f7fc fb22 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800baa2:	4603      	mov	r3, r0
 800baa4:	429c      	cmp	r4, r3
 800baa6:	d001      	beq.n	800baac <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 800baa8:	f00c f88c 	bl	8017bc4 <abort>
  const int dims_count = shape.DimensionsCount();
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7fc fb1a 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bab2:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]
 800bab8:	e010      	b.n	800badc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800baba:	68f9      	ldr	r1, [r7, #12]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff ff89 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bac2:	4604      	mov	r4, r0
 800bac4:	68f9      	ldr	r1, [r7, #12]
 800bac6:	6838      	ldr	r0, [r7, #0]
 800bac8:	f7ff ff84 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bacc:	4603      	mov	r3, r0
 800bace:	429c      	cmp	r4, r3
 800bad0:	d001      	beq.n	800bad6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4c>
 800bad2:	f00c f877 	bl	8017bc4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	dbea      	blt.n	800baba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x30>
  }
  return shape.FlatSize();
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff ffad 	bl	800ba44 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800baea:	4603      	mov	r3, r0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd90      	pop	{r4, r7, pc}

0800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d002      	beq.n	800bb08 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800bb06:	e000      	b.n	800bb0a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	e000      	b.n	800bb2c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800bb4a:	e000      	b.n	800bb4e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	e000      	b.n	800bb70 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800bb8e:	e000      	b.n	800bb92 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800bbd2:	b480      	push	{r7}
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbda:	4618      	mov	r0, r3
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800bbe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbe8:	b092      	sub	sp, #72	; 0x48
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	61f8      	str	r0, [r7, #28]
 800bbee:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800bbf0:	69fa      	ldr	r2, [r7, #28]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d107      	bne.n	800bc08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800bbf8:	f7ff ffeb 	bl	800bbd2 <_ZNSt14numeric_limitsIlE3minEv>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d101      	bne.n	800bc08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e000      	b.n	800bc0a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	17da      	asrs	r2, r3, #31
 800bc12:	60bb      	str	r3, [r7, #8]
 800bc14:	60fa      	str	r2, [r7, #12]
 800bc16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	17da      	asrs	r2, r3, #31
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc32:	fb03 f202 	mul.w	r2, r3, r2
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	4413      	add	r3, r2
 800bc40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc44:	fba1 4502 	umull	r4, r5, r1, r2
 800bc48:	442b      	add	r3, r5
 800bc4a:	461d      	mov	r5, r3
 800bc4c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800bc50:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800bc54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	db02      	blt.n	800bc62 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 800bc5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc60:	e000      	b.n	800bc64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 800bc62:	4b1a      	ldr	r3, [pc, #104]	; (800bccc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	17da      	asrs	r2, r3, #31
 800bc6a:	4698      	mov	r8, r3
 800bc6c:	4691      	mov	r9, r2
 800bc6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc72:	eb18 0102 	adds.w	r1, r8, r2
 800bc76:	6139      	str	r1, [r7, #16]
 800bc78:	eb49 0303 	adc.w	r3, r9, r3
 800bc7c:	617b      	str	r3, [r7, #20]
 800bc7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	da07      	bge.n	800bc96 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 800bc86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc8a:	eb12 0a01 	adds.w	sl, r2, r1
 800bc8e:	f143 0b00 	adc.w	fp, r3, #0
 800bc92:	4652      	mov	r2, sl
 800bc94:	465b      	mov	r3, fp
 800bc96:	f04f 0000 	mov.w	r0, #0
 800bc9a:	f04f 0100 	mov.w	r1, #0
 800bc9e:	0fd0      	lsrs	r0, r2, #31
 800bca0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800bca4:	17d9      	asrs	r1, r3, #31
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800bcaa:	4613      	mov	r3, r2
 800bcac:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800bcae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 800bcb6:	f7fb fb89 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	e000      	b.n	800bcc0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3748      	adds	r7, #72	; 0x48
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcca:	bf00      	nop
 800bccc:	c0000001 	.word	0xc0000001

0800bcd0 <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_GE(i, 0);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	da01      	bge.n	800bce6 <_ZN6tflite12RuntimeShape6SetDimEil+0x16>
 800bce2:	f00b ff6f 	bl	8017bc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	db01      	blt.n	800bcf4 <_ZN6tflite12RuntimeShape6SetDimEil+0x24>
 800bcf0:	f00b ff68 	bl	8017bc4 <abort>
    if (size_ > kMaxSmallSize) {
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b05      	cmp	r3, #5
 800bcfa:	dd07      	ble.n	800bd0c <_ZN6tflite12RuntimeShape6SetDimEil+0x3c>
      dims_pointer_[i] = val;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	601a      	str	r2, [r3, #0]
  }
 800bd0a:	e005      	b.n	800bd18 <_ZN6tflite12RuntimeShape6SetDimEil+0x48>
      dims_[i] = val;
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	605a      	str	r2, [r3, #4]
  }
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>:
  inline static RuntimeShape ExtendedShape(int new_shape_size,
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
    return RuntimeShape(new_shape_size, shape, 1);
 800bd44:	2301      	movs	r3, #1
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 f804 	bl	800bd58 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  }
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
      : size_(0) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7fc f9ba 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd72:	4602      	mov	r2, r0
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4293      	cmp	r3, r2
 800bd78:	da01      	bge.n	800bd7e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x26>
 800bd7a:	f00b ff23 	bl	8017bc4 <abort>
    Resize(new_shape_size);
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7fc f9cf 	bl	8008124 <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7fc f9ad 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size_increase; ++i) {
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	e007      	b.n	800bdaa <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x52>
      SetDim(i, pad_value);
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	6979      	ldr	r1, [r7, #20]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff ff96 	bl	800bcd0 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	3301      	adds	r3, #1
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	dbf3      	blt.n	800bd9a <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x42>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7fc f9a3 	bl	80080fe <_ZN6tflite12RuntimeShape8DimsDataEv>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	18d4      	adds	r4, r2, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff fe2c 	bl	800ba1e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800bdc6:	4605      	mov	r5, r0
                sizeof(int32) * shape.DimensionsCount());
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7fc f98c 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	009b      	lsls	r3, r3, #2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f00c fae5 	bl	80183a6 <memcpy>
  }
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bdb0      	pop	{r4, r5, r7, pc}

0800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	607a      	str	r2, [r7, #4]
 800bdf2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7fc f976 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d001      	beq.n	800be04 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800be00:	f00b fee0 	bl	8017bc4 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff ff8b 	bl	800bd20 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800be0a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	db04      	blt.n	800be1c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	429a      	cmp	r2, r3
 800be1a:	db01      	blt.n	800be20 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800be1c:	f00b fed2 	bl	8017bc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	db05      	blt.n	800be32 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	3304      	adds	r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	db01      	blt.n	800be36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800be32:	f00b fec7 	bl	8017bc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	db05      	blt.n	800be48 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	3308      	adds	r3, #8
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	db01      	blt.n	800be4c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800be48:	f00b febc 	bl	8017bc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	db05      	blt.n	800be5e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	330c      	adds	r3, #12
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6a3a      	ldr	r2, [r7, #32]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	db01      	blt.n	800be62 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800be5e:	f00b feb1 	bl	8017bc4 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	3304      	adds	r3, #4
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	fb03 f202 	mul.w	r2, r3, r2
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	3208      	adds	r2, #8
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	fb03 f202 	mul.w	r2, r3, r2
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	4413      	add	r3, r2
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	320c      	adds	r2, #12
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	fb03 f202 	mul.w	r2, r3, r2
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	4413      	add	r3, r2
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800be98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be9a:	b089      	sub	sp, #36	; 0x24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	2900      	cmp	r1, #0
 800bea6:	da06      	bge.n	800beb6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800bea8:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800beaa:	4a32      	ldr	r2, [pc, #200]	; (800bf74 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800beac:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800beb0:	4831      	ldr	r0, [pc, #196]	; (800bf78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800beb2:	f00b fe8f 	bl	8017bd4 <__assert_func>
  assert(exponent <= 31);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	291f      	cmp	r1, #31
 800beba:	dd06      	ble.n	800beca <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800bebc:	4b2f      	ldr	r3, [pc, #188]	; (800bf7c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800bebe:	4a2d      	ldr	r2, [pc, #180]	; (800bf74 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800bec0:	f240 1167 	movw	r1, #359	; 0x167
 800bec4:	482c      	ldr	r0, [pc, #176]	; (800bf78 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800bec6:	f00b fe85 	bl	8017bd4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800beca:	f04f 0001 	mov.w	r0, #1
 800bece:	f04f 0100 	mov.w	r1, #0
 800bed2:	683c      	ldr	r4, [r7, #0]
 800bed4:	f1a4 0620 	sub.w	r6, r4, #32
 800bed8:	f1c4 0520 	rsb	r5, r4, #32
 800bedc:	fa01 f304 	lsl.w	r3, r1, r4
 800bee0:	fa00 f606 	lsl.w	r6, r0, r6
 800bee4:	4333      	orrs	r3, r6
 800bee6:	fa20 f505 	lsr.w	r5, r0, r5
 800beea:	432b      	orrs	r3, r5
 800beec:	fa00 f204 	lsl.w	r2, r0, r4
 800bef0:	4613      	mov	r3, r2
 800bef2:	3b01      	subs	r3, #1
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f843 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800befa:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800befc:	2000      	movs	r0, #0
 800befe:	f000 f83f 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800bf02:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800bf04:	2001      	movs	r0, #1
 800bf06:	f000 f83b 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800bf0a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800bf0c:	69f9      	ldr	r1, [r7, #28]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f841 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800bf14:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800bf16:	2101      	movs	r1, #1
 800bf18:	69f8      	ldr	r0, [r7, #28]
 800bf1a:	f000 f84a 	bl	800bfb2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	69b9      	ldr	r1, [r7, #24]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f854 	bl	800bfd0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	6979      	ldr	r1, [r7, #20]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 f832 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800bf32:	4603      	mov	r3, r0
 800bf34:	4619      	mov	r1, r3
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 f85e 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800bf3c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f836 	bl	800bfb2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800bf46:	4604      	mov	r4, r0
 800bf48:	68f9      	ldr	r1, [r7, #12]
 800bf4a:	6938      	ldr	r0, [r7, #16]
 800bf4c:	f000 f862 	bl	800c014 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800bf50:	4603      	mov	r3, r0
 800bf52:	6979      	ldr	r1, [r7, #20]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 f81e 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f84a 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800bf64:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3724      	adds	r7, #36	; 0x24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	0801d104 	.word	0x0801d104
 800bf74:	0801d114 	.word	0x0801d114
 800bf78:	0801d170 	.word	0x0801d170
 800bf7c:	0801d214 	.word	0x0801d214

0800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  return x;
 800bf88:	687b      	ldr	r3, [r7, #4]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  return a & b;
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	4013      	ands	r3, r2
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	fa42 f303 	asr.w	r3, r2, r3
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	bfb4      	ite	lt
 800bfe2:	2301      	movlt	r3, #1
 800bfe4:	2300      	movge	r3, #0
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 f827 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800bfee:	4603      	mov	r3, r0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  return a + b;
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	4413      	add	r3, r2
}
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	429a      	cmp	r2, r3
 800c024:	bfcc      	ite	gt
 800c026:	2301      	movgt	r3, #1
 800c028:	2300      	movle	r3, #0
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	4618      	mov	r0, r3
 800c02e:	f000 f805 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c032:	4603      	mov	r3, r0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d004      	beq.n	800c054 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800c04a:	2000      	movs	r0, #0
 800c04c:	f000 f807 	bl	800c05e <_ZN8gemmlowp6BitNotIlEET_S1_>
 800c050:	4603      	mov	r3, r0
 800c052:	e000      	b.n	800c056 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  return ~a;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	43db      	mvns	r3, r3
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800c076:	b590      	push	{r4, r7, lr}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
 800c082:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c084:	68b9      	ldr	r1, [r7, #8]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff fca4 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c08c:	4604      	mov	r4, r0
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff fc9f 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c096:	4603      	mov	r3, r0
 800c098:	429c      	cmp	r4, r3
 800c09a:	d001      	beq.n	800c0a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800c09c:	f00b fd92 	bl	8017bc4 <abort>
  return shape1.Dims(index1);
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7ff fc96 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c0a8:	4603      	mov	r3, r0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd90      	pop	{r4, r7, pc}

0800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b086      	sub	sp, #24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0c4:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dc02      	bgt.n	800c0d2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	425b      	negs	r3, r3
 800c0d0:	e000      	b.n	800c0d4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	fa02 f303 	lsl.w	r3, r2, r3
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff fd7f 	bl	800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6939      	ldr	r1, [r7, #16]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fed4 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800c0f0:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>:
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4618      	mov	r0, r3
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
  // be represented as a fixed point multiplier plus a left shift.
  int32_t output_multiplier;
  int output_shift;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0x18>
 800c124:	f00b fd4e 	bl	8017bc4 <abort>
  void* data = nullptr;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	f107 0214 	add.w	r2, r7, #20
 800c134:	2118      	movs	r1, #24
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	4798      	blx	r3
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	bf0c      	ite	eq
 800c140:	2301      	moveq	r3, #1
 800c142:	2300      	movne	r3, #0
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 800c14a:	2300      	movs	r3, #0
 800c14c:	e000      	b.n	800c150 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800c14e:	697b      	ldr	r3, [r7, #20]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800c158:	b5b0      	push	{r4, r5, r7, lr}
 800c15a:	b08c      	sub	sp, #48	; 0x30
 800c15c:	af04      	add	r7, sp, #16
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800c16a:	f00b fd2b 	bl	8017bc4 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	61fb      	str	r3, [r7, #28]

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800c174:	6838      	ldr	r0, [r7, #0]
 800c176:	f7ff fd12 	bl	800bb9e <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	bf14      	ite	ne
 800c180:	2301      	movne	r3, #1
 800c182:	2300      	moveq	r3, #0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d013      	beq.n	800c1b2 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695c      	ldr	r4, [r3, #20]
 800c18e:	6838      	ldr	r0, [r7, #0]
 800c190:	f7ff fd05 	bl	800bb9e <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800c194:	4603      	mov	r3, r0
 800c196:	2201      	movs	r2, #1
 800c198:	9203      	str	r2, [sp, #12]
 800c19a:	9302      	str	r3, [sp, #8]
 800c19c:	4b4b      	ldr	r3, [pc, #300]	; (800c2cc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	4b4b      	ldr	r3, [pc, #300]	; (800c2d0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	2335      	movs	r3, #53	; 0x35
 800c1a6:	4a4b      	ldr	r2, [pc, #300]	; (800c2d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800c1a8:	494b      	ldr	r1, [pc, #300]	; (800c2d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	47a0      	blx	r4
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e088      	b.n	800c2c4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800c1b2:	6838      	ldr	r0, [r7, #0]
 800c1b4:	f7ff fd00 	bl	800bbb8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	bf14      	ite	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	2300      	moveq	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d013      	beq.n	800c1f0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	695c      	ldr	r4, [r3, #20]
 800c1cc:	6838      	ldr	r0, [r7, #0]
 800c1ce:	f7ff fcf3 	bl	800bbb8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	9203      	str	r2, [sp, #12]
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	4b3c      	ldr	r3, [pc, #240]	; (800c2cc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	4b3f      	ldr	r3, [pc, #252]	; (800c2dc <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	2336      	movs	r3, #54	; 0x36
 800c1e4:	4a3b      	ldr	r2, [pc, #236]	; (800c2d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800c1e6:	493c      	ldr	r1, [pc, #240]	; (800c2d8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	47a0      	blx	r4
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e069      	b.n	800c2c4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>

  // TODO(b/140515557): Add cached dequant to improve hybrid model performance.
  const TfLiteTensor* input = GetInput(context, node, 0);
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fb8e 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c1fa:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, 0);
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff fb9e 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c206:	6178      	str	r0, [r7, #20]

  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d012      	beq.n	800c236 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b09      	cmp	r3, #9
 800c216:	d00e      	beq.n	800c236 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b07      	cmp	r3, #7
 800c21e:	d00a      	beq.n	800c236 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	695c      	ldr	r4, [r3, #20]
 800c224:	4b2e      	ldr	r3, [pc, #184]	; (800c2e0 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	233c      	movs	r3, #60	; 0x3c
 800c22a:	4a2a      	ldr	r2, [pc, #168]	; (800c2d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800c22c:	492d      	ldr	r1, [pc, #180]	; (800c2e4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	47a0      	blx	r4
 800c232:	2301      	movs	r3, #1
 800c234:	e046      	b.n	800c2c4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>
                              input->type == kTfLiteInt8 ||
                              input->type == kTfLiteInt16);
  TF_LITE_ENSURE(
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d00e      	beq.n	800c25c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	2b02      	cmp	r3, #2
 800c244:	d00a      	beq.n	800c25c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	695c      	ldr	r4, [r3, #20]
 800c24a:	4b27      	ldr	r3, [pc, #156]	; (800c2e8 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	233f      	movs	r3, #63	; 0x3f
 800c250:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800c252:	4924      	ldr	r1, [pc, #144]	; (800c2e4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	47a0      	blx	r4
 800c258:	2301      	movs	r3, #1
 800c25a:	e033      	b.n	800c2c4 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>
      context, output->type == kTfLiteFloat32 || output->type == kTfLiteInt32);

  if (output->type == kTfLiteInt32) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b02      	cmp	r3, #2
 800c262:	d120      	bne.n	800c2a6 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    const double effective_output_scale =
        static_cast<double>(input->params.scale) /
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f4 f975 	bl	8000558 <__aeabi_f2d>
 800c26e:	4604      	mov	r4, r0
 800c270:	460d      	mov	r5, r1
        static_cast<double>(output->params.scale);
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4618      	mov	r0, r3
 800c278:	f7f4 f96e 	bl	8000558 <__aeabi_f2d>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
    const double effective_output_scale =
 800c280:	4620      	mov	r0, r4
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 faea 	bl	800085c <__aeabi_ddiv>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	f103 0210 	add.w	r2, r3, #16
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	3314      	adds	r3, #20
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	ed97 0b02 	vldr	d0, [r7, #8]
 800c2a2:	f7fb f89d 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);
  }

  data->quantization_params.zero_point = input->params.zero_point;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	691a      	ldr	r2, [r3, #16]
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	609a      	str	r2, [r3, #8]
  data->quantization_params.scale = static_cast<double>(input->params.scale);
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f4 f950 	bl	8000558 <__aeabi_f2d>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	69f9      	ldr	r1, [r7, #28]
 800c2be:	e9c1 2300 	strd	r2, r3, [r1]
  return kTfLiteOk;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3720      	adds	r7, #32
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c2cc:	0801d4fc 	.word	0x0801d4fc
 800c2d0:	0801d500 	.word	0x0801d500
 800c2d4:	0801d434 	.word	0x0801d434
 800c2d8:	0801d4e0 	.word	0x0801d4e0
 800c2dc:	0801d510 	.word	0x0801d510
 800c2e0:	0801d53c 	.word	0x0801d53c
 800c2e4:	0801d524 	.word	0x0801d524
 800c2e8:	0801d598 	.word	0x0801d598

0800c2ec <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f0:	b0bc      	sub	sp, #240	; 0xf0
 800c2f2:	af04      	add	r7, sp, #16
 800c2f4:	60f8      	str	r0, [r7, #12]
 800c2f6:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x18>
 800c300:	f00b fc60 	bl	8017bc4 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  const TfLiteTensor* input = GetInput(context, node, 0);
 800c30c:	2200      	movs	r2, #0
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f7ff fb00 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c316:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  TfLiteTensor* output = GetOutput(context, node, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fb0f 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c324:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

  if (output->type == kTfLiteFloat32) {
 800c328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	f040 80ad 	bne.w	800c48e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
    switch (input->type) {
 800c334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b09      	cmp	r3, #9
 800c33c:	d035      	beq.n	800c3aa <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
 800c33e:	2b09      	cmp	r3, #9
 800c340:	f300 808f 	bgt.w	800c462 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x176>
 800c344:	2b03      	cmp	r3, #3
 800c346:	d002      	beq.n	800c34e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x62>
 800c348:	2b07      	cmp	r3, #7
 800c34a:	d05c      	beq.n	800c406 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x11a>
 800c34c:	e089      	b.n	800c462 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x176>
      case kTfLiteUInt8:
        reference_ops::Dequantize(
            data->quantization_params, GetTensorShape(input),
 800c34e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800c352:	f107 0310 	add.w	r3, r7, #16
 800c356:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fb ff27 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c360:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c364:	f7ff fb03 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800c368:	4605      	mov	r5, r0
            GetTensorData<uint8_t>(input), GetTensorShape(output),
 800c36a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c36e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c372:	4618      	mov	r0, r3
 800c374:	f7fb ff1b 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c378:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c37c:	f7ff fbcb 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800c380:	4602      	mov	r2, r0
 800c382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c386:	f107 0110 	add.w	r1, r7, #16
 800c38a:	9200      	str	r2, [sp, #0]
 800c38c:	462a      	mov	r2, r5
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 f93c 	bl	800c60c <_ZN6tflite13reference_ops10DequantizeIhfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
            GetTensorData<uint8_t>(input), GetTensorShape(output),
 800c394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fb fe8e 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            data->quantization_params, GetTensorShape(input),
 800c39e:	f107 0310 	add.w	r3, r7, #16
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fb fe89 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorData<float>(output));
        break;
 800c3a8:	e111      	b.n	800c5ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
      case kTfLiteInt8:
        reference_ops::Dequantize(
            data->quantization_params, GetTensorShape(input),
 800c3aa:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800c3ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3b2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fb fef9 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c3bc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c3c0:	f7ff fbba 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800c3c4:	4605      	mov	r5, r0
            GetTensorData<int8_t>(input), GetTensorShape(output),
 800c3c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3ca:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fb feed 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c3d4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c3d8:	f7ff fb9d 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c3e6:	9200      	str	r2, [sp, #0]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 f94e 	bl	800c68c <_ZN6tflite13reference_ops10DequantizeIafEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
            GetTensorData<int8_t>(input), GetTensorShape(output),
 800c3f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fb fe60 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            data->quantization_params, GetTensorShape(input),
 800c3fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fb fe5b 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorData<float>(output));
        break;
 800c404:	e0e3      	b.n	800c5ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
      case kTfLiteInt16:
        reference_ops::Dequantize(
            data->quantization_params, GetTensorShape(input),
 800c406:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800c40a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c40e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c412:	4618      	mov	r0, r3
 800c414:	f7fb fecb 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c418:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c41c:	f000 f977 	bl	800c70e <_ZN6tflite13GetTensorDataIsEEPKT_PK12TfLiteTensor>
 800c420:	4605      	mov	r5, r0
            GetTensorData<int16_t>(input), GetTensorShape(output),
 800c422:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c426:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fb febf 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Dequantize(
 800c430:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c434:	f7ff fb6f 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800c438:	4602      	mov	r2, r0
 800c43a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c43e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800c442:	9200      	str	r2, [sp, #0]
 800c444:	462a      	mov	r2, r5
 800c446:	4620      	mov	r0, r4
 800c448:	f000 f972 	bl	800c730 <_ZN6tflite13reference_ops10DequantizeIsfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
            GetTensorData<int16_t>(input), GetTensorShape(output),
 800c44c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c450:	4618      	mov	r0, r3
 800c452:	f7fb fe32 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            data->quantization_params, GetTensorShape(input),
 800c456:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fb fe2d 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorData<float>(output));
        break;
 800c460:	e0b5      	b.n	800c5ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
      default:
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	695c      	ldr	r4, [r3, #20]
 800c466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f8 fc8d 	bl	8004d8c <TfLiteTypeGetName>
 800c472:	4605      	mov	r5, r0
 800c474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f8 fc86 	bl	8004d8c <TfLiteTypeGetName>
 800c480:	4603      	mov	r3, r0
 800c482:	462a      	mov	r2, r5
 800c484:	4955      	ldr	r1, [pc, #340]	; (800c5dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	47a0      	blx	r4
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e0a0      	b.n	800c5d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e4>
    }
  } else if (output->type == kTfLiteInt32) {
 800c48e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b02      	cmp	r3, #2
 800c496:	f040 8084 	bne.w	800c5a2 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2b6>
    int flat_size =
        MatchingFlatSize(GetTensorShape(input), GetTensorShape(output));
 800c49a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c49e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fb fe83 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800c4a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c4ac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fb fe7c 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800c4b6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800c4ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff fae2 	bl	800ba8a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800c4c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800c4ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fb fdf3 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800c4d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fb fdee 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
    switch (input->type) {
 800c4de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b07      	cmp	r3, #7
 800c4e6:	d002      	beq.n	800c4ee <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x202>
 800c4e8:	2b09      	cmp	r3, #9
 800c4ea:	d022      	beq.n	800c532 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x246>
 800c4ec:	e043      	b.n	800c576 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x28a>
      case kTfLiteInt16: {
        reference_ops::Requantize(
 800c4ee:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c4f2:	f000 f90c 	bl	800c70e <_ZN6tflite13GetTensorDataIsEEPKT_PK12TfLiteTensor>
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fc:	691e      	ldr	r6, [r3, #16]
            GetTensorData<int16_t>(input), flat_size, data->output_multiplier,
            data->output_shift, input->params.zero_point,
 800c4fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	607b      	str	r3, [r7, #4]
 800c506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c50a:	691c      	ldr	r4, [r3, #16]
        reference_ops::Requantize(
 800c50c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c510:	691d      	ldr	r5, [r3, #16]
 800c512:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c516:	f7ff fa4c 	bl	800b9b2 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor>
 800c51a:	4603      	mov	r3, r0
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	9501      	str	r5, [sp, #4]
 800c520:	9400      	str	r4, [sp, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4632      	mov	r2, r6
 800c526:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800c52a:	4640      	mov	r0, r8
 800c52c:	f000 f942 	bl	800c7b4 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_>
            output->params.zero_point, GetTensorData<int32_t>(output));
        break;
 800c530:	e04d      	b.n	800c5ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
      }
      case kTfLiteInt8: {
        reference_ops::Requantize(
 800c532:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c536:	f7ff faff 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800c53a:	4680      	mov	r8, r0
 800c53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c540:	691e      	ldr	r6, [r3, #16]
            GetTensorData<int8_t>(input), flat_size, data->output_multiplier,
            data->output_shift, input->params.zero_point,
 800c542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	607b      	str	r3, [r7, #4]
 800c54a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c54e:	691c      	ldr	r4, [r3, #16]
        reference_ops::Requantize(
 800c550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c554:	691d      	ldr	r5, [r3, #16]
 800c556:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c55a:	f7ff fa2a 	bl	800b9b2 <_ZN6tflite13GetTensorDataIlEEPT_P12TfLiteTensor>
 800c55e:	4603      	mov	r3, r0
 800c560:	9302      	str	r3, [sp, #8]
 800c562:	9501      	str	r5, [sp, #4]
 800c564:	9400      	str	r4, [sp, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4632      	mov	r2, r6
 800c56a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800c56e:	4640      	mov	r0, r8
 800c570:	f000 f986 	bl	800c880 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_>
            output->params.zero_point, GetTensorData<int32_t>(output));
        break;
 800c574:	e02b      	b.n	800c5ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
      }
      default:
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	695c      	ldr	r4, [r3, #20]
 800c57a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	4618      	mov	r0, r3
 800c582:	f7f8 fc03 	bl	8004d8c <TfLiteTypeGetName>
 800c586:	4605      	mov	r5, r0
 800c588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f8 fbfc 	bl	8004d8c <TfLiteTypeGetName>
 800c594:	4603      	mov	r3, r0
 800c596:	462a      	mov	r2, r5
 800c598:	4910      	ldr	r1, [pc, #64]	; (800c5dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	47a0      	blx	r4
                           TfLiteTypeGetName(input->type),
                           TfLiteTypeGetName(output->type));
        return kTfLiteError;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e016      	b.n	800c5d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e4>
    }
  } else {
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	695c      	ldr	r4, [r3, #20]
 800c5a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7f8 fbed 	bl	8004d8c <TfLiteTypeGetName>
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7f8 fbe6 	bl	8004d8c <TfLiteTypeGetName>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4905      	ldr	r1, [pc, #20]	; (800c5dc <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	47a0      	blx	r4
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x2e4>
  }

  return kTfLiteOk;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	37e0      	adds	r7, #224	; 0xe0
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5da:	bf00      	nop
 800c5dc:	0801d5d8 	.word	0x0801d5d8

0800c5e0 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:

}  // namespace dequantize

TfLiteRegistration Register_DEQUANTIZE() {
 800c5e0:	b4b0      	push	{r4, r5, r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
          /*prepare=*/dequantize::Prepare,
          /*invoke=*/dequantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a07      	ldr	r2, [pc, #28]	; (800c608 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x28>)
 800c5ec:	461c      	mov	r4, r3
 800c5ee:	4615      	mov	r5, r2
 800c5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c5f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	bcb0      	pop	{r4, r5, r7}
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	0801d5fc 	.word	0x0801d5fc

0800c60c <_ZN6tflite13reference_ops10DequantizeIhfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

namespace reference_ops {

// Dequantizes into a float without rounding.
template <typename InputT, typename OutputT>
inline void Dequantize(const tflite::DequantizationParams& op_params,
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08c      	sub	sp, #48	; 0x30
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32 zero_point = op_params.zero_point;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
  const double scale = op_params.scale;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	e9c7 2308 	strd	r2, r3, [r7, #32]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	68b8      	ldr	r0, [r7, #8]
 800c62e:	f7ff fa2c 	bl	800ba8a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800c632:	61f8      	str	r0, [r7, #28]

  for (int i = 0; i < flat_size; i++) {
 800c634:	2300      	movs	r3, #0
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c638:	e01f      	b.n	800c67a <_ZN6tflite13reference_ops10DequantizeIhfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x6e>
    const int32 val = input_data[i];
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	4413      	add	r3, r2
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	61bb      	str	r3, [r7, #24]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 800c644:	69ba      	ldr	r2, [r7, #24]
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7f3 ff72 	bl	8000534 <__aeabi_i2d>
 800c650:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c654:	f7f3 ffd8 	bl	8000608 <__aeabi_dmul>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4610      	mov	r0, r2
 800c65e:	4619      	mov	r1, r3
 800c660:	f7f4 fa94 	bl	8000b8c <__aeabi_d2f>
 800c664:	4603      	mov	r3, r0
 800c666:	617b      	str	r3, [r7, #20]
    output_data[i] = result;
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c66e:	4413      	add	r3, r2
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; i++) {
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	3301      	adds	r3, #1
 800c678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	429a      	cmp	r2, r3
 800c680:	dbdb      	blt.n	800c63a <_ZN6tflite13reference_ops10DequantizeIhfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
  }
}
 800c682:	bf00      	nop
 800c684:	bf00      	nop
 800c686:	3730      	adds	r7, #48	; 0x30
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZN6tflite13reference_ops10DequantizeIafEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Dequantize(const tflite::DequantizationParams& op_params,
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08c      	sub	sp, #48	; 0x30
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	603b      	str	r3, [r7, #0]
  int32 zero_point = op_params.zero_point;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	62bb      	str	r3, [r7, #40]	; 0x28
  const double scale = op_params.scale;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	68b8      	ldr	r0, [r7, #8]
 800c6ae:	f7ff f9ec 	bl	800ba8a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800c6b2:	61f8      	str	r0, [r7, #28]
  for (int i = 0; i < flat_size; i++) {
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6b8:	e020      	b.n	800c6fc <_ZN6tflite13reference_ops10DequantizeIafEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
    const int32 val = input_data[i];
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f993 3000 	ldrsb.w	r3, [r3]
 800c6c4:	61bb      	str	r3, [r7, #24]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7f3 ff31 	bl	8000534 <__aeabi_i2d>
 800c6d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6d6:	f7f3 ff97 	bl	8000608 <__aeabi_dmul>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4610      	mov	r0, r2
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f7f4 fa53 	bl	8000b8c <__aeabi_d2f>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	617b      	str	r3, [r7, #20]
    output_data[i] = result;
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6f0:	4413      	add	r3, r2
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; i++) {
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	429a      	cmp	r2, r3
 800c702:	dbda      	blt.n	800c6ba <_ZN6tflite13reference_ops10DequantizeIafEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	3730      	adds	r7, #48	; 0x30
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <_ZN6tflite13GetTensorDataIsEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <_ZN6tflite13GetTensorDataIsEEPKT_PK12TfLiteTensor+0x14>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c720:	e000      	b.n	800c724 <_ZN6tflite13GetTensorDataIsEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <_ZN6tflite13reference_ops10DequantizeIsfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Dequantize(const tflite::DequantizationParams& op_params,
 800c730:	b580      	push	{r7, lr}
 800c732:	b08c      	sub	sp, #48	; 0x30
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  int32 zero_point = op_params.zero_point;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
  const double scale = op_params.scale;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	68b8      	ldr	r0, [r7, #8]
 800c752:	f7ff f99a 	bl	800ba8a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800c756:	61f8      	str	r0, [r7, #28]
  for (int i = 0; i < flat_size; i++) {
 800c758:	2300      	movs	r3, #0
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75c:	e021      	b.n	800c7a2 <_ZN6tflite13reference_ops10DequantizeIsfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x72>
    const int32 val = input_data[i];
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	4413      	add	r3, r2
 800c766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c76a:	61bb      	str	r3, [r7, #24]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4618      	mov	r0, r3
 800c774:	f7f3 fede 	bl	8000534 <__aeabi_i2d>
 800c778:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c77c:	f7f3 ff44 	bl	8000608 <__aeabi_dmul>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4610      	mov	r0, r2
 800c786:	4619      	mov	r1, r3
 800c788:	f7f4 fa00 	bl	8000b8c <__aeabi_d2f>
 800c78c:	4603      	mov	r3, r0
 800c78e:	617b      	str	r3, [r7, #20]
    output_data[i] = result;
 800c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c796:	4413      	add	r3, r2
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; i++) {
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	3301      	adds	r3, #1
 800c7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	dbd9      	blt.n	800c75e <_ZN6tflite13reference_ops10DequantizeIsfEEvRKNS_20DequantizationParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	3730      	adds	r7, #48	; 0x30
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_>:

namespace tflite {
namespace reference_ops {

template <typename input_type, typename output_type>
inline void Requantize(const input_type* input_data, int32_t size,
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08c      	sub	sp, #48	; 0x30
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
                       int32_t effective_scale_multiplier,
                       int32_t effective_scale_shift, int32_t input_zeropoint,
                       int32_t output_zeropoint, output_type* output_data) {
  ruy::profiler::ScopeLabel label("Requantize");
 800c7c2:	f107 0318 	add.w	r3, r7, #24
 800c7c6:	492b      	ldr	r1, [pc, #172]	; (800c874 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0xc0>)
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f8bf 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  const bool same_scale =
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d4:	d104      	bne.n	800c7e0 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0x2c>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d101      	bne.n	800c7e0 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0x2c>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e000      	b.n	800c7e2 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0x2e>
 800c7e0:	2300      	movs	r3, #0
  const bool same_scale =
 800c7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (same_scale) {
 800c7e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d009      	beq.n	800c802 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0x4e>
    const bool mixed_type_int8_uint8 =
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        std::is_same<input_type, int8_t>::value &&
        std::is_same<output_type, uint8_t>::value;
    const bool mixed_type_uint8_int8 =
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        std::is_same<input_type, uint8_t>::value &&
        std::is_same<output_type, int8_t>::value;
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 800c7fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
 800c802:	2300      	movs	r3, #0
 800c804:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c806:	e029      	b.n	800c85c <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0xa8>
    const int32_t input = input_data[i] - input_zeropoint;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	005b      	lsls	r3, r3, #1
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c814:	461a      	mov	r2, r3
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	623b      	str	r3, [r7, #32]
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	6a38      	ldr	r0, [r7, #32]
 800c822:	f7ff fc46 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c826:	4602      	mov	r2, r0
                                      effective_scale_shift) +
 800c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82a:	4413      	add	r3, r2
    const int32_t output =
 800c82c:	617b      	str	r3, [r7, #20]
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
 800c82e:	f107 0314 	add.w	r3, r7, #20
 800c832:	4911      	ldr	r1, [pc, #68]	; (800c878 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0xc4>)
 800c834:	4618      	mov	r0, r3
 800c836:	f7fb fbed 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 800c83a:	4603      	mov	r3, r0
 800c83c:	490f      	ldr	r1, [pc, #60]	; (800c87c <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0xc8>)
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fb fbd4 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 800c844:	4603      	mov	r3, r0
    const int32_t clamped_output =
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	61fb      	str	r3, [r7, #28]
    output_data[i] = static_cast<output_type>(clamped_output);
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c850:	4413      	add	r3, r2
 800c852:	69fa      	ldr	r2, [r7, #28]
 800c854:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	3301      	adds	r3, #1
 800c85a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	429a      	cmp	r2, r3
 800c862:	dbd1      	blt.n	800c808 <_ZN6tflite13reference_ops10RequantizeIslEEvPKT_lllllPT0_+0x54>
  }
}
 800c864:	f107 0318 	add.w	r3, r7, #24
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fc46 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800c86e:	3730      	adds	r7, #48	; 0x30
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	0801d73c 	.word	0x0801d73c
 800c878:	0801fd10 	.word	0x0801fd10
 800c87c:	0801fd0c 	.word	0x0801fd0c

0800c880 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_>:
inline void Requantize(const input_type* input_data, int32_t size,
 800c880:	b580      	push	{r7, lr}
 800c882:	b08c      	sub	sp, #48	; 0x30
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]
  ruy::profiler::ScopeLabel label("Requantize");
 800c88e:	f107 0318 	add.w	r3, r7, #24
 800c892:	492b      	ldr	r1, [pc, #172]	; (800c940 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0xc0>)
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f859 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
      (effective_scale_multiplier == 1 << 30 && effective_scale_shift == 1);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8a0:	d104      	bne.n	800c8ac <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0x2c>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d101      	bne.n	800c8ac <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0x2c>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e000      	b.n	800c8ae <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0x2e>
 800c8ac:	2300      	movs	r3, #0
  const bool same_scale =
 800c8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (same_scale) {
 800c8b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0x4e>
    const bool mixed_type_int8_uint8 =
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    const bool mixed_type_uint8_int8 =
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    const int32_t zero_point_diff = input_zeropoint - output_zeropoint;
 800c8c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < size; ++i) {
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8d2:	e028      	b.n	800c926 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0xa6>
    const int32_t input = input_data[i] - input_zeropoint;
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f993 3000 	ldrsb.w	r3, [r3]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	623b      	str	r3, [r7, #32]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	6a38      	ldr	r0, [r7, #32]
 800c8ec:	f7ff fbe1 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c8f0:	4602      	mov	r2, r0
                                      effective_scale_shift) +
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f4:	4413      	add	r3, r2
    const int32_t output =
 800c8f6:	617b      	str	r3, [r7, #20]
        std::max(std::min(output, kMaxOutput), kMinOutput);
 800c8f8:	f107 0314 	add.w	r3, r7, #20
 800c8fc:	4911      	ldr	r1, [pc, #68]	; (800c944 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0xc4>)
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fb fb88 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 800c904:	4603      	mov	r3, r0
 800c906:	4910      	ldr	r1, [pc, #64]	; (800c948 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0xc8>)
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fb fb6f 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 800c90e:	4603      	mov	r3, r0
    const int32_t clamped_output =
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	61fb      	str	r3, [r7, #28]
    output_data[i] = static_cast<output_type>(clamped_output);
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c91a:	4413      	add	r3, r2
 800c91c:	69fa      	ldr	r2, [r7, #28]
 800c91e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	3301      	adds	r3, #1
 800c924:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	dbd2      	blt.n	800c8d4 <_ZN6tflite13reference_ops10RequantizeIalEEvPKT_lllllPT0_+0x54>
}
 800c92e:	f107 0318 	add.w	r3, r7, #24
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fbe1 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800c938:	3730      	adds	r7, #48	; 0x30
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	0801d73c 	.word	0x0801d73c
 800c944:	0801fd18 	.word	0x0801fd18
 800c948:	0801fd14 	.word	0x0801fd14

0800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>:
  explicit ScopeLabel(Args...) {}
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7fb fbb9 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c974:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	db03      	blt.n	800c984 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	429a      	cmp	r2, r3
 800c982:	db01      	blt.n	800c988 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800c984:	f00b f91e 	bl	8017bc4 <abort>
  const auto* dims_data = shape.DimsData();
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7ff f848 	bl	800ba1e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c98e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800c990:	2301      	movs	r3, #1
 800c992:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800c994:	2300      	movs	r3, #0
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	e011      	b.n	800c9be <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d005      	beq.n	800c9ae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	e000      	b.n	800c9b0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	697a      	ldr	r2, [r7, #20]
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
 800c9b6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	613b      	str	r3, [r7, #16]
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	dbe9      	blt.n	800c99a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 800c9c6:	697b      	ldr	r3, [r7, #20]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800c9d0:	b590      	push	{r4, r7, lr}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f7fb fb82 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c9e2:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	e014      	b.n	800ca14 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d00d      	beq.n	800ca0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800c9f2:	6979      	ldr	r1, [r7, #20]
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7fe ffed 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	6979      	ldr	r1, [r7, #20]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7fe ffe8 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ca04:	4603      	mov	r3, r0
 800ca06:	429c      	cmp	r4, r3
 800ca08:	d001      	beq.n	800ca0e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 800ca0a:	f00b f8db 	bl	8017bc4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	3301      	adds	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	697a      	ldr	r2, [r7, #20]
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	dbe6      	blt.n	800c9ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff ffa0 	bl	800c964 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800ca24:	4603      	mov	r3, r0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd90      	pop	{r4, r7, pc}

0800ca2e <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 800ca2e:	b480      	push	{r7}
 800ca30:	b083      	sub	sp, #12
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800ca42:	e000      	b.n	800ca46 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800ca44:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800ca70:	f107 030c 	add.w	r3, r7, #12
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff ffec 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff fa7f 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ca82:	4603      	mov	r3, r0
 800ca84:	6023      	str	r3, [r4, #0]
    return retval;
 800ca86:	68fb      	ldr	r3, [r7, #12]
  }
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd90      	pop	{r4, r7, pc}

0800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800ca98:	2100      	movs	r1, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff f9fc 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800caa0:	4603      	mov	r3, r0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800caaa:	b580      	push	{r7, lr}
 800caac:	b082      	sub	sp, #8
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f813 	bl	800cade <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800cab8:	4603      	mov	r3, r0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
  return a - b;
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	1ad3      	subs	r3, r2, r3
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800cae6:	2101      	movs	r1, #1
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff f9d5 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800caee:	4603      	mov	r3, r0
  }
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800caf8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800cafc:	b089      	sub	sp, #36	; 0x24
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	17c8      	asrs	r0, r1, #31
 800cb08:	4688      	mov	r8, r1
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800cb10:	2001      	movs	r0, #1
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	fa00 f101 	lsl.w	r1, r0, r1
 800cb18:	17c8      	asrs	r0, r1, #31
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	69f9      	ldr	r1, [r7, #28]
 800cb20:	fb04 f001 	mul.w	r0, r4, r1
 800cb24:	69b9      	ldr	r1, [r7, #24]
 800cb26:	fb05 f101 	mul.w	r1, r5, r1
 800cb2a:	4401      	add	r1, r0
 800cb2c:	69b8      	ldr	r0, [r7, #24]
 800cb2e:	fba0 2304 	umull	r2, r3, r0, r4
 800cb32:	4419      	add	r1, r3
 800cb34:	460b      	mov	r3, r1
 800cb36:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cb3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800cb3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb42:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800cb44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cb48:	60bb      	str	r3, [r7, #8]
             ? min
 800cb4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb4e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800cb52:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 800cb56:	db0b      	blt.n	800cb70 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 800cb58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800cb60:	f173 0300 	sbcs.w	r3, r3, #0
 800cb64:	da01      	bge.n	800cb6a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 800cb66:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800cb68:	e004      	b.n	800cb74 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800cb6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800cb6e:	e001      	b.n	800cb74 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 800cb70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3724      	adds	r7, #36	; 0x24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800cb7e:	4770      	bx	lr

0800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800cb80:	b590      	push	{r4, r7, lr}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7ff fa01 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800cb94:	4604      	mov	r4, r0
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff fa61 	bl	800c05e <_ZN8gemmlowp6BitNotIlEET_S1_>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff f9f8 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 f805 	bl	800cbba <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800cbb0:	4603      	mov	r3, r0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd90      	pop	{r4, r7, pc}

0800cbba <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	4053      	eors	r3, r2
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	ed87 0a01 	vstr	s0, [r7, #4]
 800cbe0:	ed97 0a01 	vldr	s0, [r7, #4]
 800cbe4:	f00a fd7a 	bl	80176dc <expf>
 800cbe8:	eef0 7a40 	vmov.f32	s15, s0
 800cbec:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800cbf6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cbfa:	b090      	sub	sp, #64	; 0x40
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	61f8      	str	r0, [r7, #28]
 800cc00:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	17da      	asrs	r2, r3, #31
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	617a      	str	r2, [r7, #20]
 800cc0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc0e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	17da      	asrs	r2, r3, #31
 800cc16:	60bb      	str	r3, [r7, #8]
 800cc18:	60fa      	str	r2, [r7, #12]
 800cc1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 800cc22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cc26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cc2a:	1886      	adds	r6, r0, r2
 800cc2c:	603e      	str	r6, [r7, #0]
 800cc2e:	eb41 0303 	adc.w	r3, r1, r3
 800cc32:	607b      	str	r3, [r7, #4]
 800cc34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800cc3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	db04      	blt.n	800cc4e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 800cc44:	f04f 0201 	mov.w	r2, #1
 800cc48:	f04f 0300 	mov.w	r3, #0
 800cc4c:	e003      	b.n	800cc56 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 800cc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc56:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800cc5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cc5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc62:	eb10 0802 	adds.w	r8, r0, r2
 800cc66:	eb41 0903 	adc.w	r9, r1, r3
 800cc6a:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800cc6e:	2200      	movs	r2, #0
 800cc70:	469a      	mov	sl, r3
 800cc72:	4693      	mov	fp, r2
 800cc74:	eb1a 0408 	adds.w	r4, sl, r8
 800cc78:	eb4b 0509 	adc.w	r5, fp, r9
 800cc7c:	f04f 0200 	mov.w	r2, #0
 800cc80:	f04f 0300 	mov.w	r3, #0
 800cc84:	0862      	lsrs	r2, r4, #1
 800cc86:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800cc8a:	106b      	asrs	r3, r5, #1
 800cc8c:	4613      	mov	r3, r2
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3740      	adds	r7, #64	; 0x40
 800cc92:	46bd      	mov	sp, r7
 800cc94:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc98:	4770      	bx	lr

0800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800cca2:	f107 030c 	add.w	r3, r7, #12
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fed3 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ccac:	4602      	mov	r2, r0
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6013      	str	r3, [r2, #0]
    return retval;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
  }
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800ccc4:	f000 f85a 	bl	800cd7c <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f860 	bl	800cd92 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800ccd6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800ccda:	f000 f88c 	bl	800cdf6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800ccde:	4603      	mov	r3, r0
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 f874 	bl	800cdce <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800cce6:	4603      	mov	r3, r0
 800cce8:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800ccea:	4823      	ldr	r0, [pc, #140]	; (800cd78 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800ccec:	f000 f883 	bl	800cdf6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f86b 	bl	800cdce <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800ccfc:	69b9      	ldr	r1, [r7, #24]
 800ccfe:	6a38      	ldr	r0, [r7, #32]
 800cd00:	f000 f886 	bl	800ce10 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cd04:	4603      	mov	r3, r0
 800cd06:	4619      	mov	r1, r3
 800cd08:	69f8      	ldr	r0, [r7, #28]
 800cd0a:	f000 f8a3 	bl	800ce54 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800cd12:	2300      	movs	r3, #0
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24
 800cd16:	e020      	b.n	800cd5a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9e>
    F2 half_denominator_times_x = half_denominator * x;
 800cd18:	6979      	ldr	r1, [r7, #20]
 800cd1a:	6a38      	ldr	r0, [r7, #32]
 800cd1c:	f000 f878 	bl	800ce10 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cd20:	4603      	mov	r3, r0
 800cd22:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800cd24:	f000 f8b4 	bl	800ce90 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	6939      	ldr	r1, [r7, #16]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f8b8 	bl	800cea2 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cd32:	4603      	mov	r3, r0
 800cd34:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	6978      	ldr	r0, [r7, #20]
 800cd3a:	f000 f8d0 	bl	800cede <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f8ee 	bl	800cf22 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800cd46:	4603      	mov	r3, r0
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6978      	ldr	r0, [r7, #20]
 800cd4c:	f000 f882 	bl	800ce54 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cd50:	4603      	mov	r3, r0
 800cd52:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	3301      	adds	r3, #1
 800cd58:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	dddb      	ble.n	800cd18 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5c>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800cd60:	6978      	ldr	r0, [r7, #20]
 800cd62:	f000 f8f8 	bl	800cf56 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800cd66:	4603      	mov	r3, r0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 f90a 	bl	800cf82 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800cd6e:	4603      	mov	r3, r0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3728      	adds	r7, #40	; 0x28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	c3c3c3c4 	.word	0xc3c3c3c4

0800cd7c <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800cd80:	f000 f945 	bl	800d00e <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800cd84:	4603      	mov	r3, r0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff fe6e 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800cd8c:	4603      	mov	r3, r0
  }
 800cd8e:	4618      	mov	r0, r3
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800cd92:	b590      	push	{r4, r7, lr}
 800cd94:	b083      	sub	sp, #12
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
 800cd9c:	1d3b      	adds	r3, r7, #4
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff fe57 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cda4:	4603      	mov	r3, r0
 800cda6:	681c      	ldr	r4, [r3, #0]
 800cda8:	463b      	mov	r3, r7
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fe51 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7ff ff1d 	bl	800cbf6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff ff6b 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd90      	pop	{r4, r7, pc}

0800cdce <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800cdce:	b590      	push	{r4, r7, lr}
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800cdd6:	f107 030c 	add.w	r3, r7, #12
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f91e 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cde0:	4604      	mov	r4, r0
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff f8cc 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cde8:	4603      	mov	r3, r0
 800cdea:	6023      	str	r3, [r4, #0]
    return retval;
 800cdec:	68fb      	ldr	r3, [r7, #12]
  }
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd90      	pop	{r4, r7, pc}

0800cdf6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800cdfe:	2100      	movs	r1, #0
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff f849 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ce06:	4603      	mov	r3, r0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800ce10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800ce1a:	1d3b      	adds	r3, r7, #4
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fe18 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ce22:	4603      	mov	r3, r0
 800ce24:	681d      	ldr	r5, [r3, #0]
 800ce26:	463b      	mov	r3, r7
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 f8f7 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	681e      	ldr	r6, [r3, #0]
 800ce32:	f107 030c 	add.w	r3, r7, #12
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 f8f0 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	f7fe fecf 	bl	800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ce46:	4603      	mov	r3, r0
 800ce48:	6023      	str	r3, [r4, #0]
  return c;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce54 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800ce54:	b590      	push	{r4, r7, lr}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	1d3b      	adds	r3, r7, #4
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 f8db 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ce66:	4603      	mov	r3, r0
 800ce68:	681c      	ldr	r4, [r3, #0]
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 f8d5 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ce72:	4603      	mov	r3, r0
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4619      	mov	r1, r3
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f7ff f8bd 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 f8d6 	bl	800d032 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800ce86:	4603      	mov	r3, r0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd90      	pop	{r4, r7, pc}

0800ce90 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800ce94:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800ce98:	f7ff ff99 	bl	800cdce <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800ce9c:	4603      	mov	r3, r0
  }
 800ce9e:	4618      	mov	r0, r3
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800cea2:	b590      	push	{r4, r7, lr}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	6039      	str	r1, [r7, #0]
 800ceac:	1d3b      	adds	r3, r7, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f8b4 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	681c      	ldr	r4, [r3, #0]
 800ceb8:	463b      	mov	r3, r7
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 f8ae 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cec0:	4603      	mov	r3, r0
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4619      	mov	r1, r3
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff fdfb 	bl	800cac2 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800cecc:	4603      	mov	r3, r0
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 f8af 	bl	800d032 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800ced4:	4603      	mov	r3, r0
 800ced6:	4618      	mov	r0, r3
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}

0800cede <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800cede:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee0:	b085      	sub	sp, #20
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800cee8:	1d3b      	adds	r3, r7, #4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f896 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cef0:	4603      	mov	r3, r0
 800cef2:	681d      	ldr	r5, [r3, #0]
 800cef4:	463b      	mov	r3, r7
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 f890 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cefc:	4603      	mov	r3, r0
 800cefe:	681e      	ldr	r6, [r3, #0]
 800cf00:	f107 030c 	add.w	r3, r7, #12
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 f856 	bl	800cfb6 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f7fe fe68 	bl	800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800cf14:	4603      	mov	r3, r0
 800cf16:	6023      	str	r3, [r4, #0]
  return c;
 800cf18:	68fb      	ldr	r3, [r7, #12]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf22 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800cf22:	b5b0      	push	{r4, r5, r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800cf2a:	1d3b      	adds	r3, r7, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 f842 	bl	800cfb6 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800cf32:	4603      	mov	r3, r0
 800cf34:	681d      	ldr	r5, [r3, #0]
 800cf36:	f107 030c 	add.w	r3, r7, #12
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 f86e 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cf40:	4604      	mov	r4, r0
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 f886 	bl	800d054 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	6023      	str	r3, [r4, #0]
  return result;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bdb0      	pop	{r4, r5, r7, pc}

0800cf56 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800cf56:	b590      	push	{r4, r7, lr}
 800cf58:	b085      	sub	sp, #20
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800cf5e:	1d3b      	adds	r3, r7, #4
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 f85b 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cf66:	4604      	mov	r4, r0
 800cf68:	f107 030c 	add.w	r3, r7, #12
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f87d 	bl	800d06c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800cf72:	4602      	mov	r2, r0
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	6013      	str	r3, [r2, #0]
  return c;
 800cf78:	68fb      	ldr	r3, [r7, #12]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd90      	pop	{r4, r7, pc}

0800cf82 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800cf82:	b5b0      	push	{r4, r5, r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800cf8a:	1d3b      	adds	r3, r7, #4
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 f86d 	bl	800d06c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800cf92:	4603      	mov	r3, r0
 800cf94:	681d      	ldr	r5, [r3, #0]
 800cf96:	f107 030c 	add.w	r3, r7, #12
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fd59 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f000 f86d 	bl	800d082 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	6023      	str	r3, [r4, #0]
  return result;
 800cfac:	68fb      	ldr	r3, [r7, #12]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bdb0      	pop	{r4, r5, r7, pc}

0800cfb6 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800cfb6:	b480      	push	{r7}
 800cfb8:	b083      	sub	sp, #12
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800cfd8:	f107 0308 	add.w	r3, r7, #8
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fd38 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cfe2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800cfe4:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800cfe6:	1d3b      	adds	r3, r7, #4
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fd32 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cfee:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	4621      	mov	r1, r4
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7ff fdc2 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cffc:	4603      	mov	r3, r0
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff fe4b 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d004:	4603      	mov	r3, r0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd90      	pop	{r4, r7, pc}

0800d00e <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800d00e:	b580      	push	{r7, lr}
 800d010:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800d012:	f7fa f9db 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 800d016:	4603      	mov	r3, r0
  }
 800d018:	4618      	mov	r0, r3
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff ffec 	bl	800d01c <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800d044:	4602      	mov	r2, r0
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6013      	str	r3, [r2, #0]
    return retval;
 800d04a:	68fb      	ldr	r3, [r7, #12]
  }
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f82f 	bl	800d0c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800d062:	4603      	mov	r3, r0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4618      	mov	r0, r3
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d082:	b580      	push	{r7, lr}
 800d084:	b082      	sub	sp, #8
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f85a 	bl	800d144 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800d090:	4603      	mov	r3, r0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b082      	sub	sp, #8
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bf0c      	ite	eq
 800d0a8:	2301      	moveq	r3, #1
 800d0aa:	2300      	movne	r3, #0
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe ffc4 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d0b4:	4603      	mov	r3, r0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
	...

0800d0c0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800d0c8:	f7fe fd83 	bl	800bbd2 <_ZNSt14numeric_limitsIlE3minEv>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe ff56 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d0d4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800d0d6:	f7fa f979 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe ff4f 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d0e2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800d0e4:	2320      	movs	r3, #32
 800d0e6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800d0e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d0ec:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800d0ee:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800d0f2:	f7fe ff45 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fe ff8a 	bl	800c014 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800d100:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800d102:	480f      	ldr	r0, [pc, #60]	; (800d140 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800d104:	f7fe ff3c 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d108:	4603      	mov	r3, r0
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7fe ff5f 	bl	800bfd0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800d112:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800d114:	2102      	movs	r1, #2
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff fcee 	bl	800caf8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800d11c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	6a39      	ldr	r1, [r7, #32]
 800d122:	6978      	ldr	r0, [r7, #20]
 800d124:	f7ff fd2c 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d128:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d12e:	6938      	ldr	r0, [r7, #16]
 800d130:	f7ff fd26 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d134:	60f8      	str	r0, [r7, #12]
    return result;
 800d136:	68fb      	ldr	r3, [r7, #12]
  }
 800d138:	4618      	mov	r0, r3
 800d13a:	3728      	adds	r7, #40	; 0x28
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	e0000001 	.word	0xe0000001

0800d144 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800d14c:	f7fe fd41 	bl	800bbd2 <_ZNSt14numeric_limitsIlE3minEv>
 800d150:	4603      	mov	r3, r0
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe ff14 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d158:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800d15a:	f7fa f937 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 800d15e:	4603      	mov	r3, r0
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ff0d 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d166:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800d168:	2320      	movs	r3, #32
 800d16a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800d16c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d170:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800d172:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800d176:	f7fe ff03 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d17a:	4603      	mov	r3, r0
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7fe ff48 	bl	800c014 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800d184:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800d186:	480f      	ldr	r0, [pc, #60]	; (800d1c4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800d188:	f7fe fefa 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d18c:	4603      	mov	r3, r0
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7fe ff1d 	bl	800bfd0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800d196:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800d198:	2101      	movs	r1, #1
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7ff fcac 	bl	800caf8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800d1a0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	6a39      	ldr	r1, [r7, #32]
 800d1a6:	6978      	ldr	r0, [r7, #20]
 800d1a8:	f7ff fcea 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d1ac:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1b2:	6938      	ldr	r0, [r7, #16]
 800d1b4:	f7ff fce4 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d1b8:	60f8      	str	r0, [r7, #12]
    return result;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
  }
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3728      	adds	r7, #40	; 0x28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	c0000001 	.word	0xc0000001

0800d1c8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800d1d0:	482c      	ldr	r0, [pc, #176]	; (800d284 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800d1d2:	f7ff fc5d 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff fc45 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800d1e2:	4829      	ldr	r0, [pc, #164]	; (800d288 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800d1e4:	f7ff fc54 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7ff fc3c 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800d1f4:	f000 f86c 	bl	800d2d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f870 	bl	800d2e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d202:	4603      	mov	r3, r0
 800d204:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800d206:	69f9      	ldr	r1, [r7, #28]
 800d208:	69f8      	ldr	r0, [r7, #28]
 800d20a:	f000 f83f 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d20e:	4603      	mov	r3, r0
 800d210:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800d212:	69f9      	ldr	r1, [r7, #28]
 800d214:	69b8      	ldr	r0, [r7, #24]
 800d216:	f000 f839 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d21a:	4603      	mov	r3, r0
 800d21c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800d21e:	69b9      	ldr	r1, [r7, #24]
 800d220:	69b8      	ldr	r0, [r7, #24]
 800d222:	f000 f833 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d226:	4603      	mov	r3, r0
 800d228:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800d22a:	6938      	ldr	r0, [r7, #16]
 800d22c:	f000 f877 	bl	800d31e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800d230:	4603      	mov	r3, r0
 800d232:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800d234:	6979      	ldr	r1, [r7, #20]
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 f853 	bl	800d2e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d23c:	4603      	mov	r3, r0
 800d23e:	6a39      	ldr	r1, [r7, #32]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f823 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d246:	4603      	mov	r3, r0
 800d248:	69b9      	ldr	r1, [r7, #24]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 f849 	bl	800d2e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d250:	4603      	mov	r3, r0
 800d252:	4618      	mov	r0, r3
 800d254:	f000 f879 	bl	800d34a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800d258:	4603      	mov	r3, r0
 800d25a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800d25c:	68b9      	ldr	r1, [r7, #8]
 800d25e:	69f8      	ldr	r0, [r7, #28]
 800d260:	f000 f83f 	bl	800d2e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d264:	4603      	mov	r3, r0
 800d266:	4619      	mov	r1, r3
 800d268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d26a:	f000 f80f 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800d26e:	4603      	mov	r3, r0
 800d270:	4619      	mov	r1, r3
 800d272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d274:	f000 f87f 	bl	800d376 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800d278:	4603      	mov	r3, r0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3728      	adds	r7, #40	; 0x28
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	70f5a894 	.word	0x70f5a894
 800d288:	2aaaaaab 	.word	0x2aaaaaab

0800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800d28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800d296:	1d3b      	adds	r3, r7, #4
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fbda 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	681d      	ldr	r5, [r3, #0]
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff fbd4 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	681e      	ldr	r6, [r3, #0]
 800d2ae:	f107 030c 	add.w	r3, r7, #12
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff fbcd 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4628      	mov	r0, r5
 800d2be:	f7fe fc91 	bl	800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6023      	str	r3, [r4, #0]
  return c;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800d2d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d2d8:	f7ff fbc6 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800d2dc:	4603      	mov	r3, r0
  }
 800d2de:	4618      	mov	r0, r3
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800d2e2:	b590      	push	{r4, r7, lr}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
 800d2ec:	1d3b      	adds	r3, r7, #4
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7ff fbaf 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	681c      	ldr	r4, [r3, #0]
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fba9 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d300:	4603      	mov	r3, r0
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4619      	mov	r1, r3
 800d306:	4620      	mov	r0, r4
 800d308:	f7fe fe76 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d30c:	4603      	mov	r3, r0
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fcc3 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d314:	4603      	mov	r3, r0
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd90      	pop	{r4, r7, pc}

0800d31e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800d326:	1d3b      	adds	r3, r7, #4
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fb92 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d32e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f83d 	bl	800d3b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800d338:	4603      	mov	r3, r0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fcad 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d340:	4603      	mov	r3, r0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800d352:	1d3b      	adds	r3, r7, #4
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff fb7c 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d35a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff fba3 	bl	800caaa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800d364:	4603      	mov	r3, r0
 800d366:	4618      	mov	r0, r3
 800d368:	f7ff fc97 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d36c:	4603      	mov	r3, r0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800d376:	b590      	push	{r4, r7, lr}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800d380:	1d3b      	adds	r3, r7, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fb65 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d388:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800d38a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800d38c:	463b      	mov	r3, r7
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fb5f 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d394:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4619      	mov	r1, r3
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f815 	bl	800d3ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7ff fc79 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d3a8:	4603      	mov	r3, r0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd90      	pop	{r4, r7, pc}

0800d3b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f813 	bl	800d3e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800d3c0:	4603      	mov	r3, r0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f812 	bl	800d400 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800d3dc:	4603      	mov	r3, r0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d3ee:	2102      	movs	r1, #2
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7fe fd51 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d3f6:	4603      	mov	r3, r0
  }
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fe fdf3 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d412:	4603      	mov	r3, r0
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:

inline const TfLiteTensor* GetOptionalInputTensor(TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
 800d41c:	b480      	push	{r7}
 800d41e:	b087      	sub	sp, #28
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	429a      	cmp	r2, r3
 800d432:	da0a      	bge.n	800d44a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800d440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d444:	d001      	beq.n	800d44a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 800d446:	2301      	movs	r3, #1
 800d448:	e000      	b.n	800d44c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	689a      	ldr	r2, [r3, #8]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	6819      	ldr	r1, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	440b      	add	r3, r1
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	019b      	lsls	r3, r3, #6
 800d466:	4413      	add	r3, r2
 800d468:	e000      	b.n	800d46c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  }
  return nullptr;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <_ZSt4fmaxff>:
  { return __builtin_fmaxf(__x, __y); }
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d482:	edc7 0a00 	vstr	s1, [r7]
 800d486:	edd7 0a00 	vldr	s1, [r7]
 800d48a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d48e:	f00a f968 	bl	8017762 <fmaxf>
 800d492:	eef0 7a40 	vmov.f32	s15, s0
 800d496:	eeb0 0a67 	vmov.f32	s0, s15
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <_ZSt4fminff>:
  { return __builtin_fminf(__x, __y); }
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d4aa:	edc7 0a00 	vstr	s1, [r7]
 800d4ae:	edd7 0a00 	vldr	s1, [r7]
 800d4b2:	ed97 0a01 	vldr	s0, [r7, #4]
 800d4b6:	f00a f96f 	bl	8017798 <fminf>
 800d4ba:	eef0 7a40 	vmov.f32	s15, s0
 800d4be:	eeb0 0a67 	vmov.f32	s0, s15
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <_ZN6tflite9NextIndexEiPKiPi>:
inline bool NextIndex(const int num_dims, const int* dims, int* current) {
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b088      	sub	sp, #32
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	607a      	str	r2, [r7, #4]
  if (num_dims == 0) {
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <_ZN6tflite9NextIndexEiPKiPi+0x16>
    return false;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e045      	b.n	800d57c <_ZN6tflite9NextIndexEiPKiPi+0xa2>
  TFLITE_DCHECK(dims != nullptr);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <_ZN6tflite9NextIndexEiPKiPi+0x20>
 800d4f6:	f00a fb65 	bl	8017bc4 <abort>
  TFLITE_DCHECK(current != nullptr);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <_ZN6tflite9NextIndexEiPKiPi+0x2a>
 800d500:	f00a fb60 	bl	8017bc4 <abort>
  int carry = 1;
 800d504:	2301      	movs	r3, #1
 800d506:	61fb      	str	r3, [r7, #28]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	3b01      	subs	r3, #1
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	e02c      	b.n	800d56a <_ZN6tflite9NextIndexEiPKiPi+0x90>
    int current_val = current[idx] + carry;
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	4413      	add	r3, r2
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	4413      	add	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]
    TFLITE_DCHECK_GE(dims[idx], current_val);
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	4413      	add	r3, r2
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	697a      	ldr	r2, [r7, #20]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	dd01      	ble.n	800d534 <_ZN6tflite9NextIndexEiPKiPi+0x5a>
 800d530:	f00a fb48 	bl	8017bc4 <abort>
    if (dims[idx] == current_val) {
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	4413      	add	r3, r2
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	429a      	cmp	r2, r3
 800d542:	d106      	bne.n	800d552 <_ZN6tflite9NextIndexEiPKiPi+0x78>
      current[idx] = 0;
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	4413      	add	r3, r2
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	e008      	b.n	800d564 <_ZN6tflite9NextIndexEiPKiPi+0x8a>
      current[idx] = current_val;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	4413      	add	r3, r2
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	601a      	str	r2, [r3, #0]
      carry = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	61fb      	str	r3, [r7, #28]
      break;
 800d562:	e005      	b.n	800d570 <_ZN6tflite9NextIndexEiPKiPi+0x96>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	3b01      	subs	r3, #1
 800d568:	61bb      	str	r3, [r7, #24]
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	dacf      	bge.n	800d510 <_ZN6tflite9NextIndexEiPKiPi+0x36>
  return (carry == 0);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	2b00      	cmp	r3, #0
 800d574:	bf0c      	ite	eq
 800d576:	2301      	moveq	r3, #1
 800d578:	2300      	movne	r3, #0
 800d57a:	b2db      	uxtb	r3, r3
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3720      	adds	r7, #32
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
  if (num_dims == 0) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d101      	bne.n	800d59c <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x18>
    return 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	e046      	b.n	800d62a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xa6>
  TFLITE_DCHECK(dims != nullptr);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x22>
 800d5a2:	f00a fb0f 	bl	8017bc4 <abort>
  TFLITE_DCHECK(index != nullptr);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2c>
 800d5ac:	f00a fb0a 	bl	8017bc4 <abort>
  size_t offset = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
  for (int idx = 0; idx < num_dims; ++idx) {
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61bb      	str	r3, [r7, #24]
 800d5b8:	e032      	b.n	800d620 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x9c>
    bool is_axis = false;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75fb      	strb	r3, [r7, #23]
    if (axis != nullptr) {
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d014      	beq.n	800d5ee <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x6a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	613b      	str	r3, [r7, #16]
 800d5c8:	e00d      	b.n	800d5e6 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x62>
        if (idx == axis[axis_idx]) {
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5d0:	4413      	add	r3, r2
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d102      	bne.n	800d5e0 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x5c>
          is_axis = true;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d5de:	e006      	b.n	800d5ee <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x6a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	613b      	str	r3, [r7, #16]
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	dbed      	blt.n	800d5ca <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x46>
    if (!is_axis) {
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	f083 0301 	eor.w	r3, r3, #1
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00f      	beq.n	800d61a <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x96>
      offset = offset * static_cast<size_t>(dims[idx]) +
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	4413      	add	r3, r2
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	461a      	mov	r2, r3
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	fb02 f303 	mul.w	r3, r2, r3
               static_cast<size_t>(index[idx]);
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	0092      	lsls	r2, r2, #2
 800d610:	6879      	ldr	r1, [r7, #4]
 800d612:	440a      	add	r2, r1
 800d614:	6812      	ldr	r2, [r2, #0]
      offset = offset * static_cast<size_t>(dims[idx]) +
 800d616:	4413      	add	r3, r2
 800d618:	61fb      	str	r3, [r7, #28]
  for (int idx = 0; idx < num_dims; ++idx) {
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	3301      	adds	r3, #1
 800d61e:	61bb      	str	r3, [r7, #24]
 800d620:	69ba      	ldr	r2, [r7, #24]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	429a      	cmp	r2, r3
 800d626:	dbc8      	blt.n	800d5ba <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x36>
  return offset;
 800d628:	69fb      	ldr	r3, [r7, #28]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3720      	adds	r7, #32
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>:

// This method parses the input 'axis' to remove duplicates and handle negative
// values, and returns a valid 'out_axis'
inline bool ResolveAxis(const int num_dims, const int* axis,
                        const int64_t num_axis, int* out_axis,
                        int* out_num_axis) {
 800d632:	b5b0      	push	{r4, r5, r7, lr}
 800d634:	b08a      	sub	sp, #40	; 0x28
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	e9c7 2300 	strd	r2, r3, [r7]
  *out_num_axis = 0;  // Just in case.
 800d640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
  // Short-circuit axis resolution for scalars; the axis will go unused.
  if (num_dims == 0) {
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x1e>
    return true;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e05e      	b.n	800d70e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0xdc>
  }
  // o(n^2) is fine since out_num_axis should be really small, mostly <= 4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800d650:	f04f 0200 	mov.w	r2, #0
 800d654:	f04f 0300 	mov.w	r3, #0
 800d658:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800d65c:	e04e      	b.n	800d6fc <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0xca>
    // Handle negative index. A positive index 'p_idx' can be represented as a
    // negative index 'n_idx' as: n_idx = p_idx-num_dims
    // eg: For num_dims=3, [0, 1, 2] is the same as [-3, -2, -1]  */
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	4413      	add	r3, r2
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	da07      	bge.n	800d67c <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x4a>
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	4413      	add	r3, r2
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	e004      	b.n	800d686 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x54>
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	4413      	add	r3, r2
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	617b      	str	r3, [r7, #20]
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	db03      	blt.n	800d696 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x64>
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	429a      	cmp	r2, r3
 800d694:	db01      	blt.n	800d69a <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x68>
 800d696:	f00a fa95 	bl	8017bc4 <abort>
    bool is_dup = false;
 800d69a:	2300      	movs	r3, #0
 800d69c:	77fb      	strb	r3, [r7, #31]
    for (int j = 0; j < *out_num_axis; ++j) {
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	e00d      	b.n	800d6c0 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x8e>
      if (out_axis[j] == current) {
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6aa:	4413      	add	r3, r2
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d102      	bne.n	800d6ba <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x88>
        is_dup = true;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	77fb      	strb	r3, [r7, #31]
        break;
 800d6b8:	e007      	b.n	800d6ca <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x98>
    for (int j = 0; j < *out_num_axis; ++j) {
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	61bb      	str	r3, [r7, #24]
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	69ba      	ldr	r2, [r7, #24]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	dbec      	blt.n	800d6a4 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x72>
      }
    }
    if (!is_dup) {
 800d6ca:	7ffb      	ldrb	r3, [r7, #31]
 800d6cc:	f083 0301 	eor.w	r3, r3, #1
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0xbc>
      out_axis[*out_num_axis] = current;
 800d6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6de:	4413      	add	r3, r2
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	601a      	str	r2, [r3, #0]
      *out_num_axis += 1;
 800d6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	1c5a      	adds	r2, r3, #1
 800d6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ec:	601a      	str	r2, [r3, #0]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800d6ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6f2:	1c54      	adds	r4, r2, #1
 800d6f4:	f143 0500 	adc.w	r5, r3, #0
 800d6f8:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800d6fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d704:	4290      	cmp	r0, r2
 800d706:	eb71 0303 	sbcs.w	r3, r1, r3
 800d70a:	dba8      	blt.n	800d65e <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_+0x2c>
    }
  }
  return true;
 800d70c:	2301      	movs	r3, #1
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3728      	adds	r7, #40	; 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d718 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>:
inline void Mean(const tflite::MeanParams& op_params,
                 const RuntimeShape& unextended_input_shape,
                 const uint8_t* input_data, int32 input_zero_point,
                 float input_scale, const RuntimeShape& unextended_output_shape,
                 uint8_t* output_data, int32 output_zero_point,
                 float output_scale) {
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b0a9      	sub	sp, #164	; 0xa4
 800d71c:	af02      	add	r7, sp, #8
 800d71e:	6178      	str	r0, [r7, #20]
 800d720:	6139      	str	r1, [r7, #16]
 800d722:	60fa      	str	r2, [r7, #12]
 800d724:	60bb      	str	r3, [r7, #8]
 800d726:	ed87 0a01 	vstr	s0, [r7, #4]
 800d72a:	edc7 0a00 	vstr	s1, [r7]
  ruy::profiler::ScopeLabel label("Mean4D/Uint8");
 800d72e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d732:	49a5      	ldr	r1, [pc, #660]	; (800d9c8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2b0>)
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff f909 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 800d73a:	6938      	ldr	r0, [r7, #16]
 800d73c:	f7fa fcd3 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d740:	4603      	mov	r3, r0
 800d742:	2b04      	cmp	r3, #4
 800d744:	d001      	beq.n	800d74a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32>
 800d746:	f00a fa3d 	bl	8017bc4 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 800d74a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800d74e:	f7fa fcca 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d752:	4603      	mov	r3, r0
 800d754:	2b04      	cmp	r3, #4
 800d756:	dd01      	ble.n	800d75c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x44>
 800d758:	f00a fa34 	bl	8017bc4 <abort>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
 800d75c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	2104      	movs	r1, #4
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe fae7 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
 800d76a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d76e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d772:	2104      	movs	r1, #4
 800d774:	4618      	mov	r0, r3
 800d776:	f7fe fadf 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const int output_batch = output_shape.Dims(0);
 800d77a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d77e:	2100      	movs	r1, #0
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe f927 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d786:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int output_height = output_shape.Dims(1);
 800d78a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d78e:	2101      	movs	r1, #1
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe f91f 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d796:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  const int output_width = output_shape.Dims(2);
 800d79a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d79e:	2102      	movs	r1, #2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe f917 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d7a6:	67f8      	str	r0, [r7, #124]	; 0x7c
  const int output_depth = output_shape.Dims(3);
 800d7a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7ac:	2103      	movs	r1, #3
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe f910 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d7b4:	67b8      	str	r0, [r7, #120]	; 0x78
  const int input_height = input_shape.Dims(1);
 800d7b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe f909 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d7c2:	6778      	str	r0, [r7, #116]	; 0x74
  const int input_width = input_shape.Dims(2);
 800d7c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe f902 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d7d0:	6738      	str	r0, [r7, #112]	; 0x70
  const float num_elements_in_axis = input_width * input_height;
 800d7d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d7d6:	fb02 f303 	mul.w	r3, r2, r3
 800d7da:	ee07 3a90 	vmov	s15, r3
 800d7de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7e2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	f993 3000 	ldrsb.w	r3, [r3]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d001      	beq.n	800d7f4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0xdc>
 800d7f0:	f00a f9e8 	bl	8017bc4 <abort>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d104      	bne.n	800d808 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0xf0>
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d804:	2b02      	cmp	r3, #2
 800d806:	d00b      	beq.n	800d820 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x108>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d104      	bne.n	800d81c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x104>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d001      	beq.n	800d820 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x108>
 800d81c:	f00a f9d2 	bl	8017bc4 <abort>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 800d820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d824:	2b01      	cmp	r3, #1
 800d826:	d001      	beq.n	800d82c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x114>
 800d828:	f00a f9cc 	bl	8017bc4 <abort>
  TFLITE_CHECK_EQ(output_width, 1);
 800d82c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d001      	beq.n	800d836 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x11e>
 800d832:	f00a f9c7 	bl	8017bc4 <abort>

  constexpr int32_t kMinValue = std::numeric_limits<uint8_t>::min();
 800d836:	2300      	movs	r3, #0
 800d838:	62bb      	str	r3, [r7, #40]	; 0x28
  constexpr int32_t kMaxValue = std::numeric_limits<uint8_t>::max();
 800d83a:	23ff      	movs	r3, #255	; 0xff
 800d83c:	627b      	str	r3, [r7, #36]	; 0x24

  int32 bias =
      output_zero_point -
      static_cast<int32>(input_zero_point * input_scale / output_scale);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	ee07 3a90 	vmov	s15, r3
 800d844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d848:	edd7 7a01 	vldr	s15, [r7, #4]
 800d84c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d850:	ed97 7a00 	vldr	s14, [r7]
 800d854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d85c:	ee17 2a90 	vmov	r2, s15
  int32 bias =
 800d860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d864:	1a9b      	subs	r3, r3, r2
 800d866:	66bb      	str	r3, [r7, #104]	; 0x68
  double real_scale =
      static_cast<double>(input_scale / (num_elements_in_axis * output_scale));
 800d868:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800d86c:	edd7 7a00 	vldr	s15, [r7]
 800d870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d874:	ed97 7a01 	vldr	s14, [r7, #4]
 800d878:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_scale =
 800d87c:	ee16 0a90 	vmov	r0, s13
 800d880:	f7f2 fe6a 	bl	8000558 <__aeabi_f2d>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

  int32_t multiplier;
  int shift;
  QuantizeMultiplier(real_scale, &multiplier, &shift);
 800d88c:	f107 021c 	add.w	r2, r7, #28
 800d890:	f107 0320 	add.w	r3, r7, #32
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800d89c:	f7f9 fda0 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8a6:	e077      	b.n	800d998 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x280>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8ae:	e069      	b.n	800d984 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x26c>
      int32 acc = 0;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61bb      	str	r3, [r7, #24]
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8ba:	e028      	b.n	800d90e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1f6>
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d8c2:	e01a      	b.n	800d8fa <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1e2>
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 800d8c4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800d8c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d8d6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d8da:	f7fe fa84 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	61bb      	str	r3, [r7, #24]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800d8f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d8fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d900:	429a      	cmp	r2, r3
 800d902:	dbdf      	blt.n	800d8c4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1ac>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800d904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d908:	3301      	adds	r3, #1
 800d90a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d90e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d914:	429a      	cmp	r2, r3
 800d916:	dbd1      	blt.n	800d8bc <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1a4>
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	6a39      	ldr	r1, [r7, #32]
 800d91c:	69fa      	ldr	r2, [r7, #28]
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fbc7 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800d924:	4603      	mov	r3, r0
 800d926:	61bb      	str	r3, [r7, #24]
      acc += bias;
 800d928:	69ba      	ldr	r2, [r7, #24]
 800d92a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d92c:	4413      	add	r3, r2
 800d92e:	61bb      	str	r3, [r7, #24]
      acc = std::min(std::max(acc, kMinValue), kMaxValue);
 800d930:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d934:	f107 0318 	add.w	r3, r7, #24
 800d938:	4611      	mov	r1, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fa fb56 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 800d940:	4602      	mov	r2, r0
 800d942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d946:	4619      	mov	r1, r3
 800d948:	4610      	mov	r0, r2
 800d94a:	f7fa fb63 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 800d94e:	4603      	mov	r3, r0
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	61bb      	str	r3, [r7, #24]
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 800d954:	69bc      	ldr	r4, [r7, #24]
 800d956:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d95a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2300      	movs	r3, #0
 800d962:	2200      	movs	r2, #0
 800d964:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d968:	f7fe fa3d 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d974:	4413      	add	r3, r2
 800d976:	b2e2      	uxtb	r2, r4
 800d978:	701a      	strb	r2, [r3, #0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800d97a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d97e:	3301      	adds	r3, #1
 800d980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d984:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d98a:	429a      	cmp	r2, r3
 800d98c:	db90      	blt.n	800d8b0 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x198>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800d98e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d992:	3301      	adds	r3, #1
 800d994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d998:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d99c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	db81      	blt.n	800d8a8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x190>
          static_cast<uint8_t>(acc);
    }
  }
}
 800d9a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fa fb86 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800d9ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fa fb81 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800d9b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe fb9c 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800d9c2:	379c      	adds	r7, #156	; 0x9c
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd90      	pop	{r4, r7, pc}
 800d9c8:	0801d958 	.word	0x0801d958

0800d9cc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal>:

inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
                 int32_t shift, const RuntimeShape& unextended_input_shape,
                 const int8_t* input_data, int32 input_zero_point,
                 const RuntimeShape& unextended_output_shape,
                 int8_t* output_data, int32 output_zero_point) {
 800d9cc:	b590      	push	{r4, r7, lr}
 800d9ce:	b09f      	sub	sp, #124	; 0x7c
 800d9d0:	af02      	add	r7, sp, #8
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]
  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 800d9da:	6838      	ldr	r0, [r7, #0]
 800d9dc:	f7fa fb83 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b04      	cmp	r3, #4
 800d9e4:	d001      	beq.n	800d9ea <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x1e>
 800d9e6:	f00a f8ed 	bl	8017bc4 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 800d9ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800d9ee:	f7fa fb7a 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b04      	cmp	r3, #4
 800d9f6:	dd01      	ble.n	800d9fc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x30>
 800d9f8:	f00a f8e4 	bl	8017bc4 <abort>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
 800d9fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	2104      	movs	r1, #4
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe f997 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
 800da0a:	f107 0314 	add.w	r3, r7, #20
 800da0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800da12:	2104      	movs	r1, #4
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe f98f 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const int output_batch = output_shape.Dims(0);
 800da1a:	f107 0314 	add.w	r3, r7, #20
 800da1e:	2100      	movs	r1, #0
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd ffd7 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da26:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 800da28:	f107 0314 	add.w	r3, r7, #20
 800da2c:	2101      	movs	r1, #1
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fd ffd0 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da34:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 800da36:	f107 0314 	add.w	r3, r7, #20
 800da3a:	2102      	movs	r1, #2
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fd ffc9 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da42:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = output_shape.Dims(3);
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	2103      	movs	r1, #3
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fd ffc2 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da50:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_height = input_shape.Dims(1);
 800da52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da56:	2101      	movs	r1, #1
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fd ffbb 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da5e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800da60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da64:	2102      	movs	r1, #2
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd ffb4 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da6c:	64b8      	str	r0, [r7, #72]	; 0x48
  const int num_elements_in_axis = input_width * input_height;
 800da6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da72:	fb02 f303 	mul.w	r3, r2, r3
 800da76:	647b      	str	r3, [r7, #68]	; 0x44

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f993 3000 	ldrsb.w	r3, [r3]
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d001      	beq.n	800da86 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xba>
 800da82:	f00a f89f 	bl	8017bc4 <abort>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d104      	bne.n	800da9a <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xce>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d00b      	beq.n	800dab2 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xe6>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d104      	bne.n	800daae <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xe2>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d001      	beq.n	800dab2 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xe6>
 800daae:	f00a f889 	bl	8017bc4 <abort>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 800dab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d001      	beq.n	800dabc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xf0>
 800dab8:	f00a f884 	bl	8017bc4 <abort>
  TFLITE_CHECK_EQ(output_width, 1);
 800dabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d001      	beq.n	800dac6 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0xfa>
 800dac2:	f00a f87f 	bl	8017bc4 <abort>

  static constexpr int32_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int32_t kMaxInt8 = std::numeric_limits<int8_t>::max();

  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800dac6:	2300      	movs	r3, #0
 800dac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800daca:	e07f      	b.n	800dbcc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x200>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800dacc:	2300      	movs	r3, #0
 800dace:	66bb      	str	r3, [r7, #104]	; 0x68
 800dad0:	e075      	b.n	800dbbe <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x1f2>
      int32 acc = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	613b      	str	r3, [r7, #16]
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800dad6:	2300      	movs	r3, #0
 800dad8:	667b      	str	r3, [r7, #100]	; 0x64
 800dada:	e023      	b.n	800db24 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x158>
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800dadc:	2300      	movs	r3, #0
 800dade:	663b      	str	r3, [r7, #96]	; 0x60
 800dae0:	e019      	b.n	800db16 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x14a>
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 800dae2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800dae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800daee:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800daf0:	f7fe f979 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461a      	mov	r2, r3
 800daf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dafc:	4413      	add	r3, r2
 800dafe:	f993 3000 	ldrsb.w	r3, [r3]
 800db02:	461a      	mov	r2, r3
 800db04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db08:	1ad2      	subs	r2, r2, r3
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	4413      	add	r3, r2
 800db0e:	613b      	str	r3, [r7, #16]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800db10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db12:	3301      	adds	r3, #1
 800db14:	663b      	str	r3, [r7, #96]	; 0x60
 800db16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1a:	429a      	cmp	r2, r3
 800db1c:	dbe1      	blt.n	800dae2 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x116>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800db1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db20:	3301      	adds	r3, #1
 800db22:	667b      	str	r3, [r7, #100]	; 0x64
 800db24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db28:	429a      	cmp	r2, r3
 800db2a:	dbd7      	blt.n	800dadc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x110>
                 input_zero_point;
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe fabd 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800db38:	4603      	mov	r3, r0
 800db3a:	613b      	str	r3, [r7, #16]
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd0a      	ble.n	800db58 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x18c>
 800db42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db44:	0fda      	lsrs	r2, r3, #31
 800db46:	4413      	add	r3, r2
 800db48:	105b      	asrs	r3, r3, #1
 800db4a:	461a      	mov	r2, r3
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	441a      	add	r2, r3
 800db50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db52:	fb92 f3f3 	sdiv	r3, r2, r3
 800db56:	e00a      	b.n	800db6e <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x1a2>
                    : (acc - num_elements_in_axis / 2) / num_elements_in_axis;
 800db58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db5a:	0fda      	lsrs	r2, r3, #31
 800db5c:	4413      	add	r3, r2
 800db5e:	105b      	asrs	r3, r3, #1
 800db60:	425b      	negs	r3, r3
 800db62:	461a      	mov	r2, r3
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	441a      	add	r2, r3
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 800db68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db6a:	fb92 f3f3 	sdiv	r3, r2, r3
 800db6e:	613b      	str	r3, [r7, #16]
      acc += output_zero_point;
 800db70:	693a      	ldr	r2, [r7, #16]
 800db72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db76:	4413      	add	r3, r2
 800db78:	613b      	str	r3, [r7, #16]
      acc = std::min(std::max(acc, kMinInt8), kMaxInt8);
 800db7a:	f107 0310 	add.w	r3, r7, #16
 800db7e:	491c      	ldr	r1, [pc, #112]	; (800dbf0 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x224>)
 800db80:	4618      	mov	r0, r3
 800db82:	f7fa fa33 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 800db86:	4603      	mov	r3, r0
 800db88:	491a      	ldr	r1, [pc, #104]	; (800dbf4 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x228>)
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fa fa42 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 800db90:	4603      	mov	r3, r0
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	613b      	str	r3, [r7, #16]
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 800db96:	693c      	ldr	r4, [r7, #16]
 800db98:	f107 0014 	add.w	r0, r7, #20
 800db9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	2300      	movs	r3, #0
 800dba2:	2200      	movs	r2, #0
 800dba4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dba6:	f7fe f91e 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	461a      	mov	r2, r3
 800dbae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbb2:	4413      	add	r3, r2
 800dbb4:	b262      	sxtb	r2, r4
 800dbb6:	701a      	strb	r2, [r3, #0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800dbb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbba:	3301      	adds	r3, #1
 800dbbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	db85      	blt.n	800dad2 <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x106>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800dbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc8:	3301      	adds	r3, #1
 800dbca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dbcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	f6ff af7b 	blt.w	800dacc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal+0x100>
          static_cast<int8_t>(acc);
    }
  }
}
 800dbd6:	f107 0314 	add.w	r3, r7, #20
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fa fa6d 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800dbe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fa fa68 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800dbea:	3774      	adds	r7, #116	; 0x74
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd90      	pop	{r4, r7, pc}
 800dbf0:	0801fd1c 	.word	0x0801fd1c
 800dbf4:	0801fd20 	.word	0x0801fd20

0800dbf8 <_ZN6tflite3ops5micro6reduce8InitMeanEP13TfLiteContextPKcj>:
  int32_t multiplier;
  int shift;
  int temp_buffer_idx;
};

void* InitMean(TfLiteContext* context, const char* buffer, size_t length) {
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
  void* raw;
  context->AllocatePersistentBuffer(context, sizeof(OpData), &raw);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	f107 0214 	add.w	r2, r7, #20
 800dc0c:	210c      	movs	r1, #12
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	4798      	blx	r3
  return raw;
 800dc12:	697b      	ldr	r3, [r7, #20]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
 800dc1c:	b5b0      	push	{r4, r5, r7, lr}
 800dc1e:	b088      	sub	sp, #32
 800dc20:	af04      	add	r7, sp, #16
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d012      	beq.n	800dc56 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x3a>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	695c      	ldr	r4, [r3, #20]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	9203      	str	r2, [sp, #12]
 800dc3e:	9302      	str	r3, [sp, #8]
 800dc40:	4b25      	ldr	r3, [pc, #148]	; (800dcd8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xbc>)
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	4b25      	ldr	r3, [pc, #148]	; (800dcdc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc0>)
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	2337      	movs	r3, #55	; 0x37
 800dc4a:	4a25      	ldr	r2, [pc, #148]	; (800dce0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc4>)
 800dc4c:	4925      	ldr	r1, [pc, #148]	; (800dce4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc8>)
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	47a0      	blx	r4
 800dc52:	2301      	movs	r3, #1
 800dc54:	e03b      	b.n	800dcce <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d012      	beq.n	800dc86 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x6a>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	695c      	ldr	r4, [r3, #20]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	9203      	str	r2, [sp, #12]
 800dc6e:	9302      	str	r3, [sp, #8]
 800dc70:	4b1d      	ldr	r3, [pc, #116]	; (800dce8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xcc>)
 800dc72:	9301      	str	r3, [sp, #4]
 800dc74:	4b1d      	ldr	r3, [pc, #116]	; (800dcec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xd0>)
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	2338      	movs	r3, #56	; 0x38
 800dc7a:	4a19      	ldr	r2, [pc, #100]	; (800dce0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc4>)
 800dc7c:	4919      	ldr	r1, [pc, #100]	; (800dce4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc8>)
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	47a0      	blx	r4
 800dc82:	2301      	movs	r3, #1
 800dc84:	e023      	b.n	800dcce <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xb2>

  // Validate axis type
  const TfLiteTensor* axis = GetInput(context, node, 1);
 800dc86:	2201      	movs	r2, #1
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7fd fe43 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800dc90:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d018      	beq.n	800dccc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xb0>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	695c      	ldr	r4, [r3, #20]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7f7 f872 	bl	8004d8c <TfLiteTypeGetName>
 800dca8:	4605      	mov	r5, r0
 800dcaa:	2002      	movs	r0, #2
 800dcac:	f7f7 f86e 	bl	8004d8c <TfLiteTypeGetName>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	9303      	str	r3, [sp, #12]
 800dcb4:	9502      	str	r5, [sp, #8]
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xd4>)
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	4b0e      	ldr	r3, [pc, #56]	; (800dcf4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xd8>)
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	233c      	movs	r3, #60	; 0x3c
 800dcc0:	4a07      	ldr	r2, [pc, #28]	; (800dce0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc4>)
 800dcc2:	490d      	ldr	r1, [pc, #52]	; (800dcf8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xdc>)
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	47a0      	blx	r4
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e000      	b.n	800dcce <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xb2>
  return kTfLiteOk;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801da34 	.word	0x0801da34
 800dcdc:	0801da38 	.word	0x0801da38
 800dce0:	0801d970 	.word	0x0801d970
 800dce4:	0801da18 	.word	0x0801da18
 800dce8:	0801da4c 	.word	0x0801da4c
 800dcec:	0801da50 	.word	0x0801da50
 800dcf0:	0801da80 	.word	0x0801da80
 800dcf4:	0801da90 	.word	0x0801da90
 800dcf8:	0801da64 	.word	0x0801da64

0800dcfc <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
 800dcfc:	b5b0      	push	{r4, r5, r7, lr}
 800dcfe:	b08a      	sub	sp, #40	; 0x28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, 0);
 800dd06:	2200      	movs	r2, #0
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7fd fe03 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800dd10:	6278      	str	r0, [r7, #36]	; 0x24
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	623b      	str	r3, [r7, #32]
  const TfLiteTensor* output = GetOutput(context, node, 0);
 800dd18:	2200      	movs	r2, #0
 800dd1a:	6839      	ldr	r1, [r7, #0]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7fd fe10 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800dd22:	61f8      	str	r0, [r7, #28]
  if (input->type == kTfLiteInt8) {
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d11e      	bne.n	800dd6a <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x6e>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7f2 fc11 	bl	8000558 <__aeabi_f2d>
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
                                   static_cast<double>(output->params.scale);
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f2 fc0a 	bl	8000558 <__aeabi_f2d>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
    const double real_multiplier = static_cast<double>(input->params.scale) /
 800dd48:	4620      	mov	r0, r4
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	f7f2 fd86 	bl	800085c <__aeabi_ddiv>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 800dd58:	6a3a      	ldr	r2, [r7, #32]
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4610      	mov	r0, r2
 800dd62:	ed97 0b04 	vldr	d0, [r7, #16]
 800dd66:	f7f9 fb3b 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  }

  int output_size = NumElements(output);
 800dd6a:	69f8      	ldr	r0, [r7, #28]
 800dd6c:	f7f9 fd90 	bl	8007890 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4613      	mov	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b09      	cmp	r3, #9
 800dd7e:	d003      	beq.n	800dd88 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x8c>
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d107      	bne.n	800dd98 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x9c>
    context->RequestScratchBufferInArena(context, output_size * sizeof(int32_t),
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	0091      	lsls	r1, r2, #2
 800dd90:	6a3a      	ldr	r2, [r7, #32]
 800dd92:	3208      	adds	r2, #8
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	4798      	blx	r3
                                         &op_data->temp_buffer_idx);
  }

  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff ff3e 	bl	800dc1c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
 800dda0:	4603      	mov	r3, r0
 800dda2:	72fb      	strb	r3, [r7, #11]
 800dda4:	7afb      	ldrb	r3, [r7, #11]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0xb2>
 800ddaa:	7afb      	ldrb	r3, [r7, #11]
 800ddac:	e000      	b.n	800ddb0 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0xb4>
  // TODO(b/144955155): Support uint8(b/144955155) and int8(b/144955018)
  return kTfLiteOk;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3728      	adds	r7, #40	; 0x28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bdb0      	pop	{r4, r5, r7, pc}

0800ddb8 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>:

void ResolveAxis(const int* axis_data, int axis_count,
                 tflite::MeanParams* op_params) {
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
  int i = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	617b      	str	r3, [r7, #20]
  for (; i < axis_count; ++i) {
 800ddc8:	e00e      	b.n	800dde8 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x30>
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	b219      	sxth	r1, r3
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	4413      	add	r3, r2
 800ddde:	460a      	mov	r2, r1
 800dde0:	805a      	strh	r2, [r3, #2]
  for (; i < axis_count; ++i) {
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	3301      	adds	r3, #1
 800dde6:	617b      	str	r3, [r7, #20]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	dbec      	blt.n	800ddca <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x12>
  }
  for (; i < 4; ++i) {
 800ddf0:	e008      	b.n	800de04 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x4c>
    op_params->axis[i] = 1;
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	4413      	add	r3, r2
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	805a      	strh	r2, [r3, #2]
  for (; i < 4; ++i) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	3301      	adds	r3, #1
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b03      	cmp	r3, #3
 800de08:	ddf3      	ble.n	800ddf2 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x3a>
  }
  op_params->axis_count = axis_count;
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	b25a      	sxtb	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	701a      	strb	r2, [r3, #0]
}
 800de12:	bf00      	nop
 800de14:	371c      	adds	r7, #28
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
	...

0800de20 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	ed2d 8b02 	vpush	{d8}
 800de28:	b0ca      	sub	sp, #296	; 0x128
 800de2a:	af0c      	add	r7, sp, #48	; 0x30
 800de2c:	6178      	str	r0, [r7, #20]
 800de2e:	6139      	str	r1, [r7, #16]
  const TfLiteTensor* input = GetInput(context, node, 0);
 800de30:	2200      	movs	r2, #0
 800de32:	6939      	ldr	r1, [r7, #16]
 800de34:	6978      	ldr	r0, [r7, #20]
 800de36:	f7fd fd6e 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800de3a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  const TfLiteTensor* axis = GetInput(context, node, 1);
 800de3e:	2201      	movs	r2, #1
 800de40:	6939      	ldr	r1, [r7, #16]
 800de42:	6978      	ldr	r0, [r7, #20]
 800de44:	f7fd fd67 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800de48:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
  TfLiteTensor* output = GetOutput(context, node, 0);
 800de4c:	2200      	movs	r2, #0
 800de4e:	6939      	ldr	r1, [r7, #16]
 800de50:	6978      	ldr	r0, [r7, #20]
 800de52:	f7fd fd76 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800de56:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TfLiteReducerParams* params =
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      reinterpret_cast<TfLiteReducerParams*>(node->builtin_data);
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  int num_axis = static_cast<int>(NumElements(axis));
 800de6a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800de6e:	f7f9 fd0f 	bl	8007890 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4613      	mov	r3, r2
 800de78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int temp_index[kMaxNumberOfAxis];
  int resolved_axis[kMaxNumberOfReducedAxis];

  tflite::MeanParams op_params;
  ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
 800de7c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800de80:	f000 fb42 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800de84:	f107 0318 	add.w	r3, r7, #24
 800de88:	461a      	mov	r2, r3
 800de8a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800de8e:	f7ff ff93 	bl	800ddb8 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>
  // TODO(b/146571391): Support only 4D Input and 2D Axis for Mean until
  // scratch tensor allocation has been implemented in (b/132070898)
  bool is_valid_inputs =
      (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
 800de92:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800de96:	f7f9 fca8 	bl	80077ea <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b04      	cmp	r3, #4
 800de9e:	d115      	bne.n	800decc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xac>
 800dea0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d111      	bne.n	800decc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xac>
       ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800dea8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
      (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
 800deac:	2b01      	cmp	r3, #1
 800deae:	d103      	bne.n	800deb8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x98>
       ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800deb0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d007      	beq.n	800dec8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
        (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
 800deb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
       ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800debc:	2b02      	cmp	r3, #2
 800debe:	d105      	bne.n	800decc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xac>
        (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
 800dec0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d101      	bne.n	800decc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xac>
      (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
 800dec8:	2301      	movs	r3, #1
 800deca:	e000      	b.n	800dece <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae>
 800decc:	2300      	movs	r3, #0
        (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
 800dece:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  TF_LITE_ENSURE_MSG(
 800ded2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d006      	beq.n	800dee8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc8>
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	49a2      	ldr	r1, [pc, #648]	; (800e168 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x348>)
 800dee0:	6978      	ldr	r0, [r7, #20]
 800dee2:	4798      	blx	r3
 800dee4:	2301      	movs	r3, #1
 800dee6:	e2e5      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
      context, is_valid_inputs == true,
      "Number of Input "
      "dimensions != 4 OR the Axis is not either [1, 2] or [2, 1]");
  switch (input->type) {
 800dee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b09      	cmp	r3, #9
 800def0:	f000 808b 	beq.w	800e00a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1ea>
 800def4:	2b09      	cmp	r3, #9
 800def6:	f300 82d0 	bgt.w	800e49a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x67a>
 800defa:	2b01      	cmp	r3, #1
 800defc:	d003      	beq.n	800df06 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe6>
 800defe:	2b03      	cmp	r3, #3
 800df00:	f000 81ac 	beq.w	800e25c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x43c>
 800df04:	e2c9      	b.n	800e49a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x67a>
    case kTfLiteFloat32: {
      // TODO(b/139102329): Handle the below special case in the combined
      // reference method.
      // Defer to specialized implementation for 4D Mean across axes 1 & 2.
      if (params->keep_dims) {
 800df06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d02c      	beq.n	800df6a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14a>
        reference_ops::Mean(op_params, GetTensorShape(input),
 800df10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df14:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fa f948 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800df1e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800df22:	f7fd fde7 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800df26:	4604      	mov	r4, r0
                            GetTensorData<float>(input), GetTensorShape(output),
 800df28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df2c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800df30:	4618      	mov	r0, r3
 800df32:	f7fa f93c 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Mean(op_params, GetTensorShape(input),
 800df36:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800df3a:	f7fd fdec 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800df3e:	4602      	mov	r2, r0
 800df40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df44:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800df48:	f107 0018 	add.w	r0, r7, #24
 800df4c:	9200      	str	r2, [sp, #0]
 800df4e:	4622      	mov	r2, r4
 800df50:	f000 faec 	bl	800e52c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                            GetTensorData<float>(input), GetTensorShape(output),
 800df54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fa f8ae 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Mean(op_params, GetTensorShape(input),
 800df5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df62:	4618      	mov	r0, r3
 800df64:	f7fa f8a9 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                                output->dims->data, output->dims->size,
                                GetTensorData<int>(axis), num_axis,
                                params->keep_dims, temp_index, resolved_axis,
                                GetTensorData<float>(output)));
      }
    } break;
 800df68:	e29e      	b.n	800e4a8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x688>
        TF_LITE_ENSURE(
 800df6a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800df6e:	f7fd fdc1 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800df72:	4681      	mov	r9, r0
 800df74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	f103 0804 	add.w	r8, r3, #4
 800df7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800df8c:	f7fd fdc3 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800df90:	4682      	mov	sl, r0
 800df92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	1d1c      	adds	r4, r3, #4
 800df9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	681d      	ldr	r5, [r3, #0]
 800dfa2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800dfa6:	f000 faaf 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800dfaa:	60b8      	str	r0, [r7, #8]
 800dfac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dfb0:	781e      	ldrb	r6, [r3, #0]
 800dfb2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800dfb6:	f7fd fdae 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	9307      	str	r3, [sp, #28]
 800dfbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfc2:	9306      	str	r3, [sp, #24]
 800dfc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfc8:	9305      	str	r3, [sp, #20]
 800dfca:	9604      	str	r6, [sp, #16]
 800dfcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfd0:	9303      	str	r3, [sp, #12]
 800dfd2:	68b9      	ldr	r1, [r7, #8]
 800dfd4:	9102      	str	r1, [sp, #8]
 800dfd6:	9501      	str	r5, [sp, #4]
 800dfd8:	9400      	str	r4, [sp, #0]
 800dfda:	4653      	mov	r3, sl
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	4641      	mov	r1, r8
 800dfe0:	4648      	mov	r0, r9
 800dfe2:	f000 fb93 	bl	800e70c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	f083 0301 	eor.w	r3, r3, #1
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 825a 	beq.w	800e4a8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x688>
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	695c      	ldr	r4, [r3, #20]
 800dff8:	4b5c      	ldr	r3, [pc, #368]	; (800e16c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x34c>)
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	2383      	movs	r3, #131	; 0x83
 800dffe:	4a5c      	ldr	r2, [pc, #368]	; (800e170 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x350>)
 800e000:	495c      	ldr	r1, [pc, #368]	; (800e174 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x354>)
 800e002:	6978      	ldr	r0, [r7, #20]
 800e004:	47a0      	blx	r4
 800e006:	2301      	movs	r3, #1
 800e008:	e254      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
    case kTfLiteInt8: {
      if (params->keep_dims) {
 800e00a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d03f      	beq.n	800e094 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x274>
        reference_integer_ops::Mean(
 800e014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e018:	681d      	ldr	r5, [r3, #0]
            op_params, op_data->multiplier, op_data->shift,
 800e01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e01e:	685e      	ldr	r6, [r3, #4]
            GetTensorShape(input), GetTensorData<int8_t>(input),
 800e020:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e024:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fa f8c0 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_integer_ops::Mean(
 800e02e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e032:	f7fd fd81 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800e036:	60f8      	str	r0, [r7, #12]
            input->params.zero_point, GetTensorShape(output),
 800e038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e03c:	691c      	ldr	r4, [r3, #16]
 800e03e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e042:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e046:	4618      	mov	r0, r3
 800e048:	f7fa f8b1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_integer_ops::Mean(
 800e04c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e050:	f7fd fd83 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800e054:	4601      	mov	r1, r0
 800e056:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800e060:	f107 0018 	add.w	r0, r7, #24
 800e064:	9304      	str	r3, [sp, #16]
 800e066:	9103      	str	r1, [sp, #12]
 800e068:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e06c:	9302      	str	r3, [sp, #8]
 800e06e:	9401      	str	r4, [sp, #4]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	4613      	mov	r3, r2
 800e076:	4632      	mov	r2, r6
 800e078:	4629      	mov	r1, r5
 800e07a:	f7ff fca7 	bl	800d9cc <_ZN6tflite21reference_integer_ops4MeanERKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKalS6_Pal>
            input->params.zero_point, GetTensorShape(output),
 800e07e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e082:	4618      	mov	r0, r3
 800e084:	f7fa f819 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorShape(input), GetTensorData<int8_t>(input),
 800e088:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fa f814 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                GetTensorData<int8_t>(output), output->params.zero_point,
                output->params.scale, output->dims->data, output->dims->size,
                GetTensorData<int>(axis), num_axis, params->keep_dims,
                temp_index, resolved_axis, temp_buffer, false));
      }
    } break;
 800e092:	e20b      	b.n	800e4ac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x68c>
      } else if (input->params.zero_point == output->params.zero_point &&
 800e094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d16b      	bne.n	800e17c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35c>
                 input->params.scale == output->params.scale) {
 800e0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0a8:	ed93 7a03 	vldr	s14, [r3, #12]
 800e0ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0b0:	edd3 7a03 	vldr	s15, [r3, #12]
      } else if (input->params.zero_point == output->params.zero_point &&
 800e0b4:	eeb4 7a67 	vcmp.f32	s14, s15
 800e0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0bc:	d15e      	bne.n	800e17c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35c>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e0c6:	6892      	ldr	r2, [r2, #8]
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	6978      	ldr	r0, [r7, #20]
 800e0cc:	4798      	blx	r3
 800e0ce:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        TF_LITE_ENSURE(
 800e0d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e0d6:	f7fd fd2f 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800e0da:	4680      	mov	r8, r0
 800e0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	1d1e      	adds	r6, r3, #4
 800e0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]
 800e0ee:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e0f2:	f7fd fd32 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800e0f6:	4681      	mov	r9, r0
 800e0f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	1d1c      	adds	r4, r3, #4
 800e100:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	681d      	ldr	r5, [r3, #0]
 800e108:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e10c:	f000 f9fc 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800e110:	4601      	mov	r1, r0
 800e112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e11c:	9207      	str	r2, [sp, #28]
 800e11e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e122:	9206      	str	r2, [sp, #24]
 800e124:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e128:	9205      	str	r2, [sp, #20]
 800e12a:	9304      	str	r3, [sp, #16]
 800e12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e130:	9303      	str	r3, [sp, #12]
 800e132:	9102      	str	r1, [sp, #8]
 800e134:	9501      	str	r5, [sp, #4]
 800e136:	9400      	str	r4, [sp, #0]
 800e138:	464b      	mov	r3, r9
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	4631      	mov	r1, r6
 800e13e:	4640      	mov	r0, r8
 800e140:	f000 fbba 	bl	800e8b8 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
 800e144:	4603      	mov	r3, r0
 800e146:	f083 0301 	eor.w	r3, r3, #1
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 8083 	beq.w	800e258 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x438>
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	695c      	ldr	r4, [r3, #20]
 800e156:	4b08      	ldr	r3, [pc, #32]	; (800e178 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x358>)
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	2398      	movs	r3, #152	; 0x98
 800e15c:	4a04      	ldr	r2, [pc, #16]	; (800e170 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x350>)
 800e15e:	4905      	ldr	r1, [pc, #20]	; (800e174 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x354>)
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	47a0      	blx	r4
 800e164:	2301      	movs	r3, #1
 800e166:	e1a5      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
 800e168:	0801da9c 	.word	0x0801da9c
 800e16c:	0801dba8 	.word	0x0801dba8
 800e170:	0801d970 	.word	0x0801d970
 800e174:	0801db90 	.word	0x0801db90
 800e178:	0801dcb8 	.word	0x0801dcb8
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e180:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e184:	6892      	ldr	r2, [r2, #8]
 800e186:	4611      	mov	r1, r2
 800e188:	6978      	ldr	r0, [r7, #20]
 800e18a:	4798      	blx	r3
 800e18c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
        TF_LITE_ENSURE(
 800e190:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e194:	f7fd fcd0 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800e198:	4681      	mov	r9, r0
 800e19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1a6:	ed93 8a03 	vldr	s16, [r3, #12]
 800e1aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	f103 0804 	add.w	r8, r3, #4
 800e1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	60ba      	str	r2, [r7, #8]
 800e1be:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e1c2:	f7fd fcca 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e1cc:	691c      	ldr	r4, [r3, #16]
 800e1ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e1d2:	edd3 8a03 	vldr	s17, [r3, #12]
 800e1d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	1d1d      	adds	r5, r3, #4
 800e1de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	681e      	ldr	r6, [r3, #0]
 800e1e6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e1ea:	f000 f98d 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	920a      	str	r2, [sp, #40]	; 0x28
 800e1fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e200:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e204:	9208      	str	r2, [sp, #32]
 800e206:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e20a:	9207      	str	r2, [sp, #28]
 800e20c:	9306      	str	r3, [sp, #24]
 800e20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	9104      	str	r1, [sp, #16]
 800e216:	9603      	str	r6, [sp, #12]
 800e218:	9502      	str	r5, [sp, #8]
 800e21a:	9401      	str	r4, [sp, #4]
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	9000      	str	r0, [sp, #0]
 800e220:	eef0 0a68 	vmov.f32	s1, s17
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	4642      	mov	r2, r8
 800e228:	eeb0 0a48 	vmov.f32	s0, s16
 800e22c:	68f9      	ldr	r1, [r7, #12]
 800e22e:	4648      	mov	r0, r9
 800e230:	f000 fc0e 	bl	800ea50 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b>
 800e234:	4603      	mov	r3, r0
 800e236:	f083 0301 	eor.w	r3, r3, #1
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 8135 	beq.w	800e4ac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x68c>
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	695c      	ldr	r4, [r3, #20]
 800e246:	4b9f      	ldr	r3, [pc, #636]	; (800e4c4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6a4>)
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	23a2      	movs	r3, #162	; 0xa2
 800e24c:	4a9e      	ldr	r2, [pc, #632]	; (800e4c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6a8>)
 800e24e:	499f      	ldr	r1, [pc, #636]	; (800e4cc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6ac>)
 800e250:	6978      	ldr	r0, [r7, #20]
 800e252:	47a0      	blx	r4
 800e254:	2301      	movs	r3, #1
 800e256:	e12d      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
      } else {
 800e258:	bf00      	nop
    } break;
 800e25a:	e127      	b.n	800e4ac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x68c>
    case kTfLiteUInt8: {
      if (params->keep_dims) {
 800e25c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d041      	beq.n	800e2ea <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4ca>
        reference_ops::Mean(
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800e266:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e26a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800e26e:	4618      	mov	r0, r3
 800e270:	f7f9 ff9d 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Mean(
 800e274:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e278:	f7fd fb79 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e27c:	4606      	mov	r6, r0
            input->params.zero_point, input->params.scale,
 800e27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e282:	691c      	ldr	r4, [r3, #16]
 800e284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e288:	ed93 8a03 	vldr	s16, [r3, #12]
            GetTensorShape(output), GetTensorData<uint8_t>(output),
 800e28c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e290:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e294:	4618      	mov	r0, r3
 800e296:	f7f9 ff8a 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Mean(
 800e29a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e29e:	f7fd fb77 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e2ae:	edd2 7a03 	vldr	s15, [r2, #12]
 800e2b2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800e2b6:	f107 0018 	add.w	r0, r7, #24
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	9501      	str	r5, [sp, #4]
 800e2be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	eef0 0a67 	vmov.f32	s1, s15
 800e2c8:	eeb0 0a48 	vmov.f32	s0, s16
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	4632      	mov	r2, r6
 800e2d0:	f7ff fa22 	bl	800d718 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>
            GetTensorShape(output), GetTensorData<uint8_t>(output),
 800e2d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f9 feee 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800e2de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f9 fee9 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                GetTensorData<uint8_t>(output), output->params.zero_point,
                output->params.scale, output->dims->data, output->dims->size,
                GetTensorData<int>(axis), num_axis, params->keep_dims,
                temp_index, resolved_axis, temp_buffer, false));
      }
    } break;
 800e2e8:	e0e2      	b.n	800e4b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x690>
      } else if (input->params.zero_point == output->params.zero_point &&
 800e2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2ee:	691a      	ldr	r2, [r3, #16]
 800e2f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d160      	bne.n	800e3bc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x59c>
                 input->params.scale == output->params.scale) {
 800e2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2fe:	ed93 7a03 	vldr	s14, [r3, #12]
 800e302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e306:	edd3 7a03 	vldr	s15, [r3, #12]
      } else if (input->params.zero_point == output->params.zero_point &&
 800e30a:	eeb4 7a67 	vcmp.f32	s14, s15
 800e30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e312:	d153      	bne.n	800e3bc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x59c>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e318:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e31c:	6892      	ldr	r2, [r2, #8]
 800e31e:	4611      	mov	r1, r2
 800e320:	6978      	ldr	r0, [r7, #20]
 800e322:	4798      	blx	r3
 800e324:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
        TF_LITE_ENSURE(
 800e328:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e32c:	f7fd fb1f 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e330:	4680      	mov	r8, r0
 800e332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	1d1e      	adds	r6, r3, #4
 800e33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e348:	f7fd fb22 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800e34c:	4681      	mov	r9, r0
 800e34e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	1d1c      	adds	r4, r3, #4
 800e356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	681d      	ldr	r5, [r3, #0]
 800e35e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e362:	f000 f8d1 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800e366:	4601      	mov	r1, r0
 800e368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e372:	9207      	str	r2, [sp, #28]
 800e374:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e378:	9206      	str	r2, [sp, #24]
 800e37a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e37e:	9205      	str	r2, [sp, #20]
 800e380:	9304      	str	r3, [sp, #16]
 800e382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e386:	9303      	str	r3, [sp, #12]
 800e388:	9102      	str	r1, [sp, #8]
 800e38a:	9501      	str	r5, [sp, #4]
 800e38c:	9400      	str	r4, [sp, #0]
 800e38e:	464b      	mov	r3, r9
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	4631      	mov	r1, r6
 800e394:	4640      	mov	r0, r8
 800e396:	f000 fd01 	bl	800ed9c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
 800e39a:	4603      	mov	r3, r0
 800e39c:	f083 0301 	eor.w	r3, r3, #1
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d077      	beq.n	800e496 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x676>
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	695c      	ldr	r4, [r3, #20]
 800e3aa:	4b49      	ldr	r3, [pc, #292]	; (800e4d0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6b0>)
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	23b8      	movs	r3, #184	; 0xb8
 800e3b0:	4a45      	ldr	r2, [pc, #276]	; (800e4c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6a8>)
 800e3b2:	4946      	ldr	r1, [pc, #280]	; (800e4cc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6ac>)
 800e3b4:	6978      	ldr	r0, [r7, #20]
 800e3b6:	47a0      	blx	r4
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e07b      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e3c4:	6892      	ldr	r2, [r2, #8]
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	6978      	ldr	r0, [r7, #20]
 800e3ca:	4798      	blx	r3
 800e3cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        TF_LITE_ENSURE(
 800e3d0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e3d4:	f7fd facb 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e3d8:	4681      	mov	r9, r0
 800e3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e6:	ed93 8a03 	vldr	s16, [r3, #12]
 800e3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	f103 0804 	add.w	r8, r3, #4
 800e3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	60ba      	str	r2, [r7, #8]
 800e3fe:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e402:	f7fd fac5 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e40c:	691c      	ldr	r4, [r3, #16]
 800e40e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e412:	edd3 8a03 	vldr	s17, [r3, #12]
 800e416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	1d1d      	adds	r5, r3, #4
 800e41e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	681e      	ldr	r6, [r3, #0]
 800e426:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e42a:	f000 f86d 	bl	800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>
 800e42e:	4601      	mov	r1, r0
 800e430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2200      	movs	r2, #0
 800e438:	920a      	str	r2, [sp, #40]	; 0x28
 800e43a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e43e:	9209      	str	r2, [sp, #36]	; 0x24
 800e440:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e444:	9208      	str	r2, [sp, #32]
 800e446:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e44a:	9207      	str	r2, [sp, #28]
 800e44c:	9306      	str	r3, [sp, #24]
 800e44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e452:	9305      	str	r3, [sp, #20]
 800e454:	9104      	str	r1, [sp, #16]
 800e456:	9603      	str	r6, [sp, #12]
 800e458:	9502      	str	r5, [sp, #8]
 800e45a:	9401      	str	r4, [sp, #4]
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	9000      	str	r0, [sp, #0]
 800e460:	eef0 0a68 	vmov.f32	s1, s17
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	4642      	mov	r2, r8
 800e468:	eeb0 0a48 	vmov.f32	s0, s16
 800e46c:	68f9      	ldr	r1, [r7, #12]
 800e46e:	4648      	mov	r0, r9
 800e470:	f000 fd60 	bl	800ef34 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b>
 800e474:	4603      	mov	r3, r0
 800e476:	f083 0301 	eor.w	r3, r3, #1
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d017      	beq.n	800e4b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x690>
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	695c      	ldr	r4, [r3, #20]
 800e484:	4b13      	ldr	r3, [pc, #76]	; (800e4d4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6b4>)
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	23c2      	movs	r3, #194	; 0xc2
 800e48a:	4a0f      	ldr	r2, [pc, #60]	; (800e4c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6a8>)
 800e48c:	490f      	ldr	r1, [pc, #60]	; (800e4cc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6ac>)
 800e48e:	6978      	ldr	r0, [r7, #20]
 800e490:	47a0      	blx	r4
 800e492:	2301      	movs	r3, #1
 800e494:	e00e      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
      } else {
 800e496:	bf00      	nop
    } break;
 800e498:	e00a      	b.n	800e4b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x690>
    default:
      // TODO(b/144955155): Support uint8(b/144955155) and int8(b/144955018)
      TF_LITE_ENSURE_MSG(context, false,
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	490e      	ldr	r1, [pc, #56]	; (800e4d8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6b8>)
 800e4a0:	6978      	ldr	r0, [r7, #20]
 800e4a2:	4798      	blx	r3
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e005      	b.n	800e4b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
    } break;
 800e4a8:	bf00      	nop
 800e4aa:	e002      	b.n	800e4b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x692>
    } break;
 800e4ac:	bf00      	nop
 800e4ae:	e000      	b.n	800e4b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x692>
    } break;
 800e4b0:	bf00      	nop
                         "Currently, only float32, int8 or uint8 input type "
                         "is supported.");
  }
  return kTfLiteOk;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	37f8      	adds	r7, #248	; 0xf8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	ecbd 8b02 	vpop	{d8}
 800e4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c2:	bf00      	nop
 800e4c4:	0801ddb8 	.word	0x0801ddb8
 800e4c8:	0801d970 	.word	0x0801d970
 800e4cc:	0801db90 	.word	0x0801db90
 800e4d0:	0801df2c 	.word	0x0801df2c
 800e4d4:	0801e030 	.word	0x0801e030
 800e4d8:	0801e1a8 	.word	0x0801e1a8

0800e4dc <_ZN6tflite3ops5micro13Register_MEANEv>:
}  // namespace reduce

TfLiteRegistration Register_MEAN() {
 800e4dc:	b4b0      	push	{r4, r5, r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
          /*prepare=*/reduce::PrepareMeanOrSum,
          /*invoke=*/reduce::EvalMean,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a07      	ldr	r2, [pc, #28]	; (800e504 <_ZN6tflite3ops5micro13Register_MEANEv+0x28>)
 800e4e8:	461c      	mov	r4, r3
 800e4ea:	4615      	mov	r5, r2
 800e4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e4f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bcb0      	pop	{r4, r5, r7}
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	0801e290 	.word	0x0801e290

0800e508 <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor+0x14>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800e51a:	e000      	b.n	800e51e <_ZN6tflite13GetTensorDataIiEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	370c      	adds	r7, #12
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
	...

0800e52c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void Mean(const tflite::MeanParams& op_params,
 800e52c:	b580      	push	{r7, lr}
 800e52e:	ed2d 8b02 	vpush	{d8}
 800e532:	b09e      	sub	sp, #120	; 0x78
 800e534:	af02      	add	r7, sp, #8
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
  ruy::profiler::ScopeLabel label("Mean4D");
 800e53e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e542:	4971      	ldr	r1, [pc, #452]	; (800e708 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1dc>)
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe fa01 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 800e54a:	68b8      	ldr	r0, [r7, #8]
 800e54c:	f7f9 fdcb 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e550:	4603      	mov	r3, r0
 800e552:	2b04      	cmp	r3, #4
 800e554:	d001      	beq.n	800e55a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x2e>
 800e556:	f009 fb35 	bl	8017bc4 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 800e55a:	6838      	ldr	r0, [r7, #0]
 800e55c:	f7f9 fdc3 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e560:	4603      	mov	r3, r0
 800e562:	2b04      	cmp	r3, #4
 800e564:	dd01      	ble.n	800e56a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x3e>
 800e566:	f009 fb2d 	bl	8017bc4 <abort>
  const RuntimeShape input_shape =
 800e56a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	2104      	movs	r1, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fd fbe0 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape output_shape =
 800e578:	f107 0310 	add.w	r3, r7, #16
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	2104      	movs	r1, #4
 800e580:	4618      	mov	r0, r3
 800e582:	f7fd fbd9 	bl	800bd38 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const int output_batch = output_shape.Dims(0);
 800e586:	f107 0310 	add.w	r3, r7, #16
 800e58a:	2100      	movs	r1, #0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fd fa21 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e592:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
 800e594:	f107 0310 	add.w	r3, r7, #16
 800e598:	2101      	movs	r1, #1
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fd fa1a 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e5a0:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_width = output_shape.Dims(2);
 800e5a2:	f107 0310 	add.w	r3, r7, #16
 800e5a6:	2102      	movs	r1, #2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fd fa13 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e5ae:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = output_shape.Dims(3);
 800e5b0:	f107 0310 	add.w	r3, r7, #16
 800e5b4:	2103      	movs	r1, #3
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fd fa0c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e5bc:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_height = input_shape.Dims(1);
 800e5be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fd fa05 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e5ca:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 800e5cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e5d0:	2102      	movs	r1, #2
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd f9fe 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e5d8:	6478      	str	r0, [r7, #68]	; 0x44
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f993 3000 	ldrsb.w	r3, [r3]
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d001      	beq.n	800e5e8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xbc>
 800e5e4:	f009 faee 	bl	8017bc4 <abort>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d104      	bne.n	800e5fc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xd0>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d00b      	beq.n	800e614 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e602:	2b02      	cmp	r3, #2
 800e604:	d104      	bne.n	800e610 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe4>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d001      	beq.n	800e614 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xe8>
 800e610:	f009 fad8 	bl	8017bc4 <abort>
  TFLITE_CHECK_EQ(output_height, 1);
 800e614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e616:	2b01      	cmp	r3, #1
 800e618:	d001      	beq.n	800e61e <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
 800e61a:	f009 fad3 	bl	8017bc4 <abort>
  TFLITE_CHECK_EQ(output_width, 1);
 800e61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e620:	2b01      	cmp	r3, #1
 800e622:	d001      	beq.n	800e628 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xfc>
 800e624:	f009 face 	bl	8017bc4 <abort>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800e628:	2300      	movs	r3, #0
 800e62a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e62c:	e054      	b.n	800e6d8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ac>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800e62e:	2300      	movs	r3, #0
 800e630:	66bb      	str	r3, [r7, #104]	; 0x68
 800e632:	e04a      	b.n	800e6ca <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x19e>
      float value = 0;
 800e634:	f04f 0300 	mov.w	r3, #0
 800e638:	667b      	str	r3, [r7, #100]	; 0x64
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800e63a:	2300      	movs	r3, #0
 800e63c:	663b      	str	r3, [r7, #96]	; 0x60
 800e63e:	e021      	b.n	800e684 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x158>
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800e640:	2300      	movs	r3, #0
 800e642:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e644:	e017      	b.n	800e676 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14a>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 800e646:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e652:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e654:	f7fd fbc7 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e658:	4603      	mov	r3, r0
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	edd3 7a00 	vldr	s15, [r3]
 800e664:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800e668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e66c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800e670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e672:	3301      	adds	r3, #1
 800e674:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e67a:	429a      	cmp	r2, r3
 800e67c:	dbe3      	blt.n	800e646 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x11a>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800e67e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e680:	3301      	adds	r3, #1
 800e682:	663b      	str	r3, [r7, #96]	; 0x60
 800e684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e688:	429a      	cmp	r2, r3
 800e68a:	dbd9      	blt.n	800e640 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x114>
          value / (input_width * input_height);
 800e68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e68e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e690:	fb02 f303 	mul.w	r3, r2, r3
 800e694:	ee07 3a90 	vmov	s15, r3
 800e698:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 800e69c:	f107 0010 	add.w	r0, r7, #16
 800e6a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e6aa:	f7fd fb9c 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6b6:	4413      	add	r3, r2
          value / (input_width * input_height);
 800e6b8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800e6bc:	eec7 7a08 	vdiv.f32	s15, s14, s16
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 800e6c0:	edc3 7a00 	vstr	s15, [r3]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800e6c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	dbb0      	blt.n	800e634 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x108>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800e6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	dba6      	blt.n	800e62e <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
}
 800e6e0:	f107 0310 	add.w	r3, r7, #16
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f9 fce8 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800e6ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7f9 fce3 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 800e6f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd fcfe 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800e6fe:	3770      	adds	r7, #112	; 0x70
 800e700:	46bd      	mov	sp, r7
 800e702:	ecbd 8b02 	vpop	{d8}
 800e706:	bd80      	pop	{r7, pc}
 800e708:	0801e3d0 	.word	0x0801e3d0

0800e70c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
 800e70c:	b5b0      	push	{r4, r5, r7, lr}
 800e70e:	b094      	sub	sp, #80	; 0x50
 800e710:	af06      	add	r7, sp, #24
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
  ruy::profiler::ScopeLabel label("Mean");
 800e71a:	f107 0314 	add.w	r3, r7, #20
 800e71e:	4965      	ldr	r1, [pc, #404]	; (800e8b4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a8>)
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe f913 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  size_t num_outputs = 1;
 800e726:	2301      	movs	r3, #1
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800e72a:	2300      	movs	r3, #0
 800e72c:	633b      	str	r3, [r7, #48]	; 0x30
 800e72e:	e01d      	b.n	800e76c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x60>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e736:	4413      	add	r3, r2
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	61bb      	str	r3, [r7, #24]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800e73c:	f7fe fec4 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800e740:	4602      	mov	r2, r0
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	fbb2 f3f3 	udiv	r3, r2, r3
 800e748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e74a:	429a      	cmp	r2, r3
 800e74c:	bf8c      	ite	hi
 800e74e:	2301      	movhi	r3, #1
 800e750:	2300      	movls	r3, #0
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x50>
      return false;
 800e758:	2400      	movs	r4, #0
 800e75a:	e0a0      	b.n	800e89e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
    num_outputs *= current;
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	69ba      	ldr	r2, [r7, #24]
 800e760:	fb02 f303 	mul.w	r3, r2, r3
 800e764:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	3301      	adds	r3, #1
 800e76a:	633b      	str	r3, [r7, #48]	; 0x30
 800e76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e770:	429a      	cmp	r2, r3
 800e772:	dbdd      	blt.n	800e730 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x24>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e774:	2300      	movs	r3, #0
 800e776:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e778:	e010      	b.n	800e79c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x90>
    output_data[idx] = T();
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	4413      	add	r3, r2
 800e782:	f04f 0200 	mov.w	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
    temp_sum[idx] = U();
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e78e:	4413      	add	r3, r2
 800e790:	f04f 0200 	mov.w	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	3301      	adds	r3, #1
 800e79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d3ea      	bcc.n	800e77a <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6e>
  int num_resolved_axis = 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	613b      	str	r3, [r7, #16]
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800e7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7aa:	17da      	asrs	r2, r3, #31
 800e7ac:	461c      	mov	r4, r3
 800e7ae:	4615      	mov	r5, r2
 800e7b0:	f107 0310 	add.w	r3, r7, #16
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	462b      	mov	r3, r5
 800e7be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7fe ff36 	bl	800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f083 0301 	eor.w	r3, r3, #1
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xca>
    return false;
 800e7d2:	2400      	movs	r4, #0
 800e7d4:	e063      	b.n	800e89e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7da:	9204      	str	r2, [sp, #16]
 800e7dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7de:	9203      	str	r2, [sp, #12]
 800e7e0:	9302      	str	r3, [sp, #8]
 800e7e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ee:	68b9      	ldr	r1, [r7, #8]
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f000 fd7f 	bl	800f2f4 <_ZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f083 0301 	eor.w	r3, r3, #1
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xfa>
    return false;
 800e802:	2400      	movs	r4, #0
 800e804:	e04b      	b.n	800e89e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
  size_t num_elements_in_axis = 1;
 800e806:	2301      	movs	r3, #1
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800e80a:	2300      	movs	r3, #0
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24
 800e80e:	e021      	b.n	800e854 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x148>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e816:	4413      	add	r3, r2
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	4413      	add	r3, r2
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	61fb      	str	r3, [r7, #28]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 800e824:	f7fe fe50 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800e828:	4602      	mov	r2, r0
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	429a      	cmp	r2, r3
 800e834:	bf8c      	ite	hi
 800e836:	2301      	movhi	r3, #1
 800e838:	2300      	movls	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x138>
      return false;
 800e840:	2400      	movs	r4, #0
 800e842:	e02c      	b.n	800e89e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
    num_elements_in_axis *= current;
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	69fa      	ldr	r2, [r7, #28]
 800e848:	fb02 f303 	mul.w	r3, r2, r3
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	3301      	adds	r3, #1
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e858:	429a      	cmp	r2, r3
 800e85a:	dbd9      	blt.n	800e810 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x104>
  if (num_elements_in_axis > 0) {
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01c      	beq.n	800e89c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x190>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e862:	2300      	movs	r3, #0
 800e864:	623b      	str	r3, [r7, #32]
 800e866:	e015      	b.n	800e894 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x188>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e86e:	4413      	add	r3, r2
 800e870:	edd3 6a00 	vldr	s13, [r3]
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	ee07 3a90 	vmov	s15, r3
 800e87a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      output_data[idx] =
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	4413      	add	r3, r2
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800e886:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[idx] =
 800e88a:	edc3 7a00 	vstr	s15, [r3]
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	3301      	adds	r3, #1
 800e892:	623b      	str	r3, [r7, #32]
 800e894:	6a3a      	ldr	r2, [r7, #32]
 800e896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e898:	429a      	cmp	r2, r3
 800e89a:	d3e5      	bcc.n	800e868 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x15c>
  return true;
 800e89c:	2401      	movs	r4, #1
}
 800e89e:	f107 0314 	add.w	r3, r7, #20
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fd fc29 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3738      	adds	r7, #56	; 0x38
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	0801e3d8 	.word	0x0801e3d8

0800e8b8 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
 800e8b8:	b5b0      	push	{r4, r5, r7, lr}
 800e8ba:	b094      	sub	sp, #80	; 0x50
 800e8bc:	af06      	add	r7, sp, #24
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	603b      	str	r3, [r7, #0]
  ruy::profiler::ScopeLabel label("Mean");
 800e8c6:	f107 0314 	add.w	r3, r7, #20
 800e8ca:	4960      	ldr	r1, [pc, #384]	; (800ea4c <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x194>)
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fe f83d 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  size_t num_outputs = 1;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e8da:	e01d      	b.n	800e918 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x60>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800e8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8e2:	4413      	add	r3, r2
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	61bb      	str	r3, [r7, #24]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800e8e8:	f7fe fdee 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	bf8c      	ite	hi
 800e8fa:	2301      	movhi	r3, #1
 800e8fc:	2300      	movls	r3, #0
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x50>
      return false;
 800e904:	2400      	movs	r4, #0
 800e906:	e097      	b.n	800ea38 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
    num_outputs *= current;
 800e908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	fb02 f303 	mul.w	r3, r2, r3
 800e910:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800e912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e914:	3301      	adds	r3, #1
 800e916:	633b      	str	r3, [r7, #48]	; 0x30
 800e918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91c:	429a      	cmp	r2, r3
 800e91e:	dbdd      	blt.n	800e8dc <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x24>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e920:	2300      	movs	r3, #0
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e924:	e00d      	b.n	800e942 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8a>
    output_data[idx] = T();
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	4413      	add	r3, r2
 800e92c:	2200      	movs	r2, #0
 800e92e:	701a      	strb	r2, [r3, #0]
    temp_sum[idx] = U();
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e936:	4413      	add	r3, r2
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	3301      	adds	r3, #1
 800e940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e946:	429a      	cmp	r2, r3
 800e948:	d3ed      	bcc.n	800e926 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6e>
  int num_resolved_axis = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	613b      	str	r3, [r7, #16]
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800e94e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e950:	17da      	asrs	r2, r3, #31
 800e952:	461c      	mov	r4, r3
 800e954:	4615      	mov	r5, r2
 800e956:	f107 0310 	add.w	r3, r7, #16
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	4622      	mov	r2, r4
 800e962:	462b      	mov	r3, r5
 800e964:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7fe fe63 	bl	800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f083 0301 	eor.w	r3, r3, #1
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc4>
    return false;
 800e978:	2400      	movs	r4, #0
 800e97a:	e05d      	b.n	800ea38 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e980:	9204      	str	r2, [sp, #16]
 800e982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e984:	9203      	str	r2, [sp, #12]
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f000 fd02 	bl	800f3a0 <_ZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f083 0301 	eor.w	r3, r3, #1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xf4>
    return false;
 800e9a8:	2400      	movs	r4, #0
 800e9aa:	e045      	b.n	800ea38 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  size_t num_elements_in_axis = 1;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e9b4:	e021      	b.n	800e9fa <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x142>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9bc:	4413      	add	r3, r2
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	61fb      	str	r3, [r7, #28]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 800e9ca:	f7fe fd7d 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d6:	69fa      	ldr	r2, [r7, #28]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	bf8c      	ite	hi
 800e9dc:	2301      	movhi	r3, #1
 800e9de:	2300      	movls	r3, #0
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x132>
      return false;
 800e9e6:	2400      	movs	r4, #0
 800e9e8:	e026      	b.n	800ea38 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
    num_elements_in_axis *= current;
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	69fa      	ldr	r2, [r7, #28]
 800e9ee:	fb02 f303 	mul.w	r3, r2, r3
 800e9f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	dbd9      	blt.n	800e9b6 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xfe>
  if (num_elements_in_axis > 0) {
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d016      	beq.n	800ea36 <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x17e>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ea08:	2300      	movs	r3, #0
 800ea0a:	623b      	str	r3, [r7, #32]
 800ea0c:	e00f      	b.n	800ea2e <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x176>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea14:	4413      	add	r3, r2
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	fb92 f1f3 	sdiv	r1, r2, r3
      output_data[idx] =
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	4413      	add	r3, r2
 800ea24:	b24a      	sxtb	r2, r1
 800ea26:	701a      	strb	r2, [r3, #0]
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	623b      	str	r3, [r7, #32]
 800ea2e:	6a3a      	ldr	r2, [r7, #32]
 800ea30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d3eb      	bcc.n	800ea0e <_ZN6tflite13reference_ops4MeanIalEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x156>
  return true;
 800ea36:	2401      	movs	r4, #1
}
 800ea38:	f107 0314 	add.w	r3, r7, #20
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fd fb5c 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800ea42:	4623      	mov	r3, r4
 800ea44:	4618      	mov	r0, r3
 800ea46:	3738      	adds	r7, #56	; 0x38
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ea4c:	0801e3d8 	.word	0x0801e3d8

0800ea50 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b>:

// Computes the mean of elements across dimensions given in axis.
// It does so in two stages, first calculates the sum of elements along the axis
// then divides it by the number of element in axis for quantized values.
template <typename T, typename U>
inline bool QuantizedMeanOrSum(const T* input_data, int32 input_zero_point,
 800ea50:	b5b0      	push	{r4, r5, r7, lr}
 800ea52:	b0a4      	sub	sp, #144	; 0x90
 800ea54:	af06      	add	r7, sp, #24
 800ea56:	61f8      	str	r0, [r7, #28]
 800ea58:	61b9      	str	r1, [r7, #24]
 800ea5a:	ed87 0a05 	vstr	s0, [r7, #20]
 800ea5e:	613a      	str	r2, [r7, #16]
 800ea60:	60fb      	str	r3, [r7, #12]
 800ea62:	edc7 0a02 	vstr	s1, [r7, #8]
                               const int* output_dims,
                               const int output_num_dims, const int* axis,
                               const int num_axis_dimensions, bool keep_dims,
                               int* temp_index, int* resolved_axis, U* temp_sum,
                               bool compute_sum) {
  const bool uint8_case = std::is_same<T, int8_t>::value;
 800ea66:	2301      	movs	r3, #1
 800ea68:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (uint8_case) {
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Uint8" : "Mean/Uint8");
 800ea6c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x28>
 800ea74:	4a8f      	ldr	r2, [pc, #572]	; (800ecb4 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x264>)
 800ea76:	e000      	b.n	800ea7a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x2a>
 800ea78:	4a8f      	ldr	r2, [pc, #572]	; (800ecb8 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x268>)
 800ea7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea7e:	4611      	mov	r1, r2
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fd ff63 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  } else {
 800ea86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd fb35 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Int8" : "Mean/Int8");
  }
  // Reset output data.
  size_t num_outputs = 1;
 800ea90:	2301      	movs	r3, #1
 800ea92:	677b      	str	r3, [r7, #116]	; 0x74
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800ea94:	2300      	movs	r3, #0
 800ea96:	673b      	str	r3, [r7, #112]	; 0x70
 800ea98:	e01e      	b.n	800ead8 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x88>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800ea9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800eaa2:	4413      	add	r3, r2
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Overflow prevention.
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800eaa8:	f7fe fd0e 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800eaac:	4602      	mov	r2, r0
 800eaae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eab6:	429a      	cmp	r2, r3
 800eab8:	bf8c      	ite	hi
 800eaba:	2301      	movhi	r3, #1
 800eabc:	2300      	movls	r3, #0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x78>
      return false;
 800eac4:	2300      	movs	r3, #0
 800eac6:	e165      	b.n	800ed94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
    }
    num_outputs *= current;
 800eac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eacc:	fb02 f303 	mul.w	r3, r2, r3
 800ead0:	677b      	str	r3, [r7, #116]	; 0x74
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800ead2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ead4:	3301      	adds	r3, #1
 800ead6:	673b      	str	r3, [r7, #112]	; 0x70
 800ead8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eade:	429a      	cmp	r2, r3
 800eae0:	dbdb      	blt.n	800ea9a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x4a>
  }
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800eae2:	2300      	movs	r3, #0
 800eae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eae6:	e00f      	b.n	800eb08 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0xb8>
    output_data[idx] = T();
 800eae8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eaec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaee:	4413      	add	r3, r2
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
    temp_sum[idx] = U();
 800eaf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eafc:	4413      	add	r3, r2
 800eafe:	2200      	movs	r2, #0
 800eb00:	601a      	str	r2, [r3, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800eb02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb04:	3301      	adds	r3, #1
 800eb06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d3eb      	bcc.n	800eae8 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x98>
  }

  // Resolve axis.
  int num_resolved_axis = 0;
 800eb10:	2300      	movs	r3, #0
 800eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800eb14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eb18:	17da      	asrs	r2, r3, #31
 800eb1a:	461c      	mov	r4, r3
 800eb1c:	4615      	mov	r5, r2
 800eb1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb22:	9301      	str	r3, [sp, #4]
 800eb24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7fe fd7d 	bl	800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f083 0301 	eor.w	r3, r3, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0xf8>
                   &num_resolved_axis)) {
    return false;
 800eb44:	2300      	movs	r3, #0
 800eb46:	e125      	b.n	800ed94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
  }

  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 800eb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eb4e:	9204      	str	r2, [sp, #16]
 800eb50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800eb54:	9203      	str	r2, [sp, #12]
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb5c:	9301      	str	r3, [sp, #4]
 800eb5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800eb6a:	6939      	ldr	r1, [r7, #16]
 800eb6c:	69f8      	ldr	r0, [r7, #28]
 800eb6e:	f000 fc17 	bl	800f3a0 <_ZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f083 0301 	eor.w	r3, r3, #1
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x132>
                           output_num_dims, resolved_axis, num_resolved_axis,
                           temp_index, temp_sum)) {
    return false;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	e108      	b.n	800ed94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
  }

  // Calculate mean by dividing output_data by num of aggregated element.
  size_t num_elements_in_axis = 1;
 800eb82:	2301      	movs	r3, #1
 800eb84:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800eb86:	2300      	movs	r3, #0
 800eb88:	667b      	str	r3, [r7, #100]	; 0x64
 800eb8a:	e022      	b.n	800ebd2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x182>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800eb8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eb94:	4413      	add	r3, r2
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	693a      	ldr	r2, [r7, #16]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	643b      	str	r3, [r7, #64]	; 0x40
    // Overflow prevention.
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 800eba2:	f7fe fc91 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800eba6:	4602      	mov	r2, r0
 800eba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	bf8c      	ite	hi
 800ebb4:	2301      	movhi	r3, #1
 800ebb6:	2300      	movls	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x172>
      return false;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e0e8      	b.n	800ed94 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
    }
    num_elements_in_axis *= current;
 800ebc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebc6:	fb02 f303 	mul.w	r3, r2, r3
 800ebca:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800ebcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebce:	3301      	adds	r3, #1
 800ebd0:	667b      	str	r3, [r7, #100]	; 0x64
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	dbd8      	blt.n	800eb8c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x13c>
  }

  if (num_elements_in_axis > 0) {
 800ebda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 80d8 	beq.w	800ed92 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x342>
    const float scale = input_scale / output_scale;
 800ebe2:	edd7 6a05 	vldr	s13, [r7, #20]
 800ebe6:	ed97 7a02 	vldr	s14, [r7, #8]
 800ebea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (compute_sum) {
 800ebf2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d048      	beq.n	800ec8c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x23c>
      // TODO(b/116341117): Eliminate float and do this completely in 8bit.
      const float bias =
          -input_zero_point * scale * num_elements_in_axis + 0.5f;
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	425b      	negs	r3, r3
 800ebfe:	ee07 3a90 	vmov	s15, r3
 800ec02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec06:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ec0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec10:	ee07 3a90 	vmov	s15, r3
 800ec14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec18:	ee67 7a27 	vmul.f32	s15, s14, s15
      const float bias =
 800ec1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ec20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec24:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ec28:	2300      	movs	r3, #0
 800ec2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ec2c:	e029      	b.n	800ec82 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x232>
        const U value =
            static_cast<U>(TfLiteRound(temp_sum[idx] * scale + bias)) +
 800ec2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ec36:	4413      	add	r3, r2
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	ee07 3a90 	vmov	s15, r3
 800ec3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ec46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec4a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ec4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec52:	eeb0 0a67 	vmov.f32	s0, s15
 800ec56:	f7f8 fd84 	bl	8007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ec5a:	eef0 7a40 	vmov.f32	s15, s0
 800ec5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec62:	ee17 2a90 	vmov	r2, s15
        const U value =
 800ec66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec6a:	4413      	add	r3, r2
 800ec6c:	647b      	str	r3, [r7, #68]	; 0x44
            output_zero_point;
        output_data[idx] = static_cast<T>(value);
 800ec6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ec72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec74:	4413      	add	r3, r2
 800ec76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec78:	b252      	sxtb	r2, r2
 800ec7a:	701a      	strb	r2, [r3, #0]
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ec7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec7e:	3301      	adds	r3, #1
 800ec80:	663b      	str	r3, [r7, #96]	; 0x60
 800ec82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d3d1      	bcc.n	800ec2e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x1de>
 800ec8a:	e082      	b.n	800ed92 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x342>
      }
    } else {
      const float bias = -input_zero_point * scale + 0.5f;
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	425b      	negs	r3, r3
 800ec90:	ee07 3a90 	vmov	s15, r3
 800ec94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec98:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ec9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eca8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ecac:	2300      	movs	r3, #0
 800ecae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecb0:	e06b      	b.n	800ed8a <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x33a>
 800ecb2:	bf00      	nop
 800ecb4:	0801e3e0 	.word	0x0801e3e0
 800ecb8:	0801e3ec 	.word	0x0801e3ec
        float float_mean = static_cast<float>(temp_sum[idx]) /
 800ecbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ecc4:	4413      	add	r3, r2
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                           static_cast<float>(num_elements_in_axis);
 800ecd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecd2:	ee07 3a90 	vmov	s15, r3
 800ecd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
        float float_mean = static_cast<float>(temp_sum[idx]) /
 800ecda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecde:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        float result = TfLiteMin(
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 800ece2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ece6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ecea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800ecf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecf6:	eeb0 0a67 	vmov.f32	s0, s15
 800ecfa:	f7f8 fd32 	bl	8007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ecfe:	eeb0 7a40 	vmov.f32	s14, s0
 800ed02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed06:	ee07 3a90 	vmov	s15, r3
 800ed0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            static_cast<float>(std::numeric_limits<T>::max()));
 800ed16:	f7f8 fd3d 	bl	8007794 <_ZNSt14numeric_limitsIaE3maxEv>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	ee07 3a90 	vmov	s15, r3
 800ed20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        float result = TfLiteMin(
 800ed28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ed2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fb57 	bl	800f3e6 <_ZN6tflite9TfLiteMinIfEET_RKS1_S3_>
 800ed38:	eef0 7a40 	vmov.f32	s15, s0
 800ed3c:	edc7 7a08 	vstr	s15, [r7, #32]
        result = TfLiteMax(result,
                           static_cast<float>(std::numeric_limits<T>::min()));
 800ed40:	f7f8 fd1f 	bl	8007782 <_ZNSt14numeric_limitsIaE3minEv>
 800ed44:	4603      	mov	r3, r0
 800ed46:	ee07 3a90 	vmov	s15, r3
 800ed4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        result = TfLiteMax(result,
 800ed52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ed56:	f107 0320 	add.w	r3, r7, #32
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 fb5a 	bl	800f416 <_ZN6tflite9TfLiteMaxIfEET_RKS1_S3_>
 800ed62:	eef0 7a40 	vmov.f32	s15, s0
 800ed66:	edc7 7a08 	vstr	s15, [r7, #32]
        output_data[idx] = static_cast<T>(result);
 800ed6a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ed6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed74:	4413      	add	r3, r2
 800ed76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed7a:	edc7 7a01 	vstr	s15, [r7, #4]
 800ed7e:	793a      	ldrb	r2, [r7, #4]
 800ed80:	b252      	sxtb	r2, r2
 800ed82:	701a      	strb	r2, [r3, #0]
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ed84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed86:	3301      	adds	r3, #1
 800ed88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d394      	bcc.n	800ecbc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIalEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x26c>
      }
    }
  }
  return true;
 800ed92:	2301      	movs	r3, #1
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3778      	adds	r7, #120	; 0x78
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bdb0      	pop	{r4, r5, r7, pc}

0800ed9c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
 800ed9c:	b5b0      	push	{r4, r5, r7, lr}
 800ed9e:	b094      	sub	sp, #80	; 0x50
 800eda0:	af06      	add	r7, sp, #24
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
 800eda8:	603b      	str	r3, [r7, #0]
  ruy::profiler::ScopeLabel label("Mean");
 800edaa:	f107 0314 	add.w	r3, r7, #20
 800edae:	4960      	ldr	r1, [pc, #384]	; (800ef30 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x194>)
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fd fdcb 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  size_t num_outputs = 1;
 800edb6:	2301      	movs	r3, #1
 800edb8:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800edba:	2300      	movs	r3, #0
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30
 800edbe:	e01d      	b.n	800edfc <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x60>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edc6:	4413      	add	r3, r2
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	61bb      	str	r3, [r7, #24]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800edcc:	f7fe fb7c 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800edd0:	4602      	mov	r2, r0
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800edd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edda:	429a      	cmp	r2, r3
 800eddc:	bf8c      	ite	hi
 800edde:	2301      	movhi	r3, #1
 800ede0:	2300      	movls	r3, #0
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x50>
      return false;
 800ede8:	2400      	movs	r4, #0
 800edea:	e097      	b.n	800ef1c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
    num_outputs *= current;
 800edec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edee:	69ba      	ldr	r2, [r7, #24]
 800edf0:	fb02 f303 	mul.w	r3, r2, r3
 800edf4:	637b      	str	r3, [r7, #52]	; 0x34
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	3301      	adds	r3, #1
 800edfa:	633b      	str	r3, [r7, #48]	; 0x30
 800edfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee00:	429a      	cmp	r2, r3
 800ee02:	dbdd      	blt.n	800edc0 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x24>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ee04:	2300      	movs	r3, #0
 800ee06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee08:	e00d      	b.n	800ee26 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8a>
    output_data[idx] = T();
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	4413      	add	r3, r2
 800ee10:	2200      	movs	r2, #0
 800ee12:	701a      	strb	r2, [r3, #0]
    temp_sum[idx] = U();
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee1a:	4413      	add	r3, r2
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	601a      	str	r2, [r3, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	3301      	adds	r3, #1
 800ee24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d3ed      	bcc.n	800ee0a <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6e>
  int num_resolved_axis = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	613b      	str	r3, [r7, #16]
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800ee32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee34:	17da      	asrs	r2, r3, #31
 800ee36:	461c      	mov	r4, r3
 800ee38:	4615      	mov	r5, r2
 800ee3a:	f107 0310 	add.w	r3, r7, #16
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	4622      	mov	r2, r4
 800ee46:	462b      	mov	r3, r5
 800ee48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7fe fbf1 	bl	800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>
 800ee50:	4603      	mov	r3, r0
 800ee52:	f083 0301 	eor.w	r3, r3, #1
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc4>
    return false;
 800ee5c:	2400      	movs	r4, #0
 800ee5e:	e05d      	b.n	800ef1c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee64:	9204      	str	r2, [sp, #16]
 800ee66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee68:	9203      	str	r2, [sp, #12]
 800ee6a:	9302      	str	r3, [sp, #8]
 800ee6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee78:	68b9      	ldr	r1, [r7, #8]
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f000 fb14 	bl	800f4a8 <_ZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_>
 800ee80:	4603      	mov	r3, r0
 800ee82:	f083 0301 	eor.w	r3, r3, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xf4>
    return false;
 800ee8c:	2400      	movs	r4, #0
 800ee8e:	e045      	b.n	800ef1c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  size_t num_elements_in_axis = 1;
 800ee90:	2301      	movs	r3, #1
 800ee92:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800ee94:	2300      	movs	r3, #0
 800ee96:	627b      	str	r3, [r7, #36]	; 0x24
 800ee98:	e021      	b.n	800eede <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x142>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eea0:	4413      	add	r3, r2
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	4413      	add	r3, r2
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	61fb      	str	r3, [r7, #28]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 800eeae:	f7fe fb0b 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeba:	69fa      	ldr	r2, [r7, #28]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	bf8c      	ite	hi
 800eec0:	2301      	movhi	r3, #1
 800eec2:	2300      	movls	r3, #0
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x132>
      return false;
 800eeca:	2400      	movs	r4, #0
 800eecc:	e026      	b.n	800ef1c <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
    num_elements_in_axis *= current;
 800eece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed0:	69fa      	ldr	r2, [r7, #28]
 800eed2:	fb02 f303 	mul.w	r3, r2, r3
 800eed6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800eed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeda:	3301      	adds	r3, #1
 800eedc:	627b      	str	r3, [r7, #36]	; 0x24
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee2:	429a      	cmp	r2, r3
 800eee4:	dbd9      	blt.n	800ee9a <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xfe>
  if (num_elements_in_axis > 0) {
 800eee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d016      	beq.n	800ef1a <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x17e>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800eeec:	2300      	movs	r3, #0
 800eeee:	623b      	str	r3, [r7, #32]
 800eef0:	e00f      	b.n	800ef12 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x176>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eef8:	4413      	add	r3, r2
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	fbb2 f1f3 	udiv	r1, r2, r3
      output_data[idx] =
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	6a3b      	ldr	r3, [r7, #32]
 800ef06:	4413      	add	r3, r2
 800ef08:	b2ca      	uxtb	r2, r1
 800ef0a:	701a      	strb	r2, [r3, #0]
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800ef0c:	6a3b      	ldr	r3, [r7, #32]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	623b      	str	r3, [r7, #32]
 800ef12:	6a3a      	ldr	r2, [r7, #32]
 800ef14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d3eb      	bcc.n	800eef2 <_ZN6tflite13reference_ops4MeanIhmEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x156>
  return true;
 800ef1a:	2401      	movs	r4, #1
}
 800ef1c:	f107 0314 	add.w	r3, r7, #20
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fd f8ea 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
 800ef26:	4623      	mov	r3, r4
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3738      	adds	r7, #56	; 0x38
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef30:	0801e3d8 	.word	0x0801e3d8

0800ef34 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b>:
inline bool QuantizedMeanOrSum(const T* input_data, int32 input_zero_point,
 800ef34:	b5b0      	push	{r4, r5, r7, lr}
 800ef36:	b0a4      	sub	sp, #144	; 0x90
 800ef38:	af06      	add	r7, sp, #24
 800ef3a:	61f8      	str	r0, [r7, #28]
 800ef3c:	61b9      	str	r1, [r7, #24]
 800ef3e:	ed87 0a05 	vstr	s0, [r7, #20]
 800ef42:	613a      	str	r2, [r7, #16]
 800ef44:	60fb      	str	r3, [r7, #12]
 800ef46:	edc7 0a02 	vstr	s1, [r7, #8]
  const bool uint8_case = std::is_same<T, int8_t>::value;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Int8" : "Mean/Int8");
 800ef50:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x28>
 800ef58:	4a8f      	ldr	r2, [pc, #572]	; (800f198 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x264>)
 800ef5a:	e000      	b.n	800ef5e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x2a>
 800ef5c:	4a8f      	ldr	r2, [pc, #572]	; (800f19c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x268>)
 800ef5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef62:	4611      	mov	r1, r2
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd fcf1 	bl	800c94c <_ZN3ruy8profiler10ScopeLabelC1IJPKcEEEDpT_>
  }
 800ef6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fd f8c3 	bl	800c0fa <_ZN3ruy8profiler10ScopeLabelD1Ev>
  size_t num_outputs = 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	677b      	str	r3, [r7, #116]	; 0x74
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800ef78:	2300      	movs	r3, #0
 800ef7a:	673b      	str	r3, [r7, #112]	; 0x70
 800ef7c:	e01e      	b.n	800efbc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x88>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800ef7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ef86:	4413      	add	r3, r2
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800ef8c:	f7fe fa9c 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800ef90:	4602      	mov	r2, r0
 800ef92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	bf8c      	ite	hi
 800ef9e:	2301      	movhi	r3, #1
 800efa0:	2300      	movls	r3, #0
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d001      	beq.n	800efac <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x78>
      return false;
 800efa8:	2300      	movs	r3, #0
 800efaa:	e165      	b.n	800f278 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
    num_outputs *= current;
 800efac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efb0:	fb02 f303 	mul.w	r3, r2, r3
 800efb4:	677b      	str	r3, [r7, #116]	; 0x74
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800efb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efb8:	3301      	adds	r3, #1
 800efba:	673b      	str	r3, [r7, #112]	; 0x70
 800efbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800efc2:	429a      	cmp	r2, r3
 800efc4:	dbdb      	blt.n	800ef7e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x4a>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800efc6:	2300      	movs	r3, #0
 800efc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efca:	e00f      	b.n	800efec <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0xb8>
    output_data[idx] = T();
 800efcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800efd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efd2:	4413      	add	r3, r2
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
    temp_sum[idx] = U();
 800efd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800efe0:	4413      	add	r3, r2
 800efe2:	2200      	movs	r2, #0
 800efe4:	601a      	str	r2, [r3, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800efe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efe8:	3301      	adds	r3, #1
 800efea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800efee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d3eb      	bcc.n	800efcc <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x98>
  int num_resolved_axis = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800eff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800effc:	17da      	asrs	r2, r3, #31
 800effe:	461c      	mov	r4, r3
 800f000:	4615      	mov	r5, r2
 800f002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	4622      	mov	r2, r4
 800f010:	462b      	mov	r3, r5
 800f012:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f7fe fb0b 	bl	800d632 <_ZN6tflite13reference_ops11ResolveAxisEiPKixPiS3_>
 800f01c:	4603      	mov	r3, r0
 800f01e:	f083 0301 	eor.w	r3, r3, #1
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0xf8>
    return false;
 800f028:	2300      	movs	r3, #0
 800f02a:	e125      	b.n	800f278 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
  if (!ReduceSumImpl<T, U>(input_data, input_dims, output_dims, input_num_dims,
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f032:	9204      	str	r2, [sp, #16]
 800f034:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f038:	9203      	str	r2, [sp, #12]
 800f03a:	9302      	str	r3, [sp, #8]
 800f03c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f04e:	6939      	ldr	r1, [r7, #16]
 800f050:	69f8      	ldr	r0, [r7, #28]
 800f052:	f000 fa29 	bl	800f4a8 <_ZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_>
 800f056:	4603      	mov	r3, r0
 800f058:	f083 0301 	eor.w	r3, r3, #1
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x132>
    return false;
 800f062:	2300      	movs	r3, #0
 800f064:	e108      	b.n	800f278 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
  size_t num_elements_in_axis = 1;
 800f066:	2301      	movs	r3, #1
 800f068:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800f06a:	2300      	movs	r3, #0
 800f06c:	667b      	str	r3, [r7, #100]	; 0x64
 800f06e:	e022      	b.n	800f0b6 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x182>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800f070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f078:	4413      	add	r3, r2
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	693a      	ldr	r2, [r7, #16]
 800f080:	4413      	add	r3, r2
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	643b      	str	r3, [r7, #64]	; 0x40
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 800f086:	f7fe fa1f 	bl	800d4c8 <_ZNSt14numeric_limitsIjE3maxEv>
 800f08a:	4602      	mov	r2, r0
 800f08c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f094:	429a      	cmp	r2, r3
 800f096:	bf8c      	ite	hi
 800f098:	2301      	movhi	r3, #1
 800f09a:	2300      	movls	r3, #0
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x172>
      return false;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	e0e8      	b.n	800f278 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x344>
    num_elements_in_axis *= current;
 800f0a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0aa:	fb02 f303 	mul.w	r3, r2, r3
 800f0ae:	66bb      	str	r3, [r7, #104]	; 0x68
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800f0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	667b      	str	r3, [r7, #100]	; 0x64
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	dbd8      	blt.n	800f070 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x13c>
  if (num_elements_in_axis > 0) {
 800f0be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 80d8 	beq.w	800f276 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x342>
    const float scale = input_scale / output_scale;
 800f0c6:	edd7 6a05 	vldr	s13, [r7, #20]
 800f0ca:	ed97 7a02 	vldr	s14, [r7, #8]
 800f0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0d2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (compute_sum) {
 800f0d6:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d048      	beq.n	800f170 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x23c>
          -input_zero_point * scale * num_elements_in_axis + 0.5f;
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	425b      	negs	r3, r3
 800f0e2:	ee07 3a90 	vmov	s15, r3
 800f0e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f0ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0f4:	ee07 3a90 	vmov	s15, r3
 800f0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
      const float bias =
 800f100:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f104:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f108:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800f10c:	2300      	movs	r3, #0
 800f10e:	663b      	str	r3, [r7, #96]	; 0x60
 800f110:	e029      	b.n	800f166 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x232>
            static_cast<U>(TfLiteRound(temp_sum[idx] * scale + bias)) +
 800f112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f11a:	4413      	add	r3, r2
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	ee07 3a90 	vmov	s15, r3
 800f122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f126:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f12a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f12e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f132:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f136:	eeb0 0a67 	vmov.f32	s0, s15
 800f13a:	f7f8 fb12 	bl	8007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f13e:	eef0 7a40 	vmov.f32	s15, s0
 800f142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f146:	ee17 2a90 	vmov	r2, s15
            output_zero_point;
 800f14a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
        const U value =
 800f14e:	4413      	add	r3, r2
 800f150:	647b      	str	r3, [r7, #68]	; 0x44
        output_data[idx] = static_cast<T>(value);
 800f152:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f158:	4413      	add	r3, r2
 800f15a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f15c:	b2d2      	uxtb	r2, r2
 800f15e:	701a      	strb	r2, [r3, #0]
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800f160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f162:	3301      	adds	r3, #1
 800f164:	663b      	str	r3, [r7, #96]	; 0x60
 800f166:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d3d1      	bcc.n	800f112 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x1de>
 800f16e:	e082      	b.n	800f276 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x342>
      const float bias = -input_zero_point * scale + 0.5f;
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	425b      	negs	r3, r3
 800f174:	ee07 3a90 	vmov	s15, r3
 800f178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f17c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f184:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f18c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800f190:	2300      	movs	r3, #0
 800f192:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f194:	e06b      	b.n	800f26e <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x33a>
 800f196:	bf00      	nop
 800f198:	0801e3f8 	.word	0x0801e3f8
 800f19c:	0801e404 	.word	0x0801e404
        float float_mean = static_cast<float>(temp_sum[idx]) /
 800f1a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f1a8:	4413      	add	r3, r2
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                           static_cast<float>(num_elements_in_axis);
 800f1b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1b6:	ee07 3a90 	vmov	s15, r3
 800f1ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
        float float_mean = static_cast<float>(temp_sum[idx]) /
 800f1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 800f1c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f1ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f1ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1d2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f1d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1da:	eeb0 0a67 	vmov.f32	s0, s15
 800f1de:	f7f8 fac0 	bl	8007762 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f1e2:	eeb0 7a40 	vmov.f32	s14, s0
 800f1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1ea:	ee07 3a90 	vmov	s15, r3
 800f1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            static_cast<float>(std::numeric_limits<T>::max()));
 800f1fa:	f7f8 fadb 	bl	80077b4 <_ZNSt14numeric_limitsIhE3maxEv>
 800f1fe:	4603      	mov	r3, r0
 800f200:	ee07 3a90 	vmov	s15, r3
 800f204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f208:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        float result = TfLiteMin(
 800f20c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f8e5 	bl	800f3e6 <_ZN6tflite9TfLiteMinIfEET_RKS1_S3_>
 800f21c:	eef0 7a40 	vmov.f32	s15, s0
 800f220:	edc7 7a08 	vstr	s15, [r7, #32]
                           static_cast<float>(std::numeric_limits<T>::min()));
 800f224:	f7f8 fabe 	bl	80077a4 <_ZNSt14numeric_limitsIhE3minEv>
 800f228:	4603      	mov	r3, r0
 800f22a:	ee07 3a90 	vmov	s15, r3
 800f22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f232:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        result = TfLiteMax(result,
 800f236:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f23a:	f107 0320 	add.w	r3, r7, #32
 800f23e:	4611      	mov	r1, r2
 800f240:	4618      	mov	r0, r3
 800f242:	f000 f8e8 	bl	800f416 <_ZN6tflite9TfLiteMaxIfEET_RKS1_S3_>
 800f246:	eef0 7a40 	vmov.f32	s15, s0
 800f24a:	edc7 7a08 	vstr	s15, [r7, #32]
        output_data[idx] = static_cast<T>(result);
 800f24e:	edd7 7a08 	vldr	s15, [r7, #32]
 800f252:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f258:	4413      	add	r3, r2
 800f25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f25e:	edc7 7a01 	vstr	s15, [r7, #4]
 800f262:	793a      	ldrb	r2, [r7, #4]
 800f264:	b2d2      	uxtb	r2, r2
 800f266:	701a      	strb	r2, [r3, #0]
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800f268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f26a:	3301      	adds	r3, #1
 800f26c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f26e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f272:	429a      	cmp	r2, r3
 800f274:	d394      	bcc.n	800f1a0 <_ZN6tflite13reference_ops18QuantizedMeanOrSumIhmEEbPKT_lfPKiiPS2_lfS6_iS6_ibPiS8_PT0_b+0x26c>
  return true;
 800f276:	2301      	movs	r3, #1
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3778      	adds	r7, #120	; 0x78
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bdb0      	pop	{r4, r5, r7, pc}

0800f280 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_clEff>:
  auto reducer = [](const Out current, const In in) -> Out {
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	ed87 0a02 	vstr	s0, [r7, #8]
 800f28c:	edc7 0a01 	vstr	s1, [r7, #4]
    const Out actual_in = static_cast<Out>(in);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	617b      	str	r3, [r7, #20]
    return current + actual_in;
 800f294:	ed97 7a02 	vldr	s14, [r7, #8]
 800f298:	edd7 7a05 	vldr	s15, [r7, #20]
 800f29c:	ee77 7a27 	vadd.f32	s15, s14, s15
  auto reducer = [](const Out current, const In in) -> Out {
 800f2a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENUlffE_4_FUNEff>:
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	ed87 0a01 	vstr	s0, [r7, #4]
 800f2b8:	edc7 0a00 	vstr	s1, [r7]
 800f2bc:	edd7 0a00 	vldr	s1, [r7]
 800f2c0:	ed97 0a01 	vldr	s0, [r7, #4]
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	f7ff ffdb 	bl	800f280 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_clEff>
 800f2ca:	eef0 7a40 	vmov.f32	s15, s0
 800f2ce:	eeb0 0a67 	vmov.f32	s0, s15
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_cvPFfffEEv>:
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	4b03      	ldr	r3, [pc, #12]	; (800f2f0 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_cvPFfffEEv+0x18>)
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	0800f2af 	.word	0x0800f2af

0800f2f4 <_ZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_>:
inline bool ReduceSumImpl(const In* input_data, const int* input_dims,
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b08c      	sub	sp, #48	; 0x30
 800f2f8:	af06      	add	r7, sp, #24
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	603b      	str	r3, [r7, #0]
  return Reduce<In, Out>(input_data, input_dims, output_dims, input_num_dims,
 800f302:	f107 0314 	add.w	r3, r7, #20
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff ffe6 	bl	800f2d8 <_ZZN6tflite13reference_ops13ReduceSumImplIffEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlffE_cvPFfffEEv>
 800f30c:	4602      	mov	r2, r0
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	9305      	str	r3, [sp, #20]
 800f312:	9204      	str	r2, [sp, #16]
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	9302      	str	r3, [sp, #8]
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	6a3b      	ldr	r3, [r7, #32]
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	68b9      	ldr	r1, [r7, #8]
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f000 f8df 	bl	800f4ee <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>
 800f330:	4603      	mov	r3, r0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENKUllaE_clEla>:
  auto reducer = [](const Out current, const In in) -> Out {
 800f33a:	b480      	push	{r7}
 800f33c:	b087      	sub	sp, #28
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	60b9      	str	r1, [r7, #8]
 800f344:	4613      	mov	r3, r2
 800f346:	71fb      	strb	r3, [r7, #7]
    const Out actual_in = static_cast<Out>(in);
 800f348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f34c:	617b      	str	r3, [r7, #20]
    return current + actual_in;
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	4413      	add	r3, r2
  auto reducer = [](const Out current, const In in) -> Out {
 800f354:	4618      	mov	r0, r3
 800f356:	371c      	adds	r7, #28
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENUllaE_4_FUNEla>:
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	460b      	mov	r3, r1
 800f36a:	70fb      	strb	r3, [r7, #3]
 800f36c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f370:	461a      	mov	r2, r3
 800f372:	6879      	ldr	r1, [r7, #4]
 800f374:	2000      	movs	r0, #0
 800f376:	f7ff ffe0 	bl	800f33a <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENKUllaE_clEla>
 800f37a:	4603      	mov	r3, r0
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENKUllaE_cvPFllaEEv>:
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	4b03      	ldr	r3, [pc, #12]	; (800f39c <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENKUllaE_cvPFllaEEv+0x18>)
 800f38e:	4618      	mov	r0, r3
 800f390:	370c      	adds	r7, #12
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	0800f361 	.word	0x0800f361

0800f3a0 <_ZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_>:
inline bool ReduceSumImpl(const In* input_data, const int* input_dims,
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08c      	sub	sp, #48	; 0x30
 800f3a4:	af06      	add	r7, sp, #24
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
  return Reduce<In, Out>(input_data, input_dims, output_dims, input_num_dims,
 800f3ae:	f107 0314 	add.w	r3, r7, #20
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff ffe6 	bl	800f384 <_ZZN6tflite13reference_ops13ReduceSumImplIalEEbPKT_PKiS6_iiS6_iPiPT0_ENKUllaE_cvPFllaEEv>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	9305      	str	r3, [sp, #20]
 800f3be:	9204      	str	r2, [sp, #16]
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	9303      	str	r3, [sp, #12]
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	9302      	str	r3, [sp, #8]
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ca:	9301      	str	r3, [sp, #4]
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	68b9      	ldr	r1, [r7, #8]
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f000 f8d9 	bl	800f58e <_ZN6tflite13reference_ops6ReduceIalEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>
 800f3dc:	4603      	mov	r3, r0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <_ZN6tflite9TfLiteMinIfEET_RKS1_S3_>:
inline float TfLiteMin(const float& x, const float& y) {
  return std::min(x, y);
}
#else
template <class T>
inline T TfLiteMin(const T& x, const T& y) {
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  return std::fmin(x, y);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	edd3 7a00 	vldr	s15, [r3]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	ed93 7a00 	vldr	s14, [r3]
 800f3fc:	eef0 0a47 	vmov.f32	s1, s14
 800f400:	eeb0 0a67 	vmov.f32	s0, s15
 800f404:	f7fe f84c 	bl	800d4a0 <_ZSt4fminff>
 800f408:	eef0 7a40 	vmov.f32	s15, s0
}
 800f40c:	eeb0 0a67 	vmov.f32	s0, s15
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <_ZN6tflite9TfLiteMaxIfEET_RKS1_S3_>:
inline float TfLiteMax(const float& x, const float& y) {
  return std::max(x, y);
}
#else
template <class T>
inline T TfLiteMax(const T& x, const T& y) {
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	6039      	str	r1, [r7, #0]
  return std::fmax(x, y);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	edd3 7a00 	vldr	s15, [r3]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	ed93 7a00 	vldr	s14, [r3]
 800f42c:	eef0 0a47 	vmov.f32	s1, s14
 800f430:	eeb0 0a67 	vmov.f32	s0, s15
 800f434:	f7fe f820 	bl	800d478 <_ZSt4fmaxff>
 800f438:	eef0 7a40 	vmov.f32	s15, s0
}
 800f43c:	eeb0 0a67 	vmov.f32	s0, s15
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlmhE_clEmh>:
  auto reducer = [](const Out current, const In in) -> Out {
 800f446:	b480      	push	{r7}
 800f448:	b087      	sub	sp, #28
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	60f8      	str	r0, [r7, #12]
 800f44e:	60b9      	str	r1, [r7, #8]
 800f450:	4613      	mov	r3, r2
 800f452:	71fb      	strb	r3, [r7, #7]
    const Out actual_in = static_cast<Out>(in);
 800f454:	79fb      	ldrb	r3, [r7, #7]
 800f456:	617b      	str	r3, [r7, #20]
    return current + actual_in;
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	4413      	add	r3, r2
  auto reducer = [](const Out current, const In in) -> Out {
 800f45e:	4618      	mov	r0, r3
 800f460:	371c      	adds	r7, #28
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENUlmhE_4_FUNEmh>:
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	460b      	mov	r3, r1
 800f474:	70fb      	strb	r3, [r7, #3]
 800f476:	78fb      	ldrb	r3, [r7, #3]
 800f478:	461a      	mov	r2, r3
 800f47a:	6879      	ldr	r1, [r7, #4]
 800f47c:	2000      	movs	r0, #0
 800f47e:	f7ff ffe2 	bl	800f446 <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlmhE_clEmh>
 800f482:	4603      	mov	r3, r0
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlmhE_cvPFmmhEEv>:
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	4b03      	ldr	r3, [pc, #12]	; (800f4a4 <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlmhE_cvPFmmhEEv+0x18>)
 800f496:	4618      	mov	r0, r3
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	0800f46b 	.word	0x0800f46b

0800f4a8 <_ZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_>:
inline bool ReduceSumImpl(const In* input_data, const int* input_dims,
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08c      	sub	sp, #48	; 0x30
 800f4ac:	af06      	add	r7, sp, #24
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]
  return Reduce<In, Out>(input_data, input_dims, output_dims, input_num_dims,
 800f4b6:	f107 0314 	add.w	r3, r7, #20
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff ffe6 	bl	800f48c <_ZZN6tflite13reference_ops13ReduceSumImplIhmEEbPKT_PKiS6_iiS6_iPiPT0_ENKUlmhE_cvPFmmhEEv>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	9305      	str	r3, [sp, #20]
 800f4c6:	9204      	str	r2, [sp, #16]
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	9303      	str	r3, [sp, #12]
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	9302      	str	r3, [sp, #8]
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	9301      	str	r3, [sp, #4]
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	68b9      	ldr	r1, [r7, #8]
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f000 f89d 	bl	800f61e <_ZN6tflite13reference_ops6ReduceIhmEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>
 800f4e4:	4603      	mov	r3, r0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3718      	adds	r7, #24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>:
inline bool Reduce(const In* input_data, const int* input_dims,
 800f4ee:	b590      	push	{r4, r7, lr}
 800f4f0:	b08b      	sub	sp, #44	; 0x2c
 800f4f2:	af02      	add	r7, sp, #8
 800f4f4:	60f8      	str	r0, [r7, #12]
 800f4f6:	60b9      	str	r1, [r7, #8]
 800f4f8:	607a      	str	r2, [r7, #4]
 800f4fa:	603b      	str	r3, [r7, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	61fb      	str	r3, [r7, #28]
 800f500:	e008      	b.n	800f514 <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x26>
    input_iter[idx] = 0;
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f508:	4413      	add	r3, r2
 800f50a:	2200      	movs	r2, #0
 800f50c:	601a      	str	r2, [r3, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	3301      	adds	r3, #1
 800f512:	61fb      	str	r3, [r7, #28]
 800f514:	69fa      	ldr	r2, [r7, #28]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	dbf2      	blt.n	800f502 <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x14>
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
 800f51c:	2300      	movs	r3, #0
 800f51e:	9300      	str	r3, [sp, #0]
 800f520:	2300      	movs	r3, #0
 800f522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f524:	68b9      	ldr	r1, [r7, #8]
 800f526:	6838      	ldr	r0, [r7, #0]
 800f528:	f7fe f82c 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f52c:	61b8      	str	r0, [r7, #24]
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 800f52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f536:	68b9      	ldr	r1, [r7, #8]
 800f538:	6838      	ldr	r0, [r7, #0]
 800f53a:	f7fe f823 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f53e:	6178      	str	r0, [r7, #20]
        reducer(output_data[output_offset], input_data[input_offset]);
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f546:	4413      	add	r3, r2
 800f548:	edd3 7a00 	vldr	s15, [r3]
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	4413      	add	r3, r2
 800f554:	ed93 7a00 	vldr	s14, [r3]
    output_data[output_offset] =
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f55e:	18d4      	adds	r4, r2, r3
        reducer(output_data[output_offset], input_data[input_offset]);
 800f560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f562:	eef0 0a47 	vmov.f32	s1, s14
 800f566:	eeb0 0a67 	vmov.f32	s0, s15
 800f56a:	4798      	blx	r3
 800f56c:	eef0 7a40 	vmov.f32	s15, s0
    output_data[output_offset] =
 800f570:	edc4 7a00 	vstr	s15, [r4]
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 800f574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	6838      	ldr	r0, [r7, #0]
 800f57a:	f7fd ffae 	bl	800d4da <_ZN6tflite9NextIndexEiPKiPi>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1cb      	bne.n	800f51c <_ZN6tflite13reference_ops6ReduceIffEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x2e>
  return true;
 800f584:	2301      	movs	r3, #1
}
 800f586:	4618      	mov	r0, r3
 800f588:	3724      	adds	r7, #36	; 0x24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd90      	pop	{r4, r7, pc}

0800f58e <_ZN6tflite13reference_ops6ReduceIalEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>:
inline bool Reduce(const In* input_data, const int* input_dims,
 800f58e:	b590      	push	{r4, r7, lr}
 800f590:	b08b      	sub	sp, #44	; 0x2c
 800f592:	af02      	add	r7, sp, #8
 800f594:	60f8      	str	r0, [r7, #12]
 800f596:	60b9      	str	r1, [r7, #8]
 800f598:	607a      	str	r2, [r7, #4]
 800f59a:	603b      	str	r3, [r7, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f59c:	2300      	movs	r3, #0
 800f59e:	61fb      	str	r3, [r7, #28]
 800f5a0:	e008      	b.n	800f5b4 <_ZN6tflite13reference_ops6ReduceIalEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x26>
    input_iter[idx] = 0;
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5a8:	4413      	add	r3, r2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	61fb      	str	r3, [r7, #28]
 800f5b4:	69fa      	ldr	r2, [r7, #28]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	dbf2      	blt.n	800f5a2 <_ZN6tflite13reference_ops6ReduceIalEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x14>
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5c4:	68b9      	ldr	r1, [r7, #8]
 800f5c6:	6838      	ldr	r0, [r7, #0]
 800f5c8:	f7fd ffdc 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f5cc:	61b8      	str	r0, [r7, #24]
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 800f5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5d6:	68b9      	ldr	r1, [r7, #8]
 800f5d8:	6838      	ldr	r0, [r7, #0]
 800f5da:	f7fd ffd3 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f5de:	6178      	str	r0, [r7, #20]
        reducer(output_data[output_offset], input_data[input_offset]);
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5e6:	4413      	add	r3, r2
 800f5e8:	6818      	ldr	r0, [r3, #0]
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	f993 1000 	ldrsb.w	r1, [r3]
    output_data[output_offset] =
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5fa:	18d4      	adds	r4, r2, r3
        reducer(output_data[output_offset], input_data[input_offset]);
 800f5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5fe:	4798      	blx	r3
 800f600:	4603      	mov	r3, r0
    output_data[output_offset] =
 800f602:	6023      	str	r3, [r4, #0]
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 800f604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f606:	68b9      	ldr	r1, [r7, #8]
 800f608:	6838      	ldr	r0, [r7, #0]
 800f60a:	f7fd ff66 	bl	800d4da <_ZN6tflite9NextIndexEiPKiPi>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1d3      	bne.n	800f5bc <_ZN6tflite13reference_ops6ReduceIalEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x2e>
  return true;
 800f614:	2301      	movs	r3, #1
}
 800f616:	4618      	mov	r0, r3
 800f618:	3724      	adds	r7, #36	; 0x24
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd90      	pop	{r4, r7, pc}

0800f61e <_ZN6tflite13reference_ops6ReduceIhmEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_>:
inline bool Reduce(const In* input_data, const int* input_dims,
 800f61e:	b590      	push	{r4, r7, lr}
 800f620:	b08b      	sub	sp, #44	; 0x2c
 800f622:	af02      	add	r7, sp, #8
 800f624:	60f8      	str	r0, [r7, #12]
 800f626:	60b9      	str	r1, [r7, #8]
 800f628:	607a      	str	r2, [r7, #4]
 800f62a:	603b      	str	r3, [r7, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f62c:	2300      	movs	r3, #0
 800f62e:	61fb      	str	r3, [r7, #28]
 800f630:	e008      	b.n	800f644 <_ZN6tflite13reference_ops6ReduceIhmEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x26>
    input_iter[idx] = 0;
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f638:	4413      	add	r3, r2
 800f63a:	2200      	movs	r2, #0
 800f63c:	601a      	str	r2, [r3, #0]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	3301      	adds	r3, #1
 800f642:	61fb      	str	r3, [r7, #28]
 800f644:	69fa      	ldr	r2, [r7, #28]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	dbf2      	blt.n	800f632 <_ZN6tflite13reference_ops6ReduceIhmEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x14>
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
 800f64c:	2300      	movs	r3, #0
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	2300      	movs	r3, #0
 800f652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	6838      	ldr	r0, [r7, #0]
 800f658:	f7fd ff94 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f65c:	61b8      	str	r0, [r7, #24]
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
 800f65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f666:	68b9      	ldr	r1, [r7, #8]
 800f668:	6838      	ldr	r0, [r7, #0]
 800f66a:	f7fd ff8b 	bl	800d584 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
 800f66e:	6178      	str	r0, [r7, #20]
        reducer(output_data[output_offset], input_data[input_offset]);
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f676:	4413      	add	r3, r2
 800f678:	6818      	ldr	r0, [r3, #0]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	4413      	add	r3, r2
 800f680:	7819      	ldrb	r1, [r3, #0]
    output_data[output_offset] =
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f688:	18d4      	adds	r4, r2, r3
        reducer(output_data[output_offset], input_data[input_offset]);
 800f68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68c:	4798      	blx	r3
 800f68e:	4603      	mov	r3, r0
    output_data[output_offset] =
 800f690:	6023      	str	r3, [r4, #0]
  } while (NextIndex(input_num_dims, input_dims, input_iter));
 800f692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f694:	68b9      	ldr	r1, [r7, #8]
 800f696:	6838      	ldr	r0, [r7, #0]
 800f698:	f7fd ff1f 	bl	800d4da <_ZN6tflite9NextIndexEiPKiPi>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1d4      	bne.n	800f64c <_ZN6tflite13reference_ops6ReduceIhmEEbPKT_PKiS6_iiS6_iPiPFT0_S8_S2_EPS8_+0x2e>
  return true;
 800f6a2:	2301      	movs	r3, #1
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3724      	adds	r7, #36	; 0x24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd90      	pop	{r4, r7, pc}

0800f6ac <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	e000      	b.n	800f6c2 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	370c      	adds	r7, #12
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
	...

0800f6d0 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800f6d0:	b480      	push	{r7}
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	4b04      	ldr	r3, [pc, #16]	; (800f6e8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800f6d6:	ee07 3a90 	vmov	s15, r3
 800f6da:	eeb0 0a67 	vmov.f32	s0, s15
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	7f7fffff 	.word	0x7f7fffff

0800f6ec <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800f6ec:	b480      	push	{r7}
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800f6f4:	ee07 3a90 	vmov	s15, r3
 800f6f8:	eeb0 0a67 	vmov.f32	s0, s15
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	ed87 0a03 	vstr	s0, [r7, #12]
 800f70e:	edc7 0a02 	vstr	s1, [r7, #8]
 800f712:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800f716:	f107 0208 	add.w	r2, r7, #8
 800f71a:	f107 030c 	add.w	r3, r7, #12
 800f71e:	4611      	mov	r1, r2
 800f720:	4618      	mov	r0, r3
 800f722:	f7f7 fff1 	bl	8007708 <_ZSt3maxIfERKT_S2_S2_>
 800f726:	4602      	mov	r2, r0
 800f728:	1d3b      	adds	r3, r7, #4
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7f7 ffd2 	bl	80076d6 <_ZSt3minIfERKT_S2_S2_>
 800f732:	4603      	mov	r3, r0
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	ee07 3a90 	vmov	s15, r3
}
 800f73a:	eeb0 0a67 	vmov.f32	s0, s15
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800f752:	7bfb      	ldrb	r3, [r7, #15]
 800f754:	2b01      	cmp	r3, #1
 800f756:	d10b      	bne.n	800f770 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	f04f 0200 	mov.w	r2, #0
 800f75e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800f760:	f7ff ffb6 	bl	800f6d0 <_ZNSt14numeric_limitsIfE3maxEv>
 800f764:	eef0 7a40 	vmov.f32	s15, s0
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800f76e:	e023      	b.n	800f7b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800f770:	7bfb      	ldrb	r3, [r7, #15]
 800f772:	2b03      	cmp	r3, #3
 800f774:	d107      	bne.n	800f786 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	f04f 0200 	mov.w	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a0f      	ldr	r2, [pc, #60]	; (800f7c0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800f782:	601a      	str	r2, [r3, #0]
}
 800f784:	e018      	b.n	800f7b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800f786:	7bfb      	ldrb	r3, [r7, #15]
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d107      	bne.n	800f79c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	4a0d      	ldr	r2, [pc, #52]	; (800f7c4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800f790:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f798:	601a      	str	r2, [r3, #0]
}
 800f79a:	e00d      	b.n	800f7b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800f79c:	f7ff ffa6 	bl	800f6ec <_ZNSt14numeric_limitsIfE6lowestEv>
 800f7a0:	eef0 7a40 	vmov.f32	s15, s0
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800f7aa:	f7ff ff91 	bl	800f6d0 <_ZNSt14numeric_limitsIfE3maxEv>
 800f7ae:	eef0 7a40 	vmov.f32	s15, s0
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	edc3 7a00 	vstr	s15, [r3]
}
 800f7b8:	bf00      	nop
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	40c00000 	.word	0x40c00000
 800f7c4:	bf800000 	.word	0xbf800000

0800f7c8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f7dc:	68b9      	ldr	r1, [r7, #8]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc fa00 	bl	800bbe4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f7e4:	4603      	mov	r3, r0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3710      	adds	r7, #16
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
	...

0800f7f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800f7f0:	b590      	push	{r4, r7, lr}
 800f7f2:	b091      	sub	sp, #68	; 0x44
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800f7f8:	f000 f94d 	bl	800fa96 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800f800:	2001      	movs	r0, #1
 800f802:	f000 f951 	bl	800faa8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800f806:	4603      	mov	r3, r0
 800f808:	4619      	mov	r1, r3
 800f80a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f80c:	f000 f960 	bl	800fad0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f810:	4603      	mov	r3, r0
 800f812:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800f814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 f978 	bl	800fb0c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f81c:	4603      	mov	r3, r0
 800f81e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f820:	4618      	mov	r0, r3
 800f822:	f000 f955 	bl	800fad0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f826:	4603      	mov	r3, r0
 800f828:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800f82a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f82c:	f000 f98c 	bl	800fb48 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f830:	4603      	mov	r3, r0
 800f832:	4618      	mov	r0, r3
 800f834:	f7fd fcc8 	bl	800d1c8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800f838:	4603      	mov	r3, r0
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800f83c:	6879      	ldr	r1, [r7, #4]
 800f83e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f840:	f000 f946 	bl	800fad0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f844:	4603      	mov	r3, r0
 800f846:	63bb      	str	r3, [r7, #56]	; 0x38
 800f848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 f917 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800f852:	4603      	mov	r3, r0
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800f858:	4883      	ldr	r0, [pc, #524]	; (800fa68 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800f85a:	f7fd f919 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f85e:	4603      	mov	r3, r0
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd f901 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f866:	4603      	mov	r3, r0
 800f868:	627b      	str	r3, [r7, #36]	; 0x24
 800f86a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800f86e:	f7fc fb87 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f872:	4603      	mov	r3, r0
 800f874:	4619      	mov	r1, r3
 800f876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f878:	f7fc fb8d 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f87c:	4603      	mov	r3, r0
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fc fbdc 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f884:	4604      	mov	r4, r0
 800f886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f88a:	f7fd fcff 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f88e:	4603      	mov	r3, r0
 800f890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f892:	4619      	mov	r1, r3
 800f894:	4620      	mov	r0, r4
 800f896:	f7fd fb99 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f89a:	4603      	mov	r3, r0
 800f89c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800f89e:	4873      	ldr	r0, [pc, #460]	; (800fa6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800f8a0:	f7fd f8f6 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fd f8de 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	623b      	str	r3, [r7, #32]
 800f8b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800f8b4:	f7fc fb64 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f8be:	f7fc fb6a 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7fc fbb9 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	6a39      	ldr	r1, [r7, #32]
 800f8ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8d0:	f7fd fcdc 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7fd fb76 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800f8e4:	4862      	ldr	r0, [pc, #392]	; (800fa70 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800f8e6:	f7fd f8d3 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd f8bb 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	61fb      	str	r3, [r7, #28]
 800f8f6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800f8fa:	f7fc fb41 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f8fe:	4603      	mov	r3, r0
 800f900:	4619      	mov	r1, r3
 800f902:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f904:	f7fc fb47 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f908:	4603      	mov	r3, r0
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fc fb96 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f910:	4604      	mov	r4, r0
 800f912:	69f9      	ldr	r1, [r7, #28]
 800f914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f916:	f7fd fcb9 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f91a:	4603      	mov	r3, r0
 800f91c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f91e:	4619      	mov	r1, r3
 800f920:	4620      	mov	r0, r4
 800f922:	f7fd fb53 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f926:	4603      	mov	r3, r0
 800f928:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800f92a:	4852      	ldr	r0, [pc, #328]	; (800fa74 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800f92c:	f7fd f8b0 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f930:	4603      	mov	r3, r0
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd f898 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f938:	4603      	mov	r3, r0
 800f93a:	61bb      	str	r3, [r7, #24]
 800f93c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800f940:	f7fc fb1e 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f944:	4603      	mov	r3, r0
 800f946:	4619      	mov	r1, r3
 800f948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f94a:	f7fc fb24 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f94e:	4603      	mov	r3, r0
 800f950:	4618      	mov	r0, r3
 800f952:	f7fc fb73 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f956:	4604      	mov	r4, r0
 800f958:	69b9      	ldr	r1, [r7, #24]
 800f95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f95c:	f7fd fc96 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f960:	4603      	mov	r3, r0
 800f962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f964:	4619      	mov	r1, r3
 800f966:	4620      	mov	r0, r4
 800f968:	f7fd fb30 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f96c:	4603      	mov	r3, r0
 800f96e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800f970:	4841      	ldr	r0, [pc, #260]	; (800fa78 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800f972:	f7fd f88d 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f976:	4603      	mov	r3, r0
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fd f875 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f97e:	4603      	mov	r3, r0
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f986:	f7fc fafb 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f98a:	4603      	mov	r3, r0
 800f98c:	4619      	mov	r1, r3
 800f98e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f990:	f7fc fb01 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f994:	4603      	mov	r3, r0
 800f996:	4618      	mov	r0, r3
 800f998:	f7fc fb50 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f99c:	4604      	mov	r4, r0
 800f99e:	6979      	ldr	r1, [r7, #20]
 800f9a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9a2:	f7fd fc73 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f7fd fb0d 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800f9b6:	4831      	ldr	r0, [pc, #196]	; (800fa7c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800f9b8:	f7fd f86a 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fd f852 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	613b      	str	r3, [r7, #16]
 800f9c8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f9cc:	f7fc fad8 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f9d6:	f7fc fade 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fc fb2d 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	6939      	ldr	r1, [r7, #16]
 800f9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9e8:	f7fd fc50 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f7fd faea 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800f9fc:	20f2      	movs	r0, #242	; 0xf2
 800f9fe:	f7fd f847 	bl	800ca90 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800fa02:	4603      	mov	r3, r0
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fd f82f 	bl	800ca68 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	60fb      	str	r3, [r7, #12]
 800fa0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800fa12:	f7fc fab5 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fa16:	4603      	mov	r3, r0
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa1c:	f7fc fabb 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800fa20:	4603      	mov	r3, r0
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fc fb0a 	bl	800c03c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800fa28:	4604      	mov	r4, r0
 800fa2a:	68f9      	ldr	r1, [r7, #12]
 800fa2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa2e:	f7fd fc2d 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fa32:	4603      	mov	r3, r0
 800fa34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa36:	4619      	mov	r1, r3
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f7fd fac7 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f89a 	bl	800fb7c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800fa48:	4604      	mov	r4, r0
 800fa4a:	f7fd f997 	bl	800cd7c <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa52:	4619      	mov	r1, r3
 800fa54:	4620      	mov	r0, r4
 800fa56:	f7fd fab9 	bl	800cfcc <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3744      	adds	r7, #68	; 0x44
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd90      	pop	{r4, r7, pc}
 800fa68:	63afbe7b 	.word	0x63afbe7b
 800fa6c:	4da2cbf2 	.word	0x4da2cbf2
 800fa70:	2f16ac6c 	.word	0x2f16ac6c
 800fa74:	1152aaa4 	.word	0x1152aaa4
 800fa78:	02582ab7 	.word	0x02582ab7
 800fa7c:	000afe11 	.word	0x000afe11

0800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	370c      	adds	r7, #12
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800fa96:	b580      	push	{r7, lr}
 800fa98:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800fa9a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800fa9e:	f000 f803 	bl	800faa8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800faa2:	4603      	mov	r3, r0
  }
 800faa4:	4618      	mov	r0, r3
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800faa8:	b590      	push	{r4, r7, lr}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800fab0:	f107 030c 	add.w	r3, r7, #12
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff ffe3 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800faba:	4604      	mov	r4, r0
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7fc fa5f 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fac2:	4603      	mov	r3, r0
 800fac4:	6023      	str	r3, [r4, #0]
    return retval;
 800fac6:	68fb      	ldr	r3, [r7, #12]
  }
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	bd90      	pop	{r4, r7, pc}

0800fad0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800fad0:	b590      	push	{r4, r7, lr}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
 800fada:	1d3b      	adds	r3, r7, #4
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff ffcf 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fae2:	4603      	mov	r3, r0
 800fae4:	681c      	ldr	r4, [r3, #0]
 800fae6:	463b      	mov	r3, r7
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff ffc9 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800faee:	4603      	mov	r3, r0
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4619      	mov	r1, r3
 800faf4:	4620      	mov	r0, r4
 800faf6:	f7fc ffe4 	bl	800cac2 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800fafa:	4603      	mov	r3, r0
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 f84f 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4618      	mov	r0, r3
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd90      	pop	{r4, r7, pc}

0800fb0c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800fb0c:	b590      	push	{r4, r7, lr}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	1d3b      	adds	r3, r7, #4
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7ff ffb1 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	681c      	ldr	r4, [r3, #0]
 800fb22:	463b      	mov	r3, r7
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff ffab 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	4620      	mov	r0, r4
 800fb32:	f7fc fa30 	bl	800bf96 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800fb36:	4603      	mov	r3, r0
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f000 f831 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd90      	pop	{r4, r7, pc}

0800fb48 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800fb50:	1d3b      	adds	r3, r7, #4
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff ff94 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	681d      	ldr	r5, [r3, #0]
 800fb5c:	f107 030c 	add.w	r3, r7, #12
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fc ff76 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fb66:	4604      	mov	r4, r0
 800fb68:	4628      	mov	r0, r5
 800fb6a:	f000 f82a 	bl	800fbc2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	6023      	str	r3, [r4, #0]
  return result;
 800fb72:	68fb      	ldr	r3, [r7, #12]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bdb0      	pop	{r4, r5, r7, pc}

0800fb7c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	1d3b      	adds	r3, r7, #4
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff ff7a 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fd fa82 	bl	800d09a <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800fb96:	4603      	mov	r3, r0
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800fba8:	f107 030c 	add.w	r3, r7, #12
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7ff ff67 	bl	800fa80 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6013      	str	r3, [r2, #0]
    return retval;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
  }
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b082      	sub	sp, #8
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f806 	bl	800fbdc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800fbd0:	4603      	mov	r3, r0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08a      	sub	sp, #40	; 0x28
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800fbe4:	f7fb fff5 	bl	800bbd2 <_ZNSt14numeric_limitsIlE3minEv>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fc f9c8 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbf0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800fbf2:	f7f7 fbeb 	bl	80073cc <_ZNSt14numeric_limitsIlE3maxEv>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fc f9c1 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fbfe:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800fc00:	2320      	movs	r3, #32
 800fc02:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800fc04:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800fc08:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800fc0a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800fc0e:	f7fc f9b7 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fc12:	4603      	mov	r3, r0
 800fc14:	4619      	mov	r1, r3
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7fc f9fc 	bl	800c014 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800fc1c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800fc1e:	480f      	ldr	r0, [pc, #60]	; (800fc5c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800fc20:	f7fc f9ae 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800fc24:	4603      	mov	r3, r0
 800fc26:	4619      	mov	r1, r3
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7fc f9d1 	bl	800bfd0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800fc2e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800fc30:	2105      	movs	r1, #5
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7fc ff60 	bl	800caf8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800fc38:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	6a39      	ldr	r1, [r7, #32]
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7fc ff9e 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fc44:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc4a:	6938      	ldr	r0, [r7, #16]
 800fc4c:	f7fc ff98 	bl	800cb80 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800fc50:	60f8      	str	r0, [r7, #12]
    return result;
 800fc52:	68fb      	ldr	r3, [r7, #12]
  }
 800fc54:	4618      	mov	r0, r3
 800fc56:	3728      	adds	r7, #40	; 0x28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	fc000001 	.word	0xfc000001

0800fc60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	ed2d 8b02 	vpush	{d8}
 800fc66:	b0a7      	sub	sp, #156	; 0x9c
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
 800fc70:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fc78:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800fc80:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fc88:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fc90:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc98:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fca0:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca6:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcac:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800fcae:	68b8      	ldr	r0, [r7, #8]
 800fcb0:	f7f8 fa19 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	d001      	beq.n	800fcbe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 800fcba:	f007 ff83 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800fcbe:	6838      	ldr	r0, [r7, #0]
 800fcc0:	f7f8 fa11 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	d001      	beq.n	800fcce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 800fcca:	f007 ff7b 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800fcce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800fcd2:	f7f8 fa08 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b04      	cmp	r3, #4
 800fcda:	d001      	beq.n	800fce0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 800fcdc:	f007 ff72 	bl	8017bc4 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800fce0:	2300      	movs	r3, #0
 800fce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fce6:	2100      	movs	r1, #0
 800fce8:	68b8      	ldr	r0, [r7, #8]
 800fcea:	f7fc f9c4 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fcee:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	683a      	ldr	r2, [r7, #0]
 800fcf4:	2103      	movs	r1, #3
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	f7fc f9bd 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fcfc:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800fcfe:	2303      	movs	r3, #3
 800fd00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fd04:	2100      	movs	r1, #0
 800fd06:	6838      	ldr	r0, [r7, #0]
 800fd08:	f7fc f9b5 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fd0c:	6438      	str	r0, [r7, #64]	; 0x40
  if (bias_data) {
 800fd0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d009      	beq.n	800fd2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800fd16:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fd1a:	f7fb fe93 	bl	800ba44 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d001      	beq.n	800fd2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 800fd26:	f007 ff4d 	bl	8017bc4 <abort>
  }
  const int input_height = input_shape.Dims(1);
 800fd2a:	2101      	movs	r1, #1
 800fd2c:	68b8      	ldr	r0, [r7, #8]
 800fd2e:	f7fb fe51 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd32:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
 800fd34:	2102      	movs	r1, #2
 800fd36:	68b8      	ldr	r0, [r7, #8]
 800fd38:	f7fb fe4c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd3c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
 800fd3e:	2101      	movs	r1, #1
 800fd40:	6838      	ldr	r0, [r7, #0]
 800fd42:	f7fb fe47 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd46:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_width = filter_shape.Dims(2);
 800fd48:	2102      	movs	r1, #2
 800fd4a:	6838      	ldr	r0, [r7, #0]
 800fd4c:	f7fb fe42 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd50:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
 800fd52:	2101      	movs	r1, #1
 800fd54:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800fd58:	f7fb fe3c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd5c:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
 800fd5e:	2102      	movs	r1, #2
 800fd60:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800fd64:	f7fb fe36 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd68:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int batch = 0; batch < batches; ++batch) {
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd70:	e0dc      	b.n	800ff2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800fd72:	2300      	movs	r3, #0
 800fd74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd78:	e0cd      	b.n	800ff16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd80:	e0be      	b.n	800ff00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a0>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800fd82:	2300      	movs	r3, #0
 800fd84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd88:	e0af      	b.n	800feea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 800fd8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd90:	fb03 f202 	mul.w	r2, r3, r2
 800fd94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	627b      	str	r3, [r7, #36]	; 0x24
          const int in_y_origin = (out_y * stride_height) - pad_height;
 800fd9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fda0:	fb03 f202 	mul.w	r2, r3, r2
 800fda4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	623b      	str	r3, [r7, #32]
          float total = 0.f;
 800fdaa:	f04f 0300 	mov.w	r3, #0
 800fdae:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	67bb      	str	r3, [r7, #120]	; 0x78
 800fdb4:	e05d      	b.n	800fe72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x212>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	677b      	str	r3, [r7, #116]	; 0x74
 800fdba:	e053      	b.n	800fe64 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x204>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	673b      	str	r3, [r7, #112]	; 0x70
 800fdc0:	e049      	b.n	800fe56 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f6>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800fdc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fdc6:	fb02 f303 	mul.w	r3, r2, r3
 800fdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdcc:	4413      	add	r3, r2
 800fdce:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800fdd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fdd4:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800fdd8:	6a3a      	ldr	r2, [r7, #32]
 800fdda:	4413      	add	r3, r2
 800fddc:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	db35      	blt.n	800fe50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
 800fde4:	69fa      	ldr	r2, [r7, #28]
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	429a      	cmp	r2, r3
 800fdea:	da31      	bge.n	800fe50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	db2e      	blt.n	800fe50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
 800fdf2:	69ba      	ldr	r2, [r7, #24]
 800fdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	da2a      	bge.n	800fe50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 800fdfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	69ba      	ldr	r2, [r7, #24]
 800fe02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fe06:	68b8      	ldr	r0, [r7, #8]
 800fe08:	f7fb ffed 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fe0c:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	4413      	add	r3, r2
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	617b      	str	r3, [r7, #20]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 800fe18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fe20:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fe24:	6838      	ldr	r0, [r7, #0]
 800fe26:	f7fb ffde 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fe2a:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fe32:	4413      	add	r3, r2
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 800fe38:	ed97 7a05 	vldr	s14, [r7, #20]
 800fe3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe44:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800fe48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe4c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800fe50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe52:	3301      	adds	r3, #1
 800fe54:	673b      	str	r3, [r7, #112]	; 0x70
 800fe56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	dbb1      	blt.n	800fdc2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800fe5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe60:	3301      	adds	r3, #1
 800fe62:	677b      	str	r3, [r7, #116]	; 0x74
 800fe64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	dba7      	blt.n	800fdbc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800fe6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe6e:	3301      	adds	r3, #1
 800fe70:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fe74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe76:	429a      	cmp	r2, r3
 800fe78:	db9d      	blt.n	800fdb6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x156>
                }
              }
            }
          }
          float bias_value = 0.0f;
 800fe7a:	f04f 0300 	mov.w	r3, #0
 800fe7e:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 800fe80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d007      	beq.n	800fe98 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x238>
            bias_value = bias_data[out_channel];
 800fe88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fe92:	4413      	add	r3, r2
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800fe98:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800fe9c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800fea0:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800fea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800feae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800feb2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800feb6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800feba:	f7fb ff94 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800febe:	4603      	mov	r3, r0
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fec6:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 800fec8:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 800fecc:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 800fed0:	eeb0 0a48 	vmov.f32	s0, s16
 800fed4:	f7ff fc16 	bl	800f704 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800fed8:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800fedc:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800fee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fee4:	3301      	adds	r3, #1
 800fee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800feea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800feee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef0:	429a      	cmp	r2, r3
 800fef2:	f6ff af4a 	blt.w	800fd8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800fef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fefa:	3301      	adds	r3, #1
 800fefc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	429a      	cmp	r2, r3
 800ff08:	f6ff af3b 	blt.w	800fd82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800ff0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff10:	3301      	adds	r3, #1
 800ff12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ff16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	f6ff af2c 	blt.w	800fd7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x11a>
  for (int batch = 0; batch < batches; ++batch) {
 800ff22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff26:	3301      	adds	r3, #1
 800ff28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ff2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff32:	429a      	cmp	r2, r3
 800ff34:	f6ff af1d 	blt.w	800fd72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x112>
                                           output_activation_max);
        }
      }
    }
  }
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	3794      	adds	r7, #148	; 0x94
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	ecbd 8b02 	vpop	{d8}
 800ff44:	bd90      	pop	{r4, r7, pc}

0800ff46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 800ff46:	b590      	push	{r4, r7, lr}
 800ff48:	b0ab      	sub	sp, #172	; 0xac
 800ff4a:	af02      	add	r7, sp, #8
 800ff4c:	60f8      	str	r0, [r7, #12]
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	607a      	str	r2, [r7, #4]
 800ff52:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ff64:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ff6c:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ff74:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ff7c:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff84:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	695b      	ldr	r3, [r3, #20]
 800ff8a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	69db      	ldr	r3, [r3, #28]
 800ff96:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a1b      	ldr	r3, [r3, #32]
 800ff9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa2:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa8:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffae:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800ffb0:	69ba      	ldr	r2, [r7, #24]
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	dd01      	ble.n	800ffbc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 800ffb8:	f007 fe04 	bl	8017bc4 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	f7f8 f892 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b04      	cmp	r3, #4
 800ffc6:	d001      	beq.n	800ffcc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 800ffc8:	f007 fdfc 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800ffcc:	6838      	ldr	r0, [r7, #0]
 800ffce:	f7f8 f88a 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b04      	cmp	r3, #4
 800ffd6:	d001      	beq.n	800ffdc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 800ffd8:	f007 fdf4 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800ffdc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ffe0:	f7f8 f881 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b04      	cmp	r3, #4
 800ffe8:	d001      	beq.n	800ffee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 800ffea:	f007 fdeb 	bl	8017bc4 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800ffee:	2300      	movs	r3, #0
 800fff0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fff4:	2100      	movs	r1, #0
 800fff6:	68b8      	ldr	r0, [r7, #8]
 800fff8:	f7fc f83d 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fffc:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800fffe:	2303      	movs	r3, #3
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	2103      	movs	r1, #3
 8010004:	68b8      	ldr	r0, [r7, #8]
 8010006:	f7fc f836 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801000a:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801000c:	2303      	movs	r3, #3
 801000e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010012:	2100      	movs	r1, #0
 8010014:	6838      	ldr	r0, [r7, #0]
 8010016:	f7fc f82e 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801001a:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (bias_data) {
 801001c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010020:	2b00      	cmp	r3, #0
 8010022:	d009      	beq.n	8010038 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8010024:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010028:	f7fb fd0c 	bl	800ba44 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801002c:	4602      	mov	r2, r0
 801002e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010030:	4293      	cmp	r3, r2
 8010032:	d001      	beq.n	8010038 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
 8010034:	f007 fdc6 	bl	8017bc4 <abort>
  }
  const int input_height = input_shape.Dims(1);
 8010038:	2101      	movs	r1, #1
 801003a:	68b8      	ldr	r0, [r7, #8]
 801003c:	f7fb fcca 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010040:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 8010042:	2102      	movs	r1, #2
 8010044:	68b8      	ldr	r0, [r7, #8]
 8010046:	f7fb fcc5 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801004a:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
 801004c:	2101      	movs	r1, #1
 801004e:	6838      	ldr	r0, [r7, #0]
 8010050:	f7fb fcc0 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010054:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_width = filter_shape.Dims(2);
 8010056:	2102      	movs	r1, #2
 8010058:	6838      	ldr	r0, [r7, #0]
 801005a:	f7fb fcbb 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801005e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
 8010060:	2101      	movs	r1, #1
 8010062:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010066:	f7fb fcb5 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801006a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 801006c:	2102      	movs	r1, #2
 801006e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010072:	f7fb fcaf 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010076:	6378      	str	r0, [r7, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 8010078:	2300      	movs	r3, #0
 801007a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801007e:	e0ff      	b.n	8010280 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010080:	2300      	movs	r3, #0
 8010082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010086:	e0f0      	b.n	801026a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x324>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010088:	2300      	movs	r3, #0
 801008a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801008e:	e0e1      	b.n	8010254 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x30e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010090:	2300      	movs	r3, #0
 8010092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010096:	e0d2      	b.n	801023e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2f8>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8010098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801009c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80100a0:	fb03 f202 	mul.w	r2, r3, r2
 80100a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	633b      	str	r3, [r7, #48]	; 0x30
          const int in_y_origin = (out_y * stride_height) - pad_height;
 80100aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80100b0:	fb03 f202 	mul.w	r2, r3, r2
 80100b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          int32 acc = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80100be:	2300      	movs	r3, #0
 80100c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80100c4:	e06c      	b.n	80101a0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x25a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80100c6:	2300      	movs	r3, #0
 80100c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80100cc:	e05e      	b.n	801018c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x246>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80100ce:	2300      	movs	r3, #0
 80100d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80100d4:	e050      	b.n	8010178 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x232>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80100d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100dc:	fb02 f303 	mul.w	r3, r2, r3
 80100e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100e2:	4413      	add	r3, r2
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80100e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80100ec:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80100f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100f2:	4413      	add	r3, r2
 80100f4:	627b      	str	r3, [r7, #36]	; 0x24
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80100f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	db38      	blt.n	801016e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x228>
 80100fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010100:	429a      	cmp	r2, r3
 8010102:	da34      	bge.n	801016e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x228>
 8010104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010106:	2b00      	cmp	r3, #0
 8010108:	db31      	blt.n	801016e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x228>
 801010a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801010c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801010e:	429a      	cmp	r2, r3
 8010110:	da2d      	bge.n	801016e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x228>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8010112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010120:	68b8      	ldr	r0, [r7, #8]
 8010122:	f7fb fe60 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010126:	4603      	mov	r3, r0
 8010128:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4413      	add	r3, r2
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8010132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801013c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010140:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010144:	6838      	ldr	r0, [r7, #0]
 8010146:	f7fb fe4e 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801014a:	4603      	mov	r3, r0
 801014c:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 801014e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010152:	4413      	add	r3, r2
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	61fb      	str	r3, [r7, #28]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 8010158:	69fa      	ldr	r2, [r7, #28]
 801015a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801015c:	4413      	add	r3, r2
 801015e:	6a39      	ldr	r1, [r7, #32]
 8010160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010162:	440a      	add	r2, r1
 8010164:	fb03 f202 	mul.w	r2, r3, r2
                  acc +=
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	4413      	add	r3, r2
 801016c:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801016e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010172:	3301      	adds	r3, #1
 8010174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010178:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017e:	429a      	cmp	r2, r3
 8010180:	dba9      	blt.n	80100d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x190>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010186:	3301      	adds	r3, #1
 8010188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801018c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010192:	429a      	cmp	r2, r3
 8010194:	db9b      	blt.n	80100ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x188>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801019a:	3301      	adds	r3, #1
 801019c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80101a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80101a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101a6:	429a      	cmp	r2, r3
 80101a8:	db8d      	blt.n	80100c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x180>
                }
              }
            }
          }
          if (bias_data) {
 80101aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d009      	beq.n	80101c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x280>
            acc += bias_data[out_channel];
 80101b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80101bc:	4413      	add	r3, r2
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	4413      	add	r3, r2
 80101c4:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fb ff70 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80101d2:	4603      	mov	r3, r0
 80101d4:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101da:	4413      	add	r3, r2
 80101dc:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 80101de:	f107 0218 	add.w	r2, r7, #24
 80101e2:	f107 0310 	add.w	r3, r7, #16
 80101e6:	4611      	mov	r1, r2
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f7 feff 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 80101ee:	4603      	mov	r3, r0
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 80101f4:	f107 0214 	add.w	r2, r7, #20
 80101f8:	f107 0310 	add.w	r3, r7, #16
 80101fc:	4611      	mov	r1, r2
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f7 ff08 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8010204:	4603      	mov	r3, r0
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801020a:	693c      	ldr	r4, [r7, #16]
 801020c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010216:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801021a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801021e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010222:	f7fb fde0 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010226:	4603      	mov	r3, r0
 8010228:	461a      	mov	r2, r3
 801022a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801022e:	4413      	add	r3, r2
 8010230:	b2e2      	uxtb	r2, r4
 8010232:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8010234:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010238:	3301      	adds	r3, #1
 801023a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801023e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010244:	429a      	cmp	r2, r3
 8010246:	f6ff af27 	blt.w	8010098 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x152>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801024a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801024e:	3301      	adds	r3, #1
 8010250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025a:	429a      	cmp	r2, r3
 801025c:	f6ff af18 	blt.w	8010090 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010264:	3301      	adds	r3, #1
 8010266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801026a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	429a      	cmp	r2, r3
 8010272:	f6ff af09 	blt.w	8010088 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x142>
  for (int batch = 0; batch < batches; ++batch) {
 8010276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801027a:	3301      	adds	r3, #1
 801027c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010280:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010286:	429a      	cmp	r2, r3
 8010288:	f6ff aefa 	blt.w	8010080 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x13a>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 801028c:	bf00      	nop
 801028e:	bf00      	nop
 8010290:	37a4      	adds	r7, #164	; 0xa4
 8010292:	46bd      	mov	sp, r7
 8010294:	bd90      	pop	{r4, r7, pc}

08010296 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8010296:	b480      	push	{r7}
 8010298:	b087      	sub	sp, #28
 801029a:	af00      	add	r7, sp, #0
 801029c:	60f8      	str	r0, [r7, #12]
 801029e:	60b9      	str	r1, [r7, #8]
 80102a0:	607a      	str	r2, [r7, #4]
 80102a2:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	fb02 f303 	mul.w	r3, r2, r3
 80102ae:	3301      	adds	r3, #1
 80102b0:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80102b2:	6a3b      	ldr	r3, [r7, #32]
 80102b4:	3b01      	subs	r3, #1
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	fb03 f202 	mul.w	r2, r3, r2
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	441a      	add	r2, r3
  int total_padding =
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80102cc:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f003 0301 	and.w	r3, r3, #1
 80102d6:	bfb8      	it	lt
 80102d8:	425b      	neglt	r3, r3
 80102da:	461a      	mov	r2, r3
 80102dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102de:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	0fda      	lsrs	r2, r3, #31
 80102e4:	4413      	add	r3, r2
 80102e6:	105b      	asrs	r3, r3, #1
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	371c      	adds	r7, #28
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 80102f4:	b480      	push	{r7}
 80102f6:	b087      	sub	sp, #28
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60b9      	str	r1, [r7, #8]
 80102fc:	607a      	str	r2, [r7, #4]
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	4603      	mov	r3, r0
 8010302:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	3b01      	subs	r3, #1
 8010308:	6a3a      	ldr	r2, [r7, #32]
 801030a:	fb02 f303 	mul.w	r3, r2, r3
 801030e:	3301      	adds	r3, #1
 8010310:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d002      	beq.n	801031e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8010318:	2b02      	cmp	r3, #2
 801031a:	d008      	beq.n	801032e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 801031c:	e010      	b.n	8010340 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	4413      	add	r3, r2
 8010324:	1e5a      	subs	r2, r3, #1
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	fb92 f3f3 	sdiv	r3, r2, r3
 801032c:	e009      	b.n	8010342 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	441a      	add	r2, r3
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	1ad2      	subs	r2, r2, r3
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	fb92 f3f3 	sdiv	r3, r2, r3
 801033e:	e000      	b.n	8010342 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8010340:	2300      	movs	r3, #0
  }
}
 8010342:	4618      	mov	r0, r3
 8010344:	371c      	adds	r7, #28
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 801034e:	b580      	push	{r7, lr}
 8010350:	b088      	sub	sp, #32
 8010352:	af02      	add	r7, sp, #8
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	60b9      	str	r1, [r7, #8]
 8010358:	607a      	str	r2, [r7, #4]
 801035a:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 801035c:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801036a:	f7ff ffc3 	bl	80102f4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 801036e:	4602      	mov	r2, r0
 8010370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010372:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8010374:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010382:	f7ff ffb7 	bl	80102f4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8010386:	4602      	mov	r2, r0
 8010388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038a:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f107 0214 	add.w	r2, r7, #20
 8010398:	9201      	str	r2, [sp, #4]
 801039a:	9300      	str	r3, [sp, #0]
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103a0:	6839      	ldr	r1, [r7, #0]
 80103a2:	68b8      	ldr	r0, [r7, #8]
 80103a4:	f7ff ff77 	bl	8010296 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80103a8:	4602      	mov	r2, r0
  padding_values.height =
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 80103b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f107 0214 	add.w	r2, r7, #20
 80103bc:	9201      	str	r2, [sp, #4]
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103c4:	6a39      	ldr	r1, [r7, #32]
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff ff65 	bl	8010296 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 80103cc:	4602      	mov	r2, r0
  padding_values.width =
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	609a      	str	r2, [r3, #8]
  return padding_values;
 80103d8:	bf00      	nop
}
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	3718      	adds	r7, #24
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 80103e2:	b480      	push	{r7}
 80103e4:	b083      	sub	sp, #12
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	4603      	mov	r3, r0
 80103ea:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80103ec:	79fb      	ldrb	r3, [r7, #7]
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d002      	beq.n	80103f8 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d002      	beq.n	80103fc <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 80103f6:	e003      	b.n	8010400 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 80103f8:	2301      	movs	r3, #1
 80103fa:	e002      	b.n	8010402 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 80103fc:	2302      	movs	r3, #2
 80103fe:	e000      	b.n	8010402 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8010400:	2300      	movs	r3, #0
  }
}
 8010402:	4618      	mov	r0, r3
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
	...

08010410 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, int width, int height,
                             int filter_width, int filter_height, int out_width,
                             int out_height, const TfLiteType data_type,
                             OpData* data) {
 8010410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010412:	b09d      	sub	sp, #116	; 0x74
 8010414:	af0a      	add	r7, sp, #40	; 0x28
 8010416:	6278      	str	r0, [r7, #36]	; 0x24
 8010418:	6239      	str	r1, [r7, #32]
 801041a:	61fa      	str	r2, [r7, #28]
 801041c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 801041e:	6a3b      	ldr	r3, [r7, #32]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b03      	cmp	r3, #3
 8010426:	bf0c      	ite	eq
 8010428:	2301      	moveq	r3, #1
 801042a:	2300      	movne	r3, #0
 801042c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8010430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010434:	f083 0301 	eor.w	r3, r3, #1
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00f      	beq.n	801045e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4e>
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2b02      	cmp	r3, #2
 8010446:	d00a      	beq.n	801045e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x4e>
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	695c      	ldr	r4, [r3, #20]
 801044c:	4b4f      	ldr	r3, [pc, #316]	; (801058c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	2351      	movs	r3, #81	; 0x51
 8010452:	4a4f      	ldr	r2, [pc, #316]	; (8010590 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 8010454:	494f      	ldr	r1, [pc, #316]	; (8010594 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 8010456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010458:	47a0      	blx	r4
 801045a:	2301      	movs	r3, #1
 801045c:	e091      	b.n	8010582 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x172>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b01      	cmp	r3, #1
 8010466:	d012      	beq.n	801048e <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x7e>
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	695c      	ldr	r4, [r3, #20]
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2201      	movs	r2, #1
 8010474:	9203      	str	r2, [sp, #12]
 8010476:	9302      	str	r3, [sp, #8]
 8010478:	4b47      	ldr	r3, [pc, #284]	; (8010598 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	4b47      	ldr	r3, [pc, #284]	; (801059c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	2352      	movs	r3, #82	; 0x52
 8010482:	4a43      	ldr	r2, [pc, #268]	; (8010590 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 8010484:	4946      	ldr	r1, [pc, #280]	; (80105a0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x190>)
 8010486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010488:	47a0      	blx	r4
 801048a:	2301      	movs	r3, #1
 801048c:	e079      	b.n	8010582 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x172>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	6899      	ldr	r1, [r3, #8]
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	685c      	ldr	r4, [r3, #4]
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	695d      	ldr	r5, [r3, #20]
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 80104a8:	f107 0008 	add.w	r0, r7, #8
 80104ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80104b0:	9207      	str	r2, [sp, #28]
 80104b2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80104b6:	9206      	str	r2, [sp, #24]
 80104b8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80104bc:	9205      	str	r2, [sp, #20]
 80104be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80104c0:	9204      	str	r2, [sp, #16]
 80104c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104c4:	9203      	str	r2, [sp, #12]
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	9202      	str	r2, [sp, #8]
 80104ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104cc:	9201      	str	r2, [sp, #4]
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	462b      	mov	r3, r5
 80104d2:	4622      	mov	r2, r4
 80104d4:	f7ff ff3b 	bl	801034e <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80104d8:	4634      	mov	r4, r6
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      params->dilation_height_factor, params->dilation_width_factor, height,
      width, filter_height, filter_width, padding, &out_height, &out_width);

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 80104e4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d049      	beq.n	8010580 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80104ec:	2200      	movs	r2, #0
 80104ee:	6a39      	ldr	r1, [r7, #32]
 80104f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104f2:	f7fb fa10 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80104f6:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80104f8:	2201      	movs	r2, #1
 80104fa:	6a39      	ldr	r1, [r7, #32]
 80104fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104fe:	f7fb fa0a 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010502:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8010504:	2202      	movs	r2, #2
 8010506:	6a39      	ldr	r1, [r7, #32]
 8010508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801050a:	f7fc ff87 	bl	800d41c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801050e:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010510:	2200      	movs	r2, #0
 8010512:	6a39      	ldr	r1, [r7, #32]
 8010514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010516:	f7fb fa14 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801051a:	6378      	str	r0, [r7, #52]	; 0x34
    int num_channels = filter->dims->data[kConvQuantizedDimension];
 801051c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	330c      	adds	r3, #12
 8010528:	607b      	str	r3, [r7, #4]
 801052a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801052c:	3210      	adds	r2, #16
 801052e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010530:	3114      	adds	r1, #20
 8010532:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8010534:	f600 0018 	addw	r0, r0, #2072	; 0x818
 8010538:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801053a:	f604 041c 	addw	r4, r4, #2076	; 0x81c
 801053e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8010540:	3518      	adds	r5, #24
 8010542:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8010544:	f506 6683 	add.w	r6, r6, #1048	; 0x418
 8010548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054a:	9308      	str	r3, [sp, #32]
 801054c:	9607      	str	r6, [sp, #28]
 801054e:	9506      	str	r5, [sp, #24]
 8010550:	9405      	str	r4, [sp, #20]
 8010552:	9004      	str	r0, [sp, #16]
 8010554:	9103      	str	r1, [sp, #12]
 8010556:	9202      	str	r2, [sp, #8]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	9301      	str	r3, [sp, #4]
 801055c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010568:	f7f7 f9b6 	bl	80078d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 801056c:	4603      	mov	r3, r0
 801056e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
 801057a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801057e:	e000      	b.n	8010582 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x172>
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift), num_channels));
  }
  return kTfLiteOk;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	374c      	adds	r7, #76	; 0x4c
 8010586:	46bd      	mov	sp, r7
 8010588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801058a:	bf00      	nop
 801058c:	0801e700 	.word	0x0801e700
 8010590:	0801e638 	.word	0x0801e638
 8010594:	0801e6e8 	.word	0x0801e6e8
 8010598:	0801e740 	.word	0x0801e740
 801059c:	0801e744 	.word	0x0801e744
 80105a0:	0801e724 	.word	0x0801e724

080105a4 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	607a      	str	r2, [r7, #4]
  void* raw;
  context->AllocatePersistentBuffer(context, sizeof(int), &raw);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b4:	f107 0214 	add.w	r2, r7, #20
 80105b8:	2104      	movs	r1, #4
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	4798      	blx	r3
  return raw;
 80105be:	697b      	ldr	r3, [r7, #20]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3718      	adds	r7, #24
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80105c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ca:	f6ad 0dfc 	subw	sp, sp, #2300	; 0x8fc
 80105ce:	af08      	add	r7, sp, #32
 80105d0:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80105d4:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 80105d8:	6018      	str	r0, [r3, #0]
 80105da:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80105de:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80105e2:	6019      	str	r1, [r3, #0]
#if defined(__ARM_FEATURE_DSP) || defined(__ARM_FEATURE_MVE)
  OpData data;
  int32_t buf_size = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4

  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 80105ea:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80105ee:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80105fa:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80105fe:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8010602:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010606:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 801060a:	2200      	movs	r2, #0
 801060c:	6809      	ldr	r1, [r1, #0]
 801060e:	6818      	ldr	r0, [r3, #0]
 8010610:	f7fb f981 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010614:	f8c7 08cc 	str.w	r0, [r7, #2252]	; 0x8cc
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8010618:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801061c:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 8010620:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010624:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8010628:	2201      	movs	r2, #1
 801062a:	6809      	ldr	r1, [r1, #0]
 801062c:	6818      	ldr	r0, [r3, #0]
 801062e:	f7fb f972 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010632:	f8c7 08c8 	str.w	r0, [r7, #2248]	; 0x8c8
  const TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010636:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801063a:	f5a3 610d 	sub.w	r1, r3, #2256	; 0x8d0
 801063e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010642:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8010646:	2200      	movs	r2, #0
 8010648:	6809      	ldr	r1, [r1, #0]
 801064a:	6818      	ldr	r0, [r3, #0]
 801064c:	f7fb f979 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010650:	f8c7 08c4 	str.w	r0, [r7, #2244]	; 0x8c4

  RuntimeShape input_shape = GetTensorShape(input);
 8010654:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010658:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801065c:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 8010660:	4618      	mov	r0, r3
 8010662:	f7f7 fda4 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8010666:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801066a:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801066e:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8010672:	4618      	mov	r0, r3
 8010674:	f7f7 fd9b 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis-nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8010678:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801067c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8010680:	2300      	movs	r3, #0
 8010682:	2100      	movs	r1, #0
 8010684:	f7fb fcf7 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010688:	4602      	mov	r2, r0
 801068a:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801068e:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8010692:	601a      	str	r2, [r3, #0]
  input_dims.h = input->dims->data[1];
 8010694:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	689a      	ldr	r2, [r3, #8]
 801069c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80106a0:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 80106a4:	605a      	str	r2, [r3, #4]
  input_dims.w = input->dims->data[2];
 80106a6:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	68da      	ldr	r2, [r3, #12]
 80106ae:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80106b2:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 80106b6:	609a      	str	r2, [r3, #8]
  input_dims.c = input_shape.Dims(3);
 80106b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80106bc:	2103      	movs	r1, #3
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fb f988 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80106c4:	4602      	mov	r2, r0
 80106c6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80106ca:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 80106ce:	60da      	str	r2, [r3, #12]

  // Initialize cmsis-nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 80106d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80106d4:	2103      	movs	r1, #3
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fb f97c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80106dc:	4602      	mov	r2, r0
 80106de:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80106e2:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80106e6:	601a      	str	r2, [r3, #0]
  filter_dims.h = filter->dims->data[1];
 80106e8:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	689a      	ldr	r2, [r3, #8]
 80106f0:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80106f4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80106f8:	605a      	str	r2, [r3, #4]
  filter_dims.w = filter->dims->data[2];
 80106fa:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010706:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801070a:	609a      	str	r2, [r3, #8]
  filter_dims.c = input_dims.c;
 801070c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010710:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8010714:	68da      	ldr	r2, [r3, #12]
 8010716:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801071a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801071e:	60da      	str	r2, [r3, #12]

  // Initialize cmsis-nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8010720:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010724:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801072e:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8010732:	601a      	str	r2, [r3, #0]
  output_dims.h = output->dims->data[1];
 8010734:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	689a      	ldr	r2, [r3, #8]
 801073c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010740:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8010744:	605a      	str	r2, [r3, #4]
  output_dims.w = output->dims->data[2];
 8010746:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	68da      	ldr	r2, [r3, #12]
 801074e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010752:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8010756:	609a      	str	r2, [r3, #8]
  output_dims.c = output_shape.Dims(3);
 8010758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801075c:	2103      	movs	r1, #3
 801075e:	4618      	mov	r0, r3
 8010760:	f7fb f938 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010764:	4602      	mov	r2, r0
 8010766:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801076a:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801076e:	60da      	str	r2, [r3, #12]

  int* buffer_idx = reinterpret_cast<int*>(node->user_data);
 8010770:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010774:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0

  TF_LITE_ENSURE_STATUS(CalculateOpData(
 8010780:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010784:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	607b      	str	r3, [r7, #4]
 801078c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010790:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801079a:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 801079e:	6892      	ldr	r2, [r2, #8]
 80107a0:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80107a4:	f6a1 018c 	subw	r1, r1, #2188	; 0x88c
 80107a8:	684c      	ldr	r4, [r1, #4]
 80107aa:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80107ae:	f6a1 019c 	subw	r1, r1, #2204	; 0x89c
 80107b2:	688d      	ldr	r5, [r1, #8]
 80107b4:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80107b8:	f6a1 019c 	subw	r1, r1, #2204	; 0x89c
 80107bc:	684e      	ldr	r6, [r1, #4]
 80107be:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 80107c2:	7809      	ldrb	r1, [r1, #0]
 80107c4:	6039      	str	r1, [r7, #0]
 80107c6:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80107ca:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
 80107ce:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 80107d2:	f6a0 0ccc 	subw	ip, r0, #2252	; 0x8cc
 80107d6:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80107da:	9006      	str	r0, [sp, #24]
 80107dc:	6838      	ldr	r0, [r7, #0]
 80107de:	9005      	str	r0, [sp, #20]
 80107e0:	9604      	str	r6, [sp, #16]
 80107e2:	9503      	str	r5, [sp, #12]
 80107e4:	9402      	str	r4, [sp, #8]
 80107e6:	9201      	str	r2, [sp, #4]
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8d7 28d0 	ldr.w	r2, [r7, #2256]	; 0x8d0
 80107f0:	6809      	ldr	r1, [r1, #0]
 80107f2:	f8dc 0000 	ldr.w	r0, [ip]
 80107f6:	f7ff fe0b 	bl	8010410 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 80107fa:	4603      	mov	r3, r0
 80107fc:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf
 8010800:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 8010804:	2b00      	cmp	r3, #0
 8010806:	d002      	beq.n	801080e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x246>
 8010808:	f897 48bf 	ldrb.w	r4, [r7, #2239]	; 0x8bf
 801080c:	e097      	b.n	801093e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x376>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type, &data));

  if (input->type == kTfLiteInt8) {
 801080e:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	2b09      	cmp	r3, #9
 8010816:	d166      	bne.n	80108e6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x31e>
    // Initialize cmsis-nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8010818:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	425a      	negs	r2, r3
 8010820:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010824:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010828:	601a      	str	r2, [r3, #0]
    conv_params.output_offset = output->params.zero_point;
 801082a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801082e:	691a      	ldr	r2, [r3, #16]
 8010830:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010834:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010838:	605a      	str	r2, [r3, #4]
    conv_params.stride.h = params->stride_height;
 801083a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 801083e:	689a      	ldr	r2, [r3, #8]
 8010840:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010844:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010848:	60da      	str	r2, [r3, #12]
    conv_params.stride.w = params->stride_width;
 801084a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010854:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010858:	609a      	str	r2, [r3, #8]
    conv_params.dilation.h = params->dilation_height_factor;
 801085a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 801085e:	695a      	ldr	r2, [r3, #20]
 8010860:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010864:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010868:	61da      	str	r2, [r3, #28]
    conv_params.dilation.w = params->dilation_width_factor;
 801086a:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 801086e:	691a      	ldr	r2, [r3, #16]
 8010870:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010874:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8010878:	619a      	str	r2, [r3, #24]
    conv_params.padding.h = data.padding.height;
 801087a:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801087e:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 8010882:	685a      	ldr	r2, [r3, #4]
 8010884:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010888:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801088c:	615a      	str	r2, [r3, #20]
    conv_params.padding.w = data.padding.width;
 801088e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010892:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801089c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80108a0:	611a      	str	r2, [r3, #16]
    conv_params.activation.min = data.output_activation_min;
 80108a2:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80108a6:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 80108aa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80108ae:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80108b2:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80108b6:	621a      	str	r2, [r3, #32]
    conv_params.activation.max = data.output_activation_max;
 80108b8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80108bc:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 80108c0:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80108c4:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80108c8:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80108cc:	625a      	str	r2, [r3, #36]	; 0x24

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 80108ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80108d2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80108d6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80108da:	f107 0014 	add.w	r0, r7, #20
 80108de:	f004 fd78 	bl	80153d2 <arm_convolve_wrapper_s8_get_buffer_size>
 80108e2:	f8c7 08d4 	str.w	r0, [r7, #2260]	; 0x8d4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  node->user_data = buffer_idx;
 80108e6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80108ea:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80108f4:	611a      	str	r2, [r3, #16]
  if (buf_size > 0) {
 80108f6:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dd19      	ble.n	8010932 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x36a>
    TF_LITE_ENSURE_STATUS(
 80108fe:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8010902:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801090a:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 801090e:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 8010912:	f6a2 00cc 	subw	r0, r2, #2252	; 0x8cc
 8010916:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 801091a:	6800      	ldr	r0, [r0, #0]
 801091c:	4798      	blx	r3
 801091e:	4603      	mov	r3, r0
 8010920:	f887 38be 	strb.w	r3, [r7, #2238]	; 0x8be
 8010924:	f897 38be 	ldrb.w	r3, [r7, #2238]	; 0x8be
 8010928:	2b00      	cmp	r3, #0
 801092a:	d007      	beq.n	801093c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x374>
 801092c:	f897 48be 	ldrb.w	r4, [r7, #2238]	; 0x8be
 8010930:	e005      	b.n	801093e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x376>
        context->RequestScratchBufferInArena(context, buf_size, buffer_idx));
  } else {
    *buffer_idx = -1;
 8010932:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8010936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801093a:	601a      	str	r2, [r3, #0]
  }
#endif
  return kTfLiteOk;
 801093c:	2400      	movs	r4, #0
}
 801093e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010942:	4618      	mov	r0, r3
 8010944:	f7f7 fbb9 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010948:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801094c:	4618      	mov	r0, r3
 801094e:	f7f7 fbb4 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010952:	4623      	mov	r3, r4
 8010954:	4618      	mov	r0, r3
 8010956:	f607 07dc 	addw	r7, r7, #2268	; 0x8dc
 801095a:	46bd      	mov	sp, r7
 801095c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801095e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:
TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           TfLiteConvParams* params, OpData* data,
                           const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* im2col, TfLiteTensor* hwcn_weights,
                           TfLiteTensor* output) {
 801095e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010962:	b0be      	sub	sp, #248	; 0xf8
 8010964:	af08      	add	r7, sp, #32
 8010966:	6178      	str	r0, [r7, #20]
 8010968:	6139      	str	r1, [r7, #16]
 801096a:	60fa      	str	r2, [r7, #12]
 801096c:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 801096e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010972:	691b      	ldr	r3, [r3, #16]
 8010974:	425b      	negs	r3, r3
 8010976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 801097a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801097e:	691b      	ldr	r3, [r3, #16]
 8010980:	425b      	negs	r3, r3
 8010982:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 8010986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801098a:	691b      	ldr	r3, [r3, #16]
 801098c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	4618      	mov	r0, r3
 8010996:	f7ff fd24 	bl	80103e2 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 801099a:	4603      	mov	r3, r0
 801099c:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data->padding.width;
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	b21b      	sxth	r3, r3
 80109a4:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data->padding.height;
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	b21b      	sxth	r3, r3
 80109ac:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	b21b      	sxth	r3, r3
 80109b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	b21b      	sxth	r3, r3
 80109bc:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	b21b      	sxth	r3, r3
 80109c4:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	695b      	ldr	r3, [r3, #20]
 80109ca:	b21b      	sxth	r3, r3
 80109cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 80109ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109d2:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 80109d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80109d8:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 80109da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80109de:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data->output_multiplier;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	691b      	ldr	r3, [r3, #16]
 80109e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data->output_shift;
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	695b      	ldr	r3, [r3, #20]
 80109ea:	425b      	negs	r3, r3
 80109ec:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data->output_activation_min;
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80109f4:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data->output_activation_max;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80109fc:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 80109fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a02:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7f7 fbd1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010a0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010a10:	f7fa ffad 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010a14:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8010a16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a1a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7f7 fbc5 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010a24:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8010a28:	f7fa ffa1 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010a2c:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 8010a2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010a32:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7f7 fbb9 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010a3c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8010a40:	f7fb f89c 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8010a44:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 8010a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010a4a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7f7 fbad 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010a54:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8010a58:	f7fa ff9a 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010a5c:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8010a5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010a62:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7f7 fba1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010a6c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8010a70:	f7fa ff8e 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010a74:	6078      	str	r0, [r7, #4]
 8010a76:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010a7a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010a7e:	f107 001c 	add.w	r0, r7, #28
 8010a82:	2300      	movs	r3, #0
 8010a84:	9307      	str	r3, [sp, #28]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	9306      	str	r3, [sp, #24]
 8010a8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010a8e:	9305      	str	r3, [sp, #20]
 8010a90:	9604      	str	r6, [sp, #16]
 8010a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010a96:	9303      	str	r3, [sp, #12]
 8010a98:	9502      	str	r5, [sp, #8]
 8010a9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010a9e:	9301      	str	r3, [sp, #4]
 8010aa0:	9400      	str	r4, [sp, #0]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	4642      	mov	r2, r8
 8010aa6:	f7ff fa4e 	bl	800ff46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8010aaa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f7 fb03 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 8010ab4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f7 fafe 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 8010abe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7f7 faf9 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8010ac8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7f7 faf4 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f7 faef 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
  return kTfLiteOk;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	37d8      	adds	r7, #216	; 0xd8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ae8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, TfLiteConvParams* params,
    OpData* data, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output, TfLiteTensor* im2col) {
 8010ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aea:	b0cb      	sub	sp, #300	; 0x12c
 8010aec:	af08      	add	r7, sp, #32
 8010aee:	6178      	str	r0, [r7, #20]
 8010af0:	6139      	str	r1, [r7, #16]
 8010af2:	60fa      	str	r2, [r7, #12]
 8010af4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8010af8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8010afc:	6013      	str	r3, [r2, #0]
  // Initialize cmsis-nn convolution parameters
  cmsis_nn_conv_params conv_params;
  conv_params.input_offset = -input->params.zero_point;
 8010afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	425b      	negs	r3, r3
 8010b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  conv_params.output_offset = output->params.zero_point;
 8010b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  conv_params.stride.h = params->stride_height;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  conv_params.stride.w = params->stride_width;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  conv_params.dilation.h = params->dilation_height_factor;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	695b      	ldr	r3, [r3, #20]
 8010b28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params->dilation_width_factor;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  conv_params.padding.h = data->padding.height;
 8010b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  conv_params.padding.w = data->padding.width;
 8010b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  conv_params.activation.min = data->output_activation_min;
 8010b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8010b62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  conv_params.activation.max = data->output_activation_max;
 8010b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8010b74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  // Initialize cmsis-nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = data->per_channel_output_multiplier;
 8010b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	3318      	adds	r3, #24
 8010b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  quant_params.shift = data->per_channel_output_shift;
 8010b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

#if defined(__ARM_FEATURE_DSP) || defined(__ARM_FEATURE_MVE)
  RuntimeShape filter_shape = GetTensorShape(filter);
 8010b9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b9e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f7 fb03 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape input_shape = GetTensorShape(input);
 8010ba8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010bac:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7f7 fafc 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8010bb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010bba:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7f7 faf5 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape bias_shape = GetTensorShape(bias);
 8010bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010bc8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f7 faee 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Sanity check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8010bd2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010bd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	dd01      	ble.n	8010be2 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0xfa>
 8010bde:	f006 fff1 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010be2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7f7 fa7d 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b04      	cmp	r3, #4
 8010bf0:	d001      	beq.n	8010bf6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x10e>
 8010bf2:	f006 ffe7 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8010bf6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7f7 fa73 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b04      	cmp	r3, #4
 8010c04:	d001      	beq.n	8010c0a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x122>
 8010c06:	f006 ffdd 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8010c0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7f7 fa69 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b04      	cmp	r3, #4
 8010c18:	d001      	beq.n	8010c1e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x136>
 8010c1a:	f006 ffd3 	bl	8017bc4 <abort>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8010c1e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010c22:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8010c26:	2300      	movs	r3, #0
 8010c28:	2100      	movs	r1, #0
 8010c2a:	f7fb fa24 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010c2e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8010c32:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010c36:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	2103      	movs	r1, #3
 8010c3e:	f7fb fa1a 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010c42:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8010c46:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010c4a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8010c4e:	2303      	movs	r3, #3
 8010c50:	2100      	movs	r1, #0
 8010c52:	f7fb fa10 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010c56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  if (GetTensorData<int8_t>(bias)) {
 8010c5a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010c5e:	f7fa ff6b 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	bf14      	ite	ne
 8010c68:	2301      	movne	r3, #1
 8010c6a:	2300      	moveq	r3, #0
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00b      	beq.n	8010c8a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1a2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8010c72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fa fee4 	bl	800ba44 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d001      	beq.n	8010c8a <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x1a2>
 8010c86:	f006 ff9d 	bl	8017bc4 <abort>
  }

  // Initialize cmsis-nn dimensions
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
 8010c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c8e:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8010c90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010c94:	2101      	movs	r1, #1
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fa fe9c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8010ca0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010ca4:	2102      	movs	r1, #2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fa fe94 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010cac:	4603      	mov	r3, r0
 8010cae:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = input_depth;
 8010cb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cb4:	663b      	str	r3, [r7, #96]	; 0x60

  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
 8010cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010cba:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = filter_shape.Dims(1);
 8010cbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fa fe86 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = filter_shape.Dims(2);
 8010ccc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010cd0:	2102      	movs	r1, #2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fa fe7e 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = input_depth;
 8010cdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ce0:	653b      	str	r3, [r7, #80]	; 0x50

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8010cea:	2301      	movs	r3, #1
 8010cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8010cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010cf2:	643b      	str	r3, [r7, #64]	; 0x40

  // Output
  cmsis_nn_dims output_dims;
  output_dims.n = batch_size;
 8010cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf8:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = output_shape.Dims(1);
 8010cfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010cfe:	2101      	movs	r1, #1
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fa fe67 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010d06:	4603      	mov	r3, r0
 8010d08:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = output_shape.Dims(2);
 8010d0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010d0e:	2102      	movs	r1, #2
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fa fe5f 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010d16:	4603      	mov	r3, r0
 8010d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 8010d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d1e:	633b      	str	r3, [r7, #48]	; 0x30

  // Initialize cmsis-nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8010d20:	2300      	movs	r3, #0
 8010d22:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8010d24:	2300      	movs	r3, #0
 8010d26:	623b      	str	r3, [r7, #32]

  auto* buffer_idx = reinterpret_cast<int*>(node->user_data);
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  if (*buffer_idx > -1) {
 8010d30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	db09      	blt.n	8010d4e <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x266>
    ctx.buf = context->GetScratchBuffer(context, *buffer_idx);
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010d42:	6812      	ldr	r2, [r2, #0]
 8010d44:	4611      	mov	r1, r2
 8010d46:	6978      	ldr	r0, [r7, #20]
 8010d48:	4798      	blx	r3
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	61fb      	str	r3, [r7, #28]
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
  // the parameters passed
  arm_status status = arm_convolve_wrapper_s8(
 8010d4e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8010d52:	f7fa fef1 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010d56:	4605      	mov	r5, r0
 8010d58:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010d5c:	f7fa feec 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010d60:	4606      	mov	r6, r0
 8010d62:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010d66:	f7fa ff09 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8010d70:	f7fa fef3 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010d74:	4603      	mov	r3, r0
 8010d76:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8010d7a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8010d7e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8010d82:	f107 001c 	add.w	r0, r7, #28
 8010d86:	9306      	str	r3, [sp, #24]
 8010d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d8c:	9305      	str	r3, [sp, #20]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010d96:	9303      	str	r3, [sp, #12]
 8010d98:	9602      	str	r6, [sp, #8]
 8010d9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010d9e:	9301      	str	r3, [sp, #4]
 8010da0:	9500      	str	r5, [sp, #0]
 8010da2:	4623      	mov	r3, r4
 8010da4:	f004 fab9 	bl	801531a <arm_convolve_wrapper_s8>
 8010da8:	4603      	mov	r3, r0
 8010daa:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
      &ctx, &conv_params, &quant_params, &input_dims,
      GetTensorData<int8_t>(input), &filter_dims, GetTensorData<int8_t>(filter),
      &bias_dims, GetTensorData<int32>(bias), &output_dims,
      GetTensorData<int8_t>(output));

  if (status == ARM_MATH_SUCCESS) {
 8010dae:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2d2>
    return kTfLiteOk;
 8010db6:	2400      	movs	r4, #0
 8010db8:	e000      	b.n	8010dbc <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_+0x2d4>
  } else {
    return kTfLiteError;
 8010dba:	2401      	movs	r4, #1
      GetTensorData<int32>(bias), GetTensorShape(output),
      GetTensorData<int8>(output));

#endif
  return kTfLiteOk;
}
 8010dbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f7 f97a 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7f7 f975 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010dd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f7 f970 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010dda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7f7 f96b 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8010de4:	4623      	mov	r3, r4
 8010de6:	4618      	mov	r0, r3
 8010de8:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010df0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteConvParams* params, OpData* data,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* im2col,
                       TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8010df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	b0ba      	sub	sp, #232	; 0xe8
 8010df6:	af08      	add	r7, sp, #32
 8010df8:	60f8      	str	r0, [r7, #12]
 8010dfa:	60b9      	str	r1, [r7, #8]
 8010dfc:	607a      	str	r2, [r7, #4]
 8010dfe:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7b1b      	ldrb	r3, [r3, #12]
 8010e04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e08:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe fc99 	bl	800f744 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff fae3 	bl	80103e2 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data->padding.width;
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	b21b      	sxth	r3, r3
 8010e26:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data->padding.height;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	b21b      	sxth	r3, r3
 8010e2e:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	b21b      	sxth	r3, r3
 8010e36:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	b21b      	sxth	r3, r3
 8010e3e:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	b21b      	sxth	r3, r3
 8010e46:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	695b      	ldr	r3, [r3, #20]
 8010e4c:	b21b      	sxth	r3, r3
 8010e4e:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 8010e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e52:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 8010e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e56:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 8010e58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e5c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7f7 f9a4 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010e66:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8010e6a:	f7fa fe43 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010e6e:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 8010e70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e74:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7f7 f998 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010e7e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8010e82:	f7fa fe37 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010e86:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8010e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010e8c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f7 f98c 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010e96:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010e9a:	f7fa fe2b 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010e9e:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 8010ea0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010ea4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f7 f980 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010eae:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8010eb2:	f7fa fe30 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010eb6:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8010eb8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ebc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7f7 f974 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010ec6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8010eca:	f7fa fe24 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010ed4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010ed8:	f107 0010 	add.w	r0, r7, #16
 8010edc:	9306      	str	r3, [sp, #24]
 8010ede:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ee2:	9305      	str	r3, [sp, #20]
 8010ee4:	9604      	str	r6, [sp, #16]
 8010ee6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010eea:	9303      	str	r3, [sp, #12]
 8010eec:	9502      	str	r5, [sp, #8]
 8010eee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010ef2:	9301      	str	r3, [sp, #4]
 8010ef4:	9400      	str	r4, [sp, #0]
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	4642      	mov	r2, r8
 8010efa:	f7fe feb1 	bl	800fc60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8010efe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7f7 f8d9 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 8010f08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7f7 f8d4 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8010f12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7f7 f8cf 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 8010f1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f7 f8ca 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8010f26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7f7 f8c5 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
  return kTfLiteOk;
 8010f30:	2300      	movs	r3, #0
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	37c8      	adds	r7, #200	; 0xc8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f3c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	f6ad 0d84 	subw	sp, sp, #2180	; 0x884
 8010f42:	af08      	add	r7, sp, #32
 8010f44:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f48:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8010f4c:	6018      	str	r0, [r3, #0]
 8010f4e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f52:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 8010f56:	6019      	str	r1, [r3, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 8010f58:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f5c:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	695b      	ldr	r3, [r3, #20]
 8010f64:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010f68:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f6c:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 8010f70:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f74:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8010f78:	2200      	movs	r2, #0
 8010f7a:	6809      	ldr	r1, [r1, #0]
 8010f7c:	6818      	ldr	r0, [r3, #0]
 8010f7e:	f7fa fce0 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010f82:	f8c7 0858 	str.w	r0, [r7, #2136]	; 0x858
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8010f86:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f8a:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 8010f8e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010f92:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8010f96:	2200      	movs	r2, #0
 8010f98:	6809      	ldr	r1, [r1, #0]
 8010f9a:	6818      	ldr	r0, [r3, #0]
 8010f9c:	f7fa fcbb 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010fa0:	f8c7 0854 	str.w	r0, [r7, #2132]	; 0x854
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8010fa4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010fa8:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 8010fac:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010fb0:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	6809      	ldr	r1, [r1, #0]
 8010fb8:	6818      	ldr	r0, [r3, #0]
 8010fba:	f7fa fcac 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010fbe:	f8c7 0850 	str.w	r0, [r7, #2128]	; 0x850
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8010fc2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010fc6:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 8010fca:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8010fce:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	6809      	ldr	r1, [r1, #0]
 8010fd6:	6818      	ldr	r0, [r3, #0]
 8010fd8:	f7fc fa20 	bl	800d41c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8010fdc:	f8c7 084c 	str.w	r0, [r7, #2124]	; 0x84c

  int input_width = input->dims->data[2];
 8010fe0:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8010fe4:	689b      	ldr	r3, [r3, #8]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
  int input_height = input->dims->data[1];
 8010fec:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
  int filter_width = filter->dims->data[2];
 8010ff8:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
  int filter_height = filter->dims->data[1];
 8011004:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
  int output_width = output->dims->data[2];
 8011010:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
  int output_height = output->dims->data[1];
 801101c:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	689b      	ldr	r3, [r3, #8]
 8011024:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834

  OpData data;

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 8011028:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b09      	cmp	r3, #9
 8011030:	f040 80c1 	bne.w	80111b6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x27a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8011034:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8011038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801103c:	2b01      	cmp	r3, #1
 801103e:	d01d      	beq.n	801107c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x140>
 8011040:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011044:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	695c      	ldr	r4, [r3, #20]
 801104c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8011050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011054:	461a      	mov	r2, r3
 8011056:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801105a:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 801105e:	2301      	movs	r3, #1
 8011060:	9303      	str	r3, [sp, #12]
 8011062:	9202      	str	r2, [sp, #8]
 8011064:	4bb5      	ldr	r3, [pc, #724]	; (801133c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x400>)
 8011066:	9301      	str	r3, [sp, #4]
 8011068:	4bb5      	ldr	r3, [pc, #724]	; (8011340 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x404>)
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	f240 1389 	movw	r3, #393	; 0x189
 8011070:	4ab4      	ldr	r2, [pc, #720]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 8011072:	49b5      	ldr	r1, [pc, #724]	; (8011348 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
 8011074:	6800      	ldr	r0, [r0, #0]
 8011076:	47a0      	blx	r4
 8011078:	2301      	movs	r3, #1
 801107a:	e159      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 801107c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8011080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011082:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8011086:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 801108a:	2b00      	cmp	r3, #0
 801108c:	d113      	bne.n	80110b6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x17a>
 801108e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011092:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	695c      	ldr	r4, [r3, #20]
 801109a:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801109e:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 80110a2:	4baa      	ldr	r3, [pc, #680]	; (801134c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x410>)
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	f240 138f 	movw	r3, #399	; 0x18f
 80110aa:	4aa6      	ldr	r2, [pc, #664]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 80110ac:	49a8      	ldr	r1, [pc, #672]	; (8011350 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x414>)
 80110ae:	6800      	ldr	r0, [r0, #0]
 80110b0:	47a0      	blx	r4
 80110b2:	2301      	movs	r3, #1
 80110b4:	e13c      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 80110b6:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d113      	bne.n	80110e8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
 80110c0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80110c4:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	695c      	ldr	r4, [r3, #20]
 80110cc:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80110d0:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 80110d4:	4b9f      	ldr	r3, [pc, #636]	; (8011354 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x418>)
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80110dc:	4a99      	ldr	r2, [pc, #612]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 80110de:	499c      	ldr	r1, [pc, #624]	; (8011350 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x414>)
 80110e0:	6800      	ldr	r0, [r0, #0]
 80110e2:	47a0      	blx	r4
 80110e4:	2301      	movs	r3, #1
 80110e6:	e123      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 80110e8:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d113      	bne.n	801111a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
 80110f2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80110f6:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	695c      	ldr	r4, [r3, #20]
 80110fe:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011102:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 8011106:	4b94      	ldr	r3, [pc, #592]	; (8011358 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x41c>)
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	f240 1391 	movw	r3, #401	; 0x191
 801110e:	4a8d      	ldr	r2, [pc, #564]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 8011110:	498f      	ldr	r1, [pc, #572]	; (8011350 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x414>)
 8011112:	6800      	ldr	r0, [r0, #0]
 8011114:	47a0      	blx	r4
 8011116:	2301      	movs	r3, #1
 8011118:	e10a      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    TF_LITE_ENSURE(context,
 801111a:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d01d      	beq.n	8011162 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x226>
 8011126:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	429a      	cmp	r2, r3
 8011138:	d013      	beq.n	8011162 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x226>
 801113a:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801113e:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	695c      	ldr	r4, [r3, #20]
 8011146:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801114a:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 801114e:	4b83      	ldr	r3, [pc, #524]	; (801135c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x420>)
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8011156:	4a7b      	ldr	r2, [pc, #492]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 8011158:	497d      	ldr	r1, [pc, #500]	; (8011350 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x414>)
 801115a:	6800      	ldr	r0, [r0, #0]
 801115c:	47a0      	blx	r4
 801115e:	2301      	movs	r3, #1
 8011160:	e0e6      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8011162:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	429a      	cmp	r2, r3
 8011174:	d01f      	beq.n	80111b6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x27a>
 8011176:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801117a:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	695c      	ldr	r4, [r3, #20]
 8011182:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 801118e:	6852      	ldr	r2, [r2, #4]
 8011190:	6812      	ldr	r2, [r2, #0]
 8011192:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8011196:	f6a1 005c 	subw	r0, r1, #2140	; 0x85c
 801119a:	9203      	str	r2, [sp, #12]
 801119c:	9302      	str	r3, [sp, #8]
 801119e:	4b70      	ldr	r3, [pc, #448]	; (8011360 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x424>)
 80111a0:	9301      	str	r3, [sp, #4]
 80111a2:	4b70      	ldr	r3, [pc, #448]	; (8011364 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x428>)
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 80111aa:	4a66      	ldr	r2, [pc, #408]	; (8011344 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x408>)
 80111ac:	4966      	ldr	r1, [pc, #408]	; (8011348 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x40c>)
 80111ae:	6800      	ldr	r0, [r0, #0]
 80111b0:	47a0      	blx	r4
 80111b2:	2301      	movs	r3, #1
 80111b4:	e0bc      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpData(
 80111b6:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80111c0:	f5a2 6106 	sub.w	r1, r2, #2144	; 0x860
 80111c4:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80111c8:	f6a2 005c 	subw	r0, r2, #2140	; 0x85c
 80111cc:	f107 020c 	add.w	r2, r7, #12
 80111d0:	9206      	str	r2, [sp, #24]
 80111d2:	9305      	str	r3, [sp, #20]
 80111d4:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80111d8:	9304      	str	r3, [sp, #16]
 80111da:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80111de:	9303      	str	r3, [sp, #12]
 80111e0:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80111e4:	9302      	str	r3, [sp, #8]
 80111e6:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80111ea:	9301      	str	r3, [sp, #4]
 80111ec:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80111f6:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 80111fa:	6809      	ldr	r1, [r1, #0]
 80111fc:	6800      	ldr	r0, [r0, #0]
 80111fe:	f7ff f907 	bl	8010410 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 8011202:	4603      	mov	r3, r0
 8011204:	f887 382f 	strb.w	r3, [r7, #2095]	; 0x82f
 8011208:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
 8011210:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8011214:	e08c      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, &data));

  switch (input->type) {  // Already know in/out types are same.
 8011216:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	2b09      	cmp	r3, #9
 801121e:	d029      	beq.n	8011274 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x338>
 8011220:	2b09      	cmp	r3, #9
 8011222:	dc6b      	bgt.n	80112fc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
 8011224:	2b01      	cmp	r3, #1
 8011226:	d002      	beq.n	801122e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
 8011228:	2b03      	cmp	r3, #3
 801122a:	d044      	beq.n	80112b6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x37a>
 801122c:	e066      	b.n	80112fc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params, &data, input, filter, bias,
 801122e:	f107 020c 	add.w	r2, r7, #12
 8011232:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011236:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 801123a:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801123e:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 8011242:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8011246:	9305      	str	r3, [sp, #20]
 8011248:	2300      	movs	r3, #0
 801124a:	9304      	str	r3, [sp, #16]
 801124c:	2300      	movs	r3, #0
 801124e:	9303      	str	r3, [sp, #12]
 8011250:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8011254:	9302      	str	r3, [sp, #8]
 8011256:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 801125a:	9301      	str	r3, [sp, #4]
 801125c:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	4613      	mov	r3, r2
 8011264:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8011268:	6809      	ldr	r1, [r1, #0]
 801126a:	6800      	ldr	r0, [r0, #0]
 801126c:	f7ff fdc0 	bl	8010df0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
 8011270:	4603      	mov	r3, r0
                       nullptr, nullptr, output);
 8011272:	e05d      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
      break;
    case kTfLiteInt8:
      return EvalQuantizedPerChannel(context, node, params, &data, input,
 8011274:	f107 020c 	add.w	r2, r7, #12
 8011278:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801127c:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 8011280:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011284:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 8011288:	2300      	movs	r3, #0
 801128a:	9304      	str	r3, [sp, #16]
 801128c:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8011290:	9303      	str	r3, [sp, #12]
 8011292:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8011296:	9302      	str	r3, [sp, #8]
 8011298:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 801129c:	9301      	str	r3, [sp, #4]
 801129e:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	4613      	mov	r3, r2
 80112a6:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 80112aa:	6809      	ldr	r1, [r1, #0]
 80112ac:	6800      	ldr	r0, [r0, #0]
 80112ae:	f7ff fc1b 	bl	8010ae8 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_>
 80112b2:	4603      	mov	r3, r0
                                     filter, bias, output, nullptr);
 80112b4:	e03c      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
      break;
    case kTfLiteUInt8:
      return EvalQuantized(context, node, params, &data, input, filter, bias,
 80112b6:	f107 020c 	add.w	r2, r7, #12
 80112ba:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80112be:	f5a3 6106 	sub.w	r1, r3, #2144	; 0x860
 80112c2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80112c6:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 80112ca:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80112ce:	9305      	str	r3, [sp, #20]
 80112d0:	2300      	movs	r3, #0
 80112d2:	9304      	str	r3, [sp, #16]
 80112d4:	2300      	movs	r3, #0
 80112d6:	9303      	str	r3, [sp, #12]
 80112d8:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80112dc:	9302      	str	r3, [sp, #8]
 80112de:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	4613      	mov	r3, r2
 80112ec:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 80112f0:	6809      	ldr	r1, [r1, #0]
 80112f2:	6800      	ldr	r0, [r0, #0]
 80112f4:	f7ff fb33 	bl	801095e <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsPNS2_6OpDataEPK12TfLiteTensorSD_SD_PSB_SE_SE_>
 80112f8:	4603      	mov	r3, r0
                           nullptr, nullptr, output);
 80112fa:	e019      	b.n	8011330 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80112fc:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011300:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	695c      	ldr	r4, [r3, #20]
 8011308:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	4618      	mov	r0, r3
 8011310:	f7f3 fd3c 	bl	8004d8c <TfLiteTypeGetName>
 8011314:	4602      	mov	r2, r0
 8011316:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	4619      	mov	r1, r3
 801131e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8011322:	f6a3 005c 	subw	r0, r3, #2140	; 0x85c
 8011326:	460b      	mov	r3, r1
 8011328:	490f      	ldr	r1, [pc, #60]	; (8011368 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42c>)
 801132a:	6800      	ldr	r0, [r0, #0]
 801132c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801132e:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8011330:	4618      	mov	r0, r3
 8011332:	f607 0764 	addw	r7, r7, #2148	; 0x864
 8011336:	46bd      	mov	sp, r7
 8011338:	bd90      	pop	{r4, r7, pc}
 801133a:	bf00      	nop
 801133c:	0801e758 	.word	0x0801e758
 8011340:	0801e774 	.word	0x0801e774
 8011344:	0801e638 	.word	0x0801e638
 8011348:	0801e724 	.word	0x0801e724
 801134c:	0801e790 	.word	0x0801e790
 8011350:	0801e6e8 	.word	0x0801e6e8
 8011354:	0801e7a4 	.word	0x0801e7a4
 8011358:	0801e7c0 	.word	0x0801e7c0
 801135c:	0801e7e0 	.word	0x0801e7e0
 8011360:	0801e85c 	.word	0x0801e85c
 8011364:	0801e884 	.word	0x0801e884
 8011368:	0801e8a8 	.word	0x0801e8a8

0801136c <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
 801136c:	b4b0      	push	{r4, r5, r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4a07      	ldr	r2, [pc, #28]	; (8011394 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x28>)
 8011378:	461c      	mov	r4, r3
 801137a:	4615      	mov	r5, r2
 801137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011380:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	370c      	adds	r7, #12
 801138c:	46bd      	mov	sp, r7
 801138e:	bcb0      	pop	{r4, r5, r7}
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	0801e8c4 	.word	0x0801e8c4

08011398 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8011398:	b590      	push	{r4, r7, lr}
 801139a:	b091      	sub	sp, #68	; 0x44
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	69db      	ldr	r3, [r3, #28]
 80113aa:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6a1b      	ldr	r3, [r3, #32]
 80113b0:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80113b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80113b4:	f7f6 fe97 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80113b8:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 80113ba:	6838      	ldr	r0, [r7, #0]
 80113bc:	f7f6 fe93 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80113c0:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	4619      	mov	r1, r3
 80113c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80113ca:	f7fb facb 	bl	800c964 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80113ce:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	1e99      	subs	r1, r3, #2
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	f7fa fe4b 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113e0:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	4619      	mov	r1, r3
 80113e8:	6838      	ldr	r0, [r7, #0]
 80113ea:	f7fa faf3 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113ee:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 80113f0:	2300      	movs	r3, #0
 80113f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f4:	e05e      	b.n	80114b4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80113f6:	2300      	movs	r3, #0
 80113f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80113fa:	e054      	b.n	80114a6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 80113fc:	f04f 0300 	mov.w	r3, #0
 8011400:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8011402:	2300      	movs	r3, #0
 8011404:	633b      	str	r3, [r7, #48]	; 0x30
 8011406:	e020      	b.n	801144a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8011408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140a:	693a      	ldr	r2, [r7, #16]
 801140c:	fb03 f202 	mul.w	r2, r3, r2
 8011410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011412:	4413      	add	r3, r2
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	4413      	add	r3, r2
 801141a:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801141e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011420:	693a      	ldr	r2, [r7, #16]
 8011422:	fb03 f202 	mul.w	r2, r3, r2
 8011426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011428:	4413      	add	r3, r2
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801142e:	4413      	add	r3, r2
 8011430:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8011434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011438:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011440:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	3301      	adds	r3, #1
 8011448:	633b      	str	r3, [r7, #48]	; 0x30
 801144a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	429a      	cmp	r2, r3
 8011450:	dbda      	blt.n	8011408 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8011452:	f04f 0300 	mov.w	r3, #0
 8011456:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8011458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801145a:	2b00      	cmp	r3, #0
 801145c:	d005      	beq.n	801146a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 801145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011464:	4413      	add	r3, r2
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 801146a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801146e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8011472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801147a:	fb03 f202 	mul.w	r2, r3, r2
 801147e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011486:	18d4      	adds	r4, r2, r3
 8011488:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 801148c:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8011490:	eeb0 0a67 	vmov.f32	s0, s15
 8011494:	f7fe f936 	bl	800f704 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8011498:	eef0 7a40 	vmov.f32	s15, s0
 801149c:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	3301      	adds	r3, #1
 80114a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80114a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	dba6      	blt.n	80113fc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 80114ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b0:	3301      	adds	r3, #1
 80114b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	db9c      	blt.n	80113f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80114bc:	bf00      	nop
 80114be:	bf00      	nop
 80114c0:	3744      	adds	r7, #68	; 0x44
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd90      	pop	{r4, r7, pc}

080114c6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b096      	sub	sp, #88	; 0x58
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	607a      	str	r2, [r7, #4]
 80114d2:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80114fe:	6838      	ldr	r0, [r7, #0]
 8011500:	f7f6 fdf1 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011504:	4603      	mov	r3, r0
 8011506:	2b01      	cmp	r3, #1
 8011508:	dc01      	bgt.n	801150e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 801150a:	f006 fb5b 	bl	8017bc4 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 801150e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011510:	f7f6 fde9 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	dc01      	bgt.n	801151e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 801151a:	f006 fb53 	bl	8017bc4 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801151e:	69ba      	ldr	r2, [r7, #24]
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	429a      	cmp	r2, r3
 8011524:	dd01      	ble.n	801152a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8011526:	f006 fb4d 	bl	8017bc4 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 801152a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801152c:	f7f6 fddb 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011530:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8011532:	6838      	ldr	r0, [r7, #0]
 8011534:	f7f6 fdd7 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011538:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153c:	3b01      	subs	r3, #1
 801153e:	4619      	mov	r1, r3
 8011540:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011542:	f7fb fa0f 	bl	800c964 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8011546:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8011548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154a:	1e99      	subs	r1, r3, #2
 801154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801154e:	3b01      	subs	r3, #1
 8011550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011552:	6838      	ldr	r0, [r7, #0]
 8011554:	f7fa fd8f 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011558:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155c:	3b01      	subs	r3, #1
 801155e:	4619      	mov	r1, r3
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	f7fa fa37 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011566:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8011568:	2300      	movs	r3, #0
 801156a:	657b      	str	r3, [r7, #84]	; 0x54
 801156c:	e072      	b.n	8011654 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801156e:	2300      	movs	r3, #0
 8011570:	653b      	str	r3, [r7, #80]	; 0x50
 8011572:	e068      	b.n	8011646 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x180>
      int32 acc = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8011578:	2300      	movs	r3, #0
 801157a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801157c:	e023      	b.n	80115c6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x100>
        int32 input_val = input_data[b * accum_depth + d];
 801157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011582:	fb03 f202 	mul.w	r2, r3, r2
 8011586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011588:	4413      	add	r3, r2
 801158a:	461a      	mov	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4413      	add	r3, r2
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8011594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011598:	fb03 f202 	mul.w	r2, r3, r2
 801159c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801159e:	4413      	add	r3, r2
 80115a0:	461a      	mov	r2, r3
 80115a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115a4:	4413      	add	r3, r2
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80115aa:	69fa      	ldr	r2, [r7, #28]
 80115ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ae:	4413      	add	r3, r2
 80115b0:	6a39      	ldr	r1, [r7, #32]
 80115b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115b4:	440a      	add	r2, r1
 80115b6:	fb03 f202 	mul.w	r2, r3, r2
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	4413      	add	r3, r2
 80115be:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80115c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c2:	3301      	adds	r3, #1
 80115c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ca:	429a      	cmp	r2, r3
 80115cc:	dbd7      	blt.n	801157e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb8>
      }
      if (bias_data) {
 80115ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d007      	beq.n	80115e4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x11e>
        acc += bias_data[out_c];
 80115d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80115da:	4413      	add	r3, r2
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	4413      	add	r3, r2
 80115e2:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fa fd61 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80115f0:	4603      	mov	r3, r0
 80115f2:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 80115f4:	693a      	ldr	r2, [r7, #16]
 80115f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115f8:	4413      	add	r3, r2
 80115fa:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 80115fc:	f107 0218 	add.w	r2, r7, #24
 8011600:	f107 0310 	add.w	r3, r7, #16
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f7f6 fcf0 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 801160c:	4603      	mov	r3, r0
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8011612:	f107 0214 	add.w	r2, r7, #20
 8011616:	f107 0310 	add.w	r3, r7, #16
 801161a:	4611      	mov	r1, r2
 801161c:	4618      	mov	r0, r3
 801161e:	f7f6 fcf9 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8011622:	4603      	mov	r3, r0
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8011628:	6939      	ldr	r1, [r7, #16]
 801162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801162e:	fb03 f202 	mul.w	r2, r3, r2
 8011632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011634:	4413      	add	r3, r2
 8011636:	461a      	mov	r2, r3
 8011638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801163a:	4413      	add	r3, r2
 801163c:	b2ca      	uxtb	r2, r1
 801163e:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011642:	3301      	adds	r3, #1
 8011644:	653b      	str	r3, [r7, #80]	; 0x50
 8011646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	429a      	cmp	r2, r3
 801164c:	db92      	blt.n	8011574 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xae>
  for (int b = 0; b < batches; ++b) {
 801164e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011650:	3301      	adds	r3, #1
 8011652:	657b      	str	r3, [r7, #84]	; 0x54
 8011654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011658:	429a      	cmp	r2, r3
 801165a:	db88      	blt.n	801156e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa8>
    }
  }
}
 801165c:	bf00      	nop
 801165e:	bf00      	nop
 8011660:	3758      	adds	r7, #88	; 0x58
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 8011666:	b580      	push	{r7, lr}
 8011668:	b098      	sub	sp, #96	; 0x60
 801166a:	af00      	add	r7, sp, #0
 801166c:	60f8      	str	r0, [r7, #12]
 801166e:	60b9      	str	r1, [r7, #8]
 8011670:	607a      	str	r2, [r7, #4]
 8011672:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	695b      	ldr	r3, [r3, #20]
 8011696:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	699b      	ldr	r3, [r3, #24]
 801169c:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801169e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	429a      	cmp	r2, r3
 80116a4:	dd01      	ble.n	80116aa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 80116a6:	f006 fa8d 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 80116aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d001      	beq.n	80116b4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 80116b0:	f006 fa88 	bl	8017bc4 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 80116b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80116b6:	f7f6 fd16 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80116ba:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 80116bc:	6838      	ldr	r0, [r7, #0]
 80116be:	f7f6 fd12 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80116c2:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80116c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c6:	3b01      	subs	r3, #1
 80116c8:	4619      	mov	r1, r3
 80116ca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80116cc:	f7fb f94a 	bl	800c964 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80116d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 80116d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d4:	1e99      	subs	r1, r3, #2
 80116d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d8:	3b01      	subs	r3, #1
 80116da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80116dc:	6838      	ldr	r0, [r7, #0]
 80116de:	f7fa fcca 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80116e2:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80116e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e6:	3b01      	subs	r3, #1
 80116e8:	4619      	mov	r1, r3
 80116ea:	6838      	ldr	r0, [r7, #0]
 80116ec:	f7fa f972 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116f0:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80116f2:	2300      	movs	r3, #0
 80116f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116f6:	e07b      	b.n	80117f0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80116f8:	2300      	movs	r3, #0
 80116fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80116fc:	e071      	b.n	80117e2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x17c>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 80116fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011704:	4413      	add	r3, r2
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 801170a:	2300      	movs	r3, #0
 801170c:	657b      	str	r3, [r7, #84]	; 0x54
 801170e:	e02b      	b.n	8011768 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x102>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 8011710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011714:	fb03 f202 	mul.w	r2, r3, r2
 8011718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171a:	4413      	add	r3, r2
 801171c:	461a      	mov	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4413      	add	r3, r2
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	b29a      	uxth	r2, r3
 8011726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011728:	b29b      	uxth	r3, r3
 801172a:	4413      	add	r3, r2
 801172c:	b29b      	uxth	r3, r3
 801172e:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 8011730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011734:	fb03 f202 	mul.w	r2, r3, r2
 8011738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801173a:	4413      	add	r3, r2
 801173c:	461a      	mov	r2, r3
 801173e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011740:	4413      	add	r3, r2
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	b29a      	uxth	r2, r3
 8011746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011748:	b29b      	uxth	r3, r3
 801174a:	4413      	add	r3, r2
 801174c:	b29b      	uxth	r3, r3
 801174e:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 8011750:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011754:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8011758:	fb03 f202 	mul.w	r2, r3, r2
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	4413      	add	r3, r2
 8011760:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8011762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011764:	3301      	adds	r3, #1
 8011766:	657b      	str	r3, [r7, #84]	; 0x54
 8011768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	429a      	cmp	r2, r3
 801176e:	dbcf      	blt.n	8011710 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xaa>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011774:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011776:	4618      	mov	r0, r3
 8011778:	f7fa fc9b 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801177c:	4603      	mov	r3, r0
      accum =
 801177e:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8011780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	61bb      	str	r3, [r7, #24]
 8011788:	f107 0218 	add.w	r2, r7, #24
 801178c:	f107 0314 	add.w	r3, r7, #20
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f7f6 fc2a 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 8011798:	4603      	mov	r3, r0
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 801179e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	61fb      	str	r3, [r7, #28]
 80117a6:	f107 021c 	add.w	r2, r7, #28
 80117aa:	f107 0314 	add.w	r3, r7, #20
 80117ae:	4611      	mov	r1, r2
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f6 fc2f 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 80117b6:	4603      	mov	r3, r0
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 80117bc:	697a      	ldr	r2, [r7, #20]
 80117be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 80117c4:	6979      	ldr	r1, [r7, #20]
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117ca:	fb03 f202 	mul.w	r2, r3, r2
 80117ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117d0:	4413      	add	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80117d6:	4413      	add	r3, r2
 80117d8:	b20a      	sxth	r2, r1
 80117da:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80117dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117de:	3301      	adds	r3, #1
 80117e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80117e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e6:	429a      	cmp	r2, r3
 80117e8:	db89      	blt.n	80116fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x98>
  for (int b = 0; b < batches; ++b) {
 80117ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117ec:	3301      	adds	r3, #1
 80117ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f4:	429a      	cmp	r2, r3
 80117f6:	f6ff af7f 	blt.w	80116f8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x92>
    }
  }
}
 80117fa:	bf00      	nop
 80117fc:	bf00      	nop
 80117fe:	3760      	adds	r7, #96	; 0x60
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8011804:	b580      	push	{r7, lr}
 8011806:	b096      	sub	sp, #88	; 0x58
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]
 8011810:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	691b      	ldr	r3, [r3, #16]
 801182e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	695b      	ldr	r3, [r3, #20]
 8011834:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	699b      	ldr	r3, [r3, #24]
 801183a:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 801183c:	6838      	ldr	r0, [r7, #0]
 801183e:	f7f6 fc52 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011842:	4603      	mov	r3, r0
 8011844:	2b01      	cmp	r3, #1
 8011846:	dc01      	bgt.n	801184c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8011848:	f006 f9bc 	bl	8017bc4 <abort>
//  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801184c:	69fa      	ldr	r2, [r7, #28]
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	429a      	cmp	r2, r3
 8011852:	dd01      	ble.n	8011858 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x54>
 8011854:	f006 f9b6 	bl	8017bc4 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8011858:	6838      	ldr	r0, [r7, #0]
 801185a:	f7f6 fc44 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801185e:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8011860:	2100      	movs	r1, #0
 8011862:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011864:	f7fa f8b6 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011868:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 801186a:	2101      	movs	r1, #1
 801186c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801186e:	f7fa f8b1 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011872:	62f8      	str	r0, [r7, #44]	; 0x2c
//  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8011874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011876:	3b01      	subs	r3, #1
 8011878:	4619      	mov	r1, r3
 801187a:	6838      	ldr	r0, [r7, #0]
 801187c:	f7fa f8aa 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011880:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8011882:	2300      	movs	r3, #0
 8011884:	657b      	str	r3, [r7, #84]	; 0x54
 8011886:	e074      	b.n	8011972 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x16e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8011888:	2300      	movs	r3, #0
 801188a:	653b      	str	r3, [r7, #80]	; 0x50
 801188c:	e06a      	b.n	8011964 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x160>
      int32 acc = 0;
 801188e:	2300      	movs	r3, #0
 8011890:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8011892:	2300      	movs	r3, #0
 8011894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011896:	e025      	b.n	80118e4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xe0>
        int32 input_val = input_data[b * accum_depth + d];
 8011898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801189a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801189c:	fb03 f202 	mul.w	r2, r3, r2
 80118a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a2:	4413      	add	r3, r2
 80118a4:	461a      	mov	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4413      	add	r3, r2
 80118aa:	f993 3000 	ldrsb.w	r3, [r3]
 80118ae:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 80118b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118b4:	fb03 f202 	mul.w	r2, r3, r2
 80118b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ba:	4413      	add	r3, r2
 80118bc:	461a      	mov	r2, r3
 80118be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118c0:	4413      	add	r3, r2
 80118c2:	f993 3000 	ldrsb.w	r3, [r3]
 80118c6:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80118c8:	6a3a      	ldr	r2, [r7, #32]
 80118ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118cc:	4413      	add	r3, r2
 80118ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118d2:	440a      	add	r2, r1
 80118d4:	fb03 f202 	mul.w	r2, r3, r2
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	4413      	add	r3, r2
 80118dc:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80118de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118e0:	3301      	adds	r3, #1
 80118e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e8:	429a      	cmp	r2, r3
 80118ea:	dbd5      	blt.n	8011898 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x94>
      }
      if (bias_data) {
 80118ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d007      	beq.n	8011902 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xfe>
        acc += bias_data[out_c];
 80118f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80118f8:	4413      	add	r3, r2
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	4413      	add	r3, r2
 8011900:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011908:	4618      	mov	r0, r3
 801190a:	f7fa fbd2 	bl	800c0b2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801190e:	4603      	mov	r3, r0
 8011910:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011916:	4413      	add	r3, r2
 8011918:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 801191a:	f107 021c 	add.w	r2, r7, #28
 801191e:	f107 0314 	add.w	r3, r7, #20
 8011922:	4611      	mov	r1, r2
 8011924:	4618      	mov	r0, r3
 8011926:	f7f6 fb61 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 801192a:	4603      	mov	r3, r0
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8011930:	f107 0218 	add.w	r2, r7, #24
 8011934:	f107 0314 	add.w	r3, r7, #20
 8011938:	4611      	mov	r1, r2
 801193a:	4618      	mov	r0, r3
 801193c:	f7f6 fb6a 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8011940:	4603      	mov	r3, r0
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8011946:	6979      	ldr	r1, [r7, #20]
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801194c:	fb03 f202 	mul.w	r2, r3, r2
 8011950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011952:	4413      	add	r3, r2
 8011954:	461a      	mov	r2, r3
 8011956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011958:	4413      	add	r3, r2
 801195a:	b24a      	sxtb	r2, r1
 801195c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801195e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011960:	3301      	adds	r3, #1
 8011962:	653b      	str	r3, [r7, #80]	; 0x50
 8011964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011968:	429a      	cmp	r2, r3
 801196a:	db90      	blt.n	801188e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x8a>
  for (int b = 0; b < batches; ++b) {
 801196c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801196e:	3301      	adds	r3, #1
 8011970:	657b      	str	r3, [r7, #84]	; 0x54
 8011972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011976:	429a      	cmp	r2, r3
 8011978:	db86      	blt.n	8011888 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x84>
    }
  }
}
 801197a:	bf00      	nop
 801197c:	bf00      	nop
 801197e:	3758      	adds	r7, #88	; 0x58
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8011984:	b580      	push	{r7, lr}
 8011986:	b08c      	sub	sp, #48	; 0x30
 8011988:	af02      	add	r7, sp, #8
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	607b      	str	r3, [r7, #4]
 801198e:	460b      	mov	r3, r1
 8011990:	72fb      	strb	r3, [r7, #11]
 8011992:	4613      	mov	r3, r2
 8011994:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8011996:	2300      	movs	r3, #0
 8011998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801199c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801199e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119a2:	615a      	str	r2, [r3, #20]
  if (data_type != kTfLiteFloat32) {
 80119a4:	7abb      	ldrb	r3, [r7, #10]
 80119a6:	2b01      	cmp	r3, #1
 80119a8:	d041      	beq.n	8011a2e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xaa>
    double real_multiplier = 0.0;
 80119aa:	f04f 0200 	mov.w	r2, #0
 80119ae:	f04f 0300 	mov.w	r3, #0
 80119b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80119b6:	f107 0318 	add.w	r3, r7, #24
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119c4:	6879      	ldr	r1, [r7, #4]
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f7f6 f91e 	bl	8007c08 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80119cc:	4603      	mov	r3, r0
 80119ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80119d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d002      	beq.n	80119e0 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x5c>
 80119da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119de:	e028      	b.n	8011a32 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xae>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 80119e0:	ed97 7b06 	vldr	d7, [r7, #24]
 80119e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e6:	f107 0214 	add.w	r2, r7, #20
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	eeb0 0a47 	vmov.f32	s0, s14
 80119f2:	eef0 0a67 	vmov.f32	s1, s15
 80119f6:	f7f5 fcf3 	bl	80073e0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	425a      	negs	r2, r3
 80119fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a00:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8011a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a04:	f103 0208 	add.w	r2, r3, #8
 8011a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0a:	330c      	adds	r3, #12
 8011a0c:	7af9      	ldrb	r1, [r7, #11]
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	4613      	mov	r3, r2
 8011a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f7f6 fa81 	bl	8007f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011a20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xaa>
 8011a28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a2c:	e001      	b.n	8011a32 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xae>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 8011a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3728      	adds	r7, #40	; 0x28
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b086      	sub	sp, #24
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	60f8      	str	r0, [r7, #12]
 8011a42:	60b9      	str	r1, [r7, #8]
 8011a44:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 8011a4e:	f006 f8b9 	bl	8017bc4 <abort>
  void* data = nullptr;
 8011a52:	2300      	movs	r3, #0
 8011a54:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5a:	f107 0214 	add.w	r2, r7, #20
 8011a5e:	2118      	movs	r1, #24
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	4798      	blx	r3
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	bf0c      	ite	eq
 8011a6a:	2301      	moveq	r3, #1
 8011a6c:	2300      	movne	r3, #0
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d001      	beq.n	8011a78 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8011a74:	2300      	movs	r3, #0
 8011a76:	e000      	b.n	8011a7a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8011a78:	697b      	ldr	r3, [r7, #20]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
	...

08011a84 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8011a84:	b5b0      	push	{r4, r5, r7, lr}
 8011a86:	b0a0      	sub	sp, #128	; 0x80
 8011a88:	af04      	add	r7, sp, #16
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
 8011a8e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d101      	bne.n	8011a9c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8011a98:	f006 f894 	bl	8017bc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	695b      	ldr	r3, [r3, #20]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8011aa4:	f006 f88e 	bl	8017bc4 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	695b      	ldr	r3, [r3, #20]
 8011ab2:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	6839      	ldr	r1, [r7, #0]
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f9 ff2c 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011abe:	6678      	str	r0, [r7, #100]	; 0x64
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7f9 ff26 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011aca:	6638      	str	r0, [r7, #96]	; 0x60
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8011acc:	2202      	movs	r2, #2
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7fb fca3 	bl	800d41c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8011ad6:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011ad8:	2200      	movs	r2, #0
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7f9 ff30 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8011ae2:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8011ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ae6:	781a      	ldrb	r2, [r3, #0]
 8011ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d01a      	beq.n	8011b26 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	695c      	ldr	r4, [r3, #20]
 8011af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7f3 f947 	bl	8004d8c <TfLiteTypeGetName>
 8011afe:	4605      	mov	r5, r0
 8011b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7f3 f941 	bl	8004d8c <TfLiteTypeGetName>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	9303      	str	r3, [sp, #12]
 8011b0e:	9502      	str	r5, [sp, #8]
 8011b10:	4b4f      	ldr	r3, [pc, #316]	; (8011c50 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>)
 8011b12:	9301      	str	r3, [sp, #4]
 8011b14:	4b4f      	ldr	r3, [pc, #316]	; (8011c54 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>)
 8011b16:	9300      	str	r3, [sp, #0]
 8011b18:	2364      	movs	r3, #100	; 0x64
 8011b1a:	4a4f      	ldr	r2, [pc, #316]	; (8011c58 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>)
 8011b1c:	494f      	ldr	r1, [pc, #316]	; (8011c5c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>)
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	47a0      	blx	r4
 8011b22:	2401      	movs	r4, #1
 8011b24:	e08f      	b.n	8011c46 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8011b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b28:	781a      	ldrb	r2, [r3, #0]
 8011b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d006      	beq.n	8011b40 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	494a      	ldr	r1, [pc, #296]	; (8011c60 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	4798      	blx	r3
 8011b3c:	2401      	movs	r4, #1
 8011b3e:	e082      	b.n	8011c46 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
                     "Hybrid models are not supported on TFLite Micro.");
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params->activation,
 8011b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b42:	7819      	ldrb	r1, [r3, #0]
 8011b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b46:	781a      	ldrb	r2, [r3, #0]
 8011b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b4e:	9302      	str	r3, [sp, #8]
 8011b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f7ff ff12 	bl	8011984 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 8011b60:	4603      	mov	r3, r0
 8011b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
 8011b6e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8011b72:	e068      	b.n	8011c46 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
                                        input->type, input, filter, bias,
                                        output, data));

  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32>(bias)) {
 8011b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	2b09      	cmp	r3, #9
 8011b7a:	d107      	bne.n	8011b8c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
 8011b7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011b7e:	f7f9 fffd 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d001      	beq.n	8011b8c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e000      	b.n	8011b8e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d058      	beq.n	8011c44 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8011b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7f6 fb08 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8011b9e:	f107 0318 	add.w	r3, r7, #24
 8011ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7f6 fb02 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

//    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    const int filter_dim_count = filter_shape.DimensionsCount();
 8011baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7f6 fa99 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011bb4:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8011bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bb8:	1e5a      	subs	r2, r3, #1
 8011bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f9 ff07 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8011bd2:	f107 0318 	add.w	r3, r7, #24
 8011bd6:	2101      	movs	r1, #1
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f9 fefb 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011bde:	4603      	mov	r3, r0
 8011be0:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8011be2:	f107 0308 	add.w	r3, r7, #8
 8011be6:	4618      	mov	r0, r3
 8011be8:	f003 ff21 	bl	8015a2e <arm_fully_connected_s8_get_buffer_size>
 8011bec:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8011bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dd11      	ble.n	8011c18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x194>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011bfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011bfc:	3214      	adds	r2, #20
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	4798      	blx	r3
 8011c02:	4603      	mov	r3, r0
 8011c04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8011c08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d007      	beq.n	8011c20 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>
 8011c10:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8011c14:	2500      	movs	r5, #0
 8011c16:	e004      	b.n	8011c22 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x19e>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8011c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c1e:	615a      	str	r2, [r3, #20]
    }
  }
 8011c20:	2501      	movs	r5, #1
 8011c22:	f107 0318 	add.w	r3, r7, #24
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7f6 fa47 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8011c2c:	2d01      	cmp	r5, #1
 8011c2e:	d101      	bne.n	8011c34 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>
 8011c30:	2501      	movs	r5, #1
 8011c32:	e000      	b.n	8011c36 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1b2>
 8011c34:	2500      	movs	r5, #0
 8011c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7f6 fa3d 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8011c40:	2d01      	cmp	r5, #1
 8011c42:	d100      	bne.n	8011c46 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x1c2>
  return kTfLiteOk;
 8011c44:	2400      	movs	r4, #0
}
 8011c46:	4623      	mov	r3, r4
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3770      	adds	r7, #112	; 0x70
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8011c50:	0801ecfc 	.word	0x0801ecfc
 8011c54:	0801ed0c 	.word	0x0801ed0c
 8011c58:	0801ec24 	.word	0x0801ec24
 8011c5c:	0801ece0 	.word	0x0801ece0
 8011c60:	0801ed18 	.word	0x0801ed18

08011c64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 8011c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c66:	b0e1      	sub	sp, #388	; 0x184
 8011c68:	af08      	add	r7, sp, #32
 8011c6a:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8011c6e:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 8011c72:	6020      	str	r0, [r4, #0]
 8011c74:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8011c78:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8011c7c:	6001      	str	r1, [r0, #0]
 8011c7e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8011c82:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8011c86:	600a      	str	r2, [r1, #0]
 8011c88:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8011c8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8011c90:	6013      	str	r3, [r2, #0]
 8011c92:	2400      	movs	r4, #0
  // The 'if' condition can be removed when null handling of bias is added to
  // arm_fully_connected_s8
  if (nullptr != GetTensorData<int32>(bias)) {
 8011c94:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8011c98:	f7f9 ff70 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	bf14      	ite	ne
 8011ca2:	2301      	movne	r3, #1
 8011ca4:	2300      	moveq	r3, #0
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f000 818d 	beq.w	8011fc8 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x364>
    const RuntimeShape output_shape = GetTensorShape(output);
 8011cae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011cb2:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7f6 fa79 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
//    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    const int batches = output_shape.Dims(0);
 8011cbc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f9 fe86 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011cc8:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    const int output_depth = output_shape.Dims(1);
 8011ccc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f9 fe7e 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011cd8:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
    const RuntimeShape filter_shape = GetTensorShape(filter);
 8011cdc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011ce0:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7f6 fa62 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8011cea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7f6 f9f9 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011cf4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8011cf8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011cfc:	1e5a      	subs	r2, r3, #1
 8011cfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011d02:	4611      	mov	r1, r2
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7f9 fe65 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011d0a:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
    const RuntimeShape input_shape = GetTensorShape(input);
 8011d0e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8011d12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d16:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011d1a:	6819      	ldr	r1, [r3, #0]
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f7f6 fa46 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
//    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 2);
//    TFLITE_DCHECK_EQ(batches, input_shape.Dims(0));

    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -input->params.zero_point;
 8011d22:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d26:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	691b      	ldr	r3, [r3, #16]
 8011d2e:	425b      	negs	r3, r3
 8011d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    fc_params.filter_offset = -filter->params.zero_point;
 8011d34:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	425b      	negs	r3, r3
 8011d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    fc_params.output_offset = output->params.zero_point;
 8011d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    fc_params.activation.min = data.output_activation_min;
 8011d4a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    fc_params.activation.max = data.output_activation_max;
 8011d5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    cmsis_nn_per_tensor_quant_params quant_params;
    quant_params.multiplier = data.output_multiplier;
 8011d6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    // TODO(b/138810107): Figure out whether output shift should be inverted
    quant_params.shift = -data.output_shift;
 8011d7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011d7e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	425b      	negs	r3, r3
 8011d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    cmsis_nn_dims input_dims;
    input_dims.n = batches;
 8011d8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011d90:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = 1;
 8011d92:	2301      	movs	r3, #1
 8011d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = 1;
 8011d98:	2301      	movs	r3, #1
 8011d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = input_shape.Dims(1);
 8011d9e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011da2:	2101      	movs	r1, #1
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7f9 fe15 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011daa:	4603      	mov	r3, r0
 8011dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    cmsis_nn_dims filter_dims;
    filter_dims.n = accum_depth;
 8011db0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    filter_dims.h = 1;
 8011db6:	2301      	movs	r3, #1
 8011db8:	673b      	str	r3, [r7, #112]	; 0x70
    filter_dims.w = 1;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	677b      	str	r3, [r7, #116]	; 0x74
    filter_dims.c = output_depth;
 8011dbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8011dc2:	67bb      	str	r3, [r7, #120]	; 0x78

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8011dc4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dcc:	2201      	movs	r2, #1
 8011dce:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 8011dd0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dd8:	2201      	movs	r2, #1
 8011dda:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8011ddc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011de4:	2201      	movs	r2, #1
 8011de6:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 8011de8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011df0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8011df4:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batches;
 8011df6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011dfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011dfe:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8011e02:	601a      	str	r2, [r3, #0]
    output_dims.h = 1;
 8011e04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	605a      	str	r2, [r3, #4]
    output_dims.w = 1;
 8011e10:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e18:	2201      	movs	r2, #1
 8011e1a:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8011e1c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011e24:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8011e28:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8011e2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8011e32:	2200      	movs	r2, #0
 8011e34:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 8011e36:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8011e3e:	2200      	movs	r2, #0
 8011e40:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8011e42:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	695b      	ldr	r3, [r3, #20]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	db17      	blt.n	8011e82 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x21e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8011e52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e5e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8011e62:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	6951      	ldr	r1, [r2, #20]
 8011e6a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8011e6e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8011e72:	6810      	ldr	r0, [r2, #0]
 8011e74:	4798      	blx	r3
 8011e76:	4602      	mov	r2, r0
 8011e78:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8011e80:	601a      	str	r2, [r3, #0]
    }

    TF_LITE_ENSURE_EQ(
 8011e82:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011e86:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011e8a:	6818      	ldr	r0, [r3, #0]
 8011e8c:	f7f9 fe54 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8011e90:	4606      	mov	r6, r0
 8011e92:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8011e96:	f7f9 fe4f 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8011ea0:	f7f9 fe6c 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8011ea4:	6038      	str	r0, [r7, #0]
 8011ea6:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8011eaa:	f7f9 fe56 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8011eb4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8011eb8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011ebc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8011ec0:	9306      	str	r3, [sp, #24]
 8011ec2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011ec6:	9305      	str	r3, [sp, #20]
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	9304      	str	r3, [sp, #16]
 8011ecc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011ed0:	9303      	str	r3, [sp, #12]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	9302      	str	r3, [sp, #8]
 8011ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011eda:	9301      	str	r3, [sp, #4]
 8011edc:	9600      	str	r6, [sp, #0]
 8011ede:	462b      	mov	r3, r5
 8011ee0:	f003 fd74 	bl	80159cc <arm_fully_connected_s8>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	bf14      	ite	ne
 8011eea:	2301      	movne	r3, #1
 8011eec:	2300      	moveq	r3, #0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d04b      	beq.n	8011f8c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x328>
 8011ef4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011ef8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	695c      	ldr	r4, [r3, #20]
 8011f00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011f04:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011f08:	6818      	ldr	r0, [r3, #0]
 8011f0a:	f7f9 fe15 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8011f0e:	4606      	mov	r6, r0
 8011f10:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8011f14:	f7f9 fe10 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8011f1e:	f7f9 fe2d 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8011f22:	6038      	str	r0, [r7, #0]
 8011f24:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8011f28:	f7f9 fe17 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8011f32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8011f36:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011f3a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8011f3e:	9306      	str	r3, [sp, #24]
 8011f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f44:	9305      	str	r3, [sp, #20]
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	9304      	str	r3, [sp, #16]
 8011f4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f4e:	9303      	str	r3, [sp, #12]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	9302      	str	r3, [sp, #8]
 8011f54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011f58:	9301      	str	r3, [sp, #4]
 8011f5a:	9600      	str	r6, [sp, #0]
 8011f5c:	462b      	mov	r3, r5
 8011f5e:	f003 fd35 	bl	80159cc <arm_fully_connected_s8>
 8011f62:	4603      	mov	r3, r0
 8011f64:	461a      	mov	r2, r3
 8011f66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011f6a:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8011f6e:	2300      	movs	r3, #0
 8011f70:	9303      	str	r3, [sp, #12]
 8011f72:	9202      	str	r2, [sp, #8]
 8011f74:	4b6b      	ldr	r3, [pc, #428]	; (8012124 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c0>)
 8011f76:	9301      	str	r3, [sp, #4]
 8011f78:	4b6b      	ldr	r3, [pc, #428]	; (8012128 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c4>)
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	23c2      	movs	r3, #194	; 0xc2
 8011f7e:	4a6b      	ldr	r2, [pc, #428]	; (801212c <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4c8>)
 8011f80:	496b      	ldr	r1, [pc, #428]	; (8012130 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4cc>)
 8011f82:	6800      	ldr	r0, [r0, #0]
 8011f84:	47a0      	blx	r4
 8011f86:	2401      	movs	r4, #1
 8011f88:	2500      	movs	r5, #0
 8011f8a:	e000      	b.n	8011f8e <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x32a>
                               GetTensorData<int8_t>(input), &filter_dims,
                               GetTensorData<int8_t>(filter), &bias_dims,
                               GetTensorData<int32>(bias), &output_dims,
                               GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  } else {
 8011f8c:	2501      	movs	r5, #1
 8011f8e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7f6 f891 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8011f98:	2d01      	cmp	r5, #1
 8011f9a:	d101      	bne.n	8011fa0 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x33c>
 8011f9c:	2501      	movs	r5, #1
 8011f9e:	e000      	b.n	8011fa2 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x33e>
 8011fa0:	2500      	movs	r5, #0
 8011fa2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7f6 f887 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8011fac:	2d01      	cmp	r5, #1
 8011fae:	d101      	bne.n	8011fb4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x350>
 8011fb0:	2501      	movs	r5, #1
 8011fb2:	e000      	b.n	8011fb6 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x352>
 8011fb4:	2500      	movs	r5, #0
 8011fb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7f6 f87d 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8011fc0:	2d01      	cmp	r5, #1
 8011fc2:	f040 80a9 	bne.w	8012118 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4b4>
 8011fc6:	e0a6      	b.n	8012116 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x4b2>
    tflite::FullyConnectedParams op_params;
    op_params.input_offset = -input->params.zero_point;
 8011fc8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011fcc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	425a      	negs	r2, r3
 8011fd6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011fda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8011fde:	601a      	str	r2, [r3, #0]
    op_params.weights_offset = -filter->params.zero_point;
 8011fe0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011fe4:	691b      	ldr	r3, [r3, #16]
 8011fe6:	425a      	negs	r2, r3
 8011fe8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011fec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8011ff0:	605a      	str	r2, [r3, #4]
    op_params.output_offset = output->params.zero_point;
 8011ff2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8011ff6:	691a      	ldr	r2, [r3, #16]
 8011ff8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011ffc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012000:	609a      	str	r2, [r3, #8]
    op_params.output_multiplier = data.output_multiplier;
 8012002:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012006:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012012:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012016:	60da      	str	r2, [r3, #12]
    // TODO(b/138810107): Figure out whether output shift should be inverted
    op_params.output_shift = -data.output_shift;
 8012018:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801201c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	425a      	negs	r2, r3
 8012026:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801202a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801202e:	611a      	str	r2, [r3, #16]
    op_params.quantized_activation_min = data.output_activation_min;
 8012030:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012034:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	689a      	ldr	r2, [r3, #8]
 801203c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012040:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012044:	615a      	str	r2, [r3, #20]
    op_params.quantized_activation_max = data.output_activation_max;
 8012046:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801204a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68da      	ldr	r2, [r3, #12]
 8012052:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012056:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801205a:	619a      	str	r2, [r3, #24]

    reference_integer_ops::FullyConnected(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801205c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012060:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012064:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012068:	6819      	ldr	r1, [r3, #0]
 801206a:	4610      	mov	r0, r2
 801206c:	f7f6 f89f 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 8012070:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012074:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8012078:	6818      	ldr	r0, [r3, #0]
 801207a:	f7f9 fd5d 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801207e:	4606      	mov	r6, r0
        GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8012080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012084:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8012088:	4618      	mov	r0, r3
 801208a:	f7f6 f890 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 801208e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8012092:	f7f9 fd51 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8012096:	4604      	mov	r4, r0
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
 8012098:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801209c:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7f6 f884 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 80120a6:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 80120aa:	f7f9 fd67 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80120ae:	4605      	mov	r5, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 80120b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120b4:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7f6 f878 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::FullyConnected(
 80120be:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80120c2:	f7f9 fd4a 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80120c6:	4603      	mov	r3, r0
 80120c8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80120cc:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80120d0:	f107 001c 	add.w	r0, r7, #28
 80120d4:	9304      	str	r3, [sp, #16]
 80120d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120da:	9303      	str	r3, [sp, #12]
 80120dc:	9502      	str	r5, [sp, #8]
 80120de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80120e2:	9301      	str	r3, [sp, #4]
 80120e4:	9400      	str	r4, [sp, #0]
 80120e6:	4613      	mov	r3, r2
 80120e8:	4632      	mov	r2, r6
 80120ea:	f7ff fb8b 	bl	8011804 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 80120ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f5 ffe1 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
 80120f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7f5 ffdc 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8012102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012106:	4618      	mov	r0, r3
 8012108:	f7f5 ffd7 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801210c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012110:	4618      	mov	r0, r3
 8012112:	f7f5 ffd2 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
 8012116:	2400      	movs	r4, #0
}
 8012118:	4623      	mov	r3, r4
 801211a:	4618      	mov	r0, r3
 801211c:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8012120:	46bd      	mov	sp, r7
 8012122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012124:	0801ee20 	.word	0x0801ee20
 8012128:	0801ee34 	.word	0x0801ee34
 801212c:	0801ec24 	.word	0x0801ec24
 8012130:	0801ee04 	.word	0x0801ee04

08012134 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 8012134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012136:	b0c9      	sub	sp, #292	; 0x124
 8012138:	af06      	add	r7, sp, #24
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012140:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8012144:	6001      	str	r1, [r0, #0]
 8012146:	f507 7184 	add.w	r1, r7, #264	; 0x108
 801214a:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 801214e:	600a      	str	r2, [r1, #0]
 8012150:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8012154:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8012158:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 801215a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801215e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	425b      	negs	r3, r3
 8012168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 801216c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	425b      	negs	r3, r3
 8012174:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 8012178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801217c:	691b      	ldr	r3, [r3, #16]
 801217e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8012182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012186:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 8012188:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801218c:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 801218e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012192:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8012194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 80121a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	425b      	negs	r3, r3
 80121b0:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 80121b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 80121c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 80121ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	2b03      	cmp	r3, #3
 80121d6:	d002      	beq.n	80121de <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0xaa>
 80121d8:	2b07      	cmp	r3, #7
 80121da:	d05e      	beq.n	801229a <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x166>
 80121dc:	e0bb      	b.n	8012356 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x222>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 80121de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80121e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ea:	6819      	ldr	r1, [r3, #0]
 80121ec:	4610      	mov	r0, r2
 80121ee:	f7f5 ffde 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80121f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fa:	6818      	ldr	r0, [r3, #0]
 80121fc:	f7f9 fbb7 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8012200:	4606      	mov	r6, r0
 8012202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012206:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801220a:	4618      	mov	r0, r3
 801220c:	f7f5 ffcf 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012210:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8012214:	f7f9 fbab 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8012218:	4604      	mov	r4, r0
 801221a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801221e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8012222:	4618      	mov	r0, r3
 8012224:	f7f5 ffc3 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012228:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801222c:	f7f9 fca6 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8012230:	4605      	mov	r5, r0
 8012232:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012236:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801223a:	4618      	mov	r0, r3
 801223c:	f7f5 ffb7 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012240:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012244:	f7f9 fba4 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8012248:	4603      	mov	r3, r0
 801224a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801224e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012252:	f107 0014 	add.w	r0, r7, #20
 8012256:	9304      	str	r3, [sp, #16]
 8012258:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801225c:	9303      	str	r3, [sp, #12]
 801225e:	9502      	str	r5, [sp, #8]
 8012260:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	9400      	str	r4, [sp, #0]
 8012268:	4613      	mov	r3, r2
 801226a:	4632      	mov	r2, r6
 801226c:	f7ff f92b 	bl	80114c6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 8012270:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012274:	4618      	mov	r0, r3
 8012276:	f7f5 ff20 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801227a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801227e:	4618      	mov	r0, r3
 8012280:	f7f5 ff1b 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8012284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012288:	4618      	mov	r0, r3
 801228a:	f7f5 ff16 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801228e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012292:	4618      	mov	r0, r3
 8012294:	f7f5 ff11 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8012298:	e06e      	b.n	8012378 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 801229a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801229e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122a6:	6819      	ldr	r1, [r3, #0]
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7f5 ff80 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80122ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b6:	6818      	ldr	r0, [r3, #0]
 80122b8:	f7f9 fb59 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80122bc:	4606      	mov	r6, r0
 80122be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80122c2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7f5 ff71 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80122cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80122d0:	f7f9 fb4d 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80122d4:	4604      	mov	r4, r0
 80122d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80122da:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80122de:	4618      	mov	r0, r3
 80122e0:	f7f5 ff65 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80122e4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80122e8:	f7f9 fc48 	bl	800bb7c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80122ec:	4605      	mov	r5, r0
 80122ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80122f2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f5 ff59 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80122fc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012300:	f7fd f9d4 	bl	800f6ac <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8012304:	4603      	mov	r3, r0
 8012306:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801230a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 801230e:	f107 0014 	add.w	r0, r7, #20
 8012312:	9304      	str	r3, [sp, #16]
 8012314:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012318:	9303      	str	r3, [sp, #12]
 801231a:	9502      	str	r5, [sp, #8]
 801231c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012320:	9301      	str	r3, [sp, #4]
 8012322:	9400      	str	r4, [sp, #0]
 8012324:	4613      	mov	r3, r2
 8012326:	4632      	mov	r2, r6
 8012328:	f7ff f99d 	bl	8011666 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 801232c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012330:	4618      	mov	r0, r3
 8012332:	f7f5 fec2 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8012336:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801233a:	4618      	mov	r0, r3
 801233c:	f7f5 febd 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8012340:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012344:	4618      	mov	r0, r3
 8012346:	f7f5 feb8 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801234a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801234e:	4618      	mov	r0, r3
 8012350:	f7f5 feb3 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8012354:	e010      	b.n	8012378 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	695c      	ldr	r4, [r3, #20]
 801235a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	4618      	mov	r0, r3
 8012362:	f7f2 fd13 	bl	8004d8c <TfLiteTypeGetName>
 8012366:	4602      	mov	r2, r0
 8012368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	4905      	ldr	r1, [pc, #20]	; (8012384 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x250>)
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8012374:	2301      	movs	r3, #1
 8012376:	e000      	b.n	801237a <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x246>
  }

  return kTfLiteOk;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8012380:	46bd      	mov	sp, r7
 8012382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012384:	0801ef1c 	.word	0x0801ef1c

08012388 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	b0af      	sub	sp, #188	; 0xbc
 801238c:	af06      	add	r7, sp, #24
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	603b      	str	r3, [r7, #0]
 8012394:	4613      	mov	r3, r2
 8012396:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 8012398:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801239c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7fd f9ce 	bl	800f744 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 80123a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80123b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7f5 fef9 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 80123bc:	6838      	ldr	r0, [r7, #0]
 80123be:	f7f9 fb99 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80123c2:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 80123c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80123c8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f5 feee 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 80123d2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80123d6:	f7f9 fb8d 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80123da:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 80123dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80123e0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7f5 fee2 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 80123ea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80123ee:	f7f9 fb81 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80123f2:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 80123f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80123f8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f5 fed6 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8012402:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012406:	f7f9 fb86 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801240a:	4603      	mov	r3, r0
 801240c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012410:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012414:	f107 0010 	add.w	r0, r7, #16
 8012418:	9304      	str	r3, [sp, #16]
 801241a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	9502      	str	r5, [sp, #8]
 8012422:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	9400      	str	r4, [sp, #0]
 801242a:	4613      	mov	r3, r2
 801242c:	4632      	mov	r2, r6
 801242e:	f7fe ffb3 	bl	8011398 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8012432:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012436:	4618      	mov	r0, r3
 8012438:	f7f5 fe3f 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801243c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012440:	4618      	mov	r0, r3
 8012442:	f7f5 fe3a 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 8012446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801244a:	4618      	mov	r0, r3
 801244c:	f7f5 fe35 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8012450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012454:	4618      	mov	r0, r3
 8012456:	f7f5 fe30 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	37a4      	adds	r7, #164	; 0xa4
 8012460:	46bd      	mov	sp, r7
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012464 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8012464:	b590      	push	{r4, r7, lr}
 8012466:	b08d      	sub	sp, #52	; 0x34
 8012468:	af04      	add	r7, sp, #16
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	695b      	ldr	r3, [r3, #20]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012476:	f005 fba5 	bl	8017bc4 <abort>
  const auto* params =
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	695b      	ldr	r3, [r3, #20]
 801247e:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012480:	2200      	movs	r2, #0
 8012482:	6839      	ldr	r1, [r7, #0]
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f7f9 fa46 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801248a:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 801248c:	2201      	movs	r2, #1
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7f9 fa40 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012496:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8012498:	2202      	movs	r2, #2
 801249a:	6839      	ldr	r1, [r7, #0]
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7fa ffbd 	bl	800d41c <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80124a2:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80124a4:	2200      	movs	r2, #0
 80124a6:	6839      	ldr	r1, [r7, #0]
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f7f9 fa4a 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80124ae:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 80124b8:	f005 fb84 	bl	8017bc4 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	691b      	ldr	r3, [r3, #16]
 80124c0:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b09      	cmp	r3, #9
 80124c8:	d015      	beq.n	80124f6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 80124ca:	2b09      	cmp	r3, #9
 80124cc:	dc2f      	bgt.n	801252e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d002      	beq.n	80124d8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 80124d2:	2b03      	cmp	r3, #3
 80124d4:	d01d      	beq.n	8012512 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 80124d6:	e02a      	b.n	801252e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	781a      	ldrb	r2, [r3, #0]
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	9302      	str	r3, [sp, #8]
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f7ff ff4b 	bl	8012388 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 80124f2:	4603      	mov	r3, r0
                       output);
 80124f4:	e029      	b.n	801254a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	9302      	str	r3, [sp, #8]
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	6839      	ldr	r1, [r7, #0]
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7ff fbab 	bl	8011c64 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801250e:	4603      	mov	r3, r0
                               output);
 8012510:	e01b      	b.n	801254a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	9302      	str	r3, [sp, #8]
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	6839      	ldr	r1, [r7, #0]
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff fe05 	bl	8012134 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801252a:	4603      	mov	r3, r0
 801252c:	e00d      	b.n	801254a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	695c      	ldr	r4, [r3, #20]
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	f7f2 fc28 	bl	8004d8c <TfLiteTypeGetName>
 801253c:	4602      	mov	r2, r0
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	4904      	ldr	r1, [pc, #16]	; (8012554 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8012548:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 801254a:	4618      	mov	r0, r3
 801254c:	3724      	adds	r7, #36	; 0x24
 801254e:	46bd      	mov	sp, r7
 8012550:	bd90      	pop	{r4, r7, pc}
 8012552:	bf00      	nop
 8012554:	0801ef1c 	.word	0x0801ef1c

08012558 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
 8012558:	b4b0      	push	{r4, r5, r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a07      	ldr	r2, [pc, #28]	; (8012580 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x28>)
 8012564:	461c      	mov	r4, r3
 8012566:	4615      	mov	r5, r2
 8012568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801256c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	bcb0      	pop	{r4, r5, r7}
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop
 8012580:	0801ef38 	.word	0x0801ef38

08012584 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	ed2d 8b02 	vpush	{d8}
 801258a:	b0a7      	sub	sp, #156	; 0x9c
 801258c:	af02      	add	r7, sp, #8
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	607a      	str	r2, [r7, #4]
 8012594:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012596:	68b8      	ldr	r0, [r7, #8]
 8012598:	f7f5 fda5 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801259c:	4603      	mov	r3, r0
 801259e:	2b04      	cmp	r3, #4
 80125a0:	d001      	beq.n	80125a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80125a2:	f005 fb0f 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80125a6:	6838      	ldr	r0, [r7, #0]
 80125a8:	f7f5 fd9d 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b04      	cmp	r3, #4
 80125b0:	d001      	beq.n	80125b6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80125b2:	f005 fb07 	bl	8017bc4 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80125b6:	2300      	movs	r3, #0
 80125b8:	683a      	ldr	r2, [r7, #0]
 80125ba:	2100      	movs	r1, #0
 80125bc:	68b8      	ldr	r0, [r7, #8]
 80125be:	f7f9 fd5a 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80125c2:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80125c4:	2303      	movs	r3, #3
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	2103      	movs	r1, #3
 80125ca:	68b8      	ldr	r0, [r7, #8]
 80125cc:	f7f9 fd53 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80125d0:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80125d2:	2101      	movs	r1, #1
 80125d4:	68b8      	ldr	r0, [r7, #8]
 80125d6:	f7f9 f9fd 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80125da:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80125dc:	2102      	movs	r1, #2
 80125de:	68b8      	ldr	r0, [r7, #8]
 80125e0:	f7f9 f9f8 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80125e4:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80125e6:	2101      	movs	r1, #1
 80125e8:	6838      	ldr	r0, [r7, #0]
 80125ea:	f7f9 f9f3 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80125ee:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80125f0:	2102      	movs	r1, #2
 80125f2:	6838      	ldr	r0, [r7, #0]
 80125f4:	f7f9 f9ee 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80125f8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	691b      	ldr	r3, [r3, #16]
 8012604:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8012606:	2300      	movs	r3, #0
 8012608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801260c:	e0ee      	b.n	80127ec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801260e:	2300      	movs	r3, #0
 8012610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012614:	e0df      	b.n	80127d6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x252>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012616:	2300      	movs	r3, #0
 8012618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801261c:	e0d0      	b.n	80127c0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
        for (int channel = 0; channel < depth; ++channel) {
 801261e:	2300      	movs	r3, #0
 8012620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012624:	e0c1      	b.n	80127aa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x226>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8012626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801262a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801262c:	fb02 f303 	mul.w	r3, r2, r3
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8012636:	1a9b      	subs	r3, r3, r2
 8012638:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801263a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801263e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012640:	fb02 f303 	mul.w	r3, r2, r3
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801264a:	1a9b      	subs	r3, r3, r2
 801264c:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801264e:	2300      	movs	r3, #0
 8012650:	617b      	str	r3, [r7, #20]
 8012652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012654:	425b      	negs	r3, r3
 8012656:	61bb      	str	r3, [r7, #24]
 8012658:	f107 0218 	add.w	r2, r7, #24
 801265c:	f107 0314 	add.w	r3, r7, #20
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f7f5 fcae 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 8012668:	4603      	mov	r3, r0
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f103 0018 	add.w	r0, r3, #24
 8012674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012678:	1ad3      	subs	r3, r2, r3
 801267a:	61fb      	str	r3, [r7, #28]
 801267c:	f107 031c 	add.w	r3, r7, #28
 8012680:	4619      	mov	r1, r3
 8012682:	f001 f943 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 8012686:	4603      	mov	r3, r0
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801268c:	2300      	movs	r3, #0
 801268e:	623b      	str	r3, [r7, #32]
 8012690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012692:	425b      	negs	r3, r3
 8012694:	627b      	str	r3, [r7, #36]	; 0x24
 8012696:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801269a:	f107 0320 	add.w	r3, r7, #32
 801269e:	4611      	mov	r1, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f5 fc8f 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 80126a6:	4603      	mov	r3, r0
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f103 0014 	add.w	r0, r3, #20
 80126b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80126b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80126ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80126be:	4619      	mov	r1, r3
 80126c0:	f001 f924 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 80126c4:	4603      	mov	r3, r0
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 80126ca:	f04f 0300 	mov.w	r3, #0
 80126ce:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 80126d0:	f04f 0300 	mov.w	r3, #0
 80126d4:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80126d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d8:	677b      	str	r3, [r7, #116]	; 0x74
 80126da:	e032      	b.n	8012742 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1be>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80126dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126de:	673b      	str	r3, [r7, #112]	; 0x70
 80126e0:	e028      	b.n	8012734 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80126e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80126e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126e6:	4413      	add	r3, r2
 80126e8:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 80126ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126ee:	4413      	add	r3, r2
 80126f0:	62fb      	str	r3, [r7, #44]	; 0x2c
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 80126f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126fc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012700:	68b8      	ldr	r0, [r7, #8]
 8012702:	f7f9 fb70 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012706:	4603      	mov	r3, r0
 8012708:	009b      	lsls	r3, r3, #2
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	4413      	add	r3, r2
 801270e:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8012712:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8012716:	ee77 7a27 	vadd.f32	s15, s14, s15
 801271a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 801271e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8012722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012726:	ee77 7a87 	vadd.f32	s15, s15, s14
 801272a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801272e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012730:	3301      	adds	r3, #1
 8012732:	673b      	str	r3, [r7, #112]	; 0x70
 8012734:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012738:	429a      	cmp	r2, r3
 801273a:	dbd2      	blt.n	80126e2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15e>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801273c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801273e:	3301      	adds	r3, #1
 8012740:	677b      	str	r3, [r7, #116]	; 0x74
 8012742:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012746:	429a      	cmp	r2, r3
 8012748:	dbc8      	blt.n	80126dc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x158>
            }
          }
          const float average = total / filter_count;
 801274a:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801274e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8012752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012756:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012770:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012774:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012778:	6838      	ldr	r0, [r7, #0]
 801277a:	f7f9 fb34 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801277e:	4603      	mov	r3, r0
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012786:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8012788:	eeb0 1a68 	vmov.f32	s2, s17
 801278c:	eef0 0a48 	vmov.f32	s1, s16
 8012790:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8012794:	f7fc ffb6 	bl	800f704 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8012798:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801279c:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 80127a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127a4:	3301      	adds	r3, #1
 80127a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80127aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80127ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80127b0:	429a      	cmp	r2, r3
 80127b2:	f6ff af38 	blt.w	8012626 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80127b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127ba:	3301      	adds	r3, #1
 80127bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80127c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127c6:	429a      	cmp	r2, r3
 80127c8:	f6ff af29 	blt.w	801261e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80127cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80127d0:	3301      	adds	r3, #1
 80127d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80127d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80127da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127dc:	429a      	cmp	r2, r3
 80127de:	f6ff af1a 	blt.w	8012616 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
  for (int batch = 0; batch < batches; ++batch) {
 80127e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127e6:	3301      	adds	r3, #1
 80127e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80127ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80127f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127f2:	429a      	cmp	r2, r3
 80127f4:	f6ff af0b 	blt.w	801260e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
        }
      }
    }
  }
}
 80127f8:	bf00      	nop
 80127fa:	bf00      	nop
 80127fc:	3794      	adds	r7, #148	; 0x94
 80127fe:	46bd      	mov	sp, r7
 8012800:	ecbd 8b02 	vpop	{d8}
 8012804:	bd90      	pop	{r4, r7, pc}

08012806 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
 8012806:	b590      	push	{r4, r7, lr}
 8012808:	b0a5      	sub	sp, #148	; 0x94
 801280a:	af02      	add	r7, sp, #8
 801280c:	60f8      	str	r0, [r7, #12]
 801280e:	60b9      	str	r1, [r7, #8]
 8012810:	607a      	str	r2, [r7, #4]
 8012812:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	69da      	ldr	r2, [r3, #28]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6a1b      	ldr	r3, [r3, #32]
 801281c:	429a      	cmp	r2, r3
 801281e:	dd01      	ble.n	8012824 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8012820:	f005 f9d0 	bl	8017bc4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012824:	68b8      	ldr	r0, [r7, #8]
 8012826:	f7f5 fc5e 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801282a:	4603      	mov	r3, r0
 801282c:	2b04      	cmp	r3, #4
 801282e:	d001      	beq.n	8012834 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2e>
 8012830:	f005 f9c8 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012834:	6838      	ldr	r0, [r7, #0]
 8012836:	f7f5 fc56 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801283a:	4603      	mov	r3, r0
 801283c:	2b04      	cmp	r3, #4
 801283e:	d001      	beq.n	8012844 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x3e>
 8012840:	f005 f9c0 	bl	8017bc4 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012844:	2300      	movs	r3, #0
 8012846:	683a      	ldr	r2, [r7, #0]
 8012848:	2100      	movs	r1, #0
 801284a:	68b8      	ldr	r0, [r7, #8]
 801284c:	f7f9 fc13 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012850:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012852:	2303      	movs	r3, #3
 8012854:	683a      	ldr	r2, [r7, #0]
 8012856:	2103      	movs	r1, #3
 8012858:	68b8      	ldr	r0, [r7, #8]
 801285a:	f7f9 fc0c 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801285e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 8012860:	2101      	movs	r1, #1
 8012862:	68b8      	ldr	r0, [r7, #8]
 8012864:	f7f9 f8b6 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012868:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 801286a:	2102      	movs	r1, #2
 801286c:	68b8      	ldr	r0, [r7, #8]
 801286e:	f7f9 f8b1 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012872:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 8012874:	2101      	movs	r1, #1
 8012876:	6838      	ldr	r0, [r7, #0]
 8012878:	f7f9 f8ac 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801287c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 801287e:	2102      	movs	r1, #2
 8012880:	6838      	ldr	r0, [r7, #0]
 8012882:	f7f9 f8a7 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012886:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	691b      	ldr	r3, [r3, #16]
 8012892:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 8012894:	2300      	movs	r3, #0
 8012896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801289a:	e0e4      	b.n	8012a66 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x260>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801289c:	2300      	movs	r3, #0
 801289e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128a2:	e0d5      	b.n	8012a50 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x24a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80128a4:	2300      	movs	r3, #0
 80128a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80128a8:	e0c8      	b.n	8012a3c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x236>
        for (int channel = 0; channel < depth; ++channel) {
 80128aa:	2300      	movs	r3, #0
 80128ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80128ae:	e0bd      	b.n	8012a2c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x226>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80128b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80128b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128b4:	fb02 f303 	mul.w	r3, r2, r3
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80128be:	1a9b      	subs	r3, r3, r2
 80128c0:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80128c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80128c8:	fb02 f303 	mul.w	r3, r2, r3
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80128d2:	1a9b      	subs	r3, r3, r2
 80128d4:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80128d6:	2300      	movs	r3, #0
 80128d8:	617b      	str	r3, [r7, #20]
 80128da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128dc:	425b      	negs	r3, r3
 80128de:	61bb      	str	r3, [r7, #24]
 80128e0:	f107 0218 	add.w	r2, r7, #24
 80128e4:	f107 0314 	add.w	r3, r7, #20
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7f5 fb6a 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 80128f0:	4603      	mov	r3, r0
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f103 0018 	add.w	r0, r3, #24
 80128fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80128fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012900:	1ad3      	subs	r3, r2, r3
 8012902:	61fb      	str	r3, [r7, #28]
 8012904:	f107 031c 	add.w	r3, r7, #28
 8012908:	4619      	mov	r1, r3
 801290a:	f000 ffff 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 801290e:	4603      	mov	r3, r0
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 8012914:	2300      	movs	r3, #0
 8012916:	623b      	str	r3, [r7, #32]
 8012918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801291a:	425b      	negs	r3, r3
 801291c:	627b      	str	r3, [r7, #36]	; 0x24
 801291e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012922:	f107 0320 	add.w	r3, r7, #32
 8012926:	4611      	mov	r1, r2
 8012928:	4618      	mov	r0, r3
 801292a:	f7f5 fb4b 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 801292e:	4603      	mov	r3, r0
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f103 0014 	add.w	r0, r3, #20
 801293a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	62bb      	str	r3, [r7, #40]	; 0x28
 8012942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012946:	4619      	mov	r1, r3
 8012948:	f000 ffe0 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 801294c:	4603      	mov	r3, r0
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	637b      	str	r3, [r7, #52]	; 0x34
          int32 acc = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295c:	673b      	str	r3, [r7, #112]	; 0x70
 801295e:	e029      	b.n	80129b4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1ae>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012964:	e01f      	b.n	80129a6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8012966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801296a:	4413      	add	r3, r2
 801296c:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 801296e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012972:	4413      	add	r3, r2
 8012974:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8012976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801297e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012982:	68b8      	ldr	r0, [r7, #8]
 8012984:	f7f9 fa2f 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012988:	4603      	mov	r3, r0
 801298a:	461a      	mov	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4413      	add	r3, r2
 8012990:	781b      	ldrb	r3, [r3, #0]
              acc +=
 8012992:	461a      	mov	r2, r3
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	4413      	add	r3, r2
 8012998:	613b      	str	r3, [r7, #16]
              filter_count++;
 801299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801299c:	3301      	adds	r3, #1
 801299e:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80129a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129a2:	3301      	adds	r3, #1
 80129a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80129a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129aa:	429a      	cmp	r2, r3
 80129ac:	dbdb      	blt.n	8012966 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x160>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80129ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129b0:	3301      	adds	r3, #1
 80129b2:	673b      	str	r3, [r7, #112]	; 0x70
 80129b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80129b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129b8:	429a      	cmp	r2, r3
 80129ba:	dbd1      	blt.n	8012960 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x15a>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
 80129bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129be:	0fda      	lsrs	r2, r3, #31
 80129c0:	4413      	add	r3, r2
 80129c2:	105b      	asrs	r3, r3, #1
 80129c4:	461a      	mov	r2, r3
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	441a      	add	r2, r3
 80129ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80129d0:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f103 021c 	add.w	r2, r3, #28
 80129d8:	f107 0310 	add.w	r3, r7, #16
 80129dc:	4611      	mov	r1, r2
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f5 fb04 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 80129e4:	4603      	mov	r3, r0
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f103 0220 	add.w	r2, r3, #32
 80129f0:	f107 0310 	add.w	r3, r7, #16
 80129f4:	4611      	mov	r1, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f5 fb0c 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 80129fc:	4603      	mov	r3, r0
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012a02:	693c      	ldr	r4, [r7, #16]
 8012a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a0e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012a12:	6838      	ldr	r0, [r7, #0]
 8012a14:	f7f9 f9e7 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a20:	4413      	add	r3, r2
 8012a22:	b2e2      	uxtb	r2, r4
 8012a24:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8012a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a28:	3301      	adds	r3, #1
 8012a2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8012a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a30:	429a      	cmp	r2, r3
 8012a32:	f6ff af3d 	blt.w	80128b0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xaa>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a38:	3301      	adds	r3, #1
 8012a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012a3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a40:	429a      	cmp	r2, r3
 8012a42:	f6ff af32 	blt.w	80128aa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012a56:	429a      	cmp	r2, r3
 8012a58:	f6ff af24 	blt.w	80128a4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9e>
  for (int batch = 0; batch < batches; ++batch) {
 8012a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a60:	3301      	adds	r3, #1
 8012a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	f6ff af15 	blt.w	801289c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x96>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 8012a72:	bf00      	nop
 8012a74:	bf00      	nop
 8012a76:	378c      	adds	r7, #140	; 0x8c
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd90      	pop	{r4, r7, pc}

08012a7c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8012a7c:	b590      	push	{r4, r7, lr}
 8012a7e:	ed2d 8b04 	vpush	{d8-d9}
 8012a82:	b0a5      	sub	sp, #148	; 0x94
 8012a84:	af02      	add	r7, sp, #8
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
 8012a8c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012a8e:	68b8      	ldr	r0, [r7, #8]
 8012a90:	f7f5 fb29 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b04      	cmp	r3, #4
 8012a98:	d001      	beq.n	8012a9e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8012a9a:	f005 f893 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012a9e:	6838      	ldr	r0, [r7, #0]
 8012aa0:	f7f5 fb21 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b04      	cmp	r3, #4
 8012aa8:	d001      	beq.n	8012aae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8012aaa:	f005 f88b 	bl	8017bc4 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012aae:	2300      	movs	r3, #0
 8012ab0:	683a      	ldr	r2, [r7, #0]
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	68b8      	ldr	r0, [r7, #8]
 8012ab6:	f7f9 fade 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012aba:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012abc:	2303      	movs	r3, #3
 8012abe:	683a      	ldr	r2, [r7, #0]
 8012ac0:	2103      	movs	r1, #3
 8012ac2:	68b8      	ldr	r0, [r7, #8]
 8012ac4:	f7f9 fad7 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012ac8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8012aca:	2101      	movs	r1, #1
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	f7f8 ff81 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ad2:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8012ad4:	2102      	movs	r1, #2
 8012ad6:	68b8      	ldr	r0, [r7, #8]
 8012ad8:	f7f8 ff7c 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012adc:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8012ade:	2101      	movs	r1, #1
 8012ae0:	6838      	ldr	r0, [r7, #0]
 8012ae2:	f7f8 ff77 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ae6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8012ae8:	2102      	movs	r1, #2
 8012aea:	6838      	ldr	r0, [r7, #0]
 8012aec:	f7f8 ff72 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012af0:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8012afe:	2300      	movs	r3, #0
 8012b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012b04:	e0d2      	b.n	8012cac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012b06:	2300      	movs	r3, #0
 8012b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b0c:	e0c3      	b.n	8012c96 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012b0e:	2300      	movs	r3, #0
 8012b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012b12:	e0b6      	b.n	8012c82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x206>
        for (int channel = 0; channel < depth; ++channel) {
 8012b14:	2300      	movs	r3, #0
 8012b16:	67bb      	str	r3, [r7, #120]	; 0x78
 8012b18:	e0ab      	b.n	8012c72 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1f6>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8012b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b1e:	fb02 f303 	mul.w	r3, r2, r3
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8012b28:	1a9b      	subs	r3, r3, r2
 8012b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8012b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b32:	fb02 f303 	mul.w	r3, r2, r3
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8012b3c:	1a9b      	subs	r3, r3, r2
 8012b3e:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8012b40:	2300      	movs	r3, #0
 8012b42:	61bb      	str	r3, [r7, #24]
 8012b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b46:	425b      	negs	r3, r3
 8012b48:	61fb      	str	r3, [r7, #28]
 8012b4a:	f107 021c 	add.w	r2, r7, #28
 8012b4e:	f107 0318 	add.w	r3, r7, #24
 8012b52:	4611      	mov	r1, r2
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7f5 fa35 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f103 0018 	add.w	r0, r3, #24
 8012b66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	623b      	str	r3, [r7, #32]
 8012b6e:	f107 0320 	add.w	r3, r7, #32
 8012b72:	4619      	mov	r1, r3
 8012b74:	f000 feca 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8012b7e:	2300      	movs	r3, #0
 8012b80:	627b      	str	r3, [r7, #36]	; 0x24
 8012b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b84:	425b      	negs	r3, r3
 8012b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b90:	4611      	mov	r1, r2
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7f5 fa16 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f103 0014 	add.w	r0, r3, #20
 8012ba4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ba8:	1ad3      	subs	r3, r2, r3
 8012baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	f000 feab 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8012bbc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012bc0:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8012bc6:	e02a      	b.n	8012c1e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bca:	673b      	str	r3, [r7, #112]	; 0x70
 8012bcc:	e020      	b.n	8012c10 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x194>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8012bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bd2:	4413      	add	r3, r2
 8012bd4:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8012bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bda:	4413      	add	r3, r2
 8012bdc:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8012bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012be6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012bea:	68b8      	ldr	r0, [r7, #8]
 8012bec:	f7f9 f8fb 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	441a      	add	r2, r3
              max = std::max(
 8012bf8:	f107 0314 	add.w	r3, r7, #20
 8012bfc:	4611      	mov	r1, r2
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7f4 fd82 	bl	8007708 <_ZSt3maxIfERKT_S2_S2_>
 8012c04:	4603      	mov	r3, r0
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8012c10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c14:	429a      	cmp	r2, r3
 8012c16:	dbda      	blt.n	8012bce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x152>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	677b      	str	r3, [r7, #116]	; 0x74
 8012c1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	429a      	cmp	r2, r3
 8012c24:	dbd0      	blt.n	8012bc8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8012c26:	ed97 8a05 	vldr	s16, [r7, #20]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c40:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012c44:	6838      	ldr	r0, [r7, #0]
 8012c46:	f7f9 f8ce 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012c52:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8012c54:	eeb0 1a49 	vmov.f32	s2, s18
 8012c58:	eef0 0a68 	vmov.f32	s1, s17
 8012c5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012c60:	f7fc fd50 	bl	800f704 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8012c64:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012c68:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8012c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c6e:	3301      	adds	r3, #1
 8012c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8012c72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c76:	429a      	cmp	r2, r3
 8012c78:	f6ff af4f 	blt.w	8012b1a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c7e:	3301      	adds	r3, #1
 8012c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012c82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c86:	429a      	cmp	r2, r3
 8012c88:	f6ff af44 	blt.w	8012b14 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c90:	3301      	adds	r3, #1
 8012c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	f6ff af36 	blt.w	8012b0e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
  for (int batch = 0; batch < batches; ++batch) {
 8012ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	f6ff af27 	blt.w	8012b06 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
        }
      }
    }
  }
}
 8012cb8:	bf00      	nop
 8012cba:	bf00      	nop
 8012cbc:	378c      	adds	r7, #140	; 0x8c
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	ecbd 8b04 	vpop	{d8-d9}
 8012cc4:	bd90      	pop	{r4, r7, pc}

08012cc6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b0a4      	sub	sp, #144	; 0x90
 8012cca:	af02      	add	r7, sp, #8
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	60b9      	str	r1, [r7, #8]
 8012cd0:	607a      	str	r2, [r7, #4]
 8012cd2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	69da      	ldr	r2, [r3, #28]
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6a1b      	ldr	r3, [r3, #32]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	dd01      	ble.n	8012ce4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8012ce0:	f004 ff70 	bl	8017bc4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	69db      	ldr	r3, [r3, #28]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	da01      	bge.n	8012cf0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 8012cec:	f004 ff6a 	bl	8017bc4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	6a1b      	ldr	r3, [r3, #32]
 8012cf4:	2bff      	cmp	r3, #255	; 0xff
 8012cf6:	dd01      	ble.n	8012cfc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 8012cf8:	f004 ff64 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012cfc:	68b8      	ldr	r0, [r7, #8]
 8012cfe:	f7f5 f9f2 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b04      	cmp	r3, #4
 8012d06:	d001      	beq.n	8012d0c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 8012d08:	f004 ff5c 	bl	8017bc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012d0c:	6838      	ldr	r0, [r7, #0]
 8012d0e:	f7f5 f9ea 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b04      	cmp	r3, #4
 8012d16:	d001      	beq.n	8012d1c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 8012d18:	f004 ff54 	bl	8017bc4 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	683a      	ldr	r2, [r7, #0]
 8012d20:	2100      	movs	r1, #0
 8012d22:	68b8      	ldr	r0, [r7, #8]
 8012d24:	f7f9 f9a7 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012d28:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	683a      	ldr	r2, [r7, #0]
 8012d2e:	2103      	movs	r1, #3
 8012d30:	68b8      	ldr	r0, [r7, #8]
 8012d32:	f7f9 f9a0 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012d36:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8012d38:	2101      	movs	r1, #1
 8012d3a:	68b8      	ldr	r0, [r7, #8]
 8012d3c:	f7f8 fe4a 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012d40:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8012d42:	2102      	movs	r1, #2
 8012d44:	68b8      	ldr	r0, [r7, #8]
 8012d46:	f7f8 fe45 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012d4a:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8012d4c:	2101      	movs	r1, #1
 8012d4e:	6838      	ldr	r0, [r7, #0]
 8012d50:	f7f8 fe40 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012d54:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8012d56:	2102      	movs	r1, #2
 8012d58:	6838      	ldr	r0, [r7, #0]
 8012d5a:	f7f8 fe3b 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012d5e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	691b      	ldr	r3, [r3, #16]
 8012d6a:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d72:	e0df      	b.n	8012f34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012d74:	2300      	movs	r3, #0
 8012d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d7a:	e0d0      	b.n	8012f1e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x258>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012d80:	e0c3      	b.n	8012f0a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x244>
        for (int channel = 0; channel < depth; ++channel) {
 8012d82:	2300      	movs	r3, #0
 8012d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8012d86:	e0b8      	b.n	8012efa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x234>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8012d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d8c:	fb02 f303 	mul.w	r3, r2, r3
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8012d96:	1a9b      	subs	r3, r3, r2
 8012d98:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8012d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012da0:	fb02 f303 	mul.w	r3, r2, r3
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8012daa:	1a9b      	subs	r3, r3, r2
 8012dac:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8012dae:	2300      	movs	r3, #0
 8012db0:	617b      	str	r3, [r7, #20]
 8012db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012db4:	425b      	negs	r3, r3
 8012db6:	61bb      	str	r3, [r7, #24]
 8012db8:	f107 0218 	add.w	r2, r7, #24
 8012dbc:	f107 0314 	add.w	r3, r7, #20
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f5 f8fe 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	f103 0018 	add.w	r0, r3, #24
 8012dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd8:	1ad3      	subs	r3, r2, r3
 8012dda:	61fb      	str	r3, [r7, #28]
 8012ddc:	f107 031c 	add.w	r3, r7, #28
 8012de0:	4619      	mov	r1, r3
 8012de2:	f000 fd93 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 8012de6:	4603      	mov	r3, r0
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8012dec:	2300      	movs	r3, #0
 8012dee:	623b      	str	r3, [r7, #32]
 8012df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012df2:	425b      	negs	r3, r3
 8012df4:	627b      	str	r3, [r7, #36]	; 0x24
 8012df6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012dfa:	f107 0320 	add.w	r3, r7, #32
 8012dfe:	4611      	mov	r1, r2
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f5 f8df 	bl	8007fc4 <_ZSt3maxIiERKT_S2_S2_>
 8012e06:	4603      	mov	r3, r0
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f103 0014 	add.w	r0, r3, #20
 8012e12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e16:	1ad3      	subs	r3, r2, r3
 8012e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012e1e:	4619      	mov	r1, r3
 8012e20:	f000 fd74 	bl	801390c <_ZSt3minIiERKT_S2_S2_>
 8012e24:	4603      	mov	r3, r0
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e30:	677b      	str	r3, [r7, #116]	; 0x74
 8012e32:	e02a      	b.n	8012e8a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1c4>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e36:	673b      	str	r3, [r7, #112]	; 0x70
 8012e38:	e020      	b.n	8012e7c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1b6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8012e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e3e:	4413      	add	r3, r2
 8012e40:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8012e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e46:	4413      	add	r3, r2
 8012e48:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8012e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e52:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012e56:	68b8      	ldr	r0, [r7, #8]
 8012e58:	f7f8 ffc5 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	461a      	mov	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	441a      	add	r2, r3
              max = std::max(
 8012e64:	f107 0313 	add.w	r3, r7, #19
 8012e68:	4611      	mov	r1, r2
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f000 fd62 	bl	8013934 <_ZSt3maxIhERKT_S2_S2_>
 8012e70:	4603      	mov	r3, r0
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8012e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e78:	3301      	adds	r3, #1
 8012e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8012e7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e80:	429a      	cmp	r2, r3
 8012e82:	dbda      	blt.n	8012e3a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x174>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e86:	3301      	adds	r3, #1
 8012e88:	677b      	str	r3, [r7, #116]	; 0x74
 8012e8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	dbd0      	blt.n	8012e34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16e>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	69db      	ldr	r3, [r3, #28]
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012e9c:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8012ea0:	f107 0313 	add.w	r3, r7, #19
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 fd44 	bl	8013934 <_ZSt3maxIhERKT_S2_S2_>
 8012eac:	4603      	mov	r3, r0
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	6a1b      	ldr	r3, [r3, #32]
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012ebc:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8012ec0:	f107 0313 	add.w	r3, r7, #19
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 fd48 	bl	801395c <_ZSt3minIhERKT_S2_S2_>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012edc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012ee0:	6838      	ldr	r0, [r7, #0]
 8012ee2:	f7f8 ff80 	bl	800bde6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	461a      	mov	r2, r3
 8012eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012eee:	4413      	add	r3, r2
 8012ef0:	7cfa      	ldrb	r2, [r7, #19]
 8012ef2:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8012ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8012efa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012efe:	429a      	cmp	r2, r3
 8012f00:	f6ff af42 	blt.w	8012d88 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xc2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8012f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f06:	3301      	adds	r3, #1
 8012f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012f0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	f6ff af37 	blt.w	8012d82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f18:	3301      	adds	r3, #1
 8012f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f24:	429a      	cmp	r2, r3
 8012f26:	f6ff af29 	blt.w	8012d7c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
  for (int batch = 0; batch < batches; ++batch) {
 8012f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f2e:	3301      	adds	r3, #1
 8012f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012f34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	f6ff af1a 	blt.w	8012d74 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xae>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 8012f40:	bf00      	nop
 8012f42:	bf00      	nop
 8012f44:	3788      	adds	r7, #136	; 0x88
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8012f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f4c:	b099      	sub	sp, #100	; 0x64
 8012f4e:	af08      	add	r7, sp, #32
 8012f50:	6278      	str	r0, [r7, #36]	; 0x24
 8012f52:	6239      	str	r1, [r7, #32]
 8012f54:	61fa      	str	r2, [r7, #28]
 8012f56:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8012f58:	2101      	movs	r1, #1
 8012f5a:	69f8      	ldr	r0, [r7, #28]
 8012f5c:	f7f4 fc52 	bl	8007804 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8012f60:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 8012f62:	2102      	movs	r1, #2
 8012f64:	69f8      	ldr	r0, [r7, #28]
 8012f66:	f7f4 fc4d 	bl	8007804 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8012f6a:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8012f6c:	6a3b      	ldr	r3, [r7, #32]
 8012f6e:	689d      	ldr	r5, [r3, #8]
 8012f70:	6a3b      	ldr	r3, [r7, #32]
 8012f72:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8012f74:	6a3b      	ldr	r3, [r7, #32]
 8012f76:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8012f78:	6a3a      	ldr	r2, [r7, #32]
 8012f7a:	68d2      	ldr	r2, [r2, #12]
 8012f7c:	6a39      	ldr	r1, [r7, #32]
 8012f7e:	7809      	ldrb	r1, [r1, #0]
  data->padding = ComputePaddingHeightWidth(
 8012f80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	f107 0408 	add.w	r4, r7, #8
 8012f88:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012f8c:	9007      	str	r0, [sp, #28]
 8012f8e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012f92:	9006      	str	r0, [sp, #24]
 8012f94:	9105      	str	r1, [sp, #20]
 8012f96:	9204      	str	r2, [sp, #16]
 8012f98:	9303      	str	r3, [sp, #12]
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	4632      	mov	r2, r6
 8012faa:	4629      	mov	r1, r5
 8012fac:	4620      	mov	r0, r4
 8012fae:	f7fd f9ce 	bl	801034e <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8012fb2:	687c      	ldr	r4, [r7, #4]
 8012fb4:	f107 0308 	add.w	r3, r7, #8
 8012fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type != kTfLiteFloat32) {
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d01e      	beq.n	8013004 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xba>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8012fc6:	6a3b      	ldr	r3, [r7, #32]
 8012fc8:	7d19      	ldrb	r1, [r3, #20]
 8012fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fcc:	f103 0214 	add.w	r2, r3, #20
 8012fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fd2:	3318      	adds	r3, #24
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	69ba      	ldr	r2, [r7, #24]
 8012fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fdc:	f7f4 ff9e 	bl	8007f1c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fe6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d002      	beq.n	8012ff4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xaa>
 8012fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ff2:	e00c      	b.n	801300e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc4>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8012ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ff6:	695a      	ldr	r2, [r3, #20]
 8012ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ffa:	699b      	ldr	r3, [r3, #24]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	dd01      	ble.n	8013004 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xba>
 8013000:	f004 fde0 	bl	8017bc4 <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8013004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801300a:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 801300c:	2300      	movs	r3, #0
}
 801300e:	4618      	mov	r0, r3
 8013010:	3744      	adds	r7, #68	; 0x44
 8013012:	46bd      	mov	sp, r7
 8013014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013016 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 8013016:	b590      	push	{r4, r7, lr}
 8013018:	b0a1      	sub	sp, #132	; 0x84
 801301a:	af02      	add	r7, sp, #8
 801301c:	60f8      	str	r0, [r7, #12]
 801301e:	60b9      	str	r1, [r7, #8]
 8013020:	607a      	str	r2, [r7, #4]
 8013022:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	7d1b      	ldrb	r3, [r3, #20]
 8013028:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801302c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8013030:	4618      	mov	r0, r3
 8013032:	f7fc fb87 	bl	800f744 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	689b      	ldr	r3, [r3, #8]
 801303a:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	b21b      	sxth	r3, r3
 8013054:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	b21b      	sxth	r3, r3
 801305c:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 801305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013060:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8013062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013064:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8013066:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801306a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801306e:	4618      	mov	r0, r3
 8013070:	f7f5 f89d 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::AveragePool(
 8013074:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013078:	f7f8 fd3c 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801307c:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 801307e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013082:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013086:	4618      	mov	r0, r3
 8013088:	f7f5 f891 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::AveragePool(
 801308c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8013090:	f7f8 fd41 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8013094:	4602      	mov	r2, r0
 8013096:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801309a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801309e:	f107 0014 	add.w	r0, r7, #20
 80130a2:	9200      	str	r2, [sp, #0]
 80130a4:	4622      	mov	r2, r4
 80130a6:	f7ff fa6d 	bl	8012584 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 80130aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f5 f803 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80130b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7f4 fffe 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
}
 80130be:	bf00      	nop
 80130c0:	377c      	adds	r7, #124	; 0x7c
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd90      	pop	{r4, r7, pc}

080130c6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteTensor* input, TfLiteTensor* output) {
 80130c6:	b590      	push	{r4, r7, lr}
 80130c8:	b0c1      	sub	sp, #260	; 0x104
 80130ca:	af04      	add	r7, sp, #16
 80130cc:	60f8      	str	r0, [r7, #12]
 80130ce:	60b9      	str	r1, [r7, #8]
 80130d0:	607a      	str	r2, [r7, #4]
 80130d2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 80130d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2b03      	cmp	r3, #3
 80130dc:	d006      	beq.n	80130ec <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x26>
 80130de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b09      	cmp	r3, #9
 80130e6:	d001      	beq.n	80130ec <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x26>
 80130e8:	f004 fd6c 	bl	8017bc4 <abort>

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	689b      	ldr	r3, [r3, #8]
 80130f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  op_params.filter_height = params->filter_height;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	691b      	ldr	r3, [r3, #16]
 8013100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op_params.filter_width = params->filter_width;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  op_params.padding_values.height = data.padding.height;
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	b21b      	sxth	r3, r3
 8013112:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  op_params.padding_values.width = data.padding.width;
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	b21b      	sxth	r3, r3
 801311c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  op_params.quantized_activation_min = data.activation_min;
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	695b      	ldr	r3, [r3, #20]
 8013124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  op_params.quantized_activation_max = data.activation_max;
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (input->type == kTfLiteUInt8) {
 8013130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	2b03      	cmp	r3, #3
 8013138:	d12c      	bne.n	8013194 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0xce>
    reference_ops::AveragePool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801313a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801313e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8013142:	4618      	mov	r0, r3
 8013144:	f7f5 f833 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::AveragePool(
 8013148:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801314c:	f7f8 fc0f 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013150:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8013152:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013156:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801315a:	4618      	mov	r0, r3
 801315c:	f7f5 f827 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::AveragePool(
 8013160:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8013164:	f7f8 fc14 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013168:	4602      	mov	r2, r0
 801316a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801316e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8013172:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013176:	9200      	str	r2, [sp, #0]
 8013178:	4622      	mov	r2, r4
 801317a:	f7ff fb44 	bl	8012806 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801317e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013182:	4618      	mov	r0, r3
 8013184:	f7f4 ff99 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8013188:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801318c:	4618      	mov	r0, r3
 801318e:	f7f4 ff94 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
        arm_avgpool_s8(&ctx, &pool_params, &input_dims,
                       GetTensorData<int8_t>(input), &filter_dims, &output_dims,
                       GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  }
}
 8013192:	e0ab      	b.n	80132ec <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x226>
    RuntimeShape input_shape = GetTensorShape(input);
 8013194:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013198:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801319c:	4618      	mov	r0, r3
 801319e:	f7f5 f806 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80131a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f4 ff9d 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b04      	cmp	r3, #4
 80131b0:	d001      	beq.n	80131b6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0xf0>
 80131b2:	f004 fd07 	bl	8017bc4 <abort>
    RuntimeShape output_shape = GetTensorShape(output);
 80131b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80131ba:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f4 fff5 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80131c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7f4 ff8c 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b04      	cmp	r3, #4
 80131d2:	d001      	beq.n	80131d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x112>
 80131d4:	f004 fcf6 	bl	8017bc4 <abort>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80131d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80131dc:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80131e0:	2303      	movs	r3, #3
 80131e2:	2103      	movs	r1, #3
 80131e4:	f7f8 ff47 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80131e8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    input_dims.n = 1;
 80131ec:	2301      	movs	r3, #1
 80131ee:	653b      	str	r3, [r7, #80]	; 0x50
    input_dims.h = input_shape.Dims(1);
 80131f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80131f4:	2101      	movs	r1, #1
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f8 fbec 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80131fc:	4603      	mov	r3, r0
 80131fe:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.w = input_shape.Dims(2);
 8013200:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013204:	2102      	movs	r1, #2
 8013206:	4618      	mov	r0, r3
 8013208:	f7f8 fbe4 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801320c:	4603      	mov	r3, r0
 801320e:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.c = depth;
 8013210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013214:	65fb      	str	r3, [r7, #92]	; 0x5c
    output_dims.n = 1;
 8013216:	2301      	movs	r3, #1
 8013218:	643b      	str	r3, [r7, #64]	; 0x40
    output_dims.h = output_shape.Dims(1);
 801321a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801321e:	2101      	movs	r1, #1
 8013220:	4618      	mov	r0, r3
 8013222:	f7f8 fbd7 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013226:	4603      	mov	r3, r0
 8013228:	647b      	str	r3, [r7, #68]	; 0x44
    output_dims.w = output_shape.Dims(2);
 801322a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801322e:	2102      	movs	r1, #2
 8013230:	4618      	mov	r0, r3
 8013232:	f7f8 fbcf 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013236:	4603      	mov	r3, r0
 8013238:	64bb      	str	r3, [r7, #72]	; 0x48
    output_dims.c = depth;
 801323a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801323e:	64fb      	str	r3, [r7, #76]	; 0x4c
    pool_params.stride.h = params->stride_height;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	62fb      	str	r3, [r7, #44]	; 0x2c
    pool_params.stride.w = params->stride_width;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	62bb      	str	r3, [r7, #40]	; 0x28
    pool_params.padding.h = data.padding.height;
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	637b      	str	r3, [r7, #52]	; 0x34
    pool_params.padding.w = data.padding.width;
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	633b      	str	r3, [r7, #48]	; 0x30
    pool_params.activation.min = data.activation_min;
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	695b      	ldr	r3, [r3, #20]
 801325c:	63bb      	str	r3, [r7, #56]	; 0x38
    pool_params.activation.max = data.activation_max;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	699b      	ldr	r3, [r3, #24]
 8013262:	63fb      	str	r3, [r7, #60]	; 0x3c
    filter_dims.n = 1;
 8013264:	2301      	movs	r3, #1
 8013266:	61bb      	str	r3, [r7, #24]
    filter_dims.h = params->filter_height;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	691b      	ldr	r3, [r3, #16]
 801326c:	61fb      	str	r3, [r7, #28]
    filter_dims.w = params->filter_width;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	623b      	str	r3, [r7, #32]
    filter_dims.c = 1;
 8013274:	2301      	movs	r3, #1
 8013276:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.buf = nullptr;
 8013278:	2300      	movs	r3, #0
 801327a:	613b      	str	r3, [r7, #16]
    ctx.size = 0;
 801327c:	2300      	movs	r3, #0
 801327e:	617b      	str	r3, [r7, #20]
    if (data.buffer_idx > -1) {
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	691b      	ldr	r3, [r3, #16]
 8013284:	2b00      	cmp	r3, #0
 8013286:	db08      	blt.n	801329a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x1d4>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	6912      	ldr	r2, [r2, #16]
 8013290:	4611      	mov	r1, r2
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	4798      	blx	r3
 8013296:	4603      	mov	r3, r0
 8013298:	613b      	str	r3, [r7, #16]
    TFLITE_DCHECK_EQ(
 801329a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801329e:	f7f8 fc4b 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80132a2:	4604      	mov	r4, r0
 80132a4:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80132a8:	f7f8 fc57 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80132ac:	4603      	mov	r3, r0
 80132ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80132b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80132b6:	f107 0010 	add.w	r0, r7, #16
 80132ba:	9302      	str	r3, [sp, #8]
 80132bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132c0:	9301      	str	r3, [sp, #4]
 80132c2:	f107 0318 	add.w	r3, r7, #24
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	4623      	mov	r3, r4
 80132ca:	f003 fb0f 	bl	80168ec <arm_avgpool_s8>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_+0x212>
 80132d4:	f004 fc76 	bl	8017bc4 <abort>
  }
 80132d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80132dc:	4618      	mov	r0, r3
 80132de:	f7f4 feec 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 80132e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f4 fee7 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
}
 80132ec:	bf00      	nop
 80132ee:	37f4      	adds	r7, #244	; 0xf4
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd90      	pop	{r4, r7, pc}

080132f4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSE_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  TfLiteTensor* input, TfLiteTensor* output) {
 80132f4:	b590      	push	{r4, r7, lr}
 80132f6:	b0a1      	sub	sp, #132	; 0x84
 80132f8:	af02      	add	r7, sp, #8
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	7d1b      	ldrb	r3, [r3, #20]
 8013306:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801330a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801330e:	4618      	mov	r0, r3
 8013310:	f7fc fa18 	bl	800f744 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	691b      	ldr	r3, [r3, #16]
 8013324:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	b21b      	sxth	r3, r3
 8013332:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	b21b      	sxth	r3, r3
 801333a:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 801333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801333e:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8013340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013342:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8013344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013348:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801334c:	4618      	mov	r0, r3
 801334e:	f7f4 ff2e 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                         GetTensorData<float>(input), GetTensorShape(output),
 8013352:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013356:	f7f8 fbde 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801335a:	4604      	mov	r4, r0
 801335c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013360:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013364:	4618      	mov	r0, r3
 8013366:	f7f4 ff22 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801336a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801336e:	f7f8 fbd2 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8013372:	4602      	mov	r2, r0
 8013374:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013378:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801337c:	f107 0014 	add.w	r0, r7, #20
 8013380:	9200      	str	r2, [sp, #0]
 8013382:	4622      	mov	r2, r4
 8013384:	f7ff fb7a 	bl	8012a7c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 8013388:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801338c:	4618      	mov	r0, r3
 801338e:	f7f4 fe94 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8013392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013396:	4618      	mov	r0, r3
 8013398:	f7f4 fe8f 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 801339c:	bf00      	nop
 801339e:	377c      	adds	r7, #124	; 0x7c
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd90      	pop	{r4, r7, pc}

080133a4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSE_>:

void MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,
                           TfLitePoolParams* params, const OpData& data,
                           TfLiteTensor* input, TfLiteTensor* output) {
 80133a4:	b590      	push	{r4, r7, lr}
 80133a6:	b09f      	sub	sp, #124	; 0x7c
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	691b      	ldr	r3, [r3, #16]
 80133c2:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	b21b      	sxth	r3, r3
 80133d0:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	b21b      	sxth	r3, r3
 80133d8:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data.activation_min;
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	695b      	ldr	r3, [r3, #20]
 80133de:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data.activation_max;
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	699b      	ldr	r3, [r3, #24]
 80133e4:	637b      	str	r3, [r7, #52]	; 0x34
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 80133e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7f4 fedd 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
 80133f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80133f8:	f7f8 faca 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80133fc:	4604      	mov	r4, r0
 80133fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013402:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013406:	4618      	mov	r0, r3
 8013408:	f7f4 fed1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801340c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8013410:	f7f8 fabe 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013414:	4602      	mov	r2, r0
 8013416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801341a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801341e:	f107 0014 	add.w	r0, r7, #20
 8013422:	9200      	str	r2, [sp, #0]
 8013424:	4622      	mov	r2, r4
 8013426:	f7ff fc4e 	bl	8012cc6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                         GetTensorData<uint8_t>(input), GetTensorShape(output),
 801342a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801342e:	4618      	mov	r0, r3
 8013430:	f7f4 fe43 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8013434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013438:	4618      	mov	r0, r3
 801343a:	f7f4 fe3e 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<uint8_t>(output));
}
 801343e:	bf00      	nop
 8013440:	3774      	adds	r7, #116	; 0x74
 8013442:	46bd      	mov	sp, r7
 8013444:	bd90      	pop	{r4, r7, pc}

08013446 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSG_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         TfLiteTensor* input, TfLiteTensor* output) {
 8013446:	b590      	push	{r4, r7, lr}
 8013448:	b0ab      	sub	sp, #172	; 0xac
 801344a:	af04      	add	r7, sp, #16
 801344c:	60f8      	str	r0, [r7, #12]
 801344e:	60b9      	str	r1, [r7, #8]
 8013450:	607a      	str	r2, [r7, #4]
 8013452:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = GetTensorShape(input);
 8013454:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013458:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801345c:	4618      	mov	r0, r3
 801345e:	f7f4 fea6 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 8013462:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013466:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801346a:	4618      	mov	r0, r3
 801346c:	f7f4 fe9f 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8013470:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013474:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8013478:	2303      	movs	r3, #3
 801347a:	2103      	movs	r1, #3
 801347c:	f7f8 fdfb 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013480:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 8013484:	2301      	movs	r3, #1
 8013486:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 8013488:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801348c:	2101      	movs	r1, #1
 801348e:	4618      	mov	r0, r3
 8013490:	f7f8 faa0 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013494:	4603      	mov	r3, r0
 8013496:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 8013498:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801349c:	2102      	movs	r1, #2
 801349e:	4618      	mov	r0, r3
 80134a0:	f7f8 fa98 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80134a4:	4603      	mov	r3, r0
 80134a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 80134a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80134ac:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 80134ae:	2301      	movs	r3, #1
 80134b0:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 80134b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80134b6:	2101      	movs	r1, #1
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7f8 fa8b 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80134be:	4603      	mov	r3, r0
 80134c0:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 80134c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80134c6:	2102      	movs	r1, #2
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7f8 fa83 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80134ce:	4603      	mov	r3, r0
 80134d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 80134d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80134d6:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	689b      	ldr	r3, [r3, #8]
 80134dc:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	695b      	ldr	r3, [r3, #20]
 80134f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	699b      	ldr	r3, [r3, #24]
 80134fa:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 80134fc:	2301      	movs	r3, #1
 80134fe:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 801350c:	2301      	movs	r3, #1
 801350e:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	691b      	ldr	r3, [r3, #16]
 801351c:	2b00      	cmp	r3, #0
 801351e:	db08      	blt.n	8013532 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSG_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013524:	683a      	ldr	r2, [r7, #0]
 8013526:	6912      	ldr	r2, [r2, #16]
 8013528:	4611      	mov	r1, r2
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	4798      	blx	r3
 801352e:	4603      	mov	r3, r0
 8013530:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(arm_max_pool_s8(&ctx, &pool_params, &input_dims,
 8013532:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8013536:	f7f8 fb10 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801353a:	4604      	mov	r4, r0
 801353c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8013540:	f7f8 fb0b 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8013544:	4603      	mov	r3, r0
 8013546:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801354a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801354e:	f107 0014 	add.w	r0, r7, #20
 8013552:	9302      	str	r3, [sp, #8]
 8013554:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	f107 031c 	add.w	r3, r7, #28
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	4623      	mov	r3, r4
 8013562:	f003 fa99 	bl	8016a98 <arm_max_pool_s8>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSG_+0x12a>
 801356c:	f004 fb2a 	bl	8017bc4 <abort>
                                   GetTensorData<int8_t>(input), &filter_dims,
                                   &output_dims, GetTensorData<int8_t>(output)),
                   ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8013570:	2400      	movs	r4, #0
}
 8013572:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013576:	4618      	mov	r0, r3
 8013578:	f7f4 fd9f 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801357c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013580:	4618      	mov	r0, r3
 8013582:	f7f4 fd9a 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8013586:	4623      	mov	r3, r4
}
 8013588:	4618      	mov	r0, r3
 801358a:	379c      	adds	r7, #156	; 0x9c
 801358c:	46bd      	mov	sp, r7
 801358e:	bd90      	pop	{r4, r7, pc}

08013590 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d101      	bne.n	80135a8 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 80135a4:	f004 fb0e 	bl	8017bc4 <abort>
  void* data = nullptr;
 80135a8:	2300      	movs	r3, #0
 80135aa:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135b0:	f107 0214 	add.w	r2, r7, #20
 80135b4:	211c      	movs	r1, #28
 80135b6:	68f8      	ldr	r0, [r7, #12]
 80135b8:	4798      	blx	r3
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b01      	cmp	r3, #1
 80135be:	bf0c      	ite	eq
 80135c0:	2301      	moveq	r3, #1
 80135c2:	2300      	movne	r3, #0
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d001      	beq.n	80135ce <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 80135ca:	2300      	movs	r3, #0
 80135cc:	e000      	b.n	80135d0 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 80135ce:	697b      	ldr	r3, [r7, #20]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3718      	adds	r7, #24
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80135d8:	b580      	push	{r7, lr}
 80135da:	b08a      	sub	sp, #40	; 0x28
 80135dc:	af02      	add	r7, sp, #8
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	691b      	ldr	r3, [r3, #16]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d101      	bne.n	80135ee <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80135ea:	f004 faeb 	bl	8017bc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	695b      	ldr	r3, [r3, #20]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d101      	bne.n	80135fa <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80135f6:	f004 fae5 	bl	8017bc4 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	691b      	ldr	r3, [r3, #16]
 80135fe:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013606:	2200      	movs	r2, #0
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f7f8 f983 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013610:	6178      	str	r0, [r7, #20]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013612:	2200      	movs	r2, #0
 8013614:	6839      	ldr	r1, [r7, #0]
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7f8 f993 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801361c:	6138      	str	r0, [r7, #16]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	697a      	ldr	r2, [r7, #20]
 8013626:	69b9      	ldr	r1, [r7, #24]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7ff fc8e 	bl	8012f4a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801362e:	4603      	mov	r3, r0
 8013630:	73fb      	strb	r3, [r7, #15]
 8013632:	7bfb      	ldrb	r3, [r7, #15]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d001      	beq.n	801363c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8013638:	7bfb      	ldrb	r3, [r7, #15]
 801363a:	e000      	b.n	801363e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>

  return kTfLiteOk;
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3720      	adds	r7, #32
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 8013646:	b5b0      	push	{r4, r5, r7, lr}
 8013648:	b09a      	sub	sp, #104	; 0x68
 801364a:	af02      	add	r7, sp, #8
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	6039      	str	r1, [r7, #0]
 8013650:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	691b      	ldr	r3, [r3, #16]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d101      	bne.n	801365e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801365a:	f004 fab3 	bl	8017bc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	695b      	ldr	r3, [r3, #20]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d101      	bne.n	801366a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8013666:	f004 faad 	bl	8017bc4 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	691b      	ldr	r3, [r3, #16]
 801366e:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	695b      	ldr	r3, [r3, #20]
 8013674:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013676:	2200      	movs	r2, #0
 8013678:	6839      	ldr	r1, [r7, #0]
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7f8 f94b 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013680:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013682:	2200      	movs	r2, #0
 8013684:	6839      	ldr	r1, [r7, #0]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7f8 f95b 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801368c:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7ff fc56 	bl	8012f4a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801369e:	4603      	mov	r3, r0
 80136a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80136a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80136ac:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 80136b0:	e064      	b.n	801377c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 80136b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	2b09      	cmp	r3, #9
 80136b8:	d15f      	bne.n	801377a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 80136ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7f4 fd74 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80136c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f4 fd0b 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b04      	cmp	r3, #4
 80136d4:	d001      	beq.n	80136da <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 80136d6:	f004 fa75 	bl	8017bc4 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 80136da:	f107 030c 	add.w	r3, r7, #12
 80136de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f4 fd64 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80136e6:	f107 030c 	add.w	r3, r7, #12
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7f4 fcfb 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b04      	cmp	r3, #4
 80136f4:	d001      	beq.n	80136fa <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 80136f6:	f004 fa65 	bl	8017bc4 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80136fa:	f107 020c 	add.w	r2, r7, #12
 80136fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013702:	2303      	movs	r3, #3
 8013704:	2103      	movs	r1, #3
 8013706:	f7f8 fcb6 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801370a:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 801370c:	f107 030c 	add.w	r3, r7, #12
 8013710:	2102      	movs	r1, #2
 8013712:	4618      	mov	r0, r3
 8013714:	f7f8 f95e 	bl	800b9d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013718:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 801371a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801371c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801371e:	f003 f9b9 	bl	8016a94 <arm_avgpool_s8_get_buffer_size>
 8013722:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 8013724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013726:	2b00      	cmp	r3, #0
 8013728:	dd11      	ble.n	801374e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013732:	3210      	adds	r2, #16
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	4798      	blx	r3
 8013738:	4603      	mov	r3, r0
 801373a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801373e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013742:	2b00      	cmp	r3, #0
 8013744:	d007      	beq.n	8013756 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 8013746:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 801374a:	2500      	movs	r5, #0
 801374c:	e004      	b.n	8013758 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801374e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013754:	611a      	str	r2, [r3, #16]
    }
  }
 8013756:	2501      	movs	r5, #1
 8013758:	f107 030c 	add.w	r3, r7, #12
 801375c:	4618      	mov	r0, r3
 801375e:	f7f4 fcac 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8013762:	2d01      	cmp	r5, #1
 8013764:	d101      	bne.n	801376a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 8013766:	2501      	movs	r5, #1
 8013768:	e000      	b.n	801376c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
 801376a:	2500      	movs	r5, #0
 801376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013770:	4618      	mov	r0, r3
 8013772:	f7f4 fca2 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 8013776:	2d01      	cmp	r5, #1
 8013778:	d100      	bne.n	801377c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
  return kTfLiteOk;
 801377a:	2400      	movs	r4, #0
}
 801377c:	4623      	mov	r3, r4
 801377e:	4618      	mov	r0, r3
 8013780:	3760      	adds	r7, #96	; 0x60
 8013782:	46bd      	mov	sp, r7
 8013784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 8013788:	b590      	push	{r4, r7, lr}
 801378a:	b089      	sub	sp, #36	; 0x24
 801378c:	af02      	add	r7, sp, #8
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	695b      	ldr	r3, [r3, #20]
 8013796:	617b      	str	r3, [r7, #20]

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	691b      	ldr	r3, [r3, #16]
 801379c:	613b      	str	r3, [r7, #16]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801379e:	2200      	movs	r2, #0
 80137a0:	6839      	ldr	r1, [r7, #0]
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f7f8 f8b7 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80137a8:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80137aa:	2200      	movs	r2, #0
 80137ac:	6839      	ldr	r1, [r7, #0]
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7f8 f8c7 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80137b4:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	2b09      	cmp	r3, #9
 80137bc:	d011      	beq.n	80137e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5a>
 80137be:	2b09      	cmp	r3, #9
 80137c0:	dc1a      	bgt.n	80137f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x70>
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d002      	beq.n	80137cc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x44>
 80137c6:	2b03      	cmp	r3, #3
 80137c8:	d00b      	beq.n	80137e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5a>
 80137ca:	e015      	b.n	80137f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x70>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	697a      	ldr	r2, [r7, #20]
 80137d8:	6839      	ldr	r1, [r7, #0]
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f7ff fc1b 	bl	8013016 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSG_>
      break;
 80137e0:	e018      	b.n	8013814 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	9301      	str	r3, [sp, #4]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	697a      	ldr	r2, [r7, #20]
 80137ee:	6839      	ldr	r1, [r7, #0]
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7ff fc68 	bl	80130c6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK12TfLiteTensorPSF_>
      break;
 80137f6:	e00d      	b.n	8013814 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	695c      	ldr	r4, [r3, #20]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	4618      	mov	r0, r3
 8013802:	f7f1 fac3 	bl	8004d8c <TfLiteTypeGetName>
 8013806:	4603      	mov	r3, r0
 8013808:	461a      	mov	r2, r3
 801380a:	4905      	ldr	r1, [pc, #20]	; (8013820 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x98>)
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8013810:	2301      	movs	r3, #1
 8013812:	e000      	b.n	8013816 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  }
  return kTfLiteOk;
 8013814:	2300      	movs	r3, #0
}
 8013816:	4618      	mov	r0, r3
 8013818:	371c      	adds	r7, #28
 801381a:	46bd      	mov	sp, r7
 801381c:	bd90      	pop	{r4, r7, pc}
 801381e:	bf00      	nop
 8013820:	0801f294 	.word	0x0801f294

08013824 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8013824:	b590      	push	{r4, r7, lr}
 8013826:	b089      	sub	sp, #36	; 0x24
 8013828:	af02      	add	r7, sp, #8
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	695b      	ldr	r3, [r3, #20]
 8013832:	617b      	str	r3, [r7, #20]

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	691b      	ldr	r3, [r3, #16]
 8013838:	613b      	str	r3, [r7, #16]

  TfLiteTensor* input = &context->tensors[flatbuffers::EndianScalar(
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	689c      	ldr	r4, [r3, #8]
      node->inputs->data[kInputTensor])];
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
  TfLiteTensor* input = &context->tensors[flatbuffers::EndianScalar(
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	f000 f89d 	bl	8013984 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
 801384a:	4603      	mov	r3, r0
      node->inputs->data[kInputTensor])];
 801384c:	019b      	lsls	r3, r3, #6
 801384e:	4423      	add	r3, r4
 8013850:	60fb      	str	r3, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013852:	2200      	movs	r2, #0
 8013854:	6839      	ldr	r1, [r7, #0]
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f7f8 f873 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801385c:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	2b09      	cmp	r3, #9
 8013864:	d01c      	beq.n	80138a0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
 8013866:	2b09      	cmp	r3, #9
 8013868:	dc25      	bgt.n	80138b6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 801386a:	2b01      	cmp	r3, #1
 801386c:	d002      	beq.n	8013874 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x50>
 801386e:	2b03      	cmp	r3, #3
 8013870:	d00b      	beq.n	801388a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
 8013872:	e020      	b.n	80138b6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	9301      	str	r3, [sp, #4]
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	697a      	ldr	r2, [r7, #20]
 8013880:	6839      	ldr	r1, [r7, #0]
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff fd36 	bl	80132f4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSE_>
      break;
 8013888:	e023      	b.n	80138d2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, data, input, output);
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	697a      	ldr	r2, [r7, #20]
 8013896:	6839      	ldr	r1, [r7, #0]
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f7ff fd83 	bl	80133a4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSE_>
      break;
 801389e:	e018      	b.n	80138d2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	9301      	str	r3, [sp, #4]
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	697a      	ldr	r2, [r7, #20]
 80138ac:	6839      	ldr	r1, [r7, #0]
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7ff fdc9 	bl	8013446 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEP12TfLiteTensorSG_>
      break;
 80138b4:	e00d      	b.n	80138d2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	695c      	ldr	r4, [r3, #20]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	4618      	mov	r0, r3
 80138c0:	f7f1 fa64 	bl	8004d8c <TfLiteTypeGetName>
 80138c4:	4603      	mov	r3, r0
 80138c6:	461a      	mov	r2, r3
 80138c8:	4904      	ldr	r1, [pc, #16]	; (80138dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80138ce:	2301      	movs	r3, #1
 80138d0:	e000      	b.n	80138d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 80138d2:	2300      	movs	r3, #0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	371c      	adds	r7, #28
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	0801f2c0 	.word	0x0801f2c0

080138e0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 80138e0:	b4b0      	push	{r4, r5, r7}
 80138e2:	b083      	sub	sp, #12
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	4a07      	ldr	r2, [pc, #28]	; (8013908 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x28>)
 80138ec:	461c      	mov	r4, r3
 80138ee:	4615      	mov	r5, r2
 80138f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80138f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	bcb0      	pop	{r4, r5, r7}
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	0801f304 	.word	0x0801f304

0801390c <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	429a      	cmp	r2, r3
 8013920:	da01      	bge.n	8013926 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	e000      	b.n	8013928 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8013926:	687b      	ldr	r3, [r7, #4]
    }
 8013928:	4618      	mov	r0, r3
 801392a:	370c      	adds	r7, #12
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013934:	b480      	push	{r7}
 8013936:	b083      	sub	sp, #12
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	781a      	ldrb	r2, [r3, #0]
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	429a      	cmp	r2, r3
 8013948:	d201      	bcs.n	801394e <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	e000      	b.n	8013950 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801394e:	687b      	ldr	r3, [r7, #4]
    }
 8013950:	4618      	mov	r0, r3
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr

0801395c <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	781a      	ldrb	r2, [r3, #0]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	429a      	cmp	r2, r3
 8013970:	d201      	bcs.n	8013976 <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	e000      	b.n	8013978 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8013976:	687b      	ldr	r3, [r7, #4]
    }
 8013978:	4618      	mov	r0, r3
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
    return t;
 801398c:	687b      	ldr	r3, [r7, #4]
}
 801398e:	4618      	mov	r0, r3
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 801399a:	b580      	push	{r7, lr}
 801399c:	b088      	sub	sp, #32
 801399e:	af00      	add	r7, sp, #0
 80139a0:	60f8      	str	r0, [r7, #12]
 80139a2:	60b9      	str	r1, [r7, #8]
 80139a4:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f9 f840 	bl	800ca2e <_ZN6tflite17CountLeadingZerosImEEiT_>
 80139ae:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 80139b0:	68ba      	ldr	r2, [r7, #8]
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	1ad2      	subs	r2, r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 80139ba:	68fa      	ldr	r2, [r7, #12]
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	fa02 f303 	lsl.w	r3, r2, r3
 80139c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 80139c6:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 80139c8:	69b8      	ldr	r0, [r7, #24]
 80139ca:	f7f9 f966 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80139ce:	4603      	mov	r3, r0
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f9 f973 	bl	800ccbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 80139d6:	4603      	mov	r3, r0
 80139d8:	617b      	str	r3, [r7, #20]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
  return shifted_scale.raw();
 80139da:	f107 0314 	add.w	r3, r7, #20
 80139de:	4618      	mov	r0, r3
 80139e0:	f7f9 f837 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80139e4:	4603      	mov	r3, r0
 80139e6:	681b      	ldr	r3, [r3, #0]
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3720      	adds	r7, #32
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80139f0:	b580      	push	{r7, lr}
 80139f2:	ed2d 8b02 	vpush	{d8}
 80139f6:	b08e      	sub	sp, #56	; 0x38
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
 8013a00:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8013a02:	68b8      	ldr	r0, [r7, #8]
 8013a04:	f7f4 fb6f 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	3b01      	subs	r3, #1
 8013a0c:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	6a39      	ldr	r1, [r7, #32]
 8013a12:	68b8      	ldr	r0, [r7, #8]
 8013a14:	f7f8 ffdc 	bl	800c9d0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8013a18:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8013a1a:	6a3b      	ldr	r3, [r7, #32]
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	6a39      	ldr	r1, [r7, #32]
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7f8 fb28 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013a26:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8013a28:	2300      	movs	r3, #0
 8013a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8013a2c:	e08d      	b.n	8013b4a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8013a2e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8013a32:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8013a34:	2300      	movs	r3, #0
 8013a36:	633b      	str	r3, [r7, #48]	; 0x30
 8013a38:	e014      	b.n	8013a64 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 8013a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a3c:	69ba      	ldr	r2, [r7, #24]
 8013a3e:	fb03 f202 	mul.w	r2, r3, r2
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	4413      	add	r3, r2
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	687a      	ldr	r2, [r7, #4]
 8013a4a:	441a      	add	r2, r3
 8013a4c:	f107 0314 	add.w	r3, r7, #20
 8013a50:	4611      	mov	r1, r2
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7f3 fe58 	bl	8007708 <_ZSt3maxIfERKT_S2_S2_>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a60:	3301      	adds	r3, #1
 8013a62:	633b      	str	r3, [r7, #48]	; 0x30
 8013a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	dbe6      	blt.n	8013a3a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 8013a6c:	f04f 0300 	mov.w	r3, #0
 8013a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8013a72:	2300      	movs	r3, #0
 8013a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a76:	e028      	b.n	8013aca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xda>
      sum += std::exp((input_data[i * depth + c] - max) *
 8013a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a7a:	69ba      	ldr	r2, [r7, #24]
 8013a7c:	fb03 f202 	mul.w	r2, r3, r2
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	4413      	add	r3, r2
 8013a84:	009b      	lsls	r3, r3, #2
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	4413      	add	r3, r2
 8013a8a:	ed93 7a00 	vldr	s14, [r3]
 8013a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a92:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9c:	4610      	mov	r0, r2
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	f7ed f874 	bl	8000b8c <__aeabi_d2f>
 8013aa4:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 8013aa8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013aac:	eeb0 0a67 	vmov.f32	s0, s15
 8013ab0:	f7f9 f891 	bl	800cbd6 <_ZSt3expf>
 8013ab4:	eeb0 7a40 	vmov.f32	s14, s0
 8013ab8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ac0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8013ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	dbd2      	blt.n	8013a78 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8013ad6:	e031      	b.n	8013b3c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8013ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ada:	69ba      	ldr	r2, [r7, #24]
 8013adc:	fb03 f202 	mul.w	r2, r3, r2
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae2:	4413      	add	r3, r2
 8013ae4:	009b      	lsls	r3, r3, #2
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	4413      	add	r3, r2
 8013aea:	ed93 7a00 	vldr	s14, [r3]
 8013aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8013af2:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afc:	4610      	mov	r0, r2
 8013afe:	4619      	mov	r1, r3
 8013b00:	f7ed f844 	bl	8000b8c <__aeabi_d2f>
 8013b04:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8013b08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b10:	f7f9 f861 	bl	800cbd6 <_ZSt3expf>
 8013b14:	eef0 6a40 	vmov.f32	s13, s0
 8013b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b1a:	69ba      	ldr	r2, [r7, #24]
 8013b1c:	fb03 f202 	mul.w	r2, r3, r2
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	4413      	add	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b28:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 8013b2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8013b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8013b32:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8013b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b38:	3301      	adds	r3, #1
 8013b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8013b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	dbc9      	blt.n	8013ad8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
  for (int i = 0; i < outer_size; ++i) {
 8013b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b46:	3301      	adds	r3, #1
 8013b48:	637b      	str	r3, [r7, #52]	; 0x34
 8013b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	f6ff af6d 	blt.w	8013a2e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
                                   sum;
    }
  }
}
 8013b54:	bf00      	nop
 8013b56:	bf00      	nop
 8013b58:	3738      	adds	r7, #56	; 0x38
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	ecbd 8b02 	vpop	{d8}
 8013b60:	bd80      	pop	{r7, pc}
	...

08013b64 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8013b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013b68:	b08a      	sub	sp, #40	; 0x28
 8013b6a:	af04      	add	r7, sp, #16
 8013b6c:	60f8      	str	r0, [r7, #12]
 8013b6e:	60b9      	str	r1, [r7, #8]
 8013b70:	607a      	str	r2, [r7, #4]
 8013b72:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d004      	beq.n	8013b86 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b09      	cmp	r3, #9
 8013b82:	f040 810e 	bne.w	8013da2 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23e>
    if (input->type == kTfLiteUInt8) {
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	2b03      	cmp	r3, #3
 8013b8c:	d133      	bne.n	8013bf6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	2b03      	cmp	r3, #3
 8013b94:	d018      	beq.n	8013bc8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	695c      	ldr	r4, [r3, #20]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7f1 f8f4 	bl	8004d8c <TfLiteTypeGetName>
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	2003      	movs	r0, #3
 8013ba8:	f7f1 f8f0 	bl	8004d8c <TfLiteTypeGetName>
 8013bac:	4603      	mov	r3, r0
 8013bae:	9303      	str	r3, [sp, #12]
 8013bb0:	9502      	str	r5, [sp, #8]
 8013bb2:	4b99      	ldr	r3, [pc, #612]	; (8013e18 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	4b99      	ldr	r3, [pc, #612]	; (8013e1c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	2323      	movs	r3, #35	; 0x23
 8013bbc:	4a98      	ldr	r2, [pc, #608]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013bbe:	4999      	ldr	r1, [pc, #612]	; (8013e24 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	47a0      	blx	r4
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e156      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	691b      	ldr	r3, [r3, #16]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	f000 8094 	beq.w	8013cfa <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	695c      	ldr	r4, [r3, #20]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	691b      	ldr	r3, [r3, #16]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	9203      	str	r2, [sp, #12]
 8013bde:	9302      	str	r3, [sp, #8]
 8013be0:	4b91      	ldr	r3, [pc, #580]	; (8013e28 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 8013be2:	9301      	str	r3, [sp, #4]
 8013be4:	4b91      	ldr	r3, [pc, #580]	; (8013e2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013be6:	9300      	str	r3, [sp, #0]
 8013be8:	2324      	movs	r3, #36	; 0x24
 8013bea:	4a8d      	ldr	r2, [pc, #564]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013bec:	4990      	ldr	r1, [pc, #576]	; (8013e30 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013bee:	68f8      	ldr	r0, [r7, #12]
 8013bf0:	47a0      	blx	r4
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e13f      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b09      	cmp	r3, #9
 8013bfc:	d018      	beq.n	8013c30 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	695c      	ldr	r4, [r3, #20]
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7f1 f8c0 	bl	8004d8c <TfLiteTypeGetName>
 8013c0c:	4605      	mov	r5, r0
 8013c0e:	2009      	movs	r0, #9
 8013c10:	f7f1 f8bc 	bl	8004d8c <TfLiteTypeGetName>
 8013c14:	4603      	mov	r3, r0
 8013c16:	9303      	str	r3, [sp, #12]
 8013c18:	9502      	str	r5, [sp, #8]
 8013c1a:	4b86      	ldr	r3, [pc, #536]	; (8013e34 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013c1c:	9301      	str	r3, [sp, #4]
 8013c1e:	4b86      	ldr	r3, [pc, #536]	; (8013e38 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013c20:	9300      	str	r3, [sp, #0]
 8013c22:	2326      	movs	r3, #38	; 0x26
 8013c24:	4a7e      	ldr	r2, [pc, #504]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013c26:	497f      	ldr	r1, [pc, #508]	; (8013e24 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	47a0      	blx	r4
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e122      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      if (output->type == kTfLiteInt16) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2b07      	cmp	r3, #7
 8013c36:	d116      	bne.n	8013c66 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	691b      	ldr	r3, [r3, #16]
 8013c3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013c40:	d05b      	beq.n	8013cfa <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	695c      	ldr	r4, [r3, #20]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	4a7c      	ldr	r2, [pc, #496]	; (8013e3c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 8013c4c:	9203      	str	r2, [sp, #12]
 8013c4e:	9302      	str	r3, [sp, #8]
 8013c50:	4b7b      	ldr	r3, [pc, #492]	; (8013e40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8013c52:	9301      	str	r3, [sp, #4]
 8013c54:	4b75      	ldr	r3, [pc, #468]	; (8013e2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	2328      	movs	r3, #40	; 0x28
 8013c5a:	4a71      	ldr	r2, [pc, #452]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013c5c:	4974      	ldr	r1, [pc, #464]	; (8013e30 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013c5e:	68f8      	ldr	r0, [r7, #12]
 8013c60:	47a0      	blx	r4
 8013c62:	2301      	movs	r3, #1
 8013c64:	e107      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	2b09      	cmp	r3, #9
 8013c6c:	d018      	beq.n	8013ca0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	695c      	ldr	r4, [r3, #20]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7f1 f888 	bl	8004d8c <TfLiteTypeGetName>
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	2009      	movs	r0, #9
 8013c80:	f7f1 f884 	bl	8004d8c <TfLiteTypeGetName>
 8013c84:	4603      	mov	r3, r0
 8013c86:	9303      	str	r3, [sp, #12]
 8013c88:	9502      	str	r5, [sp, #8]
 8013c8a:	4b6a      	ldr	r3, [pc, #424]	; (8013e34 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	4b63      	ldr	r3, [pc, #396]	; (8013e1c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	232c      	movs	r3, #44	; 0x2c
 8013c94:	4a62      	ldr	r2, [pc, #392]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013c96:	4963      	ldr	r1, [pc, #396]	; (8013e24 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	47a0      	blx	r4
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e0ea      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	691b      	ldr	r3, [r3, #16]
 8013ca4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8013ca8:	d012      	beq.n	8013cd0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	695c      	ldr	r4, [r3, #20]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	691b      	ldr	r3, [r3, #16]
 8013cb2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8013cb6:	9203      	str	r2, [sp, #12]
 8013cb8:	9302      	str	r3, [sp, #8]
 8013cba:	4b62      	ldr	r3, [pc, #392]	; (8013e44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	4b5b      	ldr	r3, [pc, #364]	; (8013e2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	232d      	movs	r3, #45	; 0x2d
 8013cc4:	4a56      	ldr	r2, [pc, #344]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013cc6:	495a      	ldr	r1, [pc, #360]	; (8013e30 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	47a0      	blx	r4
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e0d2      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cd6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8013e48 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>
 8013cda:	eef4 7a47 	vcmp.f32	s15, s14
 8013cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce2:	d00a      	beq.n	8013cfa <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	695c      	ldr	r4, [r3, #20]
 8013ce8:	4b58      	ldr	r3, [pc, #352]	; (8013e4c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	232e      	movs	r3, #46	; 0x2e
 8013cee:	4a4c      	ldr	r2, [pc, #304]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013cf0:	4957      	ldr	r1, [pc, #348]	; (8013e50 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013cf2:	68f8      	ldr	r0, [r7, #12]
 8013cf4:	47a0      	blx	r4
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e0bd      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
      }
    }
    TF_LITE_ENSURE(context, (output->params.scale == 1.f / 256) ||
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d00:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8013e48 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>
 8013d04:	eef4 7a47 	vcmp.f32	s15, s14
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	d014      	beq.n	8013d38 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1d4>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d14:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8013e54 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>
 8013d18:	eef4 7a47 	vcmp.f32	s15, s14
 8013d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d20:	d00a      	beq.n	8013d38 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1d4>
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	695c      	ldr	r4, [r3, #20]
 8013d26:	4b4c      	ldr	r3, [pc, #304]	; (8013e58 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	2331      	movs	r3, #49	; 0x31
 8013d2c:	4a3c      	ldr	r2, [pc, #240]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013d2e:	4948      	ldr	r1, [pc, #288]	; (8013e50 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	47a0      	blx	r4
 8013d34:	2301      	movs	r3, #1
 8013d36:	e09e      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ec fc0b 	bl	8000558 <__aeabi_f2d>
 8013d42:	4680      	mov	r8, r0
 8013d44:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ec fc04 	bl	8000558 <__aeabi_f2d>
 8013d50:	4682      	mov	sl, r0
 8013d52:	468b      	mov	fp, r1
 8013d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d56:	3308      	adds	r3, #8
 8013d58:	f107 0214 	add.w	r2, r7, #20
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	2005      	movs	r0, #5
 8013d60:	ec4b ab11 	vmov	d1, sl, fp
 8013d64:	ec49 8b10 	vmov	d0, r8, r9
 8013d68:	f7f3 fc06 	bl	8007578 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 8013d6c:	697a      	ldr	r2, [r7, #20]
 8013d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d70:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 8013d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d74:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8013d76:	221f      	movs	r2, #31
 8013d78:	4619      	mov	r1, r3
 8013d7a:	2005      	movs	r0, #5
 8013d7c:	f7f3 fc44 	bl	8007608 <_ZN6tflite20CalculateInputRadiusEiii>
 8013d80:	4603      	mov	r3, r0
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7ec fbd6 	bl	8000534 <__aeabi_i2d>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4614      	mov	r4, r2
 8013d8e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 8013d92:	4620      	mov	r0, r4
 8013d94:	4629      	mov	r1, r5
 8013d96:	f7ec fed1 	bl	8000b3c <__aeabi_d2iz>
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	619a      	str	r2, [r3, #24]
  } else {
 8013da0:	e068      	b.n	8013e74 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d018      	beq.n	8013ddc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x278>
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	695c      	ldr	r4, [r3, #20]
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f0 ffea 	bl	8004d8c <TfLiteTypeGetName>
 8013db8:	4605      	mov	r5, r0
 8013dba:	2001      	movs	r0, #1
 8013dbc:	f7f0 ffe6 	bl	8004d8c <TfLiteTypeGetName>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	9303      	str	r3, [sp, #12]
 8013dc4:	9502      	str	r5, [sp, #8]
 8013dc6:	4b25      	ldr	r3, [pc, #148]	; (8013e5c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013dc8:	9301      	str	r3, [sp, #4]
 8013dca:	4b1b      	ldr	r3, [pc, #108]	; (8013e38 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	2340      	movs	r3, #64	; 0x40
 8013dd0:	4a13      	ldr	r2, [pc, #76]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013dd2:	4914      	ldr	r1, [pc, #80]	; (8013e24 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	47a0      	blx	r4
 8013dd8:	2301      	movs	r3, #1
 8013dda:	e04c      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	d03d      	beq.n	8013e60 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	695c      	ldr	r4, [r3, #20]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f0 ffcd 	bl	8004d8c <TfLiteTypeGetName>
 8013df2:	4605      	mov	r5, r0
 8013df4:	2001      	movs	r0, #1
 8013df6:	f7f0 ffc9 	bl	8004d8c <TfLiteTypeGetName>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	9303      	str	r3, [sp, #12]
 8013dfe:	9502      	str	r5, [sp, #8]
 8013e00:	4b16      	ldr	r3, [pc, #88]	; (8013e5c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013e02:	9301      	str	r3, [sp, #4]
 8013e04:	4b05      	ldr	r3, [pc, #20]	; (8013e1c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8013e06:	9300      	str	r3, [sp, #0]
 8013e08:	2341      	movs	r3, #65	; 0x41
 8013e0a:	4a05      	ldr	r2, [pc, #20]	; (8013e20 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8013e0c:	4905      	ldr	r1, [pc, #20]	; (8013e24 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8013e0e:	68f8      	ldr	r0, [r7, #12]
 8013e10:	47a0      	blx	r4
 8013e12:	2301      	movs	r3, #1
 8013e14:	e02f      	b.n	8013e76 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x312>
 8013e16:	bf00      	nop
 8013e18:	0801f608 	.word	0x0801f608
 8013e1c:	0801f618 	.word	0x0801f618
 8013e20:	0801f538 	.word	0x0801f538
 8013e24:	0801f5ec 	.word	0x0801f5ec
 8013e28:	0801f644 	.word	0x0801f644
 8013e2c:	0801f648 	.word	0x0801f648
 8013e30:	0801f628 	.word	0x0801f628
 8013e34:	0801f664 	.word	0x0801f664
 8013e38:	0801f670 	.word	0x0801f670
 8013e3c:	ffff8000 	.word	0xffff8000
 8013e40:	0801f67c 	.word	0x0801f67c
 8013e44:	0801f684 	.word	0x0801f684
 8013e48:	3b800000 	.word	0x3b800000
 8013e4c:	0801f6a4 	.word	0x0801f6a4
 8013e50:	0801f68c 	.word	0x0801f68c
 8013e54:	3b808081 	.word	0x3b808081
 8013e58:	0801f6c8 	.word	0x0801f6c8
 8013e5c:	0801f714 	.word	0x0801f714
    op_data->beta = static_cast<double>(params->beta);
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7ec fb77 	bl	8000558 <__aeabi_f2d>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e70:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8013e74:	2300      	movs	r3, #0
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3718      	adds	r7, #24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013e80 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8013e80:	b590      	push	{r4, r7, lr}
 8013e82:	b089      	sub	sp, #36	; 0x24
 8013e84:	af04      	add	r7, sp, #16
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8013e8a:	6838      	ldr	r0, [r7, #0]
 8013e8c:	f7f7 fe87 	bl	800bb9e <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	bf14      	ite	ne
 8013e96:	2301      	movne	r3, #1
 8013e98:	2300      	moveq	r3, #0
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d013      	beq.n	8013ec8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	695c      	ldr	r4, [r3, #20]
 8013ea4:	6838      	ldr	r0, [r7, #0]
 8013ea6:	f7f7 fe7a 	bl	800bb9e <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2201      	movs	r2, #1
 8013eae:	9203      	str	r2, [sp, #12]
 8013eb0:	9302      	str	r3, [sp, #8]
 8013eb2:	4b25      	ldr	r3, [pc, #148]	; (8013f48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	4b25      	ldr	r3, [pc, #148]	; (8013f4c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	234a      	movs	r3, #74	; 0x4a
 8013ebc:	4a24      	ldr	r2, [pc, #144]	; (8013f50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013ebe:	4925      	ldr	r1, [pc, #148]	; (8013f54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	47a0      	blx	r4
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e03b      	b.n	8013f40 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013ec8:	6838      	ldr	r0, [r7, #0]
 8013eca:	f7f7 fe75 	bl	800bbb8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	bf14      	ite	ne
 8013ed4:	2301      	movne	r3, #1
 8013ed6:	2300      	moveq	r3, #0
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d013      	beq.n	8013f06 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	695c      	ldr	r4, [r3, #20]
 8013ee2:	6838      	ldr	r0, [r7, #0]
 8013ee4:	f7f7 fe68 	bl	800bbb8 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2201      	movs	r2, #1
 8013eec:	9203      	str	r2, [sp, #12]
 8013eee:	9302      	str	r3, [sp, #8]
 8013ef0:	4b15      	ldr	r3, [pc, #84]	; (8013f48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8013ef2:	9301      	str	r3, [sp, #4]
 8013ef4:	4b18      	ldr	r3, [pc, #96]	; (8013f58 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	234b      	movs	r3, #75	; 0x4b
 8013efa:	4a15      	ldr	r2, [pc, #84]	; (8013f50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013efc:	4915      	ldr	r1, [pc, #84]	; (8013f54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	47a0      	blx	r4
 8013f02:	2301      	movs	r3, #1
 8013f04:	e01c      	b.n	8013f40 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8013f06:	2200      	movs	r2, #0
 8013f08:	6839      	ldr	r1, [r7, #0]
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7f7 fd03 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f10:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f7f3 fc69 	bl	80077ea <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bfd4      	ite	le
 8013f1e:	2301      	movle	r3, #1
 8013f20:	2300      	movgt	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00a      	beq.n	8013f3e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	695c      	ldr	r4, [r3, #20]
 8013f2c:	4b0b      	ldr	r3, [pc, #44]	; (8013f5c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8013f2e:	9300      	str	r3, [sp, #0]
 8013f30:	234d      	movs	r3, #77	; 0x4d
 8013f32:	4a07      	ldr	r2, [pc, #28]	; (8013f50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8013f34:	490a      	ldr	r1, [pc, #40]	; (8013f60 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	47a0      	blx	r4
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e000      	b.n	8013f40 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3714      	adds	r7, #20
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd90      	pop	{r4, r7, pc}
 8013f48:	0801f724 	.word	0x0801f724
 8013f4c:	0801f728 	.word	0x0801f728
 8013f50:	0801f538 	.word	0x0801f538
 8013f54:	0801f628 	.word	0x0801f628
 8013f58:	0801f738 	.word	0x0801f738
 8013f5c:	0801f74c 	.word	0x0801f74c
 8013f60:	0801f68c 	.word	0x0801f68c

08013f64 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b093      	sub	sp, #76	; 0x4c
 8013f68:	af02      	add	r7, sp, #8
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8013f70:	f107 0310 	add.w	r3, r7, #16
 8013f74:	68f9      	ldr	r1, [r7, #12]
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7f4 f919 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f7f7 fdb9 	bl	800baf4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013f82:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 8013f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f88:	68b9      	ldr	r1, [r7, #8]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7f4 f90f 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8013f90:	68b8      	ldr	r0, [r7, #8]
 8013f92:	f7f7 fdc0 	bl	800bb16 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8013f96:	4602      	mov	r2, r0
 8013f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f9c:	f107 0110 	add.w	r1, r7, #16
 8013fa0:	9200      	str	r2, [sp, #0]
 8013fa2:	4622      	mov	r2, r4
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7ff fd23 	bl	80139f0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 8013faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7f4 f883 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8013fb4:	f107 0310 	add.w	r3, r7, #16
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7f4 f87e 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
}
 8013fbe:	bf00      	nop
 8013fc0:	3744      	adds	r7, #68	; 0x44
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd90      	pop	{r4, r7, pc}

08013fc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 8013fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fca:	b0a4      	sub	sp, #144	; 0x90
 8013fcc:	af04      	add	r7, sp, #16
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
  const auto input_shape = GetTensorShape(input);
 8013fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013fd8:	68f9      	ldr	r1, [r7, #12]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7f4 f8e7 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8013fe0:	f107 0310 	add.w	r3, r7, #16
 8013fe4:	68b9      	ldr	r1, [r7, #8]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7f4 f8e1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  if (input->type == kTfLiteUInt8) {
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	2b03      	cmp	r3, #3
 8013ff2:	d111      	bne.n	8014018 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x52>
    tflite::reference_ops::Softmax(op_data, input_shape,
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f7f7 fcba 	bl	800b96e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	68b8      	ldr	r0, [r7, #8]
 8013ffe:	f7f7 fcc7 	bl	800b990 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8014002:	4602      	mov	r2, r0
 8014004:	f107 0310 	add.w	r3, r7, #16
 8014008:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801400c:	9200      	str	r2, [sp, #0]
 801400e:	4622      	mov	r2, r4
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 f8df 	bl	80141d4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
 8014016:	e061      	b.n	80140dc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x116>
                                   GetTensorData<uint8_t>(input), output_shape,
                                   GetTensorData<uint8_t>(output));
  } else {
    if (output->type == kTfLiteInt16) {
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	2b07      	cmp	r3, #7
 801401e:	d127      	bne.n	8014070 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xaa>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014020:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014024:	68f9      	ldr	r1, [r7, #12]
 8014026:	4618      	mov	r0, r3
 8014028:	f7f4 f8c1 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801402c:	68f8      	ldr	r0, [r7, #12]
 801402e:	f7f7 fd83 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014032:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8014034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014038:	68b9      	ldr	r1, [r7, #8]
 801403a:	4618      	mov	r0, r3
 801403c:	f7f4 f8b7 	bl	80081ae <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014040:	68b8      	ldr	r0, [r7, #8]
 8014042:	f7fb fb33 	bl	800f6ac <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8014046:	4602      	mov	r2, r0
 8014048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801404c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014050:	9200      	str	r2, [sp, #0]
 8014052:	4622      	mov	r2, r4
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 f9d9 	bl	801440c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 801405a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801405e:	4618      	mov	r0, r3
 8014060:	f7f4 f82b 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014068:	4618      	mov	r0, r3
 801406a:	f7f4 f826 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 801406e:	e035      	b.n	80140dc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x116>
    } else {
      const unsigned int num_dims = NumDimensions(input);
 8014070:	68f8      	ldr	r0, [r7, #12]
 8014072:	f7f3 fbba 	bl	80077ea <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014076:	4603      	mov	r3, r0
 8014078:	67fb      	str	r3, [r7, #124]	; 0x7c

      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801407a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801407e:	4618      	mov	r0, r3
 8014080:	f7f4 f831 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014084:	4603      	mov	r3, r0
 8014086:	3b01      	subs	r3, #1
 8014088:	67bb      	str	r3, [r7, #120]	; 0x78
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801408a:	f107 0210 	add.w	r2, r7, #16
 801408e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014092:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014094:	4618      	mov	r0, r3
 8014096:	f7f8 fc9b 	bl	800c9d0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801409a:	6778      	str	r0, [r7, #116]	; 0x74
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801409c:	f107 0210 	add.w	r2, r7, #16
 80140a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80140a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80140a8:	f7f7 ffe5 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80140ac:	6738      	str	r0, [r7, #112]	; 0x70

      arm_softmax_s8(GetTensorData<int8_t>(input), outer_size, depth,
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f7f7 fd42 	bl	800bb38 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80140b4:	4680      	mov	r8, r0
                     op_data.input_multiplier, op_data.input_left_shift,
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	689e      	ldr	r6, [r3, #8]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min, GetTensorData<int8_t>(output));
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(GetTensorData<int8_t>(input), outer_size, depth,
 80140c2:	68b8      	ldr	r0, [r7, #8]
 80140c4:	f7f7 fd49 	bl	800bb5a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80140c8:	4603      	mov	r3, r0
 80140ca:	9302      	str	r3, [sp, #8]
 80140cc:	9501      	str	r5, [sp, #4]
 80140ce:	9400      	str	r4, [sp, #0]
 80140d0:	4633      	mov	r3, r6
 80140d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80140d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80140d6:	4640      	mov	r0, r8
 80140d8:	f002 fe28 	bl	8016d2c <arm_softmax_s8>
    }
  }
}
 80140dc:	f107 0310 	add.w	r3, r7, #16
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7f3 ffea 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 80140e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f3 ffe5 	bl	80080ba <_ZN6tflite12RuntimeShapeD1Ev>
 80140f0:	3780      	adds	r7, #128	; 0x80
 80140f2:	46bd      	mov	sp, r7
 80140f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80140f8:	b590      	push	{r4, r7, lr}
 80140fa:	b097      	sub	sp, #92	; 0x5c
 80140fc:	af02      	add	r7, sp, #8
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	695b      	ldr	r3, [r3, #20]
 8014106:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 8014108:	2200      	movs	r2, #0
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7f7 fc02 	bl	800b916 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014112:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 8014114:	2200      	movs	r2, #0
 8014116:	6839      	ldr	r1, [r7, #0]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7f7 fc12 	bl	800b942 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801411e:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 8014120:	f107 0308 	add.w	r3, r7, #8
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801412a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7ff fd19 	bl	8013b64 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8014132:	4603      	mov	r3, r0
 8014134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014138:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801413c:	2b00      	cmp	r3, #0
 801413e:	d002      	beq.n	8014146 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8014140:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014144:	e02a      	b.n	801419c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 8014146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	2b09      	cmp	r3, #9
 801414c:	d00f      	beq.n	801416e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801414e:	2b09      	cmp	r3, #9
 8014150:	dc16      	bgt.n	8014180 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8014152:	2b01      	cmp	r3, #1
 8014154:	d002      	beq.n	801415c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 8014156:	2b03      	cmp	r3, #3
 8014158:	d009      	beq.n	801416e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 801415a:	e011      	b.n	8014180 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 801415c:	f107 0308 	add.w	r3, r7, #8
 8014160:	461a      	mov	r2, r3
 8014162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014164:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014166:	f7ff fefd 	bl	8013f64 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801416a:	2300      	movs	r3, #0
 801416c:	e016      	b.n	801419c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 801416e:	f107 0308 	add.w	r3, r7, #8
 8014172:	461a      	mov	r2, r3
 8014174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014176:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014178:	f7ff ff25 	bl	8013fc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801417c:	2300      	movs	r3, #0
 801417e:	e00d      	b.n	801419c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	695c      	ldr	r4, [r3, #20]
 8014184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	4618      	mov	r0, r3
 801418a:	f7f0 fdff 	bl	8004d8c <TfLiteTypeGetName>
 801418e:	4602      	mov	r2, r0
 8014190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	4903      	ldr	r1, [pc, #12]	; (80141a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801419a:	2301      	movs	r3, #1
  }
}
 801419c:	4618      	mov	r0, r3
 801419e:	3754      	adds	r7, #84	; 0x54
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd90      	pop	{r4, r7, pc}
 80141a4:	0801f768 	.word	0x0801f768

080141a8 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
 80141a8:	b4b0      	push	{r4, r5, r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	4a07      	ldr	r2, [pc, #28]	; (80141d0 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x28>)
 80141b4:	461c      	mov	r4, r3
 80141b6:	4615      	mov	r5, r2
 80141b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80141c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bcb0      	pop	{r4, r5, r7}
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop
 80141d0:	0801f784 	.word	0x0801f784

080141d4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 80141d4:	b590      	push	{r4, r7, lr}
 80141d6:	b09f      	sub	sp, #124	; 0x7c
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
 80141e0:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	68db      	ldr	r3, [r3, #12]
 80141ec:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	699b      	ldr	r3, [r3, #24]
 80141f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80141f4:	68b8      	ldr	r0, [r7, #8]
 80141f6:	f7f3 ff76 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80141fa:	4603      	mov	r3, r0
 80141fc:	3b01      	subs	r3, #1
 80141fe:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014204:	68b8      	ldr	r0, [r7, #8]
 8014206:	f7f8 fbe3 	bl	800c9d0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801420a:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801420c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801420e:	683a      	ldr	r2, [r7, #0]
 8014210:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014212:	68b8      	ldr	r0, [r7, #8]
 8014214:	f7f7 ff2f 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014218:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 801421a:	2300      	movs	r3, #0
 801421c:	677b      	str	r3, [r7, #116]	; 0x74
 801421e:	e0eb      	b.n	80143f8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014220:	2300      	movs	r3, #0
 8014222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014226:	2300      	movs	r3, #0
 8014228:	673b      	str	r3, [r7, #112]	; 0x70
 801422a:	e015      	b.n	8014258 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801422c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801422e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014230:	fb03 f202 	mul.w	r2, r3, r2
 8014234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014236:	4413      	add	r3, r2
 8014238:	461a      	mov	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	441a      	add	r2, r3
 801423e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8014242:	4611      	mov	r1, r2
 8014244:	4618      	mov	r0, r3
 8014246:	f7ff fb75 	bl	8013934 <_ZSt3maxIhERKT_S2_S2_>
 801424a:	4603      	mov	r3, r0
 801424c:	781b      	ldrb	r3, [r3, #0]
 801424e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014254:	3301      	adds	r3, #1
 8014256:	673b      	str	r3, [r7, #112]	; 0x70
 8014258:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801425c:	429a      	cmp	r2, r3
 801425e:	dbe5      	blt.n	801422c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8014260:	f000 f9f3 	bl	801464a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8014264:	4603      	mov	r3, r0
 8014266:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014268:	2300      	movs	r3, #0
 801426a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801426c:	e02e      	b.n	80142cc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf8>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801426e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014272:	fb03 f202 	mul.w	r2, r3, r2
 8014276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014278:	4413      	add	r3, r2
 801427a:	461a      	mov	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	4413      	add	r3, r2
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	461a      	mov	r2, r3
 8014284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	643b      	str	r3, [r7, #64]	; 0x40
      if (input_diff >= diff_min) {
 801428c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801428e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014290:	429a      	cmp	r2, r3
 8014292:	db18      	blt.n	80142c6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf2>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014296:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014298:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801429a:	f7fb fa95 	bl	800f7c8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801429e:	63f8      	str	r0, [r7, #60]	; 0x3c
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80142a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80142a2:	f7fb fc7d 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80142a6:	4603      	mov	r3, r0
 80142a8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80142aa:	69f8      	ldr	r0, [r7, #28]
 80142ac:	f7fb faa0 	bl	800f7f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80142b0:	4603      	mov	r3, r0
 80142b2:	4618      	mov	r0, r3
 80142b4:	f000 f9ef 	bl	8014696 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80142b8:	4603      	mov	r3, r0
 80142ba:	4619      	mov	r1, r3
 80142bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142be:	f000 f9cc 	bl	801465a <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80142c2:	4603      	mov	r3, r0
 80142c4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80142c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142c8:	3301      	adds	r3, #1
 80142ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80142cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80142ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142d0:	429a      	cmp	r2, r3
 80142d2:	dbcc      	blt.n	801426e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9a>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80142d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80142d8:	4618      	mov	r0, r3
 80142da:	f000 f9f6 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80142de:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80142e6:	210c      	movs	r1, #12
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7ff fb56 	bl	801399a <_ZN6tflite13GetReciprocalEliPi>
 80142ee:	4603      	mov	r3, r0
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7f8 fcd2 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80142f6:	4603      	mov	r3, r0
 80142f8:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 80142fa:	2300      	movs	r3, #0
 80142fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80142fe:	e074      	b.n	80143ea <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8014300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014304:	fb03 f202 	mul.w	r2, r3, r2
 8014308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801430a:	4413      	add	r3, r2
 801430c:	461a      	mov	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4413      	add	r3, r2
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	461a      	mov	r2, r3
 8014316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801431a:	1ad3      	subs	r3, r2, r3
 801431c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801431e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014322:	429a      	cmp	r2, r3
 8014324:	db50      	blt.n	80143c8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014328:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801432a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801432c:	f7fb fa4c 	bl	800f7c8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8014330:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014332:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014334:	f7fb fc34 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014338:	4603      	mov	r3, r0
 801433a:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801433c:	69b8      	ldr	r0, [r7, #24]
 801433e:	f7fb fa57 	bl	800f7f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014342:	4603      	mov	r3, r0
 8014344:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 8014346:	6979      	ldr	r1, [r7, #20]
 8014348:	6a38      	ldr	r0, [r7, #32]
 801434a:	f7f8 ff9f 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801434e:	4603      	mov	r3, r0
 8014350:	633b      	str	r3, [r7, #48]	; 0x30
 8014352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014356:	4618      	mov	r0, r3
 8014358:	f7f8 fb7b 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801435c:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801435e:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8014360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014362:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8014364:	4611      	mov	r1, r2
 8014366:	4618      	mov	r0, r3
 8014368:	f7f7 fd96 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801436c:	6478      	str	r0, [r7, #68]	; 0x44

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801436e:	f7f3 fa19 	bl	80077a4 <_ZNSt14numeric_limitsIhE3minEv>
 8014372:	4603      	mov	r3, r0
 8014374:	461a      	mov	r2, r3
            unsat_output +
 8014376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014378:	4413      	add	r3, r2
        const int32 shifted_output =
 801437a:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801437c:	f7f3 fa1a 	bl	80077b4 <_ZNSt14numeric_limitsIhE3maxEv>
 8014380:	4603      	mov	r3, r0
 8014382:	637b      	str	r3, [r7, #52]	; 0x34
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8014384:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014388:	f107 0310 	add.w	r3, r7, #16
 801438c:	4611      	mov	r1, r2
 801438e:	4618      	mov	r0, r3
 8014390:	f7f3 fe40 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 8014394:	4604      	mov	r4, r0
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8014396:	f7f3 fa05 	bl	80077a4 <_ZNSt14numeric_limitsIhE3minEv>
 801439a:	4603      	mov	r3, r0
 801439c:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801439e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80143a2:	4619      	mov	r1, r3
 80143a4:	4620      	mov	r0, r4
 80143a6:	f7f3 fe21 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 80143aa:	4603      	mov	r3, r0
 80143ac:	6819      	ldr	r1, [r3, #0]
 80143ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143b2:	fb03 f202 	mul.w	r2, r3, r2
 80143b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143b8:	4413      	add	r3, r2
 80143ba:	461a      	mov	r2, r3
 80143bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80143c0:	4413      	add	r3, r2
 80143c2:	b2ca      	uxtb	r2, r1
 80143c4:	701a      	strb	r2, [r3, #0]
 80143c6:	e00d      	b.n	80143e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x210>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80143c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143cc:	fb03 f202 	mul.w	r2, r3, r2
 80143d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143d2:	4413      	add	r3, r2
 80143d4:	461a      	mov	r2, r3
 80143d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80143da:	189c      	adds	r4, r3, r2
 80143dc:	f7f3 f9e2 	bl	80077a4 <_ZNSt14numeric_limitsIhE3minEv>
 80143e0:	4603      	mov	r3, r0
 80143e2:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80143e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143e6:	3301      	adds	r3, #1
 80143e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80143ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143ee:	429a      	cmp	r2, r3
 80143f0:	db86      	blt.n	8014300 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
  for (int i = 0; i < outer_size; ++i) {
 80143f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143f4:	3301      	adds	r3, #1
 80143f6:	677b      	str	r3, [r7, #116]	; 0x74
 80143f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80143fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143fc:	429a      	cmp	r2, r3
 80143fe:	f6ff af0f 	blt.w	8014220 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
      }
    }
  }
}
 8014402:	bf00      	nop
 8014404:	bf00      	nop
 8014406:	377c      	adds	r7, #124	; 0x7c
 8014408:	46bd      	mov	sp, r7
 801440a:	bd90      	pop	{r4, r7, pc}

0801440c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801440c:	b590      	push	{r4, r7, lr}
 801440e:	b09f      	sub	sp, #124	; 0x7c
 8014410:	af00      	add	r7, sp, #0
 8014412:	60f8      	str	r0, [r7, #12]
 8014414:	60b9      	str	r1, [r7, #8]
 8014416:	607a      	str	r2, [r7, #4]
 8014418:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	689b      	ldr	r3, [r3, #8]
 801441e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	699b      	ldr	r3, [r3, #24]
 801442a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801442c:	68b8      	ldr	r0, [r7, #8]
 801442e:	f7f3 fe5a 	bl	80080e6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014432:	4603      	mov	r3, r0
 8014434:	3b01      	subs	r3, #1
 8014436:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014438:	683a      	ldr	r2, [r7, #0]
 801443a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801443c:	68b8      	ldr	r0, [r7, #8]
 801443e:	f7f8 fac7 	bl	800c9d0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014442:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801444a:	68b8      	ldr	r0, [r7, #8]
 801444c:	f7f7 fe13 	bl	800c076 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014450:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8014452:	2300      	movs	r3, #0
 8014454:	677b      	str	r3, [r7, #116]	; 0x74
 8014456:	e0ee      	b.n	8014636 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014458:	2380      	movs	r3, #128	; 0x80
 801445a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801445e:	2300      	movs	r3, #0
 8014460:	673b      	str	r3, [r7, #112]	; 0x70
 8014462:	e016      	b.n	8014492 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014466:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014468:	fb03 f202 	mul.w	r2, r3, r2
 801446c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801446e:	4413      	add	r3, r2
 8014470:	461a      	mov	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	441a      	add	r2, r3
 8014476:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801447a:	4611      	mov	r1, r2
 801447c:	4618      	mov	r0, r3
 801447e:	f000 f92f 	bl	80146e0 <_ZSt3maxIaERKT_S2_S2_>
 8014482:	4603      	mov	r3, r0
 8014484:	f993 3000 	ldrsb.w	r3, [r3]
 8014488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801448c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801448e:	3301      	adds	r3, #1
 8014490:	673b      	str	r3, [r7, #112]	; 0x70
 8014492:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014496:	429a      	cmp	r2, r3
 8014498:	dbe4      	blt.n	8014464 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801449a:	f000 f8d6 	bl	801464a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801449e:	4603      	mov	r3, r0
 80144a0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80144a2:	2300      	movs	r3, #0
 80144a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80144a6:	e02f      	b.n	8014508 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfc>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80144a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144ac:	fb03 f202 	mul.w	r2, r3, r2
 80144b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144b2:	4413      	add	r3, r2
 80144b4:	461a      	mov	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4413      	add	r3, r2
 80144ba:	f993 3000 	ldrsb.w	r3, [r3]
 80144be:	461a      	mov	r2, r3
 80144c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80144c4:	1ad3      	subs	r3, r2, r3
 80144c6:	643b      	str	r3, [r7, #64]	; 0x40
      if (input_diff >= diff_min) {
 80144c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80144ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144cc:	429a      	cmp	r2, r3
 80144ce:	db18      	blt.n	8014502 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80144d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80144d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80144d6:	f7fb f977 	bl	800f7c8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80144da:	63f8      	str	r0, [r7, #60]	; 0x3c
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80144dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144de:	f7fb fb5f 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80144e2:	4603      	mov	r3, r0
 80144e4:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80144e6:	69f8      	ldr	r0, [r7, #28]
 80144e8:	f7fb f982 	bl	800f7f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80144ec:	4603      	mov	r3, r0
 80144ee:	4618      	mov	r0, r3
 80144f0:	f000 f8d1 	bl	8014696 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80144f4:	4603      	mov	r3, r0
 80144f6:	4619      	mov	r1, r3
 80144f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144fa:	f000 f8ae 	bl	801465a <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80144fe:	4603      	mov	r3, r0
 8014500:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8014502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014504:	3301      	adds	r3, #1
 8014506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014508:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801450a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801450c:	429a      	cmp	r2, r3
 801450e:	dbcb      	blt.n	80144a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8014510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014514:	4618      	mov	r0, r3
 8014516:	f000 f8d8 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801451a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014522:	210c      	movs	r1, #12
 8014524:	4618      	mov	r0, r3
 8014526:	f7ff fa38 	bl	801399a <_ZN6tflite13GetReciprocalEliPi>
 801452a:	4603      	mov	r3, r0
 801452c:	4618      	mov	r0, r3
 801452e:	f7f8 fbb4 	bl	800cc9a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014532:	4603      	mov	r3, r0
 8014534:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8014536:	2300      	movs	r3, #0
 8014538:	66bb      	str	r3, [r7, #104]	; 0x68
 801453a:	e075      	b.n	8014628 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801453e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014540:	fb03 f202 	mul.w	r2, r3, r2
 8014544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014546:	4413      	add	r3, r2
 8014548:	461a      	mov	r2, r3
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4413      	add	r3, r2
 801454e:	f993 3000 	ldrsb.w	r3, [r3]
 8014552:	461a      	mov	r2, r3
 8014554:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8014558:	1ad3      	subs	r3, r2, r3
 801455a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801455c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801455e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014560:	429a      	cmp	r2, r3
 8014562:	db50      	blt.n	8014606 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1fa>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8014564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014566:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014568:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801456a:	f7fb f92d 	bl	800f7c8 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801456e:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8014570:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014572:	f7fb fb15 	bl	800fba0 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8014576:	4603      	mov	r3, r0
 8014578:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801457a:	69b8      	ldr	r0, [r7, #24]
 801457c:	f7fb f938 	bl	800f7f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8014580:	4603      	mov	r3, r0
 8014582:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8014584:	6979      	ldr	r1, [r7, #20]
 8014586:	6a38      	ldr	r0, [r7, #32]
 8014588:	f7f8 fe80 	bl	800d28c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801458c:	4603      	mov	r3, r0
 801458e:	633b      	str	r3, [r7, #48]	; 0x30
 8014590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014594:	4618      	mov	r0, r3
 8014596:	f7f8 fa5c 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801459a:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801459c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145a0:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80145a2:	4611      	mov	r1, r2
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7f7 fc77 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80145aa:	6478      	str	r0, [r7, #68]	; 0x44
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 80145ac:	f7f3 f90a 	bl	80077c4 <_ZNSt14numeric_limitsIsE3minEv>
 80145b0:	4603      	mov	r3, r0
 80145b2:	461a      	mov	r2, r3
            unsat_output +
 80145b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b6:	4413      	add	r3, r2
        const int32 shifted_output =
 80145b8:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 80145ba:	f7f3 f90d 	bl	80077d8 <_ZNSt14numeric_limitsIsE3maxEv>
 80145be:	4603      	mov	r3, r0
 80145c0:	637b      	str	r3, [r7, #52]	; 0x34
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80145c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80145c6:	f107 0310 	add.w	r3, r7, #16
 80145ca:	4611      	mov	r1, r2
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7f3 fd21 	bl	8008014 <_ZSt3minIlERKT_S2_S2_>
 80145d2:	4604      	mov	r4, r0
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 80145d4:	f7f3 f8f6 	bl	80077c4 <_ZNSt14numeric_limitsIsE3minEv>
 80145d8:	4603      	mov	r3, r0
 80145da:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80145dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80145e0:	4619      	mov	r1, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f7f3 fd02 	bl	8007fec <_ZSt3maxIlERKT_S2_S2_>
 80145e8:	4603      	mov	r3, r0
 80145ea:	6819      	ldr	r1, [r3, #0]
 80145ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80145f0:	fb03 f202 	mul.w	r2, r3, r2
 80145f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145f6:	4413      	add	r3, r2
 80145f8:	005b      	lsls	r3, r3, #1
 80145fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80145fe:	4413      	add	r3, r2
 8014600:	b20a      	sxth	r2, r1
 8014602:	801a      	strh	r2, [r3, #0]
 8014604:	e00d      	b.n	8014622 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8014606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014608:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801460a:	fb03 f202 	mul.w	r2, r3, r2
 801460e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014610:	4413      	add	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014618:	18d4      	adds	r4, r2, r3
 801461a:	f7f3 f8d3 	bl	80077c4 <_ZNSt14numeric_limitsIsE3minEv>
 801461e:	4603      	mov	r3, r0
 8014620:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8014622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014624:	3301      	adds	r3, #1
 8014626:	66bb      	str	r3, [r7, #104]	; 0x68
 8014628:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801462c:	429a      	cmp	r2, r3
 801462e:	db85      	blt.n	801453c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x130>
  for (int i = 0; i < outer_size; ++i) {
 8014630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014632:	3301      	adds	r3, #1
 8014634:	677b      	str	r3, [r7, #116]	; 0x74
 8014636:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801463a:	429a      	cmp	r2, r3
 801463c:	f6ff af0c 	blt.w	8014458 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
}
 8014640:	bf00      	nop
 8014642:	bf00      	nop
 8014644:	377c      	adds	r7, #124	; 0x7c
 8014646:	46bd      	mov	sp, r7
 8014648:	bd90      	pop	{r4, r7, pc}

0801464a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801464a:	b580      	push	{r7, lr}
 801464c:	af00      	add	r7, sp, #0
 801464e:	2000      	movs	r0, #0
 8014650:	f000 f85c 	bl	801470c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8014654:	4603      	mov	r3, r0
 8014656:	4618      	mov	r0, r3
 8014658:	bd80      	pop	{r7, pc}

0801465a <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801465a:	b590      	push	{r4, r7, lr}
 801465c:	b083      	sub	sp, #12
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
 8014662:	6039      	str	r1, [r7, #0]
 8014664:	1d3b      	adds	r3, r7, #4
 8014666:	4618      	mov	r0, r3
 8014668:	f000 f82f 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801466c:	4603      	mov	r3, r0
 801466e:	681c      	ldr	r4, [r3, #0]
 8014670:	463b      	mov	r3, r7
 8014672:	4618      	mov	r0, r3
 8014674:	f000 f829 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014678:	4603      	mov	r3, r0
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4619      	mov	r1, r3
 801467e:	4620      	mov	r0, r4
 8014680:	f7f7 fcba 	bl	800bff8 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014684:	4603      	mov	r3, r0
 8014686:	4618      	mov	r0, r3
 8014688:	f000 f854 	bl	8014734 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801468c:	4603      	mov	r3, r0
 801468e:	4618      	mov	r0, r3
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	bd90      	pop	{r4, r7, pc}

08014696 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8014696:	b5b0      	push	{r4, r5, r7, lr}
 8014698:	b084      	sub	sp, #16
 801469a:	af00      	add	r7, sp, #0
 801469c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801469e:	1d3b      	adds	r3, r7, #4
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f8 f9d6 	bl	800ca52 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80146a6:	4603      	mov	r3, r0
 80146a8:	681d      	ldr	r5, [r3, #0]
 80146aa:	f107 030c 	add.w	r3, r7, #12
 80146ae:	4618      	mov	r0, r3
 80146b0:	f000 f80b 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80146b4:	4604      	mov	r4, r0
 80146b6:	4628      	mov	r0, r5
 80146b8:	f000 f84d 	bl	8014756 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 80146bc:	4603      	mov	r3, r0
 80146be:	6023      	str	r3, [r4, #0]
  return result;
 80146c0:	68fb      	ldr	r3, [r7, #12]
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3710      	adds	r7, #16
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bdb0      	pop	{r4, r5, r7, pc}

080146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 80146ca:	b480      	push	{r7}
 80146cc:	b083      	sub	sp, #12
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f993 2000 	ldrsb.w	r2, [r3]
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	f993 3000 	ldrsb.w	r3, [r3]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	da01      	bge.n	80146fe <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	e000      	b.n	8014700 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 80146fe:	687b      	ldr	r3, [r7, #4]
    }
 8014700:	4618      	mov	r0, r3
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801470c:	b590      	push	{r4, r7, lr}
 801470e:	b085      	sub	sp, #20
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8014714:	f107 030c 	add.w	r3, r7, #12
 8014718:	4618      	mov	r0, r3
 801471a:	f7ff ffd6 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801471e:	4604      	mov	r4, r0
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7f7 fc2d 	bl	800bf80 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014726:	4603      	mov	r3, r0
 8014728:	6023      	str	r3, [r4, #0]
    return retval;
 801472a:	68fb      	ldr	r3, [r7, #12]
  }
 801472c:	4618      	mov	r0, r3
 801472e:	3714      	adds	r7, #20
 8014730:	46bd      	mov	sp, r7
 8014732:	bd90      	pop	{r4, r7, pc}

08014734 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801473c:	f107 030c 	add.w	r3, r7, #12
 8014740:	4618      	mov	r0, r3
 8014742:	f7ff ffc2 	bl	80146ca <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8014746:	4602      	mov	r2, r0
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6013      	str	r3, [r2, #0]
    return retval;
 801474c:	68fb      	ldr	r3, [r7, #12]
  }
 801474e:	4618      	mov	r0, r3
 8014750:	3710      	adds	r7, #16
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}

08014756 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014756:	b580      	push	{r7, lr}
 8014758:	b082      	sub	sp, #8
 801475a:	af00      	add	r7, sp, #0
 801475c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f000 f805 	bl	801476e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8014764:	4603      	mov	r3, r0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801476e:	b580      	push	{r7, lr}
 8014770:	b082      	sub	sp, #8
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014776:	210c      	movs	r1, #12
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7f7 fb8d 	bl	800be98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801477e:	4603      	mov	r3, r0
  }
 8014780:	4618      	mov	r0, r3
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	4a04      	ldr	r2, [pc, #16]	; (80147a4 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr
 80147a4:	0801fd2c 	.word	0x0801fd2c

080147a8 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 80147a8:	b480      	push	{r7}
 80147aa:	b083      	sub	sp, #12
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	4a04      	ldr	r2, [pc, #16]	; (80147c4 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	601a      	str	r2, [r3, #0]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	4618      	mov	r0, r3
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr
 80147c4:	0801fd2c 	.word	0x0801fd2c

080147c8 <_ZN6tflite13MemoryPlannerD0Ev>:
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ff ffe9 	bl	80147a8 <_ZN6tflite13MemoryPlannerD1Ev>
 80147d6:	2104      	movs	r1, #4
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f002 ff17 	bl	801760c <_ZdlPvj>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	4618      	mov	r0, r3
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 80147ee:	2328      	movs	r3, #40	; 0x28
 80147f0:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 80147f2:	2328      	movs	r3, #40	; 0x28
  }
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8014800:	b480      	push	{r7}
 8014802:	b089      	sub	sp, #36	; 0x24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 801480c:	2300      	movs	r3, #0
 801480e:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8014810:	2301      	movs	r3, #1
 8014812:	61bb      	str	r3, [r7, #24]
 8014814:	e04b      	b.n	80148ae <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
      if (values[i - 1] < values[i]) {
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801481c:	3b01      	subs	r3, #1
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	4413      	add	r3, r2
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	68f9      	ldr	r1, [r7, #12]
 801482c:	440b      	add	r3, r1
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	429a      	cmp	r2, r3
 8014832:	da39      	bge.n	80148a8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa8>
        const int value_temp = values[i - 1];
 8014834:	69bb      	ldr	r3, [r7, #24]
 8014836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801483a:	3b01      	subs	r3, #1
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	4413      	add	r3, r2
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	68fa      	ldr	r2, [r7, #12]
 801484c:	441a      	add	r2, r3
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014854:	3b01      	subs	r3, #1
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	68f9      	ldr	r1, [r7, #12]
 801485a:	440b      	add	r3, r1
 801485c:	6812      	ldr	r2, [r2, #0]
 801485e:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8014860:	69bb      	ldr	r3, [r7, #24]
 8014862:	009b      	lsls	r3, r3, #2
 8014864:	68fa      	ldr	r2, [r7, #12]
 8014866:	4413      	add	r3, r2
 8014868:	697a      	ldr	r2, [r7, #20]
 801486a:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014872:	3b01      	subs	r3, #1
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	68ba      	ldr	r2, [r7, #8]
 8014878:	4413      	add	r3, r2
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	68ba      	ldr	r2, [r7, #8]
 8014884:	441a      	add	r2, r3
 8014886:	69bb      	ldr	r3, [r7, #24]
 8014888:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801488c:	3b01      	subs	r3, #1
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	68b9      	ldr	r1, [r7, #8]
 8014892:	440b      	add	r3, r1
 8014894:	6812      	ldr	r2, [r2, #0]
 8014896:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	4413      	add	r3, r2
 80148a0:	693a      	ldr	r2, [r7, #16]
 80148a2:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 80148a4:	2301      	movs	r3, #1
 80148a6:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	3301      	adds	r3, #1
 80148ac:	61bb      	str	r3, [r7, #24]
 80148ae:	69ba      	ldr	r2, [r7, #24]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	dbaf      	blt.n	8014816 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x16>
  do {
 80148b6:	7ffb      	ldrb	r3, [r7, #31]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1a7      	bne.n	801480c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 80148bc:	bf00      	nop
 80148be:	bf00      	nop
 80148c0:	3724      	adds	r7, #36	; 0x24
 80148c2:	46bd      	mov	sp, r7
 80148c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c8:	4770      	bx	lr
	...

080148cc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b087      	sub	sp, #28
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff ff54 	bl	8014788 <_ZN6tflite13MemoryPlannerC1Ev>
 80148e0:	4a22      	ldr	r2, [pc, #136]	; (801496c <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2200      	movs	r2, #0
 80148ea:	609a      	str	r2, [r3, #8]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2201      	movs	r2, #1
 80148f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 80148f4:	687c      	ldr	r4, [r7, #4]
 80148f6:	f7ff ff77 	bl	80147e8 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 80148fa:	4603      	mov	r3, r0
 80148fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8014900:	461a      	mov	r2, r3
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	697a      	ldr	r2, [r7, #20]
 801490e:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	011b      	lsls	r3, r3, #4
 8014916:	697a      	ldr	r2, [r7, #20]
 8014918:	4413      	add	r3, r2
 801491a:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	697a      	ldr	r2, [r7, #20]
 8014920:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	697a      	ldr	r2, [r7, #20]
 801492a:	4413      	add	r3, r2
 801492c:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	697a      	ldr	r2, [r7, #20]
 8014932:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	697a      	ldr	r2, [r7, #20]
 801493c:	4413      	add	r3, r2
 801493e:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	697a      	ldr	r2, [r7, #20]
 8014944:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	461a      	mov	r2, r3
 801494c:	4613      	mov	r3, r2
 801494e:	005b      	lsls	r3, r3, #1
 8014950:	4413      	add	r3, r2
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	461a      	mov	r2, r3
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	4413      	add	r3, r2
 801495a:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	697a      	ldr	r2, [r7, #20]
 8014960:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	4618      	mov	r0, r3
 8014966:	371c      	adds	r7, #28
 8014968:	46bd      	mov	sp, r7
 801496a:	bd90      	pop	{r4, r7, pc}
 801496c:	0801f9c0 	.word	0x0801f9c0

08014970 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	4a05      	ldr	r2, [pc, #20]	; (8014990 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4618      	mov	r0, r3
 8014982:	f7ff ff11 	bl	80147a8 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	3708      	adds	r7, #8
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	0801f9c0 	.word	0x0801f9c0

08014994 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
}
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ffe7 	bl	8014970 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80149a2:	212c      	movs	r1, #44	; 0x2c
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f002 fe31 	bl	801760c <_ZdlPvj>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b086      	sub	sp, #24
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	607a      	str	r2, [r7, #4]
 80149c0:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	689a      	ldr	r2, [r3, #8]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	db08      	blt.n	80149e0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	461a      	mov	r2, r3
 80149d4:	4913      	ldr	r1, [pc, #76]	; (8014a24 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 80149d6:	68b8      	ldr	r0, [r7, #8]
 80149d8:	f7f0 f9e4 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 80149dc:	2301      	movs	r3, #1
 80149de:	e01d      	b.n	8014a1c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	68da      	ldr	r2, [r3, #12]
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	689b      	ldr	r3, [r3, #8]
 80149e8:	011b      	lsls	r3, r3, #4
 80149ea:	4413      	add	r3, r2
 80149ec:	617b      	str	r3, [r7, #20]
  current->size = size;
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	683a      	ldr	r2, [r7, #0]
 80149f8:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	6a3a      	ldr	r2, [r7, #32]
 80149fe:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a06:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	1c5a      	adds	r2, r3, #1
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2201      	movs	r2, #1
 8014a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8014a1a:	2300      	movs	r3, #0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3718      	adds	r7, #24
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	0801f8c8 	.word	0x0801f8c8

08014a28 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8014a28:	b590      	push	{r4, r7, lr}
 8014a2a:	b089      	sub	sp, #36	; 0x24
 8014a2c:	af02      	add	r7, sp, #8
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
 8014a34:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	68da      	ldr	r2, [r3, #12]
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	011b      	lsls	r3, r3, #4
 8014a40:	4413      	add	r3, r2
 8014a42:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	3308      	adds	r3, #8
 8014a4a:	681c      	ldr	r4, [r3, #0]
 8014a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	68b9      	ldr	r1, [r7, #8]
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	47a0      	blx	r4
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	bf14      	ite	ne
 8014a60:	2301      	movne	r3, #1
 8014a62:	2300      	moveq	r3, #0
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e003      	b.n	8014a76 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a72:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8014a74:	2300      	movs	r3, #0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	371c      	adds	r7, #28
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd90      	pop	{r4, r7, pc}

08014a7e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8014a7e:	b480      	push	{r7}
 8014a80:	b087      	sub	sp, #28
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	60f8      	str	r0, [r7, #12]
 8014a86:	60b9      	str	r1, [r7, #8]
 8014a88:	607a      	str	r2, [r7, #4]
 8014a8a:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	68da      	ldr	r2, [r3, #12]
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8014a96:	4413      	add	r3, r2
 8014a98:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	da01      	bge.n	8014aa8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	e007      	b.n	8014ab8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	dd01      	ble.n	8014ab6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e000      	b.n	8014ab8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8014ab6:	2301      	movs	r3, #1
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	371c      	adds	r7, #28
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d10b      	bne.n	8014af4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	699a      	ldr	r2, [r3, #24]
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	6a1b      	ldr	r3, [r3, #32]
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	440b      	add	r3, r1
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	613b      	str	r3, [r7, #16]
 8014af2:	e011      	b.n	8014b18 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	689b      	ldr	r3, [r3, #8]
 8014af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014afc:	d101      	bne.n	8014b02 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8014afe:	2300      	movs	r3, #0
 8014b00:	e029      	b.n	8014b56 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	699a      	ldr	r2, [r3, #24]
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	440b      	add	r3, r1
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	4413      	add	r3, r2
 8014b16:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	6939      	ldr	r1, [r7, #16]
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f7ff ffad 	bl	8014a7e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d002      	beq.n	8014b30 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	617b      	str	r3, [r7, #20]
      break;
 8014b2e:	e011      	b.n	8014b54 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	689b      	ldr	r3, [r3, #8]
 8014b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b38:	d00b      	beq.n	8014b52 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	699a      	ldr	r2, [r3, #24]
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	689b      	ldr	r3, [r3, #8]
 8014b42:	4619      	mov	r1, r3
 8014b44:	460b      	mov	r3, r1
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	440b      	add	r3, r1
 8014b4a:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8014b4c:	4413      	add	r3, r2
 8014b4e:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8014b50:	e7e2      	b.n	8014b18 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8014b52:	bf00      	nop
  } while (true);
  return result;
 8014b54:	697b      	ldr	r3, [r7, #20]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3718      	adds	r7, #24
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8014b5e:	b580      	push	{r7, lr}
 8014b60:	b098      	sub	sp, #96	; 0x60
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b6c:	f083 0301 	eor.w	r3, r3, #1
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	f040 8160 	bne.w	8014e38 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	689b      	ldr	r3, [r3, #8]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	f000 815b 	beq.w	8014e38 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    return;
  }
  need_to_calculate_offsets_ = false;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2200      	movs	r2, #0
 8014b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	689b      	ldr	r3, [r3, #8]
 8014b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8014b90:	2300      	movs	r3, #0
 8014b92:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8014b94:	2300      	movs	r3, #0
 8014b96:	657b      	str	r3, [r7, #84]	; 0x54
 8014b98:	e04c      	b.n	8014c34 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	68da      	ldr	r2, [r3, #12]
 8014b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ba0:	011b      	lsls	r3, r3, #4
 8014ba2:	4413      	add	r3, r2
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014baa:	d11e      	bne.n	8014bea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8c>
      idx_from_tail--;
 8014bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	68da      	ldr	r2, [r3, #12]
 8014bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bb8:	011b      	lsls	r3, r3, #4
 8014bba:	441a      	add	r2, r3
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6919      	ldr	r1, [r3, #16]
 8014bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	440b      	add	r3, r1
 8014bc6:	6812      	ldr	r2, [r2, #0]
 8014bc8:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	695a      	ldr	r2, [r3, #20]
 8014bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014bd0:	009b      	lsls	r3, r3, #2
 8014bd2:	4413      	add	r3, r2
 8014bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014bd6:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014be6:	601a      	str	r2, [r3, #0]
 8014be8:	e021      	b.n	8014c2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd0>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	68da      	ldr	r2, [r3, #12]
 8014bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bf0:	011b      	lsls	r3, r3, #4
 8014bf2:	441a      	add	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6919      	ldr	r1, [r3, #16]
 8014bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	440b      	add	r3, r1
 8014bfe:	6812      	ldr	r2, [r2, #0]
 8014c00:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	695a      	ldr	r2, [r3, #20]
 8014c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	4413      	add	r3, r2
 8014c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c0e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	68da      	ldr	r2, [r3, #12]
 8014c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c16:	011b      	lsls	r3, r3, #4
 8014c18:	441a      	add	r2, r3
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c20:	009b      	lsls	r3, r3, #2
 8014c22:	440b      	add	r3, r1
 8014c24:	6852      	ldr	r2, [r2, #4]
 8014c26:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8014c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8014c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c30:	3301      	adds	r3, #1
 8014c32:	657b      	str	r3, [r7, #84]	; 0x54
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	689b      	ldr	r3, [r3, #8]
 8014c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	dbad      	blt.n	8014b9a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	691a      	ldr	r2, [r3, #16]
 8014c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	695a      	ldr	r2, [r3, #20]
 8014c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c4e:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8014c50:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8014c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c58:	1ad3      	subs	r3, r2, r3
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	f7ff fdd0 	bl	8014800 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2200      	movs	r2, #0
 8014c64:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2201      	movs	r2, #1
 8014c6a:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	699a      	ldr	r2, [r3, #24]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6a1b      	ldr	r3, [r3, #32]
 8014c74:	4619      	mov	r1, r3
 8014c76:	460b      	mov	r3, r1
 8014c78:	005b      	lsls	r3, r3, #1
 8014c7a:	440b      	add	r3, r1
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4413      	add	r3, r2
 8014c80:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 8014c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c88:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	695b      	ldr	r3, [r3, #20]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 8014c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c96:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	68da      	ldr	r2, [r3, #12]
 8014c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c9e:	011b      	lsls	r3, r3, #4
 8014ca0:	4413      	add	r3, r2
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ca8:	d106      	bne.n	8014cb8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	4413      	add	r3, r2
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	4413      	add	r3, r2
 8014cc2:	681a      	ldr	r2, [r3, #0]
 8014cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cc6:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8014cc8:	2301      	movs	r3, #1
 8014cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ccc:	e0ad      	b.n	8014e2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2cc>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	695a      	ldr	r2, [r3, #20]
 8014cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	4413      	add	r3, r2
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	68da      	ldr	r2, [r3, #12]
 8014ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ce2:	011b      	lsls	r3, r3, #4
 8014ce4:	4413      	add	r3, r2
 8014ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8014ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8014cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8014cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 8014cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d06:	d12d      	bne.n	8014d64 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
      ListEntry* prior_entry = nullptr;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8014d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f7ff fed6 	bl	8014ac4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8014d18:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8014d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d012      	beq.n	8014d46 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	68da      	ldr	r2, [r3, #12]
 8014d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8014d2a:	4413      	add	r3, r2
 8014d2c:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 8014d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d34:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8014d36:	4413      	add	r3, r2
 8014d38:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8014d3a:	6a3a      	ldr	r2, [r7, #32]
 8014d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	dd01      	ble.n	8014d46 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
            candidate_offset = prior_entry_offset;
 8014d42:	6a3b      	ldr	r3, [r7, #32]
 8014d44:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8014d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d00f      	beq.n	8014d6c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8014d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8014d56:	69fa      	ldr	r2, [r7, #28]
 8014d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	da08      	bge.n	8014d70 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8014d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d60:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8014d62:	e7d3      	b.n	8014d0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8014d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d6a:	e002      	b.n	8014d72 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 8014d6c:	bf00      	nop
 8014d6e:	e000      	b.n	8014d72 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 8014d70:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	4413      	add	r3, r2
 8014d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d7e:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	699a      	ldr	r2, [r3, #24]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	69db      	ldr	r3, [r3, #28]
 8014d88:	4619      	mov	r1, r3
 8014d8a:	460b      	mov	r3, r1
 8014d8c:	005b      	lsls	r3, r3, #1
 8014d8e:	440b      	add	r3, r1
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	4413      	add	r3, r2
 8014d94:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d9a:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014da0:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	69db      	ldr	r3, [r3, #28]
 8014da6:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	69db      	ldr	r3, [r3, #28]
 8014dac:	1c5a      	adds	r2, r3, #1
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8014db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014db8:	429a      	cmp	r2, r3
 8014dba:	da09      	bge.n	8014dd0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x272>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6a1a      	ldr	r2, [r3, #32]
 8014dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dc6:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	697a      	ldr	r2, [r7, #20]
 8014dcc:	621a      	str	r2, [r3, #32]
 8014dce:	e029      	b.n	8014e24 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
    } else {
      ListEntry* current_entry = first_entry;
 8014dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dd2:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 8014dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014de0:	d107      	bne.n	8014df2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x294>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8014de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014de4:	697a      	ldr	r2, [r7, #20]
 8014de6:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dee:	609a      	str	r2, [r3, #8]
          break;
 8014df0:	e018      	b.n	8014e24 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6999      	ldr	r1, [r3, #24]
 8014df6:	693a      	ldr	r2, [r7, #16]
 8014df8:	4613      	mov	r3, r2
 8014dfa:	005b      	lsls	r3, r3, #1
 8014dfc:	4413      	add	r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	440b      	add	r3, r1
 8014e02:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	da07      	bge.n	8014e1e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c0>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 8014e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e10:	689a      	ldr	r2, [r3, #8]
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8014e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e18:	697a      	ldr	r2, [r7, #20]
 8014e1a:	609a      	str	r2, [r3, #8]
          break;
 8014e1c:	e002      	b.n	8014e24 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        current_entry = next_entry;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8014e22:	e7d7      	b.n	8014dd4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x276>
  for (int i = 1; i < buffer_count_; ++i) {
 8014e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e26:	3301      	adds	r3, #1
 8014e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e30:	429a      	cmp	r2, r3
 8014e32:	f6ff af4c 	blt.w	8014cce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
 8014e36:	e000      	b.n	8014e3a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2dc>
    return;
 8014e38:	bf00      	nop
    }
  }
}
 8014e3a:	3760      	adds	r7, #96	; 0x60
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ff fe88 	bl	8014b5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d101      	bne.n	8014e5a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	e036      	b.n	8014ec8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x88>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	699a      	ldr	r2, [r3, #24]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6a1b      	ldr	r3, [r3, #32]
 8014e62:	4619      	mov	r1, r3
 8014e64:	460b      	mov	r3, r1
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	440b      	add	r3, r1
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	4413      	add	r3, r2
 8014e6e:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	613b      	str	r3, [r7, #16]
  while (entry) {
 8014e74:	e022      	b.n	8014ebc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	68da      	ldr	r2, [r3, #12]
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 8014e80:	4413      	add	r3, r2
 8014e82:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	681a      	ldr	r2, [r3, #0]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d901      	bls.n	8014e9c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
      max_size = current_size;
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	689b      	ldr	r3, [r3, #8]
 8014ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ea4:	d00e      	beq.n	8014ec4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	699a      	ldr	r2, [r3, #24]
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	689b      	ldr	r3, [r3, #8]
 8014eae:	4619      	mov	r1, r3
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	005b      	lsls	r3, r3, #1
 8014eb4:	440b      	add	r3, r1
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	4413      	add	r3, r2
 8014eba:	617b      	str	r3, [r7, #20]
  while (entry) {
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d1d9      	bne.n	8014e76 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x36>
 8014ec2:	e000      	b.n	8014ec6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
      break;
 8014ec4:	bf00      	nop
  }
  return max_size;
 8014ec6:	693b      	ldr	r3, [r7, #16]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	4618      	mov	r0, r3
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b084      	sub	sp, #16
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
 8014ef4:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 8014ef6:	68f8      	ldr	r0, [r7, #12]
 8014ef8:	f7ff fe31 	bl	8014b5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	db04      	blt.n	8014f0c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	db08      	blt.n	8014f1e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	687a      	ldr	r2, [r7, #4]
 8014f12:	4909      	ldr	r1, [pc, #36]	; (8014f38 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8014f14:	68b8      	ldr	r0, [r7, #8]
 8014f16:	f7ef ff45 	bl	8004da4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	e008      	b.n	8014f30 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	4413      	add	r3, r2
 8014f28:	681a      	ldr	r2, [r3, #0]
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8014f2e:	2300      	movs	r3, #0
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3710      	adds	r7, #16
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	0801f958 	.word	0x0801f958

08014f3c <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims* bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims* output_dims,
                                 q7_t *output_data)
{
 8014f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f40:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 8014f44:	68a5      	ldr	r5, [r4, #8]
 8014f46:	07ac      	lsls	r4, r5, #30
{
 8014f48:	e9dd 7e09 	ldrd	r7, lr, [sp, #36]	; 0x24
    if (output_dims->w % 4 != 0)
 8014f4c:	d103      	bne.n	8014f56 <arm_convolve_1_x_n_s8+0x1a>
#endif

out:
    /* Return to application */
    return status;
}
 8014f4e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
 8014f52:	f000 b83f 	b.w	8014fd4 <arm_convolve_s8>
}
 8014f56:	f06f 0002 	mvn.w	r0, #2
 8014f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014f5e <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                              const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 8014f5e:	688b      	ldr	r3, [r1, #8]
 8014f60:	68c0      	ldr	r0, [r0, #12]
 8014f62:	4358      	muls	r0, r3
 8014f64:	684b      	ldr	r3, [r1, #4]
 8014f66:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8014f68:	0080      	lsls	r0, r0, #2
 8014f6a:	4770      	bx	lr

08014f6c <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8014f6c:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 ||
 8014f6e:	68d8      	ldr	r0, [r3, #12]
 8014f70:	0784      	lsls	r4, r0, #30
{
 8014f72:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 ||
 8014f74:	d128      	bne.n	8014fc8 <arm_convolve_1x1_s8_fast+0x5c>
 8014f76:	690c      	ldr	r4, [r1, #16]
 8014f78:	bb34      	cbnz	r4, 8014fc8 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8014f7a:	694c      	ldr	r4, [r1, #20]
 8014f7c:	bb24      	cbnz	r4, 8014fc8 <arm_convolve_1x1_s8_fast+0x5c>
 8014f7e:	688d      	ldr	r5, [r1, #8]
 8014f80:	2d01      	cmp	r5, #1
 8014f82:	d121      	bne.n	8014fc8 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8014f84:	68cd      	ldr	r5, [r1, #12]
 8014f86:	2d01      	cmp	r5, #1
 8014f88:	d11e      	bne.n	8014fc8 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 8014f8a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8014f8c:	9508      	str	r5, [sp, #32]
 8014f8e:	6a0d      	ldr	r5, [r1, #32]
 8014f90:	9507      	str	r5, [sp, #28]
 8014f92:	684d      	ldr	r5, [r1, #4]
 8014f94:	9506      	str	r5, [sp, #24]
 8014f96:	6809      	ldr	r1, [r1, #0]
 8014f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014f9e:	68c9      	ldr	r1, [r1, #12]
 8014fa0:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8014fa2:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4341      	muls	r1, r0
 8014faa:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
 8014fac:	9102      	str	r1, [sp, #8]
 8014fae:	6853      	ldr	r3, [r2, #4]
 8014fb0:	9301      	str	r3, [sp, #4]
 8014fb2:	6813      	ldr	r3, [r2, #0]
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014fbe:	f000 fd75 	bl	8015aac <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8014fc2:	4620      	mov	r0, r4
}
 8014fc4:	b00b      	add	sp, #44	; 0x2c
 8014fc6:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
 8014fc8:	f06f 0002 	mvn.w	r0, #2
 8014fcc:	e7fa      	b.n	8014fc4 <arm_convolve_1x1_s8_fast+0x58>

08014fce <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 8014fce:	2000      	movs	r0, #0
 8014fd0:	4770      	bx	lr
	...

08014fd4 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims* bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims* output_dims,
                           q7_t *output_data)
{
 8014fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd8:	ed2d 8b02 	vpush	{d8}
 8014fdc:	b0b1      	sub	sp, #196	; 0xc4
 8014fde:	4694      	mov	ip, r2
 8014fe0:	9c41      	ldr	r4, [sp, #260]	; 0x104
 8014fe2:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t input_ch      = input_dims->c;
    const uint16_t kernel_x      = filter_dims->w;
    const uint16_t kernel_y      = filter_dims->h;
    const uint16_t output_x      = output_dims->w;
    const uint16_t output_y      = output_dims->h;
    const uint16_t output_ch     = output_dims->c;
 8014fe4:	68e7      	ldr	r7, [r4, #12]
    q15_t *buffer_a = (q15_t *)ctx->buf;
 8014fe6:	f8d0 b000 	ldr.w	fp, [r0]
    const uint16_t input_batches = input_dims->n;
 8014fea:	6818      	ldr	r0, [r3, #0]
    const uint16_t input_ch      = input_dims->c;
 8014fec:	68dd      	ldr	r5, [r3, #12]
    const uint16_t input_batches = input_dims->n;
 8014fee:	901e      	str	r0, [sp, #120]	; 0x78
    const uint16_t output_ch     = output_dims->c;
 8014ff0:	b2ba      	uxth	r2, r7
 8014ff2:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x         = conv_params->padding.w;
 8014ff6:	690a      	ldr	r2, [r1, #16]
 8014ff8:	921f      	str	r2, [sp, #124]	; 0x7c
    const uint16_t pad_y         = conv_params->padding.h;
 8014ffa:	694a      	ldr	r2, [r1, #20]
 8014ffc:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t stride_x      = conv_params->stride.w;
 8014ffe:	688a      	ldr	r2, [r1, #8]
 8015000:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_y      = conv_params->stride.h;
 8015002:	68ca      	ldr	r2, [r1, #12]
 8015004:	9222      	str	r2, [sp, #136]	; 0x88

    const int32_t input_offset       = conv_params->input_offset;
 8015006:	680a      	ldr	r2, [r1, #0]
 8015008:	9225      	str	r2, [sp, #148]	; 0x94
    const int32_t out_offset         = conv_params->output_offset;
 801500a:	684a      	ldr	r2, [r1, #4]
 801500c:	9213      	str	r2, [sp, #76]	; 0x4c
    const int32_t out_activation_min = conv_params->activation.min;
 801500e:	6a0a      	ldr	r2, [r1, #32]
 8015010:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_max = conv_params->activation.max;
 8015012:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8015014:	9215      	str	r2, [sp, #84]	; 0x54
    int32_t *output_mult             = quant_params->multiplier;
 8015016:	f8dc 2000 	ldr.w	r2, [ip]
 801501a:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_shift            = quant_params->shift;
 801501c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015020:	9217      	str	r2, [sp, #92]	; 0x5c
 8015022:	88a2      	ldrh	r2, [r4, #4]
    const uint16_t kernel_y      = filter_dims->h;
 8015024:	e9d6 6001 	ldrd	r6, r0, [r6, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8015028:	9218      	str	r2, [sp, #96]	; 0x60
 801502a:	891a      	ldrh	r2, [r3, #8]
 801502c:	889b      	ldrh	r3, [r3, #4]
 801502e:	9312      	str	r3, [sp, #72]	; 0x48
 8015030:	920b      	str	r2, [sp, #44]	; 0x2c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8015032:	4613      	mov	r3, r2
 8015034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015036:	fa1f fa85 	uxth.w	sl, r5
 801503a:	4353      	muls	r3, r2
 801503c:	fb0a f303 	mul.w	r3, sl, r3
 8015040:	9326      	str	r3, [sp, #152]	; 0x98
 8015042:	8923      	ldrh	r3, [r4, #8]
 8015044:	931b      	str	r3, [sp, #108]	; 0x6c
 8015046:	b2bb      	uxth	r3, r7
        output_data += (output_x * output_y * output_ch);
 8015048:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801504a:	9319      	str	r3, [sp, #100]	; 0x64
 801504c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801504e:	4353      	muls	r3, r2
 8015050:	ee18 2a10 	vmov	r2, s16
 8015054:	4353      	muls	r3, r2
 8015056:	9327      	str	r3, [sp, #156]	; 0x9c
 8015058:	b2b3      	uxth	r3, r6
 801505a:	931c      	str	r3, [sp, #112]	; 0x70
 801505c:	b283      	uxth	r3, r0
 801505e:	9310      	str	r3, [sp, #64]	; 0x40
 8015060:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015062:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8015064:	fb10 f006 	smulbb	r0, r0, r6
 8015068:	435a      	muls	r2, r3
 801506a:	fb10 f005 	smulbb	r0, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 801506e:	fb0a f302 	mul.w	r3, sl, r2
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8015072:	b281      	uxth	r1, r0
 8015074:	9124      	str	r1, [sp, #144]	; 0x90
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8015076:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 801507a:	9123      	str	r1, [sp, #140]	; 0x8c
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 801507c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8015080:	9108      	str	r1, [sp, #32]
 8015082:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8015086:	f000 0103 	and.w	r1, r0, #3
 801508a:	911a      	str	r1, [sp, #104]	; 0x68
 801508c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015090:	911d      	str	r1, [sp, #116]	; 0x74
 8015092:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8015094:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015098:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801509c:	932b      	str	r3, [sp, #172]	; 0xac
 801509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150a0:	9128      	str	r1, [sp, #160]	; 0xa0
 80150a2:	fb0a f303 	mul.w	r3, sl, r3
 80150a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80150a8:	9b08      	ldr	r3, [sp, #32]
 80150aa:	4353      	muls	r3, r2
 80150ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80150ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150b0:	9b08      	ldr	r3, [sp, #32]
 80150b2:	4353      	muls	r3, r2
 80150b4:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80150b6:	2300      	movs	r3, #0
 80150b8:	930c      	str	r3, [sp, #48]	; 0x30
 80150ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150bc:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 80150c0:	429a      	cmp	r2, r3
 80150c2:	f2c0 8086 	blt.w	80151d2 <arm_convolve_s8+0x1fe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 80150c6:	2000      	movs	r0, #0
 80150c8:	b031      	add	sp, #196	; 0xc4
 80150ca:	ecbd 8b02 	vpop	{d8}
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 80150d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150d4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80150d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80150da:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 80150de:	4353      	muls	r3, r2
 80150e0:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 80150e4:	1a9b      	subs	r3, r3, r2
 80150e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80150e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80150ea:	189c      	adds	r4, r3, r2
 80150ec:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80150ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80150f0:	fb0a 3304 	mla	r3, sl, r4, r3
 80150f4:	9311      	str	r3, [sp, #68]	; 0x44
 80150f6:	4633      	mov	r3, r6
 80150f8:	4413      	add	r3, r2
 80150fa:	932f      	str	r3, [sp, #188]	; 0xbc
 80150fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80150fe:	42b3      	cmp	r3, r6
 8015100:	dc5f      	bgt.n	80151c2 <arm_convolve_s8+0x1ee>
 8015102:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015104:	4499      	add	r9, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8015106:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015108:	454b      	cmp	r3, r9
 801510a:	d118      	bne.n	801513e <arm_convolve_s8+0x16a>
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 801510c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801510e:	9305      	str	r3, [sp, #20]
 8015110:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015112:	9304      	str	r3, [sp, #16]
 8015114:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8015118:	9303      	str	r3, [sp, #12]
 801511a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801511e:	9302      	str	r3, [sp, #8]
 8015120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015122:	9301      	str	r3, [sp, #4]
 8015124:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015126:	f8cd 8018 	str.w	r8, [sp, #24]
 801512a:	9300      	str	r3, [sp, #0]
 801512c:	ee18 2a10 	vmov	r2, s16
 8015130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015132:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8015134:	4659      	mov	r1, fp
 8015136:	f000 f97f 	bl	8015438 <arm_nn_mat_mult_kernel_s8_s16>
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801513a:	46d9      	mov	r9, fp
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 801513c:	4680      	mov	r8, r0
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 801513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015140:	3301      	adds	r3, #1
 8015142:	930a      	str	r3, [sp, #40]	; 0x28
 8015144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015146:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015148:	4293      	cmp	r3, r2
 801514a:	dbc2      	blt.n	80150d2 <arm_convolve_s8+0xfe>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 801514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514e:	3301      	adds	r3, #1
 8015150:	9309      	str	r3, [sp, #36]	; 0x24
 8015152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015154:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015156:	4293      	cmp	r3, r2
 8015158:	da45      	bge.n	80151e6 <arm_convolve_s8+0x212>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 801515a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801515c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8015160:	4353      	muls	r3, r2
 8015162:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8015166:	1a9b      	subs	r3, r3, r2
 8015168:	930e      	str	r3, [sp, #56]	; 0x38
 801516a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801516c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801516e:	4353      	muls	r3, r2
 8015170:	932d      	str	r3, [sp, #180]	; 0xb4
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8015172:	2300      	movs	r3, #0
 8015174:	e7e5      	b.n	8015142 <arm_convolve_s8+0x16e>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8015176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015178:	42b3      	cmp	r3, r6
 801517a:	d904      	bls.n	8015186 <arm_convolve_s8+0x1b2>
 801517c:	2d00      	cmp	r5, #0
 801517e:	db02      	blt.n	8015186 <arm_convolve_s8+0x1b2>
 8015180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015182:	429d      	cmp	r5, r3
 8015184:	db15      	blt.n	80151b2 <arm_convolve_s8+0x1de>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8015186:	9a08      	ldr	r2, [sp, #32]
 8015188:	2100      	movs	r1, #0
 801518a:	4638      	mov	r0, r7
 801518c:	f003 f82a 	bl	80181e4 <memset>
                        two_column_buf += input_ch;
 8015190:	9b08      	ldr	r3, [sp, #32]
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 8015192:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
 8015194:	441f      	add	r7, r3
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 8015196:	4454      	add	r4, sl
 8015198:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801519a:	42ab      	cmp	r3, r5
 801519c:	dceb      	bgt.n	8015176 <arm_convolve_s8+0x1a2>
 801519e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80151a2:	4413      	add	r3, r2
 80151a4:	930d      	str	r3, [sp, #52]	; 0x34
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80151a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80151a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151aa:	4413      	add	r3, r2
 80151ac:	3601      	adds	r6, #1
 80151ae:	9311      	str	r3, [sp, #68]	; 0x44
 80151b0:	e7a4      	b.n	80150fc <arm_convolve_s8+0x128>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 80151b2:	ee18 3a90 	vmov	r3, s17
 80151b6:	4652      	mov	r2, sl
 80151b8:	4639      	mov	r1, r7
 80151ba:	4620      	mov	r0, r4
 80151bc:	f001 fb5c 	bl	8016878 <arm_q7_to_q15_with_offset>
 80151c0:	e7e6      	b.n	8015190 <arm_convolve_s8+0x1bc>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 80151c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80151c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80151c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80151ca:	462b      	mov	r3, r5
 80151cc:	4413      	add	r3, r2
 80151ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80151d0:	e7e2      	b.n	8015198 <arm_convolve_s8+0x1c4>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80151d2:	2300      	movs	r3, #0
 80151d4:	9309      	str	r3, [sp, #36]	; 0x24
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 80151d6:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
        q7_t *out = output_data;
 80151da:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 80151de:	ee08 3a90 	vmov	s17, r3
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80151e2:	46d9      	mov	r9, fp
 80151e4:	e7b5      	b.n	8015152 <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
 80151e6:	45d9      	cmp	r9, fp
 80151e8:	d010      	beq.n	801520c <arm_convolve_s8+0x238>
 80151ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80151ec:	9928      	ldr	r1, [sp, #160]	; 0xa0
            const q7_t *ker_a = filter_data;
 80151ee:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80151f0:	f1a3 0904 	sub.w	r9, r3, #4
 80151f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151f6:	f1a3 0e04 	sub.w	lr, r3, #4
 80151fa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80151fc:	f1a3 0c04 	sub.w	ip, r3, #4
 8015200:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015202:	4443      	add	r3, r8
 8015204:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0; i < output_ch; i++)
 8015206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015208:	4598      	cmp	r8, r3
 801520a:	d10a      	bne.n	8015222 <arm_convolve_s8+0x24e>
        input_data += (input_x * input_y * input_ch);
 801520c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801520e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015210:	4413      	add	r3, r2
 8015212:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
 8015214:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015216:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015218:	4413      	add	r3, r2
 801521a:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 801521c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801521e:	3301      	adds	r3, #1
 8015220:	e74a      	b.n	80150b8 <arm_convolve_s8+0xe4>
                q31_t sum = bias_data[i];
 8015222:	f85c 2f04 	ldr.w	r2, [ip, #4]!
                while (col_count)
 8015226:	465c      	mov	r4, fp
 8015228:	462e      	mov	r6, r5
 801522a:	42b1      	cmp	r1, r6
 801522c:	460b      	mov	r3, r1
 801522e:	d14b      	bne.n	80152c8 <arm_convolve_s8+0x2f4>
                while (col_count)
 8015230:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015232:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015234:	190c      	adds	r4, r1, r4
 8015236:	42a3      	cmp	r3, r4
 8015238:	d15f      	bne.n	80152fa <arm_convolve_s8+0x326>
 801523a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 801523c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8015240:	f859 4f04 	ldr.w	r4, [r9, #4]!
 8015244:	441d      	add	r5, r3
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015246:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 801524a:	409a      	lsls	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 801524c:	ea84 0302 	eor.w	r3, r4, r2
 8015250:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8015252:	2b00      	cmp	r3, #0
 8015254:	4b2c      	ldr	r3, [pc, #176]	; (8015308 <arm_convolve_s8+0x334>)
 8015256:	bf06      	itte	eq
 8015258:	2600      	moveq	r6, #0
 801525a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 801525e:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015262:	fbc2 3604 	smlal	r3, r6, r2, r4
 8015266:	2e00      	cmp	r6, #0
 8015268:	da04      	bge.n	8015274 <arm_convolve_s8+0x2a0>
 801526a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801526e:	19db      	adds	r3, r3, r7
 8015270:	f146 0600 	adc.w	r6, r6, #0
 8015274:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015276:	4294      	cmp	r4, r2
    result = (int32_t) (mult / (1ll << 31));
 8015278:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801527c:	d104      	bne.n	8015288 <arm_convolve_s8+0x2b4>
        result = Q31_MAX;
 801527e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8015282:	bf08      	it	eq
 8015284:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015288:	2800      	cmp	r0, #0
 801528a:	bfd4      	ite	le
 801528c:	4240      	negle	r0, r0
 801528e:	2000      	movgt	r0, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015290:	2201      	movs	r2, #1
 8015292:	4082      	lsls	r2, r0
 8015294:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8015296:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
 801529a:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 801529c:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 80152a0:	bf48      	it	mi
 80152a2:	3201      	addmi	r2, #1
    if (remainder > threshold)
 80152a4:	4294      	cmp	r4, r2
                sum += out_offset;
 80152a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        result++;
 80152a8:	bfc8      	it	gt
 80152aa:	3301      	addgt	r3, #1
 80152ac:	4413      	add	r3, r2
                sum = MAX(sum, out_activation_min);
 80152ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152b0:	4293      	cmp	r3, r2
 80152b2:	bfb8      	it	lt
 80152b4:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
 80152b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80152b8:	4293      	cmp	r3, r2
 80152ba:	bfa8      	it	ge
 80152bc:	4613      	movge	r3, r2
                *out++ = (q7_t)sum;
 80152be:	f808 3b01 	strb.w	r3, [r8], #1
            for (i = 0; i < output_ch; i++)
 80152c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80152c4:	4419      	add	r1, r3
 80152c6:	e79e      	b.n	8015206 <arm_convolve_s8+0x232>
  memcpy(&val, *in_q7, 4);
 80152c8:	f856 0b04 	ldr.w	r0, [r6], #4
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80152cc:	ea4f 2330 	mov.w	r3, r0, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80152d0:	fa2f f383 	sxtb16	r3, r3
 80152d4:	9309      	str	r3, [sp, #36]	; 0x24
 80152d6:	fa2f f080 	sxtb16	r0, r0
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 80152da:	b287      	uxth	r7, r0
 80152dc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80152e0:	6827      	ldr	r7, [r4, #0]
 80152e2:	fb23 2207 	smlad	r2, r3, r7, r2
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 80152e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e8:	6867      	ldr	r7, [r4, #4]
 80152ea:	0c1b      	lsrs	r3, r3, #16
 80152ec:	041b      	lsls	r3, r3, #16
 80152ee:	3408      	adds	r4, #8
 80152f0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80152f4:	fb23 2207 	smlad	r2, r3, r7, r2
                    col_count--;
 80152f8:	e797      	b.n	801522a <arm_convolve_s8+0x256>
                    sum += ker_a1 * ip_b1;
 80152fa:	f913 6b01 	ldrsb.w	r6, [r3], #1
 80152fe:	f830 7b02 	ldrh.w	r7, [r0], #2
 8015302:	fb17 2206 	smlabb	r2, r7, r6, r2
                    col_count--;
 8015306:	e796      	b.n	8015236 <arm_convolve_s8+0x262>
 8015308:	c0000001 	.word	0xc0000001

0801530c <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                        const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 801530c:	688b      	ldr	r3, [r1, #8]
 801530e:	68c0      	ldr	r0, [r0, #12]
 8015310:	4358      	muls	r0, r3
 8015312:	684b      	ldr	r3, [r1, #4]
 8015314:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8015316:	0080      	lsls	r0, r0, #2
 8015318:	4770      	bx	lr

0801531a <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims* bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims* output_dims,
                                   q7_t *output_data)
{
 801531a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015320:	9600      	str	r6, [sp, #0]
 8015322:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8015326:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) &&
 8015328:	690f      	ldr	r7, [r1, #16]
{
 801532a:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
 801532e:	e9dd c911 	ldrd	ip, r9, [sp, #68]	; 0x44
 8015332:	4686      	mov	lr, r0
 8015334:	460c      	mov	r4, r1
 8015336:	4690      	mov	r8, r2
 8015338:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) &&
 801533a:	b9af      	cbnz	r7, 8015368 <arm_convolve_wrapper_s8+0x4e>
 801533c:	694f      	ldr	r7, [r1, #20]
 801533e:	b99f      	cbnz	r7, 8015368 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->padding.h == 0) &&
 8015340:	68df      	ldr	r7, [r3, #12]
 8015342:	07bf      	lsls	r7, r7, #30
 8015344:	d110      	bne.n	8015368 <arm_convolve_wrapper_s8+0x4e>
        (input_dims->c % 4 == 0) &&
 8015346:	688f      	ldr	r7, [r1, #8]
 8015348:	2f01      	cmp	r7, #1
 801534a:	d10d      	bne.n	8015368 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) &&
 801534c:	68cf      	ldr	r7, [r1, #12]
 801534e:	2f01      	cmp	r7, #1
 8015350:	d10a      	bne.n	8015368 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.h == 1) &&
 8015352:	68b7      	ldr	r7, [r6, #8]
 8015354:	2f01      	cmp	r7, #1
 8015356:	d107      	bne.n	8015368 <arm_convolve_wrapper_s8+0x4e>
        (filter_dims->w == 1) &&
 8015358:	6877      	ldr	r7, [r6, #4]
 801535a:	2f01      	cmp	r7, #1
 801535c:	d104      	bne.n	8015368 <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 801535e:	b003      	add	sp, #12
 8015360:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 8015364:	f7ff be02 	b.w	8014f6c <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) &&
 8015368:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801536c:	2b01      	cmp	r3, #1
 801536e:	d11e      	bne.n	80153ae <arm_convolve_wrapper_s8+0x94>
 8015370:	686b      	ldr	r3, [r5, #4]
 8015372:	2b01      	cmp	r3, #1
 8015374:	d11b      	bne.n	80153ae <arm_convolve_wrapper_s8+0x94>
             (input_dims->h == 1) &&
 8015376:	6873      	ldr	r3, [r6, #4]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d118      	bne.n	80153ae <arm_convolve_wrapper_s8+0x94>
             (output_dims->w % 4 == 0) &&
 801537c:	f8dc 3008 	ldr.w	r3, [ip, #8]
             (filter_dims->h == 1) &&
 8015380:	079b      	lsls	r3, r3, #30
 8015382:	d114      	bne.n	80153ae <arm_convolve_wrapper_s8+0x94>
             (output_dims->w % 4 == 0) &&
 8015384:	682b      	ldr	r3, [r5, #0]
 8015386:	2b01      	cmp	r3, #1
 8015388:	d111      	bne.n	80153ae <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
 801538a:	9b01      	ldr	r3, [sp, #4]
 801538c:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 8015390:	9b00      	ldr	r3, [sp, #0]
 8015392:	930c      	str	r3, [sp, #48]	; 0x30
 8015394:	4642      	mov	r2, r8
 8015396:	462b      	mov	r3, r5
 8015398:	4621      	mov	r1, r4
 801539a:	4670      	mov	r0, lr
 801539c:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
 80153a0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 80153a4:	b003      	add	sp, #12
 80153a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 80153aa:	f7ff bdc7 	b.w	8014f3c <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 80153b4:	9b00      	ldr	r3, [sp, #0]
 80153b6:	930c      	str	r3, [sp, #48]	; 0x30
 80153b8:	4642      	mov	r2, r8
 80153ba:	462b      	mov	r3, r5
 80153bc:	4621      	mov	r1, r4
 80153be:	4670      	mov	r0, lr
 80153c0:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
 80153c4:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 80153c8:	b003      	add	sp, #12
 80153ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 80153ce:	f7ff be01 	b.w	8014fd4 <arm_convolve_s8>

080153d2 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params* conv_params,
                                                const cmsis_nn_dims* input_dims,
                                                const cmsis_nn_dims* filter_dims,
                                                const cmsis_nn_dims* output_dims)
{
 80153d2:	b410      	push	{r4}
 80153d4:	4604      	mov	r4, r0
 80153d6:	4608      	mov	r0, r1
 80153d8:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) &&
 80153da:	6922      	ldr	r2, [r4, #16]
 80153dc:	b9a2      	cbnz	r2, 8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 80153de:	6962      	ldr	r2, [r4, #20]
 80153e0:	b992      	cbnz	r2, 8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->padding.h == 0) &&
        (input_dims->c % 4 == 0) &&
 80153e2:	68c2      	ldr	r2, [r0, #12]
        (conv_params->padding.h == 0) &&
 80153e4:	0792      	lsls	r2, r2, #30
 80153e6:	d10f      	bne.n	8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (input_dims->c % 4 == 0) &&
 80153e8:	68a2      	ldr	r2, [r4, #8]
 80153ea:	2a01      	cmp	r2, #1
 80153ec:	d10c      	bne.n	8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) &&
 80153ee:	68e2      	ldr	r2, [r4, #12]
 80153f0:	2a01      	cmp	r2, #1
 80153f2:	d109      	bne.n	8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.h == 1) &&
 80153f4:	688a      	ldr	r2, [r1, #8]
 80153f6:	2a01      	cmp	r2, #1
 80153f8:	d106      	bne.n	8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (filter_dims->w == 1) &&
 80153fa:	684a      	ldr	r2, [r1, #4]
 80153fc:	2a01      	cmp	r2, #1
 80153fe:	d103      	bne.n	8015408 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
 8015400:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8015404:	f7ff bde3 	b.w	8014fce <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) &&
 8015408:	685a      	ldr	r2, [r3, #4]
 801540a:	2a01      	cmp	r2, #1
 801540c:	d10f      	bne.n	801542e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 801540e:	6842      	ldr	r2, [r0, #4]
 8015410:	2a01      	cmp	r2, #1
 8015412:	d10c      	bne.n	801542e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
             (input_dims->h == 1) &&
 8015414:	684a      	ldr	r2, [r1, #4]
 8015416:	2a01      	cmp	r2, #1
 8015418:	d109      	bne.n	801542e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
             (output_dims->w % 4 == 0) &&
 801541a:	689b      	ldr	r3, [r3, #8]
             (filter_dims->h == 1) &&
 801541c:	079b      	lsls	r3, r3, #30
 801541e:	d106      	bne.n	801542e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
             (output_dims->w % 4 == 0) &&
 8015420:	6803      	ldr	r3, [r0, #0]
 8015422:	2b01      	cmp	r3, #1
 8015424:	d103      	bne.n	801542e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
 8015426:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 801542a:	f7ff bd98 	b.w	8014f5e <arm_convolve_1_x_n_s8_get_buffer_size>
}
 801542e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8015432:	f7ff bf6b 	b.w	801530c <arm_convolve_s8_get_buffer_size>
	...

08015438 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 8015438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543c:	b095      	sub	sp, #84	; 0x54
 801543e:	4688      	mov	r8, r1
 8015440:	9302      	str	r3, [sp, #8]
 8015442:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 8015446:	9303      	str	r3, [sp, #12]
 8015448:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801544c:	9304      	str	r3, [sp, #16]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 801544e:	9b24      	ldr	r3, [sp, #144]	; 0x90
{
 8015450:	f8bd b088 	ldrh.w	fp, [sp, #136]	; 0x88
 8015454:	9208      	str	r2, [sp, #32]
    q7_t *out_1 = out_0 + output_ch;
 8015456:	4413      	add	r3, r2
 8015458:	930b      	str	r3, [sp, #44]	; 0x2c
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 801545a:	eb01 034b 	add.w	r3, r1, fp, lsl #1
 801545e:	9301      	str	r3, [sp, #4]
 8015460:	f00b 0303 	and.w	r3, fp, #3
 8015464:	930d      	str	r3, [sp, #52]	; 0x34
 8015466:	ea4f 039b 	mov.w	r3, fp, lsr #2
 801546a:	009a      	lsls	r2, r3, #2
 801546c:	9212      	str	r2, [sp, #72]	; 0x48
 801546e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
 8015470:	900c      	str	r0, [sp, #48]	; 0x30
 8015472:	445a      	add	r2, fp
 8015474:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015478:	9209      	str	r2, [sp, #36]	; 0x24
 801547a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 801547e:	9205      	str	r2, [sp, #20]
 8015480:	9a08      	ldr	r2, [sp, #32]
 8015482:	ea4f 0a52 	mov.w	sl, r2, lsr #1
 8015486:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801548a:	920f      	str	r2, [sp, #60]	; 0x3c
 801548c:	9a01      	ldr	r2, [sp, #4]
 801548e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015492:	930a      	str	r3, [sp, #40]	; 0x28
    const q7_t *ip_a0 = input_a;
 8015494:	4606      	mov	r6, r0
    while (row_count)
 8015496:	f04f 0901 	mov.w	r9, #1
 801549a:	2700      	movs	r7, #0
 801549c:	45ba      	cmp	sl, r7
 801549e:	f040 80b7 	bne.w	8015610 <arm_nn_mat_mult_kernel_s8_s16+0x1d8>
 80154a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80154a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154a6:	eb03 004a 	add.w	r0, r3, sl, lsl #1
 80154aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ac:	fb02 310a 	mla	r1, r2, sl, r3
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 80154b0:	9b08      	ldr	r3, [sp, #32]
 80154b2:	07db      	lsls	r3, r3, #31
 80154b4:	f140 80a3 	bpl.w	80155fe <arm_nn_mat_mult_kernel_s8_s16+0x1c6>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 80154b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154ba:	f8df e150 	ldr.w	lr, [pc, #336]	; 801560c <arm_nn_mat_mult_kernel_s8_s16+0x1d4>
 80154be:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 80154c2:	460d      	mov	r5, r1
        q31_t ch_0_out_1 = *bias++;
 80154c4:	4617      	mov	r7, r2
        while (col_count)
 80154c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154c8:	4543      	cmp	r3, r8
 80154ca:	f040 824d 	bne.w	8015968 <arm_nn_mat_mult_kernel_s8_s16+0x530>
 80154ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154d0:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 80154d2:	f00b 0303 	and.w	r3, fp, #3
 80154d6:	440b      	add	r3, r1
 80154d8:	4299      	cmp	r1, r3
 80154da:	f040 826a 	bne.w	80159b2 <arm_nn_mat_mult_kernel_s8_s16+0x57a>

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 80154de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80154e0:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 80154e4:	9b02      	ldr	r3, [sp, #8]
 80154e6:	f853 103a 	ldr.w	r1, [r3, sl, lsl #3]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80154ea:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80154ee:	409a      	lsls	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 80154f0:	ea85 0302 	eor.w	r3, r5, r2
 80154f4:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	4b43      	ldr	r3, [pc, #268]	; (8015608 <arm_nn_mat_mult_kernel_s8_s16+0x1d0>)
 80154fa:	bf06      	itte	eq
 80154fc:	2400      	moveq	r4, #0
 80154fe:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015502:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015506:	fbc2 3405 	smlal	r3, r4, r2, r5
 801550a:	2c00      	cmp	r4, #0
 801550c:	da05      	bge.n	801551a <arm_nn_mat_mult_kernel_s8_s16+0xe2>
 801550e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8015512:	199e      	adds	r6, r3, r6
 8015514:	4633      	mov	r3, r6
 8015516:	f144 0400 	adc.w	r4, r4, #0
 801551a:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801551c:	4295      	cmp	r5, r2
    result = (int32_t) (mult / (1ll << 31));
 801551e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015522:	d104      	bne.n	801552e <arm_nn_mat_mult_kernel_s8_s16+0xf6>
        result = Q31_MAX;
 8015524:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8015528:	bf08      	it	eq
 801552a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801552e:	2900      	cmp	r1, #0
 8015530:	bfd4      	ite	le
 8015532:	4249      	negle	r1, r1
 8015534:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015536:	2201      	movs	r2, #1
 8015538:	408a      	lsls	r2, r1
 801553a:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 801553c:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
 8015540:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 8015542:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8015546:	bf48      	it	mi
 8015548:	3201      	addmi	r2, #1
    if (remainder > threshold)
 801554a:	4294      	cmp	r4, r2
        ch_0_out_0 += out_offset;
 801554c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        result++;
 801554e:	bfc8      	it	gt
 8015550:	3301      	addgt	r3, #1
 8015552:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8015554:	9a03      	ldr	r2, [sp, #12]
 8015556:	4293      	cmp	r3, r2
 8015558:	bfb8      	it	lt
 801555a:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801555c:	9a04      	ldr	r2, [sp, #16]
 801555e:	4293      	cmp	r3, r2
 8015560:	bfa8      	it	ge
 8015562:	4613      	movge	r3, r2
        *out_0++ = (q7_t)ch_0_out_0;
 8015564:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015566:	f802 301a 	strb.w	r3, [r2, sl, lsl #1]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801556a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801556c:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
 8015570:	9b02      	ldr	r3, [sp, #8]
 8015572:	f853 103a 	ldr.w	r1, [r3, sl, lsl #3]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015576:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 801557a:	fa07 f404 	lsl.w	r4, r7, r4
    if ((m1 < 0) ^ (m2 < 0))
 801557e:	ea82 0304 	eor.w	r3, r2, r4
 8015582:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8015584:	2b00      	cmp	r3, #0
 8015586:	4b20      	ldr	r3, [pc, #128]	; (8015608 <arm_nn_mat_mult_kernel_s8_s16+0x1d0>)
 8015588:	bf06      	itte	eq
 801558a:	2500      	moveq	r5, #0
 801558c:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015590:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015594:	fbc4 3502 	smlal	r3, r5, r4, r2
 8015598:	2d00      	cmp	r5, #0
        *out_0++ = (q7_t)ch_0_out_0;
 801559a:	f100 0001 	add.w	r0, r0, #1
 801559e:	da04      	bge.n	80155aa <arm_nn_mat_mult_kernel_s8_s16+0x172>
 80155a0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80155a4:	199b      	adds	r3, r3, r6
 80155a6:	f145 0500 	adc.w	r5, r5, #0
 80155aa:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80155ac:	42a2      	cmp	r2, r4
    result = (int32_t) (mult / (1ll << 31));
 80155ae:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80155b2:	d104      	bne.n	80155be <arm_nn_mat_mult_kernel_s8_s16+0x186>
        result = Q31_MAX;
 80155b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80155b8:	bf08      	it	eq
 80155ba:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80155be:	2900      	cmp	r1, #0
 80155c0:	bfd4      	ite	le
 80155c2:	4249      	negle	r1, r1
 80155c4:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80155c6:	2201      	movs	r2, #1
 80155c8:	408a      	lsls	r2, r1
 80155ca:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 80155cc:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
 80155d0:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 80155d2:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 80155d6:	bf48      	it	mi
 80155d8:	3201      	addmi	r2, #1
    if (remainder > threshold)
 80155da:	4294      	cmp	r4, r2
        ch_0_out_1 += out_offset;
 80155dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        result++;
 80155de:	bfc8      	it	gt
 80155e0:	3301      	addgt	r3, #1
 80155e2:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80155e4:	9a03      	ldr	r2, [sp, #12]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	bfb8      	it	lt
 80155ea:	461a      	movlt	r2, r3
 80155ec:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80155ee:	9a04      	ldr	r2, [sp, #16]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	bfa8      	it	ge
 80155f4:	461a      	movge	r2, r3
 80155f6:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 80155f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155fa:	f802 301a 	strb.w	r3, [r2, sl, lsl #1]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	4418      	add	r0, r3
 8015602:	b015      	add	sp, #84	; 0x54
 8015604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015608:	c0000001 	.word	0xc0000001
 801560c:	ffff0000 	.word	0xffff0000
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8015610:	eb06 030b 	add.w	r3, r6, fp
 8015614:	930e      	str	r3, [sp, #56]	; 0x38
        q31_t ch_0_out_0 = *bias;
 8015616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015618:	9613      	str	r6, [sp, #76]	; 0x4c
 801561a:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
        q31_t ch_1_out_0 = *bias;
 801561e:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8015622:	9b01      	ldr	r3, [sp, #4]
 8015624:	9307      	str	r3, [sp, #28]
        const q15_t *ip_b0 = input_b;
 8015626:	f8cd 8000 	str.w	r8, [sp]
        q31_t ch_1_out_1 = *bias++;
 801562a:	9106      	str	r1, [sp, #24]
        q31_t ch_0_out_1 = *bias++;
 801562c:	4604      	mov	r4, r0
        while (col_count)
 801562e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015630:	9a00      	ldr	r2, [sp, #0]
 8015632:	4293      	cmp	r3, r2
 8015634:	f040 812e 	bne.w	8015894 <arm_nn_mat_mult_kernel_s8_s16+0x45c>
 8015638:	9b05      	ldr	r3, [sp, #20]
        while (col_count)
 801563a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801563c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801563e:	9207      	str	r2, [sp, #28]
 8015640:	441d      	add	r5, r3
 8015642:	eb0b 0603 	add.w	r6, fp, r3
 8015646:	9510      	str	r5, [sp, #64]	; 0x40
 8015648:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801564a:	4293      	cmp	r3, r2
 801564c:	f040 816f 	bne.w	801592e <arm_nn_mat_mult_kernel_s8_s16+0x4f6>
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8015650:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015652:	f853 5037 	ldr.w	r5, [r3, r7, lsl #3]
 8015656:	9b02      	ldr	r3, [sp, #8]
 8015658:	f853 c037 	ldr.w	ip, [r3, r7, lsl #3]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801565c:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
 8015660:	4098      	lsls	r0, r3
    if ((m1 < 0) ^ (m2 < 0))
 8015662:	ea85 0300 	eor.w	r3, r5, r0
 8015666:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8015668:	2b00      	cmp	r3, #0
 801566a:	4bbe      	ldr	r3, [pc, #760]	; (8015964 <arm_nn_mat_mult_kernel_s8_s16+0x52c>)
 801566c:	bf06      	itte	eq
 801566e:	2600      	moveq	r6, #0
 8015670:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015674:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015678:	fbc0 3605 	smlal	r3, r6, r0, r5
 801567c:	2e00      	cmp	r6, #0
 801567e:	da04      	bge.n	801568a <arm_nn_mat_mult_kernel_s8_s16+0x252>
 8015680:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015684:	189b      	adds	r3, r3, r2
 8015686:	f146 0600 	adc.w	r6, r6, #0
 801568a:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801568c:	4285      	cmp	r5, r0
    result = (int32_t) (mult / (1ll << 31));
 801568e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015692:	d104      	bne.n	801569e <arm_nn_mat_mult_kernel_s8_s16+0x266>
        result = Q31_MAX;
 8015694:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8015698:	bf08      	it	eq
 801569a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801569e:	f1bc 0f00 	cmp.w	ip, #0
 80156a2:	bfd4      	ite	le
 80156a4:	f1cc 0200 	rsble	r2, ip, #0
 80156a8:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80156aa:	2001      	movs	r0, #1
 80156ac:	4090      	lsls	r0, r2
 80156ae:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
 80156b0:	ea00 0503 	and.w	r5, r0, r3
    if (result < 0)
 80156b4:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 80156b6:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
 80156ba:	bf48      	it	mi
 80156bc:	3001      	addmi	r0, #1
    if (remainder > threshold)
 80156be:	4285      	cmp	r5, r0
        ch_0_out_0 += out_offset;
 80156c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        result++;
 80156c2:	bfc8      	it	gt
 80156c4:	3301      	addgt	r3, #1
 80156c6:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80156c8:	9a03      	ldr	r2, [sp, #12]
 80156ca:	4293      	cmp	r3, r2
 80156cc:	bfb8      	it	lt
 80156ce:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80156d0:	9a04      	ldr	r2, [sp, #16]
 80156d2:	4293      	cmp	r3, r2
 80156d4:	bfa8      	it	ge
 80156d6:	4613      	movge	r3, r2
        *out_0++ = (q7_t)ch_0_out_0;
 80156d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156da:	f802 3017 	strb.w	r3, [r2, r7, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80156de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80156e0:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
 80156e4:	9b02      	ldr	r3, [sp, #8]
 80156e6:	f853 2037 	ldr.w	r2, [r3, r7, lsl #3]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80156ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80156ee:	409c      	lsls	r4, r3
    if ((m1 < 0) ^ (m2 < 0))
 80156f0:	ea80 0304 	eor.w	r3, r0, r4
 80156f4:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	4b9a      	ldr	r3, [pc, #616]	; (8015964 <arm_nn_mat_mult_kernel_s8_s16+0x52c>)
 80156fa:	bf06      	itte	eq
 80156fc:	2500      	moveq	r5, #0
 80156fe:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015702:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015706:	fbc4 3500 	smlal	r3, r5, r4, r0
 801570a:	2d00      	cmp	r5, #0
 801570c:	da04      	bge.n	8015718 <arm_nn_mat_mult_kernel_s8_s16+0x2e0>
 801570e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8015712:	199b      	adds	r3, r3, r6
 8015714:	f145 0500 	adc.w	r5, r5, #0
 8015718:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801571a:	42a0      	cmp	r0, r4
    result = (int32_t) (mult / (1ll << 31));
 801571c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015720:	d104      	bne.n	801572c <arm_nn_mat_mult_kernel_s8_s16+0x2f4>
        result = Q31_MAX;
 8015722:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8015726:	bf08      	it	eq
 8015728:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801572c:	2a00      	cmp	r2, #0
 801572e:	bfd4      	ite	le
 8015730:	4252      	negle	r2, r2
 8015732:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015734:	2001      	movs	r0, #1
 8015736:	4090      	lsls	r0, r2
 8015738:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
 801573a:	ea00 0403 	and.w	r4, r0, r3
    if (result < 0)
 801573e:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 8015740:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
 8015744:	bf48      	it	mi
 8015746:	3001      	addmi	r0, #1
    if (remainder > threshold)
 8015748:	4284      	cmp	r4, r0
        ch_0_out_1 += out_offset;
 801574a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        result++;
 801574c:	bfc8      	it	gt
 801574e:	3301      	addgt	r3, #1
 8015750:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8015752:	9a03      	ldr	r2, [sp, #12]
 8015754:	4293      	cmp	r3, r2
 8015756:	bfb8      	it	lt
 8015758:	4613      	movlt	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801575a:	9a04      	ldr	r2, [sp, #16]
 801575c:	4293      	cmp	r3, r2
 801575e:	bfa8      	it	ge
 8015760:	4613      	movge	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 8015762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015764:	f802 3017 	strb.w	r3, [r2, r7, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8015768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801576a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801576e:	9b02      	ldr	r3, [sp, #8]
 8015770:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015774:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015778:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 801577a:	ea80 0301 	eor.w	r3, r0, r1
 801577e:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8015780:	2b00      	cmp	r3, #0
 8015782:	4b78      	ldr	r3, [pc, #480]	; (8015964 <arm_nn_mat_mult_kernel_s8_s16+0x52c>)
 8015784:	bf06      	itte	eq
 8015786:	2400      	moveq	r4, #0
 8015788:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 801578c:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015790:	fbc1 3400 	smlal	r3, r4, r1, r0
 8015794:	2c00      	cmp	r4, #0
 8015796:	da04      	bge.n	80157a2 <arm_nn_mat_mult_kernel_s8_s16+0x36a>
 8015798:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801579c:	195b      	adds	r3, r3, r5
 801579e:	f144 0400 	adc.w	r4, r4, #0
 80157a2:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80157a4:	4288      	cmp	r0, r1
    result = (int32_t) (mult / (1ll << 31));
 80157a6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80157aa:	d104      	bne.n	80157b6 <arm_nn_mat_mult_kernel_s8_s16+0x37e>
        result = Q31_MAX;
 80157ac:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80157b0:	bf08      	it	eq
 80157b2:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80157b6:	2a00      	cmp	r2, #0
 80157b8:	bfd4      	ite	le
 80157ba:	4252      	negle	r2, r2
 80157bc:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80157be:	2101      	movs	r1, #1
 80157c0:	4091      	lsls	r1, r2
 80157c2:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 80157c4:	ea01 0003 	and.w	r0, r1, r3
    if (result < 0)
 80157c8:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 80157ca:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 80157ce:	bf48      	it	mi
 80157d0:	3101      	addmi	r1, #1
    if (remainder > threshold)
 80157d2:	4288      	cmp	r0, r1
        ch_1_out_0 += out_offset;
 80157d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
        result++;
 80157d6:	bfc8      	it	gt
 80157d8:	3301      	addgt	r3, #1
 80157da:	4413      	add	r3, r2
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80157dc:	9a03      	ldr	r2, [sp, #12]
 80157de:	4293      	cmp	r3, r2
 80157e0:	bfb8      	it	lt
 80157e2:	4613      	movlt	r3, r2
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80157e4:	9a04      	ldr	r2, [sp, #16]
 80157e6:	4293      	cmp	r3, r2
 80157e8:	bfa8      	it	ge
 80157ea:	4613      	movge	r3, r2
        *out_0++ = (q7_t)ch_1_out_0;
 80157ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80157ee:	f802 3009 	strb.w	r3, [r2, r9]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 80157f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80157f4:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 80157f8:	9b02      	ldr	r3, [sp, #8]
 80157fa:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80157fe:	9b06      	ldr	r3, [sp, #24]
 8015800:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015804:	4083      	lsls	r3, r0
 8015806:	4618      	mov	r0, r3
    if ((m1 < 0) ^ (m2 < 0))
 8015808:	404b      	eors	r3, r1
 801580a:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 801580c:	2b00      	cmp	r3, #0
 801580e:	4b55      	ldr	r3, [pc, #340]	; (8015964 <arm_nn_mat_mult_kernel_s8_s16+0x52c>)
 8015810:	bf06      	itte	eq
 8015812:	2400      	moveq	r4, #0
 8015814:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015818:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801581c:	fbc0 3401 	smlal	r3, r4, r0, r1
 8015820:	2c00      	cmp	r4, #0
 8015822:	da04      	bge.n	801582e <arm_nn_mat_mult_kernel_s8_s16+0x3f6>
 8015824:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8015828:	195b      	adds	r3, r3, r5
 801582a:	f144 0400 	adc.w	r4, r4, #0
 801582e:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015830:	4281      	cmp	r1, r0
    result = (int32_t) (mult / (1ll << 31));
 8015832:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015836:	d104      	bne.n	8015842 <arm_nn_mat_mult_kernel_s8_s16+0x40a>
        result = Q31_MAX;
 8015838:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 801583c:	bf08      	it	eq
 801583e:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015842:	2a00      	cmp	r2, #0
 8015844:	bfd4      	ite	le
 8015846:	4252      	negle	r2, r2
 8015848:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 801584a:	2101      	movs	r1, #1
 801584c:	4091      	lsls	r1, r2
 801584e:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 8015850:	ea01 0003 	and.w	r0, r1, r3
    if (result < 0)
 8015854:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 8015856:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 801585a:	bf48      	it	mi
 801585c:	3101      	addmi	r1, #1
        ch_1_out_1 += out_offset;
 801585e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015860:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (remainder > threshold)
 8015862:	4288      	cmp	r0, r1
        result++;
 8015864:	bfc8      	it	gt
 8015866:	3301      	addgt	r3, #1
 8015868:	4413      	add	r3, r2
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801586a:	9a03      	ldr	r2, [sp, #12]
 801586c:	4293      	cmp	r3, r2
 801586e:	bfb8      	it	lt
 8015870:	4613      	movlt	r3, r2
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8015872:	9a04      	ldr	r2, [sp, #16]
 8015874:	4293      	cmp	r3, r2
 8015876:	bfa8      	it	ge
 8015878:	4613      	movge	r3, r2
        *out_1++ = (q7_t)ch_1_out_1;
 801587a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801587c:	f802 3009 	strb.w	r3, [r2, r9]
        ip_a0 += num_col_a;
 8015880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015884:	441e      	add	r6, r3
        row_count--;
 8015886:	9b05      	ldr	r3, [sp, #20]
 8015888:	4413      	add	r3, r2
 801588a:	3701      	adds	r7, #1
 801588c:	9305      	str	r3, [sp, #20]
 801588e:	f109 0902 	add.w	r9, r9, #2
 8015892:	e603      	b.n	801549c <arm_nn_mat_mult_kernel_s8_s16+0x64>
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8015894:	9b00      	ldr	r3, [sp, #0]
 8015896:	f856 2b04 	ldr.w	r2, [r6], #4
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	9310      	str	r3, [sp, #64]	; 0x40
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801589e:	9b07      	ldr	r3, [sp, #28]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	9311      	str	r3, [sp, #68]	; 0x44
  return (op1 >> op2) | (op1 << (32U - op2));
 80158a4:	ea4f 2332 	mov.w	r3, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80158a8:	fa2f f383 	sxtb16	r3, r3
 80158ac:	fa2f f282 	sxtb16	r2, r2
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 80158b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80158b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80158b6:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80158ba:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 80158be:	b292      	uxth	r2, r2
 80158c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  memcpy(&val, *in_q7, 4);
 80158c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80158c8:	950e      	str	r5, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 80158ca:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80158ce:	fa2f f58c 	sxtb16	r5, ip
 80158d2:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 80158d6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80158da:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80158de:	ea4c 4c13 	orr.w	ip, ip, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80158e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80158ea:	fb22 0005 	smlad	r0, r2, r5, r0
 80158ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80158f0:	fb22 4405 	smlad	r4, r2, r5, r4
 80158f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158f6:	fb23 1102 	smlad	r1, r3, r2, r1
 80158fa:	462a      	mov	r2, r5
 80158fc:	9d06      	ldr	r5, [sp, #24]
 80158fe:	fb23 5302 	smlad	r3, r3, r2, r5
 8015902:	9a00      	ldr	r2, [sp, #0]
 8015904:	9d07      	ldr	r5, [sp, #28]
 8015906:	9306      	str	r3, [sp, #24]
  memcpy(&val, *in_q15, 4);
 8015908:	3208      	adds	r2, #8
 801590a:	9b00      	ldr	r3, [sp, #0]
 801590c:	9200      	str	r2, [sp, #0]
 801590e:	9a07      	ldr	r2, [sp, #28]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	6852      	ldr	r2, [r2, #4]
  *in_q15 += 2;
 8015914:	3508      	adds	r5, #8
 8015916:	9507      	str	r5, [sp, #28]
 8015918:	fb2e 0003 	smlad	r0, lr, r3, r0
 801591c:	fb2e 4402 	smlad	r4, lr, r2, r4
 8015920:	fb2c 1103 	smlad	r1, ip, r3, r1
 8015924:	9b06      	ldr	r3, [sp, #24]
 8015926:	fb2c 3302 	smlad	r3, ip, r2, r3
 801592a:	9306      	str	r3, [sp, #24]
            col_count--;
 801592c:	e67f      	b.n	801562e <arm_nn_mat_mult_kernel_s8_s16+0x1f6>
            q7_t a0 = *ip_a0++;
 801592e:	f913 2b01 	ldrsb.w	r2, [r3], #1
 8015932:	4615      	mov	r5, r2
            q15_t b0 = *ip_b0++;
 8015934:	9a00      	ldr	r2, [sp, #0]
 8015936:	f932 eb02 	ldrsh.w	lr, [r2], #2
 801593a:	9200      	str	r2, [sp, #0]
            q7_t a1 = *ip_a1++;
 801593c:	f916 2b01 	ldrsb.w	r2, [r6], #1
 8015940:	920e      	str	r2, [sp, #56]	; 0x38
            q15_t b1 = *ip_b1++;
 8015942:	9a07      	ldr	r2, [sp, #28]
 8015944:	f932 cb02 	ldrsh.w	ip, [r2], #2
 8015948:	9207      	str	r2, [sp, #28]
            ch_0_out_0 += a0 * b0;
 801594a:	fb1e 0005 	smlabb	r0, lr, r5, r0
            ch_1_out_0 += a1 * b0;
 801594e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
 8015950:	fb1c 4405 	smlabb	r4, ip, r5, r4
            ch_1_out_1 += a1 * b1;
 8015954:	9d06      	ldr	r5, [sp, #24]
            ch_1_out_0 += a1 * b0;
 8015956:	fb1e 1102 	smlabb	r1, lr, r2, r1
            ch_1_out_1 += a1 * b1;
 801595a:	fb1c 5202 	smlabb	r2, ip, r2, r5
 801595e:	9206      	str	r2, [sp, #24]
            col_count--;
 8015960:	e672      	b.n	8015648 <arm_nn_mat_mult_kernel_s8_s16+0x210>
 8015962:	bf00      	nop
 8015964:	c0000001 	.word	0xc0000001
  memcpy(&val, *in_q7, 4);
 8015968:	f855 3b04 	ldr.w	r3, [r5], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 801596c:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015970:	fa2f fc8c 	sxtb16	ip, ip
 8015974:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 8015978:	ea0c 040e 	and.w	r4, ip, lr
 801597c:	ea44 4413 	orr.w	r4, r4, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 8015980:	b29b      	uxth	r3, r3
 8015982:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015986:	f8d8 c000 	ldr.w	ip, [r8]
 801598a:	fb23 2c0c 	smlad	ip, r3, ip, r2
 801598e:	9a01      	ldr	r2, [sp, #4]
 8015990:	6812      	ldr	r2, [r2, #0]
 8015992:	fb23 7302 	smlad	r3, r3, r2, r7
  memcpy(&val, *in_q15, 4);
 8015996:	9e01      	ldr	r6, [sp, #4]
 8015998:	9f01      	ldr	r7, [sp, #4]
 801599a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  *in_q15 += 2;
 801599e:	687f      	ldr	r7, [r7, #4]
 80159a0:	3608      	adds	r6, #8
 80159a2:	f108 0808 	add.w	r8, r8, #8
 80159a6:	9601      	str	r6, [sp, #4]
 80159a8:	fb24 c202 	smlad	r2, r4, r2, ip
 80159ac:	fb24 3707 	smlad	r7, r4, r7, r3
            col_count--;
 80159b0:	e589      	b.n	80154c6 <arm_nn_mat_mult_kernel_s8_s16+0x8e>
            q7_t a0 = *ip_a0++;
 80159b2:	f911 4b01 	ldrsb.w	r4, [r1], #1
            ch_0_out_0 += a0 * b0;
 80159b6:	f838 5b02 	ldrh.w	r5, [r8], #2
            ch_0_out_1 += a0 * b1;
 80159ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
            ch_0_out_0 += a0 * b0;
 80159bc:	fb15 2204 	smlabb	r2, r5, r4, r2
            ch_0_out_1 += a0 * b1;
 80159c0:	f836 5b02 	ldrh.w	r5, [r6], #2
 80159c4:	960a      	str	r6, [sp, #40]	; 0x28
 80159c6:	fb15 7704 	smlabb	r7, r5, r4, r7
            col_count--;
 80159ca:	e585      	b.n	80154d8 <arm_nn_mat_mult_kernel_s8_s16+0xa0>

080159cc <arm_fully_connected_s8>:
                       const q7_t *kernel,
                       const cmsis_nn_dims *bias_dims,
                       const int32_t *bias,
                       const cmsis_nn_dims *output_dims,
                       q7_t *output)
{
 80159cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159d0:	b08a      	sub	sp, #40	; 0x28
 80159d2:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 80159d6:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 80159da:	681d      	ldr	r5, [r3, #0]
{
 80159dc:	460c      	mov	r4, r1
 80159de:	4616      	mov	r6, r2

    while (batch_cnt)
 80159e0:	b91d      	cbnz	r5, 80159ea <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 80159e2:	4628      	mov	r0, r5
 80159e4:	b00a      	add	sp, #40	; 0x28
 80159e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 80159ea:	6923      	ldr	r3, [r4, #16]
 80159ec:	9308      	str	r3, [sp, #32]
 80159ee:	68e3      	ldr	r3, [r4, #12]
 80159f0:	9307      	str	r3, [sp, #28]
 80159f2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80159f6:	9306      	str	r3, [sp, #24]
 80159f8:	f8d9 3000 	ldr.w	r3, [r9]
 80159fc:	9305      	str	r3, [sp, #20]
 80159fe:	6873      	ldr	r3, [r6, #4]
 8015a00:	9304      	str	r3, [sp, #16]
 8015a02:	6833      	ldr	r3, [r6, #0]
 8015a04:	9303      	str	r3, [sp, #12]
 8015a06:	68a3      	ldr	r3, [r4, #8]
 8015a08:	9302      	str	r3, [sp, #8]
 8015a0a:	6863      	ldr	r3, [r4, #4]
 8015a0c:	9301      	str	r3, [sp, #4]
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	9300      	str	r3, [sp, #0]
 8015a12:	4638      	mov	r0, r7
 8015a14:	4643      	mov	r3, r8
 8015a16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015a18:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015a1a:	f000 fca5 	bl	8016368 <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 8015a1e:	f8d9 3000 	ldr.w	r3, [r9]
 8015a22:	441f      	add	r7, r3
        output += output_dims->c;
 8015a24:	f8da 300c 	ldr.w	r3, [sl, #12]
        batch_cnt--;
 8015a28:	3d01      	subs	r5, #1
        output += output_dims->c;
 8015a2a:	4498      	add	r8, r3
        batch_cnt--;
 8015a2c:	e7d8      	b.n	80159e0 <arm_fully_connected_s8+0x14>

08015a2e <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 8015a2e:	2000      	movs	r0, #0
 8015a30:	4770      	bx	lr
	...

08015a34 <arm_nn_accumulate_q7_to_q15>:
 * @addtogroup NNBasicMath
 * @{
 */

void arm_nn_accumulate_q7_to_q15(q15_t *pDst, const q7_t *pSrc, uint32_t length)
{
 8015a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    q15_t *pCnt = pDst;
    const q7_t *pV = pSrc;
    q31_t v1, v2, vo1, vo2;
    int32_t cnt = length >> 2;
 8015a38:	0897      	lsrs	r7, r2, #2
    {
        q31_t value = arm_nn_read_q7x4_ia(&pV);
        v1 = __SXTB16(__ROR((uint32_t)value, 8));
        v2 = __SXTB16(value);
#ifndef ARM_MATH_BIG_ENDIAN
        vo2 = (q31_t)__PKHTB(v1, v2, 16);
 8015a3a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8015aa8 <arm_nn_accumulate_q7_to_q15+0x74>
    int32_t cnt = length >> 2;
 8015a3e:	46bc      	mov	ip, r7
    const q7_t *pV = pSrc;
 8015a40:	468e      	mov	lr, r1
    q15_t *pCnt = pDst;
 8015a42:	4604      	mov	r4, r0
    while (cnt > 0l)
 8015a44:	f1bc 0f00 	cmp.w	ip, #0
 8015a48:	d10a      	bne.n	8015a60 <arm_nn_accumulate_q7_to_q15+0x2c>
 8015a4a:	eb01 0187 	add.w	r1, r1, r7, lsl #2
        in = arm_nn_read_q15x2(pCnt);
        write_q15x2_ia(&pCnt, __QADD16(vo2, in));

        cnt--;
    }
    cnt = length & 0x3;
 8015a4e:	f002 0203 	and.w	r2, r2, #3
 8015a52:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8015a56:	440a      	add	r2, r1
    while (cnt > 0l)
 8015a58:	4291      	cmp	r1, r2
 8015a5a:	d11d      	bne.n	8015a98 <arm_nn_accumulate_q7_to_q15+0x64>
    {
        *pCnt++ += *pV++;
        cnt--;
    }
}
 8015a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memcpy(&val, *in_q7, 4);
 8015a60:	f85e 5b04 	ldr.w	r5, [lr], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8015a64:	ea4f 2335 	mov.w	r3, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015a68:	fa2f f383 	sxtb16	r3, r3
 8015a6c:	fa2f f585 	sxtb16	r5, r5
        vo1 = (q31_t)__PKHBT(v2, v1, 16);
 8015a70:	b2ae      	uxth	r6, r5
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a72:	f8d4 9000 	ldr.w	r9, [r4]
 8015a76:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8015a7a:	fa96 f619 	qadd16	r6, r6, r9
        vo2 = (q31_t)__PKHTB(v1, v2, 16);
 8015a7e:	ea03 0308 	and.w	r3, r3, r8
 8015a82:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8015a86:	6026      	str	r6, [r4, #0]
 8015a88:	6865      	ldr	r5, [r4, #4]
 8015a8a:	fa93 f315 	qadd16	r3, r3, r5
 8015a8e:	6063      	str	r3, [r4, #4]
        cnt--;
 8015a90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8015a94:	3408      	adds	r4, #8
 8015a96:	e7d5      	b.n	8015a44 <arm_nn_accumulate_q7_to_q15+0x10>
        *pCnt++ += *pV++;
 8015a98:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8015a9c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8015aa0:	4423      	add	r3, r4
 8015aa2:	f820 3c02 	strh.w	r3, [r0, #-2]
        cnt--;
 8015aa6:	e7d7      	b.n	8015a58 <arm_nn_accumulate_q7_to_q15+0x24>
 8015aa8:	ffff0000 	.word	0xffff0000

08015aac <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 8015aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab0:	b09b      	sub	sp, #108	; 0x6c
 8015ab2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
        lhs_offset_contribution1 *= lhs_offset;

        lhs_offset_contribution0 += bias[rhs_rows_idx];
        lhs_offset_contribution1 += bias[rhs_rows_idx + 1];

        int32_t lhs_rows_idx = lhs_rows >> 1;
 8015ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 8015ab8:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8015abc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
{
 8015abe:	900c      	str	r0, [sp, #48]	; 0x30
        int32_t lhs_rows_idx = lhs_rows >> 1;
 8015ac0:	105b      	asrs	r3, r3, #1
 8015ac2:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 8015ac4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8015ac8:	9310      	str	r3, [sp, #64]	; 0x40
 8015aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
 8015acc:	9113      	str	r1, [sp, #76]	; 0x4c
 8015ace:	4353      	muls	r3, r2
 8015ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8015ad2:	9100      	str	r1, [sp, #0]
 8015ad4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015ad8:	f1bb 0f00 	cmp.w	fp, #0
 8015adc:	930a      	str	r3, [sp, #40]	; 0x28
 8015ade:	f02b 030f 	bic.w	r3, fp, #15
 8015ae2:	bfb8      	it	lt
 8015ae4:	2300      	movlt	r3, #0
 8015ae6:	9308      	str	r3, [sp, #32]
 8015ae8:	9a08      	ldr	r2, [sp, #32]
 8015aea:	ebab 0303 	sub.w	r3, fp, r3
 8015aee:	4593      	cmp	fp, r2
 8015af0:	bfb8      	it	lt
 8015af2:	2300      	movlt	r3, #0
 8015af4:	445b      	add	r3, fp
 8015af6:	9316      	str	r3, [sp, #88]	; 0x58
 8015af8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	9315      	str	r3, [sp, #84]	; 0x54
 8015afe:	2304      	movs	r3, #4
 8015b00:	9306      	str	r3, [sp, #24]
 8015b02:	2300      	movs	r3, #0
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b08:	3b01      	subs	r3, #1
 8015b0a:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8015b0c:	f1ab 030f 	sub.w	r3, fp, #15
 8015b10:	9314      	str	r3, [sp, #80]	; 0x50
            dst_ptr[1] = (q7_t)res11;
 8015b12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b14:	3301      	adds	r3, #1
 8015b16:	9319      	str	r3, [sp, #100]	; 0x64
 8015b18:	9a01      	ldr	r2, [sp, #4]
 8015b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b1c:	4413      	add	r3, r2
 8015b1e:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8015b20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b22:	4293      	cmp	r3, r2
 8015b24:	f340 8395 	ble.w	8016252 <arm_nn_mat_mult_nt_t_s8+0x7a6>
 8015b28:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
 8015b2a:	9800      	ldr	r0, [sp, #0]
        q31_t lhs_offset_contribution1 = 0;
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	3b01      	subs	r3, #1
        q31_t lhs_offset_contribution0 = 0;
 8015b30:	4611      	mov	r1, r2
        for (int32_t x = 0; x < rhs_cols; ++x)
 8015b32:	f1c0 0001 	rsb	r0, r0, #1
 8015b36:	e005      	b.n	8015b44 <arm_nn_mat_mult_nt_t_s8+0x98>
            lhs_offset_contribution0 += rhs[x];
 8015b38:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 8015b3c:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8015b3e:	f913 400b 	ldrsb.w	r4, [r3, fp]
 8015b42:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 8015b44:	18c4      	adds	r4, r0, r3
 8015b46:	455c      	cmp	r4, fp
 8015b48:	dbf6      	blt.n	8015b38 <arm_nn_mat_mult_nt_t_s8+0x8c>
        lhs_offset_contribution0 += bias[rhs_rows_idx];
 8015b4a:	9801      	ldr	r0, [sp, #4]
 8015b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015b52:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015b54:	fb00 3301 	mla	r3, r0, r1, r3
 8015b58:	9304      	str	r3, [sp, #16]
        lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 8015b5a:	9906      	ldr	r1, [sp, #24]
 8015b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b5e:	585b      	ldr	r3, [r3, r1]
 8015b60:	fb00 3302 	mla	r3, r0, r2, r3
 8015b64:	9305      	str	r3, [sp, #20]
        while (lhs_rows_idx)
 8015b66:	9b08      	ldr	r3, [sp, #32]
 8015b68:	9a00      	ldr	r2, [sp, #0]
 8015b6a:	3b01      	subs	r3, #1
 8015b6c:	18d3      	adds	r3, r2, r3
 8015b6e:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 8015b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b72:	9302      	str	r3, [sp, #8]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 8015b74:	9b11      	ldr	r3, [sp, #68]	; 0x44
            lhs_rows_idx--;
 8015b76:	9303      	str	r3, [sp, #12]
        while (lhs_rows_idx)
 8015b78:	9b03      	ldr	r3, [sp, #12]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	f000 821e 	beq.w	8015fbc <arm_nn_mat_mult_nt_t_s8+0x510>
 8015b80:	9b00      	ldr	r3, [sp, #0]
            q31_t res10 = lhs_offset_contribution0;
 8015b82:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015b86:	eb03 0e0b 	add.w	lr, r3, fp
 8015b8a:	9b02      	ldr	r3, [sp, #8]
 8015b8c:	eb03 0c0b 	add.w	ip, r3, fp
            q31_t res11 = lhs_offset_contribution1;
 8015b90:	9b05      	ldr	r3, [sp, #20]
 8015b92:	9309      	str	r3, [sp, #36]	; 0x24
            q31_t res01 = lhs_offset_contribution1;
 8015b94:	461a      	mov	r2, r3
            int32_t rhs_cols_idx = 0;
 8015b96:	2400      	movs	r4, #0
            q31_t res00 = lhs_offset_contribution0;
 8015b98:	464b      	mov	r3, r9
 8015b9a:	e0cf      	b.n	8015d3c <arm_nn_mat_mult_nt_t_s8+0x290>
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015b9c:	9900      	ldr	r1, [sp, #0]
 8015b9e:	5909      	ldr	r1, [r1, r4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ba0:	fa2f f681 	sxtb16	r6, r1
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8015ba4:	9802      	ldr	r0, [sp, #8]
 8015ba6:	5900      	ldr	r0, [r0, r4]
 8015ba8:	fa2f f880 	sxtb16	r8, r0
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8015bac:	f8de 5000 	ldr.w	r5, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 8015bb0:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bb4:	fa2f f181 	sxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8015bb8:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bbc:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015bc0:	fb28 3306 	smlad	r3, r8, r6, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bc4:	fa2f f785 	sxtb16	r7, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015bc8:	fb20 3301 	smlad	r3, r0, r1, r3
 8015bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  return (op1 >> op2) | (op1 << (32U - op2));
 8015bce:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bd2:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015bd6:	fb28 2807 	smlad	r8, r8, r7, r2
 8015bda:	fb20 8005 	smlad	r0, r0, r5, r8
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8015bde:	f8dc 2000 	ldr.w	r2, [ip]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015be2:	fa2f f882 	sxtb16	r8, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8015be6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015bea:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015bee:	fb28 9606 	smlad	r6, r8, r6, r9
 8015bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf4:	fb28 3807 	smlad	r8, r8, r7, r3
 8015bf8:	fb22 6101 	smlad	r1, r2, r1, r6
                val1  = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015bfc:	f8da 6004 	ldr.w	r6, [sl, #4]
 8015c00:	fb22 8305 	smlad	r3, r2, r5, r8
 8015c04:	9309      	str	r3, [sp, #36]	; 0x24
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8015c06:	f8de 5004 	ldr.w	r5, [lr, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c0a:	fa2f f886 	sxtb16	r8, r6
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8015c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c10:	685f      	ldr	r7, [r3, #4]
 8015c12:	fa2f f987 	sxtb16	r9, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c16:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c1a:	fa2f f686 	sxtb16	r6, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c1e:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c22:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c28:	fb29 3308 	smlad	r3, r9, r8, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c2c:	fa2f f285 	sxtb16	r2, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c30:	fb27 3306 	smlad	r3, r7, r6, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c34:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c38:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c3c:	fb29 0902 	smlad	r9, r9, r2, r0
 8015c40:	fb27 9905 	smlad	r9, r7, r5, r9
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8015c44:	f8dc 7004 	ldr.w	r7, [ip, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c48:	fa2f f087 	sxtb16	r0, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c4c:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c50:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c54:	fb20 1808 	smlad	r8, r0, r8, r1
 8015c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c5a:	fb20 1202 	smlad	r2, r0, r2, r1
 8015c5e:	fb27 8806 	smlad	r8, r7, r6, r8
                val1  = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015c62:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015c66:	fb27 2205 	smlad	r2, r7, r5, r2
 8015c6a:	9209      	str	r2, [sp, #36]	; 0x24
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8015c6c:	f8de 1008 	ldr.w	r1, [lr, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c70:	fa2f f680 	sxtb16	r6, r0
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8015c74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c76:	6895      	ldr	r5, [r2, #8]
 8015c78:	fa2f f785 	sxtb16	r7, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c7c:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c80:	fa2f f080 	sxtb16	r0, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c84:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c88:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c8c:	fb27 3306 	smlad	r3, r7, r6, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c90:	fa2f f281 	sxtb16	r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015c94:	fb25 3300 	smlad	r3, r5, r0, r3
 8015c98:	9317      	str	r3, [sp, #92]	; 0x5c
  return (op1 >> op2) | (op1 << (32U - op2));
 8015c9a:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015c9e:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015ca2:	fb27 9702 	smlad	r7, r7, r2, r9
 8015ca6:	fb25 7701 	smlad	r7, r5, r1, r7
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8015caa:	f8dc 5008 	ldr.w	r5, [ip, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cae:	fa2f f985 	sxtb16	r9, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8015cb2:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cb6:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015cba:	fb29 8606 	smlad	r6, r9, r6, r8
 8015cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc0:	fb29 3902 	smlad	r9, r9, r2, r3
 8015cc4:	fb25 6600 	smlad	r6, r5, r0, r6
                val1  = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8015cc8:	f8da 000c 	ldr.w	r0, [sl, #12]
 8015ccc:	fb25 9901 	smlad	r9, r5, r1, r9
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8015cd0:	f8de 100c 	ldr.w	r1, [lr, #12]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cd4:	fa2f f580 	sxtb16	r5, r0
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8015cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cda:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8015cde:	fa2f f288 	sxtb16	r2, r8
  return (op1 >> op2) | (op1 << (32U - op2));
 8015ce2:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015ce6:	fa2f f080 	sxtb16	r0, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8015cea:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cee:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015cf4:	fb22 3305 	smlad	r3, r2, r5, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015cf8:	fa2f fa81 	sxtb16	sl, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015cfc:	fb28 3300 	smlad	r3, r8, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8015d00:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015d04:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015d08:	fb22 720a 	smlad	r2, r2, sl, r7
 8015d0c:	fb28 2201 	smlad	r2, r8, r1, r2
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 8015d10:	f8dc 700c 	ldr.w	r7, [ip, #12]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015d14:	fa2f fc87 	sxtb16	ip, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8015d18:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015d1c:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015d20:	fb2c 6505 	smlad	r5, ip, r5, r6
 8015d24:	fb2c 9c0a 	smlad	ip, ip, sl, r9
 8015d28:	fb27 5900 	smlad	r9, r7, r0, r5
 8015d2c:	fb27 c101 	smlad	r1, r7, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8015d30:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8015d34:	9109      	str	r1, [sp, #36]	; 0x24
 8015d36:	3410      	adds	r4, #16
 8015d38:	f10e 0e10 	add.w	lr, lr, #16
 8015d3c:	9902      	ldr	r1, [sp, #8]
 8015d3e:	4421      	add	r1, r4
 8015d40:	910d      	str	r1, [sp, #52]	; 0x34
 8015d42:	9900      	ldr	r1, [sp, #0]
 8015d44:	eb01 0a04 	add.w	sl, r1, r4
 8015d48:	f10c 0110 	add.w	r1, ip, #16
 8015d4c:	9112      	str	r1, [sp, #72]	; 0x48
 8015d4e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015d50:	42a1      	cmp	r1, r4
 8015d52:	f73f af23 	bgt.w	8015b9c <arm_nn_mat_mult_nt_t_s8+0xf0>
 8015d56:	9908      	ldr	r1, [sp, #32]
 8015d58:	9d02      	ldr	r5, [sp, #8]
 8015d5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015d5c:	440d      	add	r5, r1
 8015d5e:	1e68      	subs	r0, r5, #1
 8015d60:	468e      	mov	lr, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8015d62:	45de      	cmp	lr, fp
 8015d64:	f2c0 8112 	blt.w	8015f8c <arm_nn_mat_mult_nt_t_s8+0x4e0>
                lhs_value  = lhs_ptr[rhs_cols];
 8015d68:	9916      	ldr	r1, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 8015d6a:	9801      	ldr	r0, [sp, #4]
                lhs_value  = lhs_ptr[rhs_cols];
 8015d6c:	1869      	adds	r1, r5, r1
 8015d6e:	9102      	str	r1, [sp, #8]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 8015d70:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015d72:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8015d76:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015d78:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015d7c:	ea24 77e4 	bic.w	r7, r4, r4, asr #31
 8015d80:	40bb      	lsls	r3, r7
    if ((m1 < 0) ^ (m2 < 0))
 8015d82:	ea85 0103 	eor.w	r1, r5, r3
 8015d86:	0fc9      	lsrs	r1, r1, #31
        mult = 1 - mult;
 8015d88:	2900      	cmp	r1, #0
 8015d8a:	498b      	ldr	r1, [pc, #556]	; (8015fb8 <arm_nn_mat_mult_nt_t_s8+0x50c>)
 8015d8c:	bf06      	itte	eq
 8015d8e:	2000      	moveq	r0, #0
 8015d90:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 8015d94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015d98:	fbc3 1005 	smlal	r1, r0, r3, r5
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	da04      	bge.n	8015daa <arm_nn_mat_mult_nt_t_s8+0x2fe>
 8015da0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8015da4:	1989      	adds	r1, r1, r6
 8015da6:	f140 0000 	adc.w	r0, r0, #0
 8015daa:	0fc9      	lsrs	r1, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015dac:	429d      	cmp	r5, r3
    result = (int32_t) (mult / (1ll << 31));
 8015dae:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015db2:	d104      	bne.n	8015dbe <arm_nn_mat_mult_nt_t_s8+0x312>
        result = Q31_MAX;
 8015db4:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8015db8:	bf08      	it	eq
 8015dba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015dbe:	2c00      	cmp	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015dc0:	f04f 0301 	mov.w	r3, #1
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015dc4:	bfd4      	ite	le
 8015dc6:	4264      	negle	r4, r4
 8015dc8:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015dca:	fa03 fc04 	lsl.w	ip, r3, r4
 8015dce:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    q31_t threshold = remainder_mask >> 1;
 8015dd2:	fa4c f803 	asr.w	r8, ip, r3
    if (result < 0)
 8015dd6:	fa51 f304 	asrs.w	r3, r1, r4
 8015dda:	930d      	str	r3, [sp, #52]	; 0x34
    int32_t remainder = remainder_mask & dividend;
 8015ddc:	ea0c 0001 	and.w	r0, ip, r1
        threshold++;
 8015de0:	bf4c      	ite	mi
 8015de2:	f108 0301 	addmi.w	r3, r8, #1
    q31_t threshold = remainder_mask >> 1;
 8015de6:	4643      	movpl	r3, r8
    if (remainder > threshold)
 8015de8:	4298      	cmp	r0, r3
        result++;
 8015dea:	bfc8      	it	gt
 8015dec:	9b0d      	ldrgt	r3, [sp, #52]	; 0x34
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 8015dee:	9806      	ldr	r0, [sp, #24]
 8015df0:	9e06      	ldr	r6, [sp, #24]
 8015df2:	bfc4      	itt	gt
 8015df4:	3301      	addgt	r3, #1
 8015df6:	930d      	strgt	r3, [sp, #52]	; 0x34
 8015df8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dfa:	5818      	ldr	r0, [r3, r0]
 8015dfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015dfe:	599e      	ldr	r6, [r3, r6]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015e00:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8015e04:	409a      	lsls	r2, r3
 8015e06:	9312      	str	r3, [sp, #72]	; 0x48
    if ((m1 < 0) ^ (m2 < 0))
 8015e08:	ea80 0302 	eor.w	r3, r0, r2
 8015e0c:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	4b69      	ldr	r3, [pc, #420]	; (8015fb8 <arm_nn_mat_mult_nt_t_s8+0x50c>)
 8015e12:	bf06      	itte	eq
 8015e14:	f04f 0e00 	moveq.w	lr, #0
 8015e18:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8015e1c:	f04f 3eff 	movne.w	lr, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015e20:	fbc2 3e00 	smlal	r3, lr, r2, r0
 8015e24:	f1be 0f00 	cmp.w	lr, #0
 8015e28:	da04      	bge.n	8015e34 <arm_nn_mat_mult_nt_t_s8+0x388>
 8015e2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e2e:	185b      	adds	r3, r3, r1
 8015e30:	f14e 0e00 	adc.w	lr, lr, #0
 8015e34:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015e36:	4290      	cmp	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 8015e38:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015e3c:	d104      	bne.n	8015e48 <arm_nn_mat_mult_nt_t_s8+0x39c>
        result = Q31_MAX;
 8015e3e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8015e42:	bf08      	it	eq
 8015e44:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015e48:	2e00      	cmp	r6, #0
 8015e4a:	bfd4      	ite	le
 8015e4c:	4272      	negle	r2, r6
 8015e4e:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015e50:	2101      	movs	r1, #1
 8015e52:	fa01 f602 	lsl.w	r6, r1, r2
 8015e56:	3e01      	subs	r6, #1
    int32_t remainder = remainder_mask & dividend;
 8015e58:	ea06 0103 	and.w	r1, r6, r3
    q31_t threshold = remainder_mask >> 1;
 8015e5c:	ea4f 0e66 	mov.w	lr, r6, asr #1
    if (result < 0)
 8015e60:	4113      	asrs	r3, r2
        threshold++;
 8015e62:	bf4c      	ite	mi
 8015e64:	f10e 0a01 	addmi.w	sl, lr, #1
    q31_t threshold = remainder_mask >> 1;
 8015e68:	46f2      	movpl	sl, lr
    if (remainder > threshold)
 8015e6a:	4551      	cmp	r1, sl
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015e6c:	fa09 fa07 	lsl.w	sl, r9, r7
    if ((m1 < 0) ^ (m2 < 0))
 8015e70:	ea85 090a 	eor.w	r9, r5, sl
 8015e74:	ea4f 79d9 	mov.w	r9, r9, lsr #31
        mult = 1 - mult;
 8015e78:	494f      	ldr	r1, [pc, #316]	; (8015fb8 <arm_nn_mat_mult_nt_t_s8+0x50c>)
        result++;
 8015e7a:	bfc8      	it	gt
 8015e7c:	3301      	addgt	r3, #1
        mult = 1 - mult;
 8015e7e:	f1b9 0f00 	cmp.w	r9, #0
 8015e82:	bf0b      	itete	eq
 8015e84:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 8015e88:	4689      	movne	r9, r1
 8015e8a:	2700      	moveq	r7, #0
 8015e8c:	f04f 37ff 	movne.w	r7, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015e90:	fbca 9705 	smlal	r9, r7, sl, r5
 8015e94:	2f00      	cmp	r7, #0
 8015e96:	da05      	bge.n	8015ea4 <arm_nn_mat_mult_nt_t_s8+0x3f8>
 8015e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e9c:	eb19 0901 	adds.w	r9, r9, r1
 8015ea0:	f147 0700 	adc.w	r7, r7, #0
 8015ea4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015ea8:	4555      	cmp	r5, sl
    result = (int32_t) (mult / (1ll << 31));
 8015eaa:	ea49 0947 	orr.w	r9, r9, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015eae:	d104      	bne.n	8015eba <arm_nn_mat_mult_nt_t_s8+0x40e>
        result = Q31_MAX;
 8015eb0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8015eb4:	bf08      	it	eq
 8015eb6:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015eba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015ebc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    int32_t remainder = remainder_mask & dividend;
 8015ebe:	ea09 0c0c 	and.w	ip, r9, ip
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015ec2:	408f      	lsls	r7, r1
    if (result < 0)
 8015ec4:	fa59 f904 	asrs.w	r9, r9, r4
        threshold++;
 8015ec8:	bf48      	it	mi
 8015eca:	f108 0801 	addmi.w	r8, r8, #1
    if ((m1 < 0) ^ (m2 < 0))
 8015ece:	ea80 0407 	eor.w	r4, r0, r7
 8015ed2:	0fe4      	lsrs	r4, r4, #31
    if (remainder > threshold)
 8015ed4:	45c4      	cmp	ip, r8
        mult = 1 - mult;
 8015ed6:	4938      	ldr	r1, [pc, #224]	; (8015fb8 <arm_nn_mat_mult_nt_t_s8+0x50c>)
        result++;
 8015ed8:	bfc8      	it	gt
 8015eda:	f109 0901 	addgt.w	r9, r9, #1
        mult = 1 - mult;
 8015ede:	2c00      	cmp	r4, #0
 8015ee0:	bf0b      	itete	eq
 8015ee2:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8015ee6:	460c      	movne	r4, r1
 8015ee8:	2500      	moveq	r5, #0
 8015eea:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8015eee:	fbc7 4500 	smlal	r4, r5, r7, r0
 8015ef2:	2d00      	cmp	r5, #0
 8015ef4:	da04      	bge.n	8015f00 <arm_nn_mat_mult_nt_t_s8+0x454>
 8015ef6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015efa:	1864      	adds	r4, r4, r1
 8015efc:	f145 0500 	adc.w	r5, r5, #0
 8015f00:	0fe4      	lsrs	r4, r4, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015f02:	42b8      	cmp	r0, r7
    result = (int32_t) (mult / (1ll << 31));
 8015f04:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015f08:	d104      	bne.n	8015f14 <arm_nn_mat_mult_nt_t_s8+0x468>
        result = Q31_MAX;
 8015f0a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8015f0e:	bf08      	it	eq
 8015f10:	f06f 4400 	mvneq.w	r4, #2147483648	; 0x80000000
    int32_t remainder = remainder_mask & dividend;
 8015f14:	4026      	ands	r6, r4
    if (result < 0)
 8015f16:	4114      	asrs	r4, r2
        threshold++;
 8015f18:	bf48      	it	mi
 8015f1a:	f10e 0e01 	addmi.w	lr, lr, #1
            res00 += dst_offset;
 8015f1e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015f20:	990d      	ldr	r1, [sp, #52]	; 0x34
    if (remainder > threshold)
 8015f22:	4576      	cmp	r6, lr
        result++;
 8015f24:	bfc8      	it	gt
 8015f26:	3401      	addgt	r4, #1
            res01 += dst_offset;
 8015f28:	4413      	add	r3, r2
            res00 += dst_offset;
 8015f2a:	4411      	add	r1, r2
            res10 += dst_offset;
 8015f2c:	4491      	add	r9, r2
            res11 += dst_offset;
 8015f2e:	4414      	add	r4, r2
            res00 = MAX(res00, activation_min);
 8015f30:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015f32:	4291      	cmp	r1, r2
 8015f34:	bfb8      	it	lt
 8015f36:	4611      	movlt	r1, r2
            res01 = MAX(res01, activation_min);
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	bfb8      	it	lt
 8015f3c:	4613      	movlt	r3, r2
            res10 = MAX(res10, activation_min);
 8015f3e:	4591      	cmp	r9, r2
 8015f40:	bfb8      	it	lt
 8015f42:	4691      	movlt	r9, r2
            res11 = MAX(res11, activation_min);
 8015f44:	4294      	cmp	r4, r2
 8015f46:	bfb8      	it	lt
 8015f48:	4614      	movlt	r4, r2
            res00 = MIN(res00, activation_max);
 8015f4a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015f4c:	4291      	cmp	r1, r2
 8015f4e:	bfa8      	it	ge
 8015f50:	4611      	movge	r1, r2
            dst_ptr[0] = (q7_t)res00;
 8015f52:	9a07      	ldr	r2, [sp, #28]
 8015f54:	7011      	strb	r1, [r2, #0]
            res01 = MIN(res01, activation_max);
 8015f56:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	bfa8      	it	ge
 8015f5c:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 8015f5e:	9a07      	ldr	r2, [sp, #28]
 8015f60:	7053      	strb	r3, [r2, #1]
            res10 = MIN(res10, activation_max);
 8015f62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015f64:	4599      	cmp	r9, r3
 8015f66:	bfa8      	it	ge
 8015f68:	4699      	movge	r9, r3
            dst_ptr[0] = (q7_t)res10;
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015f6e:	f803 9002 	strb.w	r9, [r3, r2]
            res11 = MIN(res11, activation_max);
 8015f72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[1] = (q7_t)res11;
 8015f74:	9a19      	ldr	r2, [sp, #100]	; 0x64
            res11 = MIN(res11, activation_max);
 8015f76:	429c      	cmp	r4, r3
 8015f78:	bfa8      	it	ge
 8015f7a:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
 8015f7c:	9b07      	ldr	r3, [sp, #28]
 8015f7e:	549c      	strb	r4, [r3, r2]
            dst_ptr += rhs_rows;
 8015f80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f82:	4413      	add	r3, r2
 8015f84:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
 8015f86:	9b03      	ldr	r3, [sp, #12]
 8015f88:	3b01      	subs	r3, #1
 8015f8a:	e5f4      	b.n	8015b76 <arm_nn_mat_mult_nt_t_s8+0xca>
                q7_t rhs_value0 = rhs_ptr[0];
 8015f8c:	f914 cf01 	ldrsb.w	ip, [r4, #1]!
                q7_t lhs_value  = lhs_ptr[0];
 8015f90:	f910 6f01 	ldrsb.w	r6, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 8015f94:	f914 700b 	ldrsb.w	r7, [r4, fp]
                res11 += lhs_value * rhs_value1;
 8015f98:	9909      	ldr	r1, [sp, #36]	; 0x24
                res00 += lhs_value * rhs_value0;
 8015f9a:	fb16 330c 	smlabb	r3, r6, ip, r3
                res01 += lhs_value * rhs_value1;
 8015f9e:	fb16 2207 	smlabb	r2, r6, r7, r2
                lhs_value  = lhs_ptr[rhs_cols];
 8015fa2:	f910 600b 	ldrsb.w	r6, [r0, fp]
                res11 += lhs_value * rhs_value1;
 8015fa6:	fb17 1106 	smlabb	r1, r7, r6, r1
                res10 += lhs_value * rhs_value0;
 8015faa:	fb1c 9906 	smlabb	r9, ip, r6, r9
                res11 += lhs_value * rhs_value1;
 8015fae:	9109      	str	r1, [sp, #36]	; 0x24
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8015fb0:	f10e 0e01 	add.w	lr, lr, #1
 8015fb4:	e6d5      	b.n	8015d62 <arm_nn_mat_mult_nt_t_s8+0x2b6>
 8015fb6:	bf00      	nop
 8015fb8:	c0000001 	.word	0xc0000001
        if (lhs_rows % 2)
 8015fbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015fbe:	07d8      	lsls	r0, r3, #31
 8015fc0:	f140 80a6 	bpl.w	8016110 <arm_nn_mat_mult_nt_t_s8+0x664>
 8015fc4:	9b00      	ldr	r3, [sp, #0]
            int32_t rhs_cols_idx = 0;
 8015fc6:	9803      	ldr	r0, [sp, #12]
 8015fc8:	eb03 040b 	add.w	r4, r3, fp
 8015fcc:	9b02      	ldr	r3, [sp, #8]
 8015fce:	eb03 0c00 	add.w	ip, r3, r0
 8015fd2:	9b00      	ldr	r3, [sp, #0]
 8015fd4:	181f      	adds	r7, r3, r0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8015fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fd8:	4283      	cmp	r3, r0
 8015fda:	f300 80a7 	bgt.w	801612c <arm_nn_mat_mult_nt_t_s8+0x680>
 8015fde:	9a08      	ldr	r2, [sp, #32]
 8015fe0:	9b02      	ldr	r3, [sp, #8]
 8015fe2:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8015fe4:	9a02      	ldr	r2, [sp, #8]
 8015fe6:	4251      	negs	r1, r2
 8015fe8:	185a      	adds	r2, r3, r1
 8015fea:	4593      	cmp	fp, r2
 8015fec:	f300 811f 	bgt.w	801622e <arm_nn_mat_mult_nt_t_s8+0x782>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 8015ff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015ff2:	9a01      	ldr	r2, [sp, #4]
 8015ff4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015ff8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015ffa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8016004:	4083      	lsls	r3, r0
 8016006:	4618      	mov	r0, r3
    if ((m1 < 0) ^ (m2 < 0))
 8016008:	406b      	eors	r3, r5
 801600a:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 801600c:	2b00      	cmp	r3, #0
 801600e:	4ba9      	ldr	r3, [pc, #676]	; (80162b4 <arm_nn_mat_mult_nt_t_s8+0x808>)
 8016010:	bf06      	itte	eq
 8016012:	2400      	moveq	r4, #0
 8016014:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8016018:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801601c:	fbc0 3405 	smlal	r3, r4, r0, r5
 8016020:	2c00      	cmp	r4, #0
 8016022:	da05      	bge.n	8016030 <arm_nn_mat_mult_nt_t_s8+0x584>
 8016024:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8016028:	189a      	adds	r2, r3, r2
 801602a:	4613      	mov	r3, r2
 801602c:	f144 0400 	adc.w	r4, r4, #0
 8016030:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016032:	4285      	cmp	r5, r0
    result = (int32_t) (mult / (1ll << 31));
 8016034:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016038:	d104      	bne.n	8016044 <arm_nn_mat_mult_nt_t_s8+0x598>
        result = Q31_MAX;
 801603a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 801603e:	bf08      	it	eq
 8016040:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016044:	2900      	cmp	r1, #0
 8016046:	bfd4      	ite	le
 8016048:	4249      	negle	r1, r1
 801604a:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 801604c:	2201      	movs	r2, #1
 801604e:	fa02 f001 	lsl.w	r0, r2, r1
 8016052:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
 8016054:	ea00 0403 	and.w	r4, r0, r3
    q31_t threshold = remainder_mask >> 1;
 8016058:	4110      	asrs	r0, r2
    if (result < 0)
 801605a:	fa53 f201 	asrs.w	r2, r3, r1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801605e:	9906      	ldr	r1, [sp, #24]
 8016060:	9b24      	ldr	r3, [sp, #144]	; 0x90
        threshold++;
 8016062:	bf48      	it	mi
 8016064:	3001      	addmi	r0, #1
    if (remainder > threshold)
 8016066:	4284      	cmp	r4, r0
 8016068:	585c      	ldr	r4, [r3, r1]
 801606a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801606c:	585d      	ldr	r5, [r3, r1]
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801606e:	9b05      	ldr	r3, [sp, #20]
 8016070:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 8016074:	fa03 f301 	lsl.w	r3, r3, r1
 8016078:	4619      	mov	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 801607a:	ea84 0303 	eor.w	r3, r4, r3
 801607e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
        result++;
 8016082:	bfc8      	it	gt
 8016084:	3201      	addgt	r2, #1
        mult = 1 - mult;
 8016086:	2b00      	cmp	r3, #0
 8016088:	4b8a      	ldr	r3, [pc, #552]	; (80162b4 <arm_nn_mat_mult_nt_t_s8+0x808>)
 801608a:	bf06      	itte	eq
 801608c:	2000      	moveq	r0, #0
 801608e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8016092:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8016096:	fbc1 3004 	smlal	r3, r0, r1, r4
 801609a:	2800      	cmp	r0, #0
 801609c:	da05      	bge.n	80160aa <arm_nn_mat_mult_nt_t_s8+0x5fe>
 801609e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80160a2:	199e      	adds	r6, r3, r6
 80160a4:	4633      	mov	r3, r6
 80160a6:	f140 0000 	adc.w	r0, r0, #0
 80160aa:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80160ac:	428c      	cmp	r4, r1
    result = (int32_t) (mult / (1ll << 31));
 80160ae:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80160b2:	d104      	bne.n	80160be <arm_nn_mat_mult_nt_t_s8+0x612>
        result = Q31_MAX;
 80160b4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80160b8:	bf08      	it	eq
 80160ba:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80160be:	2d00      	cmp	r5, #0
 80160c0:	bfdc      	itt	le
 80160c2:	4269      	negle	r1, r5
 80160c4:	9103      	strle	r1, [sp, #12]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80160c6:	9903      	ldr	r1, [sp, #12]
    if (result < 0)
 80160c8:	9c03      	ldr	r4, [sp, #12]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80160ca:	2001      	movs	r0, #1
 80160cc:	fa00 f101 	lsl.w	r1, r0, r1
 80160d0:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 80160d2:	ea01 0003 	and.w	r0, r1, r3
    if (result < 0)
 80160d6:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 80160d8:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 80160dc:	bf48      	it	mi
 80160de:	3101      	addmi	r1, #1
    if (remainder > threshold)
 80160e0:	4288      	cmp	r0, r1
            res00 += dst_offset;
 80160e2:	992a      	ldr	r1, [sp, #168]	; 0xa8
        result++;
 80160e4:	bfc8      	it	gt
 80160e6:	3301      	addgt	r3, #1
 80160e8:	440a      	add	r2, r1
            res01 += dst_offset;
 80160ea:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
 80160ec:	992b      	ldr	r1, [sp, #172]	; 0xac
 80160ee:	428a      	cmp	r2, r1
 80160f0:	bfb8      	it	lt
 80160f2:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 80160f4:	428b      	cmp	r3, r1
 80160f6:	bfb8      	it	lt
 80160f8:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 80160fa:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80160fc:	428a      	cmp	r2, r1
 80160fe:	bfa8      	it	ge
 8016100:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 8016102:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016104:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 8016106:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016108:	4293      	cmp	r3, r2
 801610a:	bfa8      	it	ge
 801610c:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 801610e:	704b      	strb	r3, [r1, #1]
        rhs += 2 * rhs_cols;
 8016110:	9b00      	ldr	r3, [sp, #0]
 8016112:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016114:	4413      	add	r3, r2
 8016116:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8016118:	9b01      	ldr	r3, [sp, #4]
 801611a:	3302      	adds	r3, #2
 801611c:	9301      	str	r3, [sp, #4]
 801611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016120:	3302      	adds	r3, #2
 8016122:	930a      	str	r3, [sp, #40]	; 0x28
 8016124:	9b06      	ldr	r3, [sp, #24]
 8016126:	3308      	adds	r3, #8
 8016128:	9306      	str	r3, [sp, #24]
 801612a:	e4f5      	b.n	8015b18 <arm_nn_mat_mult_nt_t_s8+0x6c>
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801612c:	9b00      	ldr	r3, [sp, #0]
 801612e:	6821      	ldr	r1, [r4, #0]
 8016130:	581a      	ldr	r2, [r3, r0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016132:	9b02      	ldr	r3, [sp, #8]
 8016134:	581b      	ldr	r3, [r3, r0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016136:	fa2f fe82 	sxtb16	lr, r2
 801613a:	fa2f f583 	sxtb16	r5, r3
 801613e:	fa2f f681 	sxtb16	r6, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8016142:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016146:	fa2f f282 	sxtb16	r2, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 801614a:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801614e:	fa2f f383 	sxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8016152:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016156:	fa2f f881 	sxtb16	r8, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801615a:	9904      	ldr	r1, [sp, #16]
 801615c:	fb25 1e0e 	smlad	lr, r5, lr, r1
 8016160:	fb23 e202 	smlad	r2, r3, r2, lr
 8016164:	9905      	ldr	r1, [sp, #20]
 8016166:	fb25 1506 	smlad	r5, r5, r6, r1
 801616a:	fb23 5308 	smlad	r3, r3, r8, r5
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801616e:	687e      	ldr	r6, [r7, #4]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8016170:	6865      	ldr	r5, [r4, #4]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016172:	f8dc 1004 	ldr.w	r1, [ip, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016176:	fa2f f986 	sxtb16	r9, r6
 801617a:	fa2f fe81 	sxtb16	lr, r1
 801617e:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8016182:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016186:	fa2f f686 	sxtb16	r6, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 801618a:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801618e:	fa2f f181 	sxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8016192:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016196:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801619a:	fb2e 2909 	smlad	r9, lr, r9, r2
 801619e:	fb21 9206 	smlad	r2, r1, r6, r9
 80161a2:	fb2e 3e08 	smlad	lr, lr, r8, r3
 80161a6:	fb21 e105 	smlad	r1, r1, r5, lr
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80161aa:	f8d7 e008 	ldr.w	lr, [r7, #8]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80161ae:	68a6      	ldr	r6, [r4, #8]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80161b0:	f8dc 3008 	ldr.w	r3, [ip, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80161b4:	fa2f f88e 	sxtb16	r8, lr
 80161b8:	fa2f f583 	sxtb16	r5, r3
 80161bc:	fa2f f986 	sxtb16	r9, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 80161c0:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80161c4:	fa2f fe8e 	sxtb16	lr, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 80161c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80161cc:	fa2f f383 	sxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80161d0:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80161d4:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80161d8:	fb25 2808 	smlad	r8, r5, r8, r2
 80161dc:	fb23 880e 	smlad	r8, r3, lr, r8
 80161e0:	fb25 1509 	smlad	r5, r5, r9, r1
 80161e4:	fb23 5506 	smlad	r5, r3, r6, r5
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80161e8:	68f9      	ldr	r1, [r7, #12]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 80161ea:	68e2      	ldr	r2, [r4, #12]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80161ec:	f8dc 300c 	ldr.w	r3, [ip, #12]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80161f0:	fa2f fc81 	sxtb16	ip, r1
 80161f4:	fa2f f683 	sxtb16	r6, r3
 80161f8:	fa2f f782 	sxtb16	r7, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80161fc:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016200:	fa2f f181 	sxtb16	r1, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8016204:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016208:	fa2f f383 	sxtb16	r3, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 801620c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016210:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016214:	fb26 8c0c 	smlad	ip, r6, ip, r8
 8016218:	fb23 c101 	smlad	r1, r3, r1, ip
 801621c:	9104      	str	r1, [sp, #16]
 801621e:	fb26 5607 	smlad	r6, r6, r7, r5
 8016222:	fb23 6302 	smlad	r3, r3, r2, r6
 8016226:	9305      	str	r3, [sp, #20]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8016228:	3010      	adds	r0, #16
 801622a:	3410      	adds	r4, #16
 801622c:	e6ce      	b.n	8015fcc <arm_nn_mat_mult_nt_t_s8+0x520>
                res00 += lhs_value * rhs_value0;
 801622e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value  = lhs_ptr[0];
 8016230:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
 8016234:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 8016238:	940b      	str	r4, [sp, #44]	; 0x2c
 801623a:	9c04      	ldr	r4, [sp, #16]
 801623c:	fb12 4000 	smlabb	r0, r2, r0, r4
 8016240:	9004      	str	r0, [sp, #16]
                res01 += lhs_value * rhs_value1;
 8016242:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016244:	9c05      	ldr	r4, [sp, #20]
 8016246:	f910 000b 	ldrsb.w	r0, [r0, fp]
 801624a:	fb12 4200 	smlabb	r2, r2, r0, r4
 801624e:	9205      	str	r2, [sp, #20]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016250:	e6ca      	b.n	8015fe8 <arm_nn_mat_mult_nt_t_s8+0x53c>
 8016252:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016254:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016256:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016258:	2b00      	cmp	r3, #0
 801625a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801625e:	bfac      	ite	ge
 8016260:	4613      	movge	r3, r2
 8016262:	2300      	movlt	r3, #0
 8016264:	fb00 1803 	mla	r8, r0, r3, r1
 8016268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801626a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801626e:	bfb8      	it	lt
 8016270:	2200      	movlt	r2, #0
 8016272:	4413      	add	r3, r2
 8016274:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
 8016276:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016278:	07d9      	lsls	r1, r3, #31
 801627a:	d516      	bpl.n	80162aa <arm_nn_mat_mult_nt_t_s8+0x7fe>
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = bias[rhs_rows - 1];
 801627c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8016280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016282:	3c01      	subs	r4, #1
 8016284:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016288:	9300      	str	r3, [sp, #0]
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801628a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801628c:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 8016290:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 8016292:	2600      	movs	r6, #0
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 8016294:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016298:	ea2b 7eeb 	bic.w	lr, fp, fp, asr #31
    result = (int32_t) (mult / (1ll << 31));
 801629c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    const q31_t remainder_mask = (1 << exponent) - 1;
 80162a0:	f04f 0901 	mov.w	r9, #1
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 80162a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80162a6:	429e      	cmp	r6, r3
 80162a8:	db06      	blt.n	80162b8 <arm_nn_mat_mult_nt_t_s8+0x80c>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 80162aa:	2000      	movs	r0, #0
 80162ac:	b01b      	add	sp, #108	; 0x6c
 80162ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b2:	bf00      	nop
 80162b4:	c0000001 	.word	0xc0000001
            q31_t res00 = bias[rhs_rows - 1];
 80162b8:	9b00      	ldr	r3, [sp, #0]
 80162ba:	6818      	ldr	r0, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80162bc:	2300      	movs	r3, #0
 80162be:	455b      	cmp	r3, fp
 80162c0:	db46      	blt.n	8016350 <arm_nn_mat_mult_nt_t_s8+0x8a4>
 80162c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 80162c4:	6821      	ldr	r1, [r4, #0]
 80162c6:	f8dc 5000 	ldr.w	r5, [ip]
 80162ca:	4473      	add	r3, lr
 80162cc:	930c      	str	r3, [sp, #48]	; 0x30
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80162ce:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80162d2:	4098      	lsls	r0, r3
    if ((m1 < 0) ^ (m2 < 0))
 80162d4:	ea85 0300 	eor.w	r3, r5, r0
 80162d8:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 80162da:	2b00      	cmp	r3, #0
 80162dc:	4b21      	ldr	r3, [pc, #132]	; (8016364 <arm_nn_mat_mult_nt_t_s8+0x8b8>)
 80162de:	bf06      	itte	eq
 80162e0:	f04f 0a00 	moveq.w	sl, #0
 80162e4:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80162e8:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80162ec:	fbc0 3a05 	smlal	r3, sl, r0, r5
 80162f0:	f1ba 0f00 	cmp.w	sl, #0
 80162f4:	da02      	bge.n	80162fc <arm_nn_mat_mult_nt_t_s8+0x850>
 80162f6:	19db      	adds	r3, r3, r7
 80162f8:	f14a 0a00 	adc.w	sl, sl, #0
 80162fc:	0fdb      	lsrs	r3, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80162fe:	4285      	cmp	r5, r0
    result = (int32_t) (mult / (1ll << 31));
 8016300:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016304:	d104      	bne.n	8016310 <arm_nn_mat_mult_nt_t_s8+0x864>
        result = Q31_MAX;
 8016306:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 801630a:	bf08      	it	eq
 801630c:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016310:	2900      	cmp	r1, #0
 8016312:	bfd4      	ite	le
 8016314:	4249      	negle	r1, r1
 8016316:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016318:	fa09 f001 	lsl.w	r0, r9, r1
 801631c:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
 801631e:	ea00 0503 	and.w	r5, r0, r3
    if (result < 0)
 8016322:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 8016324:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
 8016328:	bf48      	it	mi
 801632a:	3001      	addmi	r0, #1
            res00 += dst_offset;
 801632c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
 801632e:	4285      	cmp	r5, r0
        result++;
 8016330:	bfc8      	it	gt
 8016332:	3301      	addgt	r3, #1
 8016334:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
 8016336:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016338:	428b      	cmp	r3, r1
 801633a:	bfb8      	it	lt
 801633c:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 801633e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8016340:	428b      	cmp	r3, r1
 8016342:	bfa8      	it	ge
 8016344:	460b      	movge	r3, r1
            dst_ptr[0] = (q7_t)res00;
 8016346:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 8016348:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801634a:	3601      	adds	r6, #1
            dst_ptr += rhs_rows;
 801634c:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801634e:	e7a9      	b.n	80162a4 <arm_nn_mat_mult_nt_t_s8+0x7f8>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8016350:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016352:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8016354:	56c9      	ldrsb	r1, [r1, r3]
 8016356:	4429      	add	r1, r5
                q31_t rhs_value = rhs_ptr[0];
 8016358:	f918 5003 	ldrsb.w	r5, [r8, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801635c:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
 801635e:	fb05 0001 	mla	r0, r5, r1, r0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016362:	e7ac      	b.n	80162be <arm_nn_mat_mult_nt_t_s8+0x812>
 8016364:	c0000001 	.word	0xc0000001

08016368 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 8016368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801636c:	b097      	sub	sp, #92	; 0x5c
 801636e:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
 8016372:	9309      	str	r3, [sp, #36]	; 0x24
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8016374:	9b20      	ldr	r3, [sp, #128]	; 0x80
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8016376:	9921      	ldr	r1, [sp, #132]	; 0x84
{
 8016378:	9001      	str	r0, [sp, #4]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801637a:	b29a      	uxth	r2, r3
 801637c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8016380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016382:	9824      	ldr	r0, [sp, #144]	; 0x90
{
 8016384:	9c25      	ldr	r4, [sp, #148]	; 0x94
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8016386:	b29b      	uxth	r3, r3
 8016388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801638c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801638e:	2800      	cmp	r0, #0
 8016390:	f1c1 0100 	rsb	r1, r1, #0
 8016394:	bfc8      	it	gt
 8016396:	2100      	movgt	r1, #0
 8016398:	9105      	str	r1, [sp, #20]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801639a:	9805      	ldr	r0, [sp, #20]
 801639c:	2101      	movs	r1, #1
 801639e:	4081      	lsls	r1, r0
 80163a0:	3901      	subs	r1, #1
 80163a2:	9106      	str	r1, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 80163a4:	1049      	asrs	r1, r1, #1
 80163a6:	9107      	str	r1, [sp, #28]
        threshold++;
 80163a8:	3101      	adds	r1, #1
 80163aa:	910a      	str	r1, [sp, #40]	; 0x28
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 80163ac:	0061      	lsls	r1, r4, #1
 80163ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80163b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80163b2:	3108      	adds	r1, #8
 80163b4:	9104      	str	r1, [sp, #16]
 80163b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163b8:	3102      	adds	r1, #2
 80163ba:	9102      	str	r1, [sp, #8]
 80163bc:	2c00      	cmp	r4, #0
 80163be:	ea4f 1114 	mov.w	r1, r4, lsr #4
 80163c2:	9110      	str	r1, [sp, #64]	; 0x40
 80163c4:	f024 010f 	bic.w	r1, r4, #15
 80163c8:	bfb8      	it	lt
 80163ca:	2100      	movlt	r1, #0
 80163cc:	9108      	str	r1, [sp, #32]
 80163ce:	9808      	ldr	r0, [sp, #32]
 80163d0:	9901      	ldr	r1, [sp, #4]
 80163d2:	4401      	add	r1, r0
 80163d4:	910c      	str	r1, [sp, #48]	; 0x30
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80163d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80163d8:	9103      	str	r1, [sp, #12]
 80163da:	9926      	ldr	r1, [sp, #152]	; 0x98
 80163dc:	3901      	subs	r1, #1
 80163de:	9111      	str	r1, [sp, #68]	; 0x44
 80163e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163e2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80163e6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80163ea:	31fe      	adds	r1, #254	; 0xfe
 80163ec:	9112      	str	r1, [sp, #72]	; 0x48
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80163ee:	f1a4 010f 	sub.w	r1, r4, #15
 80163f2:	9113      	str	r1, [sp, #76]	; 0x4c
 80163f4:	1e41      	subs	r1, r0, #1
 80163f6:	9114      	str	r1, [sp, #80]	; 0x50
 80163f8:	9901      	ldr	r1, [sp, #4]
 80163fa:	4249      	negs	r1, r1
 80163fc:	9115      	str	r1, [sp, #84]	; 0x54
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80163fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016400:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8016404:	910f      	str	r1, [sp, #60]	; 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8016406:	9802      	ldr	r0, [sp, #8]
 8016408:	9912      	ldr	r1, [sp, #72]	; 0x48
 801640a:	4401      	add	r1, r0
 801640c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801640e:	4288      	cmp	r0, r1
 8016410:	dc7b      	bgt.n	801650a <arm_nn_vec_mat_mult_t_s8+0x1a2>
 8016412:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016414:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016418:	2800      	cmp	r0, #0
 801641a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801641e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016420:	bfac      	ite	ge
 8016422:	460f      	movge	r7, r1
 8016424:	2700      	movlt	r7, #0
 8016426:	fb05 0707 	mla	r7, r5, r7, r0
 801642a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801642c:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8016430:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016434:	bfb8      	it	lt
 8016436:	2100      	movlt	r1, #0
 8016438:	440d      	add	r5, r1
    }

    if (rhs_rows % 2)
 801643a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801643c:	bfb8      	it	lt
 801643e:	2000      	movlt	r0, #0
 8016440:	07c9      	lsls	r1, r1, #31
 8016442:	46ab      	mov	fp, r5
 8016444:	d55d      	bpl.n	8016502 <arm_nn_vec_mat_mult_t_s8+0x19a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = *bias++;
 8016446:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016448:	5809      	ldr	r1, [r1, r0]

        int32_t rhs_cols_idx = 0;
 801644a:	2500      	movs	r5, #0

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801644c:	f1a4 080f 	sub.w	r8, r4, #15
 8016450:	9801      	ldr	r0, [sp, #4]
 8016452:	45a8      	cmp	r8, r5
 8016454:	eb00 0e05 	add.w	lr, r0, r5
 8016458:	eb07 0c05 	add.w	ip, r7, r5
 801645c:	f300 8182 	bgt.w	8016764 <arm_nn_vec_mat_mult_t_s8+0x3fc>
 8016460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016462:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016464:	011a      	lsls	r2, r3, #4
 8016466:	9b08      	ldr	r3, [sp, #32]
 8016468:	2c00      	cmp	r4, #0
 801646a:	bfb8      	it	lt
 801646c:	2200      	movlt	r2, #0
 801646e:	3b01      	subs	r3, #1
 8016470:	443b      	add	r3, r7
 8016472:	1a12      	subs	r2, r2, r0
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016474:	1885      	adds	r5, r0, r2
 8016476:	42ac      	cmp	r4, r5
 8016478:	f300 81c5 	bgt.w	8016806 <arm_nn_vec_mat_mult_t_s8+0x49e>
 801647c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    result = (int32_t) (mult / (1ll << 31));
 801647e:	9823      	ldr	r0, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016480:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    if ((m1 < 0) ^ (m2 < 0))
 8016484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016486:	fa01 f202 	lsl.w	r2, r1, r2
    if ((m1 < 0) ^ (m2 < 0))
 801648a:	4053      	eors	r3, r2
 801648c:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 801648e:	2b00      	cmp	r3, #0
 8016490:	4bb3      	ldr	r3, [pc, #716]	; (8016760 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 8016492:	bf06      	itte	eq
 8016494:	2100      	moveq	r1, #0
 8016496:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 801649a:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801649e:	fbc2 3100 	smlal	r3, r1, r2, r0
 80164a2:	2900      	cmp	r1, #0
 80164a4:	da04      	bge.n	80164b0 <arm_nn_vec_mat_mult_t_s8+0x148>
 80164a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80164aa:	181b      	adds	r3, r3, r0
 80164ac:	f141 0100 	adc.w	r1, r1, #0
 80164b0:	0fdb      	lsrs	r3, r3, #31
 80164b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80164b6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80164b8:	4291      	cmp	r1, r2
 80164ba:	d104      	bne.n	80164c6 <arm_nn_vec_mat_mult_t_s8+0x15e>
        result = Q31_MAX;
 80164bc:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80164c0:	bf08      	it	eq
 80164c2:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80164c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80164c8:	2a00      	cmp	r2, #0
 80164ca:	bfd4      	ite	le
 80164cc:	4252      	negle	r2, r2
 80164ce:	2200      	movgt	r2, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80164d0:	2101      	movs	r1, #1
 80164d2:	4091      	lsls	r1, r2
 80164d4:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 80164d6:	ea01 0003 	and.w	r0, r1, r3
    if (result < 0)
 80164da:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 80164dc:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 80164e0:	bf48      	it	mi
 80164e2:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 80164e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    if (remainder > threshold)
 80164e6:	4288      	cmp	r0, r1
        result++;
 80164e8:	bfc8      	it	gt
 80164ea:	3301      	addgt	r3, #1
 80164ec:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80164ee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80164f0:	4293      	cmp	r3, r2
 80164f2:	bfb8      	it	lt
 80164f4:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 80164f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80164f8:	4293      	cmp	r3, r2
 80164fa:	bfa8      	it	ge
 80164fc:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 80164fe:	f88b 3000 	strb.w	r3, [fp]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 8016502:	2000      	movs	r0, #0
 8016504:	b017      	add	sp, #92	; 0x5c
 8016506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        q31_t res00 = *bias++;
 801650a:	9904      	ldr	r1, [sp, #16]
 801650c:	9d03      	ldr	r5, [sp, #12]
        q31_t res01 = *bias++;
 801650e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8016512:	192e      	adds	r6, r5, r4
        int32_t rhs_cols_idx = 0;
 8016514:	2700      	movs	r7, #0
 8016516:	9d01      	ldr	r5, [sp, #4]
 8016518:	eb05 0e07 	add.w	lr, r5, r7
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801651c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801651e:	42bd      	cmp	r5, r7
 8016520:	eba6 0c04 	sub.w	ip, r6, r4
 8016524:	f300 808a 	bgt.w	801663c <arm_nn_vec_mat_mult_t_s8+0x2d4>
 8016528:	9d03      	ldr	r5, [sp, #12]
 801652a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801652c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8016530:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8016532:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016534:	4475      	add	r5, lr
 8016536:	42ac      	cmp	r4, r5
 8016538:	f300 8102 	bgt.w	8016740 <arm_nn_vec_mat_mult_t_s8+0x3d8>
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801653c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 801653e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016540:	40a8      	lsls	r0, r5
    if ((m1 < 0) ^ (m2 < 0))
 8016542:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8016544:	4045      	eors	r5, r0
 8016546:	0fed      	lsrs	r5, r5, #31
        mult = 1 - mult;
 8016548:	2d00      	cmp	r5, #0
 801654a:	4d85      	ldr	r5, [pc, #532]	; (8016760 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 801654c:	bf06      	itte	eq
 801654e:	2600      	moveq	r6, #0
 8016550:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8016554:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8016558:	fbc0 5607 	smlal	r5, r6, r0, r7
 801655c:	2e00      	cmp	r6, #0
 801655e:	da04      	bge.n	801656a <arm_nn_vec_mat_mult_t_s8+0x202>
 8016560:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016564:	19ed      	adds	r5, r5, r7
 8016566:	f146 0600 	adc.w	r6, r6, #0
 801656a:	0fed      	lsrs	r5, r5, #31
 801656c:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016570:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016572:	4286      	cmp	r6, r0
 8016574:	d104      	bne.n	8016580 <arm_nn_vec_mat_mult_t_s8+0x218>
        result = Q31_MAX;
 8016576:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 801657a:	bf08      	it	eq
 801657c:	f06f 4500 	mvneq.w	r5, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 8016580:	9e05      	ldr	r6, [sp, #20]
    int32_t remainder = remainder_mask & dividend;
 8016582:	9806      	ldr	r0, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 8016584:	9f07      	ldr	r7, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
 8016586:	4028      	ands	r0, r5
    q31_t threshold = remainder_mask >> 1;
 8016588:	4135      	asrs	r5, r6
 801658a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801658c:	bf58      	it	pl
 801658e:	463e      	movpl	r6, r7
    if (remainder > threshold)
 8016590:	42b0      	cmp	r0, r6
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016592:	980f      	ldr	r0, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 8016594:	9f23      	ldr	r7, [sp, #140]	; 0x8c
  return arm_nn_divide_by_power_of_two(arm_nn_sat_doubling_high_mult(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016596:	fa01 f100 	lsl.w	r1, r1, r0
    if ((m1 < 0) ^ (m2 < 0))
 801659a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801659c:	ea80 0001 	eor.w	r0, r0, r1
 80165a0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
        result++;
 80165a4:	bfc8      	it	gt
 80165a6:	3501      	addgt	r5, #1
        mult = 1 - mult;
 80165a8:	2800      	cmp	r0, #0
 80165aa:	486d      	ldr	r0, [pc, #436]	; (8016760 <arm_nn_vec_mat_mult_t_s8+0x3f8>)
 80165ac:	bf06      	itte	eq
 80165ae:	2600      	moveq	r6, #0
 80165b0:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 80165b4:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80165b8:	fbc1 0607 	smlal	r0, r6, r1, r7
 80165bc:	2e00      	cmp	r6, #0
 80165be:	da04      	bge.n	80165ca <arm_nn_vec_mat_mult_t_s8+0x262>
 80165c0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80165c4:	19c0      	adds	r0, r0, r7
 80165c6:	f146 0600 	adc.w	r6, r6, #0
 80165ca:	0fc0      	lsrs	r0, r0, #31
 80165cc:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80165d0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80165d2:	428e      	cmp	r6, r1
 80165d4:	d104      	bne.n	80165e0 <arm_nn_vec_mat_mult_t_s8+0x278>
        result = Q31_MAX;
 80165d6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 80165da:	bf08      	it	eq
 80165dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    q31_t threshold = remainder_mask >> 1;
 80165e0:	9e05      	ldr	r6, [sp, #20]
    int32_t remainder = remainder_mask & dividend;
 80165e2:	9906      	ldr	r1, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 80165e4:	9f07      	ldr	r7, [sp, #28]
    int32_t remainder = remainder_mask & dividend;
 80165e6:	4001      	ands	r1, r0
    q31_t threshold = remainder_mask >> 1;
 80165e8:	4130      	asrs	r0, r6
 80165ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80165ec:	bf58      	it	pl
 80165ee:	463e      	movpl	r6, r7
    if (remainder > threshold)
 80165f0:	42b1      	cmp	r1, r6
        res00 += dst_offset;
 80165f2:	9922      	ldr	r1, [sp, #136]	; 0x88
        result++;
 80165f4:	bfc8      	it	gt
 80165f6:	3001      	addgt	r0, #1
        res01 += dst_offset;
 80165f8:	4408      	add	r0, r1
        res00 += dst_offset;
 80165fa:	440d      	add	r5, r1
        res00 = MAX(res00, activation_min);
 80165fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80165fe:	428d      	cmp	r5, r1
 8016600:	bfb8      	it	lt
 8016602:	460d      	movlt	r5, r1
        res01 = MAX(res01, activation_min);
 8016604:	4288      	cmp	r0, r1
 8016606:	bfb8      	it	lt
 8016608:	4608      	movlt	r0, r1
        res00 = MIN(res00, activation_max);
 801660a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801660c:	428d      	cmp	r5, r1
 801660e:	bfa8      	it	ge
 8016610:	460d      	movge	r5, r1
        *dst++ = (q7_t)res00;
 8016612:	9902      	ldr	r1, [sp, #8]
 8016614:	f801 5c02 	strb.w	r5, [r1, #-2]
        res01 = MIN(res01, activation_max);
 8016618:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801661a:	4288      	cmp	r0, r1
 801661c:	bfa8      	it	ge
 801661e:	4608      	movge	r0, r1
        *dst++ = (q7_t)res01;
 8016620:	9902      	ldr	r1, [sp, #8]
 8016622:	f801 0c01 	strb.w	r0, [r1, #-1]
        rhs += 2 * rhs_cols;
 8016626:	9903      	ldr	r1, [sp, #12]
 8016628:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801662a:	4401      	add	r1, r0
 801662c:	9103      	str	r1, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801662e:	9904      	ldr	r1, [sp, #16]
 8016630:	3108      	adds	r1, #8
 8016632:	9104      	str	r1, [sp, #16]
 8016634:	9902      	ldr	r1, [sp, #8]
 8016636:	3102      	adds	r1, #2
 8016638:	9102      	str	r1, [sp, #8]
 801663a:	e6e4      	b.n	8016406 <arm_nn_vec_mat_mult_t_s8+0x9e>
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801663c:	f8dc a000 	ldr.w	sl, [ip]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016640:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016644:	9d01      	ldr	r5, [sp, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016646:	ea4f 2a3a 	mov.w	sl, sl, ror #8
 801664a:	59ed      	ldr	r5, [r5, r7]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801664c:	fa23 fa8a 	sxtab16	sl, r3, sl
 8016650:	fa22 f985 	sxtab16	r9, r2, r5
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8016654:	f8d6 8000 	ldr.w	r8, [r6]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016658:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801665c:	fa22 f585 	sxtab16	r5, r2, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016660:	fb29 000b 	smlad	r0, r9, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016664:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016668:	fb25 000a 	smlad	r0, r5, sl, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 801666c:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016670:	fa23 f888 	sxtab16	r8, r3, r8
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8016674:	f8dc a004 	ldr.w	sl, [ip, #4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016678:	fb29 190b 	smlad	r9, r9, fp, r1
 801667c:	fb25 9508 	smlad	r5, r5, r8, r9
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016680:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016684:	f8de 1004 	ldr.w	r1, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016688:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801668c:	fa23 fa8a 	sxtab16	sl, r3, sl
 8016690:	fa22 f981 	sxtab16	r9, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8016694:	f8d6 8004 	ldr.w	r8, [r6, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016698:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801669c:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166a0:	fb29 000b 	smlad	r0, r9, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166a4:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166a8:	fb21 000a 	smlad	r0, r1, sl, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 80166ac:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166b0:	fa23 f888 	sxtab16	r8, r3, r8
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80166b4:	f8dc a008 	ldr.w	sl, [ip, #8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166b8:	fb29 590b 	smlad	r9, r9, fp, r5
 80166bc:	fb21 9508 	smlad	r5, r1, r8, r9
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166c0:	fa23 fb8a 	sxtab16	fp, r3, sl
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80166c4:	f8de 1008 	ldr.w	r1, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80166c8:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166cc:	fa23 fa8a 	sxtab16	sl, r3, sl
 80166d0:	fa22 f881 	sxtab16	r8, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80166d4:	f8d6 9008 	ldr.w	r9, [r6, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80166d8:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166dc:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166e0:	fb28 0b0b 	smlad	fp, r8, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166e4:	fa23 f089 	sxtab16	r0, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166e8:	fb21 bb0a 	smlad	fp, r1, sl, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 80166ec:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166f0:	fa23 f989 	sxtab16	r9, r3, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80166f4:	f8dc c00c 	ldr.w	ip, [ip, #12]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80166f8:	fb28 5800 	smlad	r8, r8, r0, r5
 80166fc:	fb21 8809 	smlad	r8, r1, r9, r8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016700:	fa23 f98c 	sxtab16	r9, r3, ip
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016704:	f8de 100c 	ldr.w	r1, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016708:	ea4f 203c 	mov.w	r0, ip, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801670c:	fa23 f080 	sxtab16	r0, r3, r0
 8016710:	fa22 fe81 	sxtab16	lr, r2, r1
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8016714:	68f5      	ldr	r5, [r6, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016716:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801671a:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801671e:	fb2e b909 	smlad	r9, lr, r9, fp
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016722:	fa23 fc85 	sxtab16	ip, r3, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016726:	fb21 9000 	smlad	r0, r1, r0, r9
  return (op1 >> op2) | (op1 << (32U - op2));
 801672a:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801672e:	fa23 f585 	sxtab16	r5, r3, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016732:	fb2e 8e0c 	smlad	lr, lr, ip, r8
 8016736:	fb21 e105 	smlad	r1, r1, r5, lr
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801673a:	3710      	adds	r7, #16
 801673c:	3610      	adds	r6, #16
 801673e:	e6ea      	b.n	8016516 <arm_nn_vec_mat_mult_t_s8+0x1ae>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 8016740:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016742:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8016746:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 801674a:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801674c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801674e:	44b4      	add	ip, r6
            res00 += lhs_value * rhs_value0;
 8016750:	fb05 000c 	mla	r0, r5, ip, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8016754:	f917 c004 	ldrsb.w	ip, [r7, r4]
 8016758:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
 801675a:	fb05 110c 	mla	r1, r5, ip, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801675e:	e6e8      	b.n	8016532 <arm_nn_vec_mat_mult_t_s8+0x1ca>
 8016760:	c0000001 	.word	0xc0000001
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8016764:	597e      	ldr	r6, [r7, r5]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016766:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801676a:	9801      	ldr	r0, [sp, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 801676c:	ea4f 2636 	mov.w	r6, r6, ror #8
 8016770:	5940      	ldr	r0, [r0, r5]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016772:	fa23 f686 	sxtab16	r6, r3, r6
 8016776:	fa22 f980 	sxtab16	r9, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 801677a:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801677e:	fa22 f080 	sxtab16	r0, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016782:	fb29 190a 	smlad	r9, r9, sl, r1
 8016786:	fb20 9006 	smlad	r0, r0, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801678a:	f8dc 6004 	ldr.w	r6, [ip, #4]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801678e:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8016792:	f8de 1004 	ldr.w	r1, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 8016796:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801679a:	fa23 f686 	sxtab16	r6, r3, r6
 801679e:	fa22 f981 	sxtab16	r9, r2, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 80167a2:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167a6:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80167aa:	fb29 090a 	smlad	r9, r9, sl, r0
 80167ae:	fb21 9106 	smlad	r1, r1, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80167b2:	f8dc 6008 	ldr.w	r6, [ip, #8]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167b6:	fa23 fa86 	sxtab16	sl, r3, r6
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80167ba:	f8de 0008 	ldr.w	r0, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80167be:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167c2:	fa23 f686 	sxtab16	r6, r3, r6
 80167c6:	fa22 f980 	sxtab16	r9, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 80167ca:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167ce:	fa22 f080 	sxtab16	r0, r2, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80167d2:	fb29 190a 	smlad	r9, r9, sl, r1
 80167d6:	fb20 9906 	smlad	r9, r0, r6, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80167da:	f8dc 000c 	ldr.w	r0, [ip, #12]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167de:	fa23 f680 	sxtab16	r6, r3, r0
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80167e2:	f8de 100c 	ldr.w	r1, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 80167e6:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167ea:	fa23 f080 	sxtab16	r0, r3, r0
 80167ee:	fa22 fc81 	sxtab16	ip, r2, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 80167f2:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80167f6:	fa22 f181 	sxtab16	r1, r2, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80167fa:	fb2c 9c06 	smlad	ip, ip, r6, r9
 80167fe:	fb21 c100 	smlad	r1, r1, r0, ip
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8016802:	3510      	adds	r5, #16
 8016804:	e624      	b.n	8016450 <arm_nn_vec_mat_mult_t_s8+0xe8>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8016806:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8016808:	f913 5f01 	ldrsb.w	r5, [r3, #1]!
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 801680c:	9f20      	ldr	r7, [sp, #128]	; 0x80
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801680e:	4435      	add	r5, r6
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 8016810:	f910 6b01 	ldrsb.w	r6, [r0], #1
 8016814:	443e      	add	r6, r7
            res00 += lhs_value * rhs_value0;
 8016816:	fb06 1105 	mla	r1, r6, r5, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801681a:	e62b      	b.n	8016474 <arm_nn_vec_mat_mult_t_s8+0x10c>

0801681c <arm_q7_to_q15_no_shift>:
 * </pre>
 *
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 801681c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801681e:	f022 0403 	bic.w	r4, r2, #3

        /* extend remaining two q7_t values to q15_t values */
        in2 = __SXTB16(in);

#ifndef ARM_MATH_BIG_ENDIAN
        out2 = (int32_t)__PKHTB(in1, in2, 16);
 8016822:	f8df e050 	ldr.w	lr, [pc, #80]	; 8016874 <arm_q7_to_q15_no_shift+0x58>
    blkCnt = blockSize >> 2u;
 8016826:	ea4f 0c92 	mov.w	ip, r2, lsr #2
    while (blkCnt > 0u)
 801682a:	4404      	add	r4, r0
 801682c:	460e      	mov	r6, r1
 801682e:	42a0      	cmp	r0, r4
 8016830:	d107      	bne.n	8016842 <arm_q7_to_q15_no_shift+0x26>
        blkCnt--;
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8016832:	f002 0203 	and.w	r2, r2, #3
 8016836:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 801683a:	4422      	add	r2, r4
 801683c:	4294      	cmp	r4, r2
 801683e:	d113      	bne.n	8016868 <arm_q7_to_q15_no_shift+0x4c>

        /* Decrement the loop counter */
        blkCnt--;
    }

}
 8016840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  memcpy(&val, *in_q7, 4);
 8016842:	f850 5b04 	ldr.w	r5, [r0], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 8016846:	ea4f 2335 	mov.w	r3, r5, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801684a:	fa2f f383 	sxtb16	r3, r3
 801684e:	fa2f f585 	sxtb16	r5, r5
        out1 = (int32_t)__PKHBT(in2, in1, 16);
 8016852:	b2af      	uxth	r7, r5
 8016854:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
        out2 = (int32_t)__PKHTB(in1, in2, 16);
 8016858:	ea03 030e 	and.w	r3, r3, lr
 801685c:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8016860:	6037      	str	r7, [r6, #0]
 8016862:	6073      	str	r3, [r6, #4]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 8016864:	3608      	adds	r6, #8
        blkCnt--;
 8016866:	e7e2      	b.n	801682e <arm_q7_to_q15_no_shift+0x12>
        *pDst++ = (q15_t)*pIn++;
 8016868:	f914 3b01 	ldrsb.w	r3, [r4], #1
 801686c:	f821 3b02 	strh.w	r3, [r1], #2
        blkCnt--;
 8016870:	e7e4      	b.n	801683c <arm_q7_to_q15_no_shift+0x20>
 8016872:	bf00      	nop
 8016874:	ffff0000 	.word	0xffff0000

08016878 <arm_q7_to_q15_with_offset>:

void arm_q7_to_q15_with_offset(const q7_t *src,
                               q15_t *dst,
                               uint32_t block_size,
                               q15_t offset)
{
 8016878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 801687c:	ea4f 0c92 	mov.w	ip, r2, lsr #2

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8016880:	b29e      	uxth	r6, r3

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8016882:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80168e8 <arm_q7_to_q15_with_offset+0x70>
    block_cnt = block_size >> 2;
 8016886:	46e6      	mov	lr, ip
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8016888:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    while (block_cnt > 0)
 801688c:	460f      	mov	r7, r1
 801688e:	4680      	mov	r8, r0
 8016890:	f1be 0f00 	cmp.w	lr, #0
 8016894:	d10a      	bne.n	80168ac <arm_q7_to_q15_with_offset+0x34>
 8016896:	eb00 008c 	add.w	r0, r0, ip, lsl #2
        write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 801689a:	f002 0203 	and.w	r2, r2, #3
 801689e:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 80168a2:	4402      	add	r2, r0
 80168a4:	4290      	cmp	r0, r2
 80168a6:	d118      	bne.n	80168da <arm_q7_to_q15_with_offset+0x62>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 80168a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ac:	f858 5b04 	ldr.w	r5, [r8], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 80168b0:	ea4f 2435 	mov.w	r4, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80168b4:	fa26 f484 	sxtab16	r4, r6, r4
 80168b8:	fa26 f585 	sxtab16	r5, r6, r5
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 80168bc:	fa1f fa85 	uxth.w	sl, r5
 80168c0:	ea4a 4a04 	orr.w	sl, sl, r4, lsl #16
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 80168c4:	ea04 0409 	and.w	r4, r4, r9
 80168c8:	ea44 4415 	orr.w	r4, r4, r5, lsr #16
  memcpy (*pQ15, &val, 4);
 80168cc:	f8c7 a000 	str.w	sl, [r7]
 80168d0:	607c      	str	r4, [r7, #4]
        block_cnt--;
 80168d2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80168d6:	3708      	adds	r7, #8
 80168d8:	e7da      	b.n	8016890 <arm_q7_to_q15_with_offset+0x18>
        *dst++ = (q15_t)*src++ + offset;
 80168da:	f910 4b01 	ldrsb.w	r4, [r0], #1
 80168de:	441c      	add	r4, r3
 80168e0:	f821 4b02 	strh.w	r4, [r1], #2
        block_cnt--;
 80168e4:	e7de      	b.n	80168a4 <arm_q7_to_q15_with_offset+0x2c>
 80168e6:	bf00      	nop
 80168e8:	ffff0000 	.word	0xffff0000

080168ec <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 80168ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f0:	b09d      	sub	sp, #116	; 0x74
  const int32_t dim_src_height = input_dims->h;
 80168f2:	6855      	ldr	r5, [r2, #4]
{
 80168f4:	9316      	str	r3, [sp, #88]	; 0x58
 80168f6:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  const int32_t dim_src_height = input_dims->h;
 80168fa:	950d      	str	r5, [sp, #52]	; 0x34
  const int32_t dim_src_width = input_dims->w;
 80168fc:	6895      	ldr	r5, [r2, #8]
 80168fe:	9504      	str	r5, [sp, #16]
  const int32_t dim_dst_height = output_dims->h;
 8016900:	6865      	ldr	r5, [r4, #4]
  const int32_t dim_dst_width = output_dims->w;
 8016902:	68a4      	ldr	r4, [r4, #8]
 8016904:	940b      	str	r4, [sp, #44]	; 0x2c
  const int32_t stride_height = pool_params->stride.h;
  const int32_t stride_width = pool_params->stride.w;
 8016906:	680c      	ldr	r4, [r1, #0]
 8016908:	9405      	str	r4, [sp, #20]
  const int32_t dim_kernel_height = filter_dims->h;
 801690a:	685c      	ldr	r4, [r3, #4]
  const int32_t dim_kernel_width = filter_dims->w;
 801690c:	689b      	ldr	r3, [r3, #8]
 801690e:	9310      	str	r3, [sp, #64]	; 0x40
  const int32_t padding_height = pool_params->padding.h;
  const int32_t padding_width = pool_params->padding.w;
 8016910:	688b      	ldr	r3, [r1, #8]
 8016912:	9306      	str	r3, [sp, #24]
  const int32_t act_min = pool_params->activation.min;
 8016914:	690b      	ldr	r3, [r1, #16]
 8016916:	9311      	str	r3, [sp, #68]	; 0x44
  const int32_t act_max = pool_params->activation.max;
 8016918:	694b      	ldr	r3, [r1, #20]
 801691a:	9312      	str	r3, [sp, #72]	; 0x48
 801691c:	684b      	ldr	r3, [r1, #4]
 801691e:	930c      	str	r3, [sp, #48]	; 0x30
 8016920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  const int32_t ch_src = input_dims->c;
 8016922:	68d2      	ldr	r2, [r2, #12]
 8016924:	f8d1 b00c 	ldr.w	fp, [r1, #12]
  q15_t *bufferA = (q15_t *)ctx->buf;
 8016928:	f8d0 8000 	ldr.w	r8, [r0]
  const int32_t dim_dst_height = output_dims->h;
 801692c:	950e      	str	r5, [sp, #56]	; 0x38
  const int32_t dim_kernel_height = filter_dims->h;
 801692e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016932:	4353      	muls	r3, r2
 8016934:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Run the following code for Cortex-M4 and Cortex-M7
   */
  int32_t k_x, k_y, i_x, i_y;

  for (i_y = 0; i_y < dim_dst_height; i_y++)
 8016936:	2300      	movs	r3, #0
 8016938:	9303      	str	r3, [sp, #12]
  for (i = 0; i < length; i++)
 801693a:	b293      	uxth	r3, r2
  const int32_t dim_kernel_height = filter_dims->h;
 801693c:	940f      	str	r4, [sp, #60]	; 0x3c
  for (i_y = 0; i_y < dim_dst_height; i_y++)
 801693e:	f1cb 0900 	rsb	r9, fp, #0
  for (i = 0; i < length; i++)
 8016942:	9319      	str	r3, [sp, #100]	; 0x64
  for (i_y = 0; i_y < dim_dst_height; i_y++)
 8016944:	9b03      	ldr	r3, [sp, #12]
 8016946:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016948:	428b      	cmp	r3, r1
 801694a:	f280 809f 	bge.w	8016a8c <arm_avgpool_s8+0x1a0>
 801694e:	f1b9 0f00 	cmp.w	r9, #0
 8016952:	bfd4      	ite	le
 8016954:	465b      	movle	r3, fp
 8016956:	2300      	movgt	r3, #0
 8016958:	930a      	str	r3, [sp, #40]	; 0x28
      const int32_t base_idx_x = (i_x * stride_width) - padding_width;
      const int32_t kernel_y_start = MAX(0, -base_idx_y);
      const int32_t kernel_x_start = MAX(0, -base_idx_x);

      /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
      const int32_t kernel_y_end = MIN(dim_kernel_height, dim_src_height - base_idx_y);
 801695a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801695c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801695e:	445b      	add	r3, fp
 8016960:	428b      	cmp	r3, r1
 8016962:	bfa8      	it	ge
 8016964:	460b      	movge	r3, r1
 8016966:	9314      	str	r3, [sp, #80]	; 0x50
 8016968:	9b06      	ldr	r3, [sp, #24]
 801696a:	9906      	ldr	r1, [sp, #24]
 801696c:	9308      	str	r3, [sp, #32]
 801696e:	9b04      	ldr	r3, [sp, #16]
 8016970:	440b      	add	r3, r1
 8016972:	9309      	str	r3, [sp, #36]	; 0x24
 8016974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016976:	f1c1 0a00 	rsb	sl, r1, #0
 801697a:	9904      	ldr	r1, [sp, #16]
 801697c:	444b      	add	r3, r9
 801697e:	434b      	muls	r3, r1
 8016980:	9315      	str	r3, [sp, #84]	; 0x54
 8016982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016984:	9300      	str	r3, [sp, #0]
    for (i_x = 0; i_x < dim_dst_width; i_x++)
 8016986:	2300      	movs	r3, #0
 8016988:	9302      	str	r3, [sp, #8]
 801698a:	e059      	b.n	8016a40 <arm_avgpool_s8+0x154>
      const int32_t kernel_x_start = MAX(0, -base_idx_x);
 801698c:	9b08      	ldr	r3, [sp, #32]
      const int32_t kernel_x_end = MIN(dim_kernel_width, dim_src_width - base_idx_x);
 801698e:	9910      	ldr	r1, [sp, #64]	; 0x40
      const int32_t kernel_x_start = MAX(0, -base_idx_x);
 8016990:	f1ba 0f00 	cmp.w	sl, #0
 8016994:	bfd8      	it	le
 8016996:	461e      	movle	r6, r3
      const int32_t kernel_x_end = MIN(dim_kernel_width, dim_src_width - base_idx_x);
 8016998:	9b09      	ldr	r3, [sp, #36]	; 0x24
      const int32_t kernel_x_start = MAX(0, -base_idx_x);
 801699a:	bfc8      	it	gt
 801699c:	2600      	movgt	r6, #0
      const int32_t kernel_x_end = MIN(dim_kernel_width, dim_src_width - base_idx_x);
 801699e:	428b      	cmp	r3, r1
 80169a0:	bfa8      	it	ge
 80169a2:	460b      	movge	r3, r1

      int count = 0;

      for (k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 80169a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80169a6:	9107      	str	r1, [sp, #28]
 80169a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169aa:	9101      	str	r1, [sp, #4]
 80169ac:	eb06 010a 	add.w	r1, r6, sl
      int count = 0;
 80169b0:	2400      	movs	r4, #0
 80169b2:	9118      	str	r1, [sp, #96]	; 0x60
      for (k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 80169b4:	9901      	ldr	r1, [sp, #4]
 80169b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80169b8:	4281      	cmp	r1, r0
 80169ba:	da2c      	bge.n	8016a16 <arm_avgpool_s8+0x12a>
 80169bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80169be:	9807      	ldr	r0, [sp, #28]
 80169c0:	180d      	adds	r5, r1, r0
 80169c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80169c4:	fb02 1505 	mla	r5, r2, r5, r1
      {
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
        {
          const q7_t *start = src + ch_src * (k_x + base_idx_x + (k_y + base_idx_y) * dim_src_width);

          if (count == 0)
 80169c8:	1ba1      	subs	r1, r4, r6
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 80169ca:	4637      	mov	r7, r6
          if (count == 0)
 80169cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80169ce:	e00c      	b.n	80169ea <arm_avgpool_s8+0xfe>
 80169d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80169d2:	42f9      	cmn	r1, r7
          {
            arm_q7_to_q15_no_shift(start, bufferA, ch_src);
 80169d4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
          if (count == 0)
 80169d8:	d116      	bne.n	8016a08 <arm_avgpool_s8+0x11c>
            arm_q7_to_q15_no_shift(start, bufferA, ch_src);
 80169da:	4641      	mov	r1, r8
 80169dc:	4628      	mov	r0, r5
 80169de:	f7ff ff1d 	bl	801681c <arm_q7_to_q15_no_shift>
 80169e2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
        for (k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 80169e6:	3701      	adds	r7, #1
 80169e8:	4415      	add	r5, r2
 80169ea:	429f      	cmp	r7, r3
 80169ec:	dbf0      	blt.n	80169d0 <arm_avgpool_s8+0xe4>
 80169ee:	1b99      	subs	r1, r3, r6
 80169f0:	429e      	cmp	r6, r3
 80169f2:	bfc8      	it	gt
 80169f4:	2100      	movgt	r1, #0
 80169f6:	440c      	add	r4, r1
      for (k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 80169f8:	9901      	ldr	r1, [sp, #4]
 80169fa:	9804      	ldr	r0, [sp, #16]
 80169fc:	3101      	adds	r1, #1
 80169fe:	9101      	str	r1, [sp, #4]
 8016a00:	9907      	ldr	r1, [sp, #28]
 8016a02:	4401      	add	r1, r0
 8016a04:	9107      	str	r1, [sp, #28]
 8016a06:	e7d5      	b.n	80169b4 <arm_avgpool_s8+0xc8>
          }
          else
          {
            arm_nn_accumulate_q7_to_q15(bufferA, start, ch_src);
 8016a08:	4629      	mov	r1, r5
 8016a0a:	4640      	mov	r0, r8
 8016a0c:	f7ff f812 	bl	8015a34 <arm_nn_accumulate_q7_to_q15>
 8016a10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016a14:	e7e7      	b.n	80169e6 <arm_avgpool_s8+0xfa>
    sum = buffer[i] > 0 ? (buffer[i] + count / 2) / count : (buffer[i] - count / 2) / count;
 8016a16:	f3c4 004e 	ubfx	r0, r4, #1, #15
  for (i = 0; i < length; i++)
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	b2a4      	uxth	r4, r4
 8016a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016a20:	428b      	cmp	r3, r1
 8016a22:	dc1d      	bgt.n	8016a60 <arm_avgpool_s8+0x174>
          }
          count++;
        }
      }
      buffer_scale_back_q15_to_q7_and_clamp(bufferA, dst, ch_src, count, act_min, act_max);
      dst += ch_src;
 8016a24:	9b00      	ldr	r3, [sp, #0]
 8016a26:	9905      	ldr	r1, [sp, #20]
 8016a28:	4413      	add	r3, r2
 8016a2a:	9300      	str	r3, [sp, #0]
    for (i_x = 0; i_x < dim_dst_width; i_x++)
 8016a2c:	9b02      	ldr	r3, [sp, #8]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	9302      	str	r3, [sp, #8]
 8016a32:	9b08      	ldr	r3, [sp, #32]
 8016a34:	1a5b      	subs	r3, r3, r1
 8016a36:	9308      	str	r3, [sp, #32]
 8016a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a3a:	1a5b      	subs	r3, r3, r1
 8016a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a3e:	448a      	add	sl, r1
 8016a40:	9b02      	ldr	r3, [sp, #8]
 8016a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a44:	428b      	cmp	r3, r1
 8016a46:	dba1      	blt.n	801698c <arm_avgpool_s8+0xa0>
 8016a48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016a4c:	440b      	add	r3, r1
 8016a4e:	9328      	str	r3, [sp, #160]	; 0xa0
  for (i_y = 0; i_y < dim_dst_height; i_y++)
 8016a50:	9b03      	ldr	r3, [sp, #12]
 8016a52:	3301      	adds	r3, #1
 8016a54:	9303      	str	r3, [sp, #12]
 8016a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a58:	4499      	add	r9, r3
 8016a5a:	ebab 0b03 	sub.w	fp, fp, r3
 8016a5e:	e771      	b.n	8016944 <arm_avgpool_s8+0x58>
    sum = buffer[i] > 0 ? (buffer[i] + count / 2) / count : (buffer[i] - count / 2) / count;
 8016a60:	f938 3011 	ldrsh.w	r3, [r8, r1, lsl #1]
    sum = MAX(sum, act_min);
 8016a64:	9d11      	ldr	r5, [sp, #68]	; 0x44
    sum = buffer[i] > 0 ? (buffer[i] + count / 2) / count : (buffer[i] - count / 2) / count;
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	bfcb      	itete	gt
 8016a6a:	181b      	addgt	r3, r3, r0
 8016a6c:	1a1b      	suble	r3, r3, r0
 8016a6e:	fbb3 f3f4 	udivgt	r3, r3, r4
 8016a72:	fb93 f3f4 	sdivle	r3, r3, r4
    sum = MAX(sum, act_min);
 8016a76:	42ab      	cmp	r3, r5
 8016a78:	bfb8      	it	lt
 8016a7a:	462b      	movlt	r3, r5
    sum = MIN(sum, act_max);
 8016a7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016a7e:	42ab      	cmp	r3, r5
 8016a80:	bfa8      	it	ge
 8016a82:	462b      	movge	r3, r5
    target[i] = (q7_t) (sum);
 8016a84:	9d00      	ldr	r5, [sp, #0]
 8016a86:	546b      	strb	r3, [r5, r1]
  for (i = 0; i < length; i++)
 8016a88:	3101      	adds	r1, #1
 8016a8a:	e7c8      	b.n	8016a1e <arm_avgpool_s8+0x132>
    }
  }

#endif
  return ARM_MATH_SUCCESS;
}
 8016a8c:	2000      	movs	r0, #0
 8016a8e:	b01d      	add	sp, #116	; 0x74
 8016a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a94 <arm_avgpool_s8_get_buffer_size>:
  return (ch_src * sizeof(int16_t));
#else
  (void)ch_src;
  return 0;
#endif
}
 8016a94:	0048      	lsls	r0, r1, #1
 8016a96:	4770      	bx	lr

08016a98 <arm_max_pool_s8>:
                const cmsis_nn_dims *input_dims,
                const q7_t *src,
                const cmsis_nn_dims *filter_dims,
                const cmsis_nn_dims *output_dims,
                q7_t *dst)
{
 8016a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a9c:	b0a1      	sub	sp, #132	; 0x84
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
 8016a9e:	6894      	ldr	r4, [r2, #8]
{
 8016aa0:	931d      	str	r3, [sp, #116]	; 0x74
 8016aa2:	e9dd 302a 	ldrd	r3, r0, [sp, #168]	; 0xa8
    const int32_t input_x = input_dims->w;
 8016aa6:	9408      	str	r4, [sp, #32]
    const int32_t output_y = output_dims->h;
 8016aa8:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
 8016aaa:	6880      	ldr	r0, [r0, #8]
 8016aac:	9009      	str	r0, [sp, #36]	; 0x24
    const int32_t stride_y = pool_params->stride.h;
 8016aae:	6848      	ldr	r0, [r1, #4]
 8016ab0:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_x = pool_params->stride.w;
 8016ab2:	6808      	ldr	r0, [r1, #0]
 8016ab4:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t kernel_y = filter_dims->h;
 8016ab6:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
 8016ab8:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
 8016aba:	9015      	str	r0, [sp, #84]	; 0x54
    const int32_t kernel_x = filter_dims->w;
 8016abc:	9316      	str	r3, [sp, #88]	; 0x58
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
 8016abe:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 8016ac2:	9302      	str	r3, [sp, #8]
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
 8016ac4:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t output_y = output_dims->h;
 8016ac8:	9412      	str	r4, [sp, #72]	; 0x48
    const int32_t channel_in = input_dims->c;
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016aca:	4259      	negs	r1, r3
    const int32_t channel_in = input_dims->c;
 8016acc:	68d4      	ldr	r4, [r2, #12]
 8016ace:	6853      	ldr	r3, [r2, #4]
 8016ad0:	9a02      	ldr	r2, [sp, #8]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016ad2:	9100      	str	r1, [sp, #0]
 8016ad4:	18d3      	adds	r3, r2, r3
 8016ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8016ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const int32_t pad_x = pool_params->padding.w;
 8016ada:	900c      	str	r0, [sp, #48]	; 0x30
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016adc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    int32_t cnt = length >> 2;
 8016ae0:	10a1      	asrs	r1, r4, #2
 8016ae2:	4363      	muls	r3, r4
 8016ae4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ae6:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	9119      	str	r1, [sp, #100]	; 0x64
 8016aee:	9313      	str	r3, [sp, #76]	; 0x4c
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016af0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016af2:	9303      	str	r3, [sp, #12]
 8016af4:	2300      	movs	r3, #0
 8016af6:	9304      	str	r3, [sp, #16]
 8016af8:	9b04      	ldr	r3, [sp, #16]
 8016afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016afc:	4293      	cmp	r3, r2
 8016afe:	db17      	blt.n	8016b30 <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8016b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while (cnt > 0l)
 8016b02:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8016b04:	435a      	muls	r2, r3
 8016b06:	4362      	muls	r2, r4
    int32_t cnt = length >> 2;
 8016b08:	1090      	asrs	r0, r2, #2
 8016b0a:	4604      	mov	r4, r0
    while (cnt > 0l)
 8016b0c:	2c00      	cmp	r4, #0
 8016b0e:	f300 80d2 	bgt.w	8016cb6 <arm_max_pool_s8+0x21e>
 8016b12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016b14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016b18:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cnt = length & 0x3;
 8016b1c:	f002 0203 	and.w	r2, r2, #3
 8016b20:	441a      	add	r2, r3
    while (cnt > 0l)
 8016b22:	4293      	cmp	r3, r2
 8016b24:	f040 80f6 	bne.w	8016d14 <arm_max_pool_s8+0x27c>

    return ARM_MATH_SUCCESS;
}
 8016b28:	2000      	movs	r0, #0
 8016b2a:	b021      	add	sp, #132	; 0x84
 8016b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8016b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b34:	9e03      	ldr	r6, [sp, #12]
 8016b36:	425b      	negs	r3, r3
 8016b38:	9301      	str	r3, [sp, #4]
 8016b3a:	9b00      	ldr	r3, [sp, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	9b02      	ldr	r3, [sp, #8]
 8016b40:	bfc8      	it	gt
 8016b42:	2300      	movgt	r3, #0
 8016b44:	9311      	str	r3, [sp, #68]	; 0x44
 8016b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b48:	930e      	str	r3, [sp, #56]	; 0x38
 8016b4a:	9b08      	ldr	r3, [sp, #32]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b50:	9a00      	ldr	r2, [sp, #0]
 8016b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b54:	4413      	add	r3, r2
 8016b56:	9a08      	ldr	r2, [sp, #32]
 8016b58:	4353      	muls	r3, r2
 8016b5a:	931c      	str	r3, [sp, #112]	; 0x70
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	9305      	str	r3, [sp, #20]
 8016b60:	9b05      	ldr	r3, [sp, #20]
 8016b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b64:	4293      	cmp	r3, r2
 8016b66:	db11      	blt.n	8016b8c <arm_max_pool_s8+0xf4>
 8016b68:	9b03      	ldr	r3, [sp, #12]
 8016b6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016b6c:	4413      	add	r3, r2
 8016b6e:	9303      	str	r3, [sp, #12]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8016b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b72:	9b00      	ldr	r3, [sp, #0]
 8016b74:	4413      	add	r3, r2
 8016b76:	9300      	str	r3, [sp, #0]
 8016b78:	9b04      	ldr	r3, [sp, #16]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	9304      	str	r3, [sp, #16]
 8016b7e:	9b02      	ldr	r3, [sp, #8]
 8016b80:	1a9b      	subs	r3, r3, r2
 8016b82:	9302      	str	r3, [sp, #8]
 8016b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b86:	1a9b      	subs	r3, r3, r2
 8016b88:	9310      	str	r3, [sp, #64]	; 0x40
 8016b8a:	e7b5      	b.n	8016af8 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8016b8c:	9b01      	ldr	r3, [sp, #4]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8016b8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b94:	bfc8      	it	gt
 8016b96:	2300      	movgt	r3, #0
 8016b98:	9314      	str	r3, [sp, #80]	; 0x50
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8016b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016b9e:	4293      	cmp	r3, r2
 8016ba0:	bfa8      	it	ge
 8016ba2:	4613      	movge	r3, r2
 8016ba4:	9317      	str	r3, [sp, #92]	; 0x5c
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8016ba6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016baa:	4293      	cmp	r3, r2
 8016bac:	bfa8      	it	ge
 8016bae:	4613      	movge	r3, r2
 8016bb0:	9318      	str	r3, [sp, #96]	; 0x60
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8016bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016bb4:	9a01      	ldr	r2, [sp, #4]
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	18f3      	adds	r3, r6, r3
 8016bba:	931a      	str	r3, [sp, #104]	; 0x68
 8016bbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8016bc0:	440a      	add	r2, r1
 8016bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016bc4:	9306      	str	r3, [sp, #24]
 8016bc6:	921f      	str	r2, [sp, #124]	; 0x7c
            int count = 0;
 8016bc8:	2300      	movs	r3, #0
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8016bca:	9a06      	ldr	r2, [sp, #24]
 8016bcc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016bce:	428a      	cmp	r2, r1
 8016bd0:	da62      	bge.n	8016c98 <arm_max_pool_s8+0x200>
 8016bd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016bd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016bd6:	1855      	adds	r5, r2, r1
 8016bd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016bda:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8016bde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016be0:	9207      	str	r2, [sp, #28]
    cnt = length & 0x3;
 8016be2:	f004 0203 	and.w	r2, r4, #3
 8016be6:	921e      	str	r2, [sp, #120]	; 0x78
 8016be8:	e00b      	b.n	8016c02 <arm_max_pool_s8+0x16a>
                    if (count == 0)
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d150      	bne.n	8016c90 <arm_max_pool_s8+0x1f8>
                        memcpy(dst, start, channel_in);
 8016bee:	4622      	mov	r2, r4
 8016bf0:	4629      	mov	r1, r5
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f001 fbd7 	bl	80183a6 <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8016bf8:	9b07      	ldr	r3, [sp, #28]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	9307      	str	r3, [sp, #28]
 8016bfe:	4425      	add	r5, r4
 8016c00:	2301      	movs	r3, #1
 8016c02:	9a07      	ldr	r2, [sp, #28]
 8016c04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016c06:	428a      	cmp	r2, r1
 8016c08:	dbef      	blt.n	8016bea <arm_max_pool_s8+0x152>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8016c0a:	9a06      	ldr	r2, [sp, #24]
 8016c0c:	9908      	ldr	r1, [sp, #32]
 8016c0e:	3201      	adds	r2, #1
 8016c10:	9206      	str	r2, [sp, #24]
 8016c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c14:	440a      	add	r2, r1
 8016c16:	920d      	str	r2, [sp, #52]	; 0x34
 8016c18:	e7d7      	b.n	8016bca <arm_max_pool_s8+0x132>
  memcpy(&val, in_q7, 4);
 8016c1a:	6803      	ldr	r3, [r0, #0]
  memcpy(&val, *in_q7, 4);
 8016c1c:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
 8016c20:	fa4f fc83 	sxtb.w	ip, r3
 8016c24:	fa4f fb82 	sxtb.w	fp, r2
 8016c28:	45dc      	cmp	ip, fp
 8016c2a:	bfb8      	it	lt
 8016c2c:	46dc      	movlt	ip, fp
 8016c2e:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8016c32:	f342 2b07 	sbfx	fp, r2, #8, #8
 8016c36:	f343 2c07 	sbfx	ip, r3, #8, #8
 8016c3a:	45dc      	cmp	ip, fp
 8016c3c:	bfb8      	it	lt
 8016c3e:	46dc      	movlt	ip, fp
 8016c40:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8016c44:	f342 4b07 	sbfx	fp, r2, #16, #8
 8016c48:	f343 4c07 	sbfx	ip, r3, #16, #8
 8016c4c:	45dc      	cmp	ip, fp
 8016c4e:	ea4f 6323 	mov.w	r3, r3, asr #24
 8016c52:	ea4f 6222 	mov.w	r2, r2, asr #24
 8016c56:	bfb8      	it	lt
 8016c58:	46dc      	movlt	ip, fp
 8016c5a:	4293      	cmp	r3, r2
 8016c5c:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
 8016c60:	bfb8      	it	lt
 8016c62:	4613      	movlt	r3, r2
 8016c64:	f363 681f 	bfi	r8, r3, #24, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 8016c68:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
 8016c6c:	3901      	subs	r1, #1
    while (cnt > 0l)
 8016c6e:	2900      	cmp	r1, #0
 8016c70:	dcd3      	bgt.n	8016c1a <arm_max_pool_s8+0x182>
    while (cnt > 0l)
 8016c72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016c76:	18eb      	adds	r3, r5, r3
 8016c78:	18d0      	adds	r0, r2, r3
 8016c7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c7c:	4283      	cmp	r3, r0
 8016c7e:	d0bb      	beq.n	8016bf8 <arm_max_pool_s8+0x160>
        if (*src > *dst)
 8016c80:	f913 1b01 	ldrsb.w	r1, [r3], #1
 8016c84:	f912 cf01 	ldrsb.w	ip, [r2, #1]!
 8016c88:	458c      	cmp	ip, r1
            *dst = *src;
 8016c8a:	bfb8      	it	lt
 8016c8c:	7011      	strblt	r1, [r2, #0]
        cnt--;
 8016c8e:	e7f5      	b.n	8016c7c <arm_max_pool_s8+0x1e4>
    int32_t cnt = length >> 2;
 8016c90:	9919      	ldr	r1, [sp, #100]	; 0x64
    const q7_t *src = target;
 8016c92:	46ae      	mov	lr, r5
 8016c94:	4630      	mov	r0, r6
 8016c96:	e7ea      	b.n	8016c6e <arm_max_pool_s8+0x1d6>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8016c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c9a:	9b01      	ldr	r3, [sp, #4]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	9301      	str	r3, [sp, #4]
 8016ca0:	9b05      	ldr	r3, [sp, #20]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	9305      	str	r3, [sp, #20]
 8016ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ca8:	1a9b      	subs	r3, r3, r2
 8016caa:	930e      	str	r3, [sp, #56]	; 0x38
 8016cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cae:	1a9b      	subs	r3, r3, r2
            dst += channel_in;
 8016cb0:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8016cb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cb4:	e754      	b.n	8016b60 <arm_max_pool_s8+0xc8>
  memcpy(&val, in_q7, 4);
 8016cb6:	682b      	ldr	r3, [r5, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
 8016cb8:	b259      	sxtb	r1, r3
 8016cba:	4549      	cmp	r1, r9
 8016cbc:	bfb8      	it	lt
 8016cbe:	4649      	movlt	r1, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
 8016cc0:	b249      	sxtb	r1, r1
 8016cc2:	4551      	cmp	r1, sl
 8016cc4:	bfa8      	it	ge
 8016cc6:	4651      	movge	r1, sl
 8016cc8:	f361 0707 	bfi	r7, r1, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8016ccc:	f343 2107 	sbfx	r1, r3, #8, #8
 8016cd0:	4549      	cmp	r1, r9
 8016cd2:	bfb8      	it	lt
 8016cd4:	4649      	movlt	r1, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8016cd6:	b249      	sxtb	r1, r1
 8016cd8:	4551      	cmp	r1, sl
 8016cda:	bfa8      	it	ge
 8016cdc:	4651      	movge	r1, sl
 8016cde:	f361 270f 	bfi	r7, r1, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8016ce2:	f343 4107 	sbfx	r1, r3, #16, #8
 8016ce6:	4549      	cmp	r1, r9
 8016ce8:	bfb8      	it	lt
 8016cea:	4649      	movlt	r1, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8016cec:	b249      	sxtb	r1, r1
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8016cee:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8016cf0:	4551      	cmp	r1, sl
 8016cf2:	bfa8      	it	ge
 8016cf4:	4651      	movge	r1, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8016cf6:	454b      	cmp	r3, r9
 8016cf8:	bfb8      	it	lt
 8016cfa:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8016cfc:	b25b      	sxtb	r3, r3
 8016cfe:	4553      	cmp	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8016d00:	f361 4717 	bfi	r7, r1, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8016d04:	bfa8      	it	ge
 8016d06:	4653      	movge	r3, sl
 8016d08:	f363 671f 	bfi	r7, r3, #24, #8
 8016d0c:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
 8016d10:	3c01      	subs	r4, #1
 8016d12:	e6fb      	b.n	8016b0c <arm_max_pool_s8+0x74>
        int32_t comp = *source;
 8016d14:	f993 1000 	ldrsb.w	r1, [r3]
        comp = MAX(comp, act_min);
 8016d18:	4549      	cmp	r1, r9
 8016d1a:	bfb8      	it	lt
 8016d1c:	4649      	movlt	r1, r9
        comp = MIN(comp, act_max);
 8016d1e:	4551      	cmp	r1, sl
 8016d20:	bfa8      	it	ge
 8016d22:	4651      	movge	r1, sl
        *source++ = (int8_t)comp;
 8016d24:	f803 1b01 	strb.w	r1, [r3], #1
        cnt--;
 8016d28:	e6fb      	b.n	8016b22 <arm_max_pool_s8+0x8a>
	...

08016d2c <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8016d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d30:	b08d      	sub	sp, #52	; 0x34
 8016d32:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8016d34:	2300      	movs	r3, #0
{
 8016d36:	9008      	str	r0, [sp, #32]
 8016d38:	910b      	str	r1, [sp, #44]	; 0x2c
 8016d3a:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	9303      	str	r3, [sp, #12]
 8016d40:	9a00      	ldr	r2, [sp, #0]
 8016d42:	9b08      	ldr	r3, [sp, #32]
 8016d44:	4413      	add	r3, r2
 8016d46:	9304      	str	r3, [sp, #16]
 8016d48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d4a:	4413      	add	r3, r2
 8016d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8016d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d50:	9b03      	ldr	r3, [sp, #12]
 8016d52:	4293      	cmp	r3, r2
 8016d54:	db02      	blt.n	8016d5c <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
 8016d56:	b00d      	add	sp, #52	; 0x34
 8016d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 8016d5c:	9b08      	ldr	r3, [sp, #32]
 8016d5e:	9a00      	ldr	r2, [sp, #0]
 8016d60:	569b      	ldrsb	r3, [r3, r2]
 8016d62:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
 8016d64:	2301      	movs	r3, #1
 8016d66:	9a02      	ldr	r2, [sp, #8]
 8016d68:	4293      	cmp	r3, r2
 8016d6a:	f2c0 8139 	blt.w	8016fe0 <arm_softmax_s8+0x2b4>
        int32_t sum = 0;
 8016d6e:	2300      	movs	r3, #0
        mult = 1 - mult;
 8016d70:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8016ff8 <arm_softmax_s8+0x2cc>
        for (col = 0; col < row_size; ++col)
 8016d74:	469e      	mov	lr, r3
 8016d76:	9a02      	ldr	r2, [sp, #8]
 8016d78:	4596      	cmp	lr, r2
 8016d7a:	f2c0 813f 	blt.w	8016ffc <arm_softmax_s8+0x2d0>
  return __builtin_clz(value);
 8016d7e:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8016d82:	4093      	lsls	r3, r2
 8016d84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8016d88:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8016d8a:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8016d8e:	f141 0100 	adc.w	r1, r1, #0
 8016d92:	085b      	lsrs	r3, r3, #1
 8016d94:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    mult = mult + (q63_t)m1 * m2;
 8016d98:	4c96      	ldr	r4, [pc, #600]	; (8016ff4 <arm_softmax_s8+0x2c8>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8016d9a:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 8016d9c:	4258      	negs	r0, r3
 8016d9e:	fb04 0001 	mla	r0, r4, r1, r0
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8016da2:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
 8016da6:	fba3 2404 	umull	r2, r4, r3, r4
 8016daa:	4420      	add	r0, r4
 8016dac:	4c92      	ldr	r4, [pc, #584]	; (8016ff8 <arm_softmax_s8+0x2cc>)
 8016dae:	1912      	adds	r2, r2, r4
    result = (int32_t) (mult / (1ll << 31));
 8016db0:	f160 0000 	sbc.w	r0, r0, #0
 8016db4:	2800      	cmp	r0, #0
 8016db6:	da05      	bge.n	8016dc4 <arm_softmax_s8+0x98>
 8016db8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016dbc:	1914      	adds	r4, r2, r4
 8016dbe:	4622      	mov	r2, r4
 8016dc0:	f140 0000 	adc.w	r0, r0, #0
 8016dc4:	0fd2      	lsrs	r2, r2, #31
 8016dc6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8016dca:	f102 325a 	add.w	r2, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 8016dce:	17d0      	asrs	r0, r2, #31
 8016dd0:	fb02 f501 	mul.w	r5, r2, r1
 8016dd4:	fb03 5500 	mla	r5, r3, r0, r5
 8016dd8:	fba2 0403 	umull	r0, r4, r2, r3
 8016ddc:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 8016de0:	eb45 0404 	adc.w	r4, r5, r4
    result = (int32_t) (mult / (1ll << 31));
 8016de4:	0fc0      	lsrs	r0, r0, #31
 8016de6:	ea40 0044 	orr.w	r0, r0, r4, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016dea:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8016dee:	ea82 0400 	eor.w	r4, r2, r0
 8016df2:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8016df4:	2c00      	cmp	r4, #0
 8016df6:	4c80      	ldr	r4, [pc, #512]	; (8016ff8 <arm_softmax_s8+0x2cc>)
 8016df8:	bf06      	itte	eq
 8016dfa:	2500      	moveq	r5, #0
 8016dfc:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8016e00:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8016e04:	fbc2 4500 	smlal	r4, r5, r2, r0
 8016e08:	2d00      	cmp	r5, #0
 8016e0a:	da05      	bge.n	8016e18 <arm_softmax_s8+0xec>
 8016e0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016e10:	1820      	adds	r0, r4, r0
 8016e12:	4604      	mov	r4, r0
 8016e14:	f145 0500 	adc.w	r5, r5, #0
 8016e18:	0fe4      	lsrs	r4, r4, #31
 8016e1a:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016e1e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 8016e22:	ea83 0002 	eor.w	r0, r3, r2
 8016e26:	0fc0      	lsrs	r0, r0, #31
        mult = 1 - mult;
 8016e28:	2800      	cmp	r0, #0
 8016e2a:	4d73      	ldr	r5, [pc, #460]	; (8016ff8 <arm_softmax_s8+0x2cc>)
    mult = mult + (q63_t)m1 * m2;
 8016e2c:	ea4f 70e2 	mov.w	r0, r2, asr #31
 8016e30:	fb02 f401 	mul.w	r4, r2, r1
 8016e34:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
 8016e38:	bf08      	it	eq
 8016e3a:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 8016e3e:	fba2 0c03 	umull	r0, ip, r2, r3
        mult = 1 - mult;
 8016e42:	bf0c      	ite	eq
 8016e44:	2600      	moveq	r6, #0
 8016e46:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 8016e4a:	4464      	add	r4, ip
 8016e4c:	1940      	adds	r0, r0, r5
    result = (int32_t) (mult / (1ll << 31));
 8016e4e:	eb44 0406 	adc.w	r4, r4, r6
 8016e52:	2c00      	cmp	r4, #0
 8016e54:	da05      	bge.n	8016e62 <arm_softmax_s8+0x136>
 8016e56:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8016e5a:	1945      	adds	r5, r0, r5
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	f144 0400 	adc.w	r4, r4, #0
 8016e62:	0fc0      	lsrs	r0, r0, #31
 8016e64:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016e68:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8016e6c:	ea82 0400 	eor.w	r4, r2, r0
 8016e70:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8016e72:	2c00      	cmp	r4, #0
 8016e74:	4c60      	ldr	r4, [pc, #384]	; (8016ff8 <arm_softmax_s8+0x2cc>)
 8016e76:	bf06      	itte	eq
 8016e78:	2500      	moveq	r5, #0
 8016e7a:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8016e7e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8016e82:	fbc2 4500 	smlal	r4, r5, r2, r0
 8016e86:	2d00      	cmp	r5, #0
 8016e88:	da05      	bge.n	8016e96 <arm_softmax_s8+0x16a>
 8016e8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016e8e:	1820      	adds	r0, r4, r0
 8016e90:	4604      	mov	r4, r0
 8016e92:	f145 0500 	adc.w	r5, r5, #0
 8016e96:	0fe4      	lsrs	r4, r4, #31
 8016e98:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016e9c:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8016ea0:	bfb5      	itete	lt
 8016ea2:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 8016ea6:	2000      	movge	r0, #0
 8016ea8:	2500      	movlt	r5, #0
 8016eaa:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 8016eae:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016eb2:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016eb6:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016eba:	bfd5      	itete	le
 8016ebc:	2500      	movle	r5, #0
 8016ebe:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
 8016ec2:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 8016ec6:	2400      	movgt	r4, #0
 8016ec8:	4028      	ands	r0, r5
 8016eca:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016ecc:	4402      	add	r2, r0
    if ((m1 < 0) ^ (m2 < 0))
 8016ece:	ea83 0002 	eor.w	r0, r3, r2
 8016ed2:	0fc0      	lsrs	r0, r0, #31
        mult = 1 - mult;
 8016ed4:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
 8016ed6:	ea4f 75e2 	mov.w	r5, r2, asr #31
        mult = 1 - mult;
 8016eda:	4847      	ldr	r0, [pc, #284]	; (8016ff8 <arm_softmax_s8+0x2cc>)
    mult = mult + (q63_t)m1 * m2;
 8016edc:	fb02 f101 	mul.w	r1, r2, r1
 8016ee0:	fb03 1105 	mla	r1, r3, r5, r1
        mult = 1 - mult;
 8016ee4:	bf08      	it	eq
 8016ee6:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 8016eea:	fba2 3503 	umull	r3, r5, r2, r3
        mult = 1 - mult;
 8016eee:	bf0c      	ite	eq
 8016ef0:	2400      	moveq	r4, #0
 8016ef2:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 8016ef6:	4429      	add	r1, r5
 8016ef8:	181b      	adds	r3, r3, r0
    result = (int32_t) (mult / (1ll << 31));
 8016efa:	eb41 0104 	adc.w	r1, r1, r4
 8016efe:	2900      	cmp	r1, #0
 8016f00:	da05      	bge.n	8016f0e <arm_softmax_s8+0x1e2>
 8016f02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016f06:	1818      	adds	r0, r3, r0
 8016f08:	4603      	mov	r3, r0
 8016f0a:	f141 0100 	adc.w	r1, r1, #0
 8016f0e:	0fdb      	lsrs	r3, r3, #31
 8016f10:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016f14:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8016f18:	ea82 0103 	eor.w	r1, r2, r3
 8016f1c:	0fc9      	lsrs	r1, r1, #31
        mult = 1 - mult;
 8016f1e:	2900      	cmp	r1, #0
 8016f20:	4935      	ldr	r1, [pc, #212]	; (8016ff8 <arm_softmax_s8+0x2cc>)
 8016f22:	bf06      	itte	eq
 8016f24:	2000      	moveq	r0, #0
 8016f26:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 8016f2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8016f2e:	fbc2 1003 	smlal	r1, r0, r2, r3
 8016f32:	2800      	cmp	r0, #0
 8016f34:	da05      	bge.n	8016f42 <arm_softmax_s8+0x216>
 8016f36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016f3a:	18cb      	adds	r3, r1, r3
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	f140 0000 	adc.w	r0, r0, #0
 8016f42:	0fc9      	lsrs	r1, r1, #31
 8016f44:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016f48:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8016f4c:	bfac      	ite	ge
 8016f4e:	2300      	movge	r3, #0
 8016f50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016f54:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 8016f58:	bfac      	ite	ge
 8016f5a:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
 8016f5e:	2000      	movlt	r0, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016f60:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016f64:	ea83 0300 	eor.w	r3, r3, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016f68:	bfcb      	itete	gt
 8016f6a:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016f6e:	2000      	movle	r0, #0
 8016f70:	2100      	movgt	r1, #0
 8016f72:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 8016f76:	4003      	ands	r3, r0
 8016f78:	404b      	eors	r3, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016f7a:	4413      	add	r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016f80:	bfb5      	itete	lt
 8016f82:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8016f86:	2200      	movge	r2, #0
 8016f88:	2100      	movlt	r1, #0
 8016f8a:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 8016f8e:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016f92:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016f96:	ea82 0201 	eor.w	r2, r2, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016f9a:	bfd5      	itete	le
 8016f9c:	2100      	movle	r1, #0
 8016f9e:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 8016fa2:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8016fa6:	2300      	movgt	r3, #0
 8016fa8:	400a      	ands	r2, r1
 8016faa:	4053      	eors	r3, r2
 8016fac:	9305      	str	r3, [sp, #20]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	fa03 f30a 	lsl.w	r3, r3, sl
 8016fb4:	3b01      	subs	r3, #1
 8016fb6:	9306      	str	r3, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 8016fb8:	105b      	asrs	r3, r3, #1
 8016fba:	9307      	str	r3, [sp, #28]
        mult = 1 - mult;
 8016fbc:	f8df e038 	ldr.w	lr, [pc, #56]	; 8016ff8 <arm_softmax_s8+0x2cc>
        threshold++;
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	9309      	str	r3, [sp, #36]	; 0x24
        for (col = 0; col < row_size; ++col)
 8016fc4:	f04f 0c00 	mov.w	ip, #0
 8016fc8:	9b02      	ldr	r3, [sp, #8]
 8016fca:	459c      	cmp	ip, r3
 8016fcc:	f2c0 818c 	blt.w	80172e8 <arm_softmax_s8+0x5bc>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8016fd0:	9b03      	ldr	r3, [sp, #12]
 8016fd2:	9a00      	ldr	r2, [sp, #0]
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	9303      	str	r3, [sp, #12]
 8016fd8:	9b02      	ldr	r3, [sp, #8]
 8016fda:	441a      	add	r2, r3
 8016fdc:	9200      	str	r2, [sp, #0]
 8016fde:	e6af      	b.n	8016d40 <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
 8016fe0:	9a04      	ldr	r2, [sp, #16]
 8016fe2:	9901      	ldr	r1, [sp, #4]
 8016fe4:	56d2      	ldrsb	r2, [r2, r3]
 8016fe6:	4291      	cmp	r1, r2
 8016fe8:	bfb8      	it	lt
 8016fea:	4611      	movlt	r1, r2
 8016fec:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
 8016fee:	3301      	adds	r3, #1
 8016ff0:	e6b9      	b.n	8016d66 <arm_softmax_s8+0x3a>
 8016ff2:	bf00      	nop
 8016ff4:	c3c3c3c4 	.word	0xc3c3c3c4
 8016ff8:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
 8016ffc:	9a04      	ldr	r2, [sp, #16]
 8016ffe:	f912 100e 	ldrsb.w	r1, [r2, lr]
 8017002:	9a01      	ldr	r2, [sp, #4]
 8017004:	1a89      	subs	r1, r1, r2
            if (diff >= diff_min)
 8017006:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017008:	428a      	cmp	r2, r1
 801700a:	f300 815a 	bgt.w	80172c2 <arm_softmax_s8+0x596>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 801700e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017010:	4091      	lsls	r1, r2
    if ((m1 < 0) ^ (m2 < 0))
 8017012:	ea81 020b 	eor.w	r2, r1, fp
 8017016:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 8017018:	2a00      	cmp	r2, #0
 801701a:	bf0b      	itete	eq
 801701c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8017020:	4642      	movne	r2, r8
 8017022:	2000      	moveq	r0, #0
 8017024:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017028:	fbc1 200b 	smlal	r2, r0, r1, fp
 801702c:	2800      	cmp	r0, #0
 801702e:	da05      	bge.n	801703c <arm_softmax_s8+0x310>
 8017030:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8017034:	1914      	adds	r4, r2, r4
 8017036:	4622      	mov	r2, r4
 8017038:	f140 0000 	adc.w	r0, r0, #0
 801703c:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801703e:	4559      	cmp	r1, fp
    result = (int32_t) (mult / (1ll << 31));
 8017040:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017044:	d104      	bne.n	8017050 <arm_softmax_s8+0x324>
        result = Q31_MAX;
 8017046:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 801704a:	bf08      	it	eq
 801704c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8017050:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
 8017054:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8017058:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 801705c:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 8017060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t) (mult / (1ll << 31));
 8017064:	2400      	movs	r4, #0
 8017066:	fbcc 140c 	smlal	r1, r4, ip, ip
 801706a:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 801706c:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t) (mult / (1ll << 31));
 8017070:	da05      	bge.n	801707e <arm_softmax_s8+0x352>
 8017072:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017076:	1808      	adds	r0, r1, r0
 8017078:	4601      	mov	r1, r0
 801707a:	f144 0400 	adc.w	r4, r4, #0
 801707e:	0fc9      	lsrs	r1, r1, #31
 8017080:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8017084:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t) (mult / (1ll << 31));
 8017088:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 801708a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 801708e:	fb01 fa04 	mul.w	sl, r1, r4
    result = (int32_t) (mult / (1ll << 31));
 8017092:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 8017096:	f1b9 0f00 	cmp.w	r9, #0
 801709a:	da06      	bge.n	80170aa <arm_softmax_s8+0x37e>
 801709c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80170a0:	eb10 0a0a 	adds.w	sl, r0, sl
 80170a4:	4650      	mov	r0, sl
 80170a6:	f149 0900 	adc.w	r9, r9, #0
 80170aa:	0fc0      	lsrs	r0, r0, #31
 80170ac:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 80170b0:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 80170b4:	1080      	asrs	r0, r0, #2
 80170b6:	bf54      	ite	pl
 80170b8:	f04f 0a01 	movpl.w	sl, #1
 80170bc:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 80170c0:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 80170c2:	ea8c 0901 	eor.w	r9, ip, r1
 80170c6:	ea4f 79d9 	mov.w	r9, r9, lsr #31
        result++;
 80170ca:	bfc8      	it	gt
 80170cc:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
 80170ce:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
 80170d2:	f1b9 0f00 	cmp.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
 80170d6:	fb01 4406 	mla	r4, r1, r6, r4
        mult = 1 - mult;
 80170da:	bf08      	it	eq
 80170dc:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 80170e0:	fbac 6701 	umull	r6, r7, ip, r1
        mult = 1 - mult;
 80170e4:	bf16      	itet	ne
 80170e6:	46c1      	movne	r9, r8
 80170e8:	f04f 0a00 	moveq.w	sl, #0
 80170ec:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 80170f0:	443c      	add	r4, r7
 80170f2:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t) (mult / (1ll << 31));
 80170f6:	eb44 040a 	adc.w	r4, r4, sl
 80170fa:	2c00      	cmp	r4, #0
 80170fc:	da06      	bge.n	801710c <arm_softmax_s8+0x3e0>
 80170fe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017102:	eb16 0909 	adds.w	r9, r6, r9
 8017106:	464e      	mov	r6, r9
 8017108:	f144 0400 	adc.w	r4, r4, #0
 801710c:	0ff6      	lsrs	r6, r6, #31
 801710e:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017112:	4406      	add	r6, r0
    if ((m1 < 0) ^ (m2 < 0))
 8017114:	0ff0      	lsrs	r0, r6, #31
        mult = 1 - mult;
 8017116:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 8017118:	4f6b      	ldr	r7, [pc, #428]	; (80172c8 <arm_softmax_s8+0x59c>)
        mult = 1 - mult;
 801711a:	bf0b      	itete	eq
 801711c:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8017120:	4640      	movne	r0, r8
 8017122:	2400      	moveq	r4, #0
 8017124:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017128:	fbc6 0407 	smlal	r0, r4, r6, r7
 801712c:	2c00      	cmp	r4, #0
 801712e:	da05      	bge.n	801713c <arm_softmax_s8+0x410>
 8017130:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8017134:	1986      	adds	r6, r0, r6
 8017136:	4630      	mov	r0, r6
 8017138:	f144 0400 	adc.w	r4, r4, #0
 801713c:	0fc0      	lsrs	r0, r0, #31
 801713e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017142:	4401      	add	r1, r0
    if (result < 0)
 8017144:	1048      	asrs	r0, r1, #1
 8017146:	d402      	bmi.n	801714e <arm_softmax_s8+0x422>
    if (remainder > threshold)
 8017148:	07ce      	lsls	r6, r1, #31
        result++;
 801714a:	bf48      	it	mi
 801714c:	3001      	addmi	r0, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801714e:	eb0c 0100 	add.w	r1, ip, r0
    if ((m1 < 0) ^ (m2 < 0))
 8017152:	0fc8      	lsrs	r0, r1, #31
        mult = 1 - mult;
 8017154:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 8017156:	4e5d      	ldr	r6, [pc, #372]	; (80172cc <arm_softmax_s8+0x5a0>)
        mult = 1 - mult;
 8017158:	bf0b      	itete	eq
 801715a:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 801715e:	4644      	movne	r4, r8
 8017160:	2000      	moveq	r0, #0
 8017162:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017166:	fbc1 4006 	smlal	r4, r0, r1, r6
 801716a:	2800      	cmp	r0, #0
 801716c:	da05      	bge.n	801717a <arm_softmax_s8+0x44e>
 801716e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017172:	1861      	adds	r1, r4, r1
 8017174:	460c      	mov	r4, r1
 8017176:	f140 0000 	adc.w	r0, r0, #0
 801717a:	0fe4      	lsrs	r4, r4, #31
 801717c:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017180:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 8017184:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017188:	2000      	movs	r0, #0
 801718a:	4f51      	ldr	r7, [pc, #324]	; (80172d0 <arm_softmax_s8+0x5a4>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801718c:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 8017190:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 8017194:	468c      	mov	ip, r1
 8017196:	4681      	mov	r9, r0
 8017198:	fbc4 c907 	smlal	ip, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 801719c:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t) (mult / (1ll << 31));
 80171a0:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 80171a4:	ea4c 0c49 	orr.w	ip, ip, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 80171a8:	3e01      	subs	r6, #1
 80171aa:	f345 6900 	sbfx	r9, r5, #24, #1
 80171ae:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
 80171b2:	4f48      	ldr	r7, [pc, #288]	; (80172d4 <arm_softmax_s8+0x5a8>)
    SELECT_IF_NON_ZERO(1672461947)
 80171b4:	4026      	ands	r6, r4
 80171b6:	ea89 0406 	eor.w	r4, r9, r6
    mult = mult + (q63_t)m1 * m2;
 80171ba:	4689      	mov	r9, r1
 80171bc:	4606      	mov	r6, r0
 80171be:	fbc4 9607 	smlal	r9, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 80171c2:	f3c5 6c40 	ubfx	ip, r5, #25, #1
    result = (int32_t) (mult / (1ll << 31));
 80171c6:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80171ca:	ea49 0946 	orr.w	r9, r9, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 80171ce:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80171d2:	f345 6640 	sbfx	r6, r5, #25, #1
 80171d6:	ea0c 0c04 	and.w	ip, ip, r4
    mult = mult + (q63_t)m1 * m2;
 80171da:	4f3f      	ldr	r7, [pc, #252]	; (80172d8 <arm_softmax_s8+0x5ac>)
    SELECT_IF_NON_ZERO(1302514674)
 80171dc:	ea06 0609 	and.w	r6, r6, r9
 80171e0:	ea86 060c 	eor.w	r6, r6, ip
    mult = mult + (q63_t)m1 * m2;
 80171e4:	4689      	mov	r9, r1
 80171e6:	4604      	mov	r4, r0
 80171e8:	fbc6 9407 	smlal	r9, r4, r6, r7
    SELECT_IF_NON_ZERO(790015084)
 80171ec:	f3c5 6c80 	ubfx	ip, r5, #26, #1
    result = (int32_t) (mult / (1ll << 31));
 80171f0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80171f4:	ea49 0944 	orr.w	r9, r9, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 80171f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80171fc:	f345 6480 	sbfx	r4, r5, #26, #1
 8017200:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
 8017204:	4f35      	ldr	r7, [pc, #212]	; (80172dc <arm_softmax_s8+0x5b0>)
    SELECT_IF_NON_ZERO(790015084)
 8017206:	ea04 0409 	and.w	r4, r4, r9
 801720a:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 801720e:	4689      	mov	r9, r1
 8017210:	4606      	mov	r6, r0
 8017212:	fbc4 9607 	smlal	r9, r6, r4, r7
    SELECT_IF_NON_ZERO(290630308)
 8017216:	f3c5 6cc0 	ubfx	ip, r5, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 801721a:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 801721e:	ea49 0946 	orr.w	r9, r9, r6, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8017222:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017226:	f345 66c0 	sbfx	r6, r5, #27, #1
 801722a:	ea0c 0c04 	and.w	ip, ip, r4
 801722e:	ea06 0609 	and.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 8017232:	4f2b      	ldr	r7, [pc, #172]	; (80172e0 <arm_softmax_s8+0x5b4>)
    SELECT_IF_NON_ZERO(290630308)
 8017234:	ea86 060c 	eor.w	r6, r6, ip
    mult = mult + (q63_t)m1 * m2;
 8017238:	4689      	mov	r9, r1
 801723a:	4604      	mov	r4, r0
 801723c:	fbc6 9407 	smlal	r9, r4, r6, r7
    SELECT_IF_NON_ZERO(39332535)
 8017240:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 8017244:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8017248:	ea49 0944 	orr.w	r9, r9, r4, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 801724c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017250:	f345 7400 	sbfx	r4, r5, #28, #1
 8017254:	ea0c 0c06 	and.w	ip, ip, r6
 8017258:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
 801725c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80172e4 <arm_softmax_s8+0x5b8>
    SELECT_IF_NON_ZERO(39332535)
 8017260:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 8017264:	4682      	mov	sl, r0
 8017266:	468c      	mov	ip, r1
 8017268:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 801726c:	f3c5 7640 	ubfx	r6, r5, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8017270:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(720401)
 8017274:	f345 7940 	sbfx	r9, r5, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8017278:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 801727c:	3e01      	subs	r6, #1
 801727e:	4026      	ands	r6, r4
 8017280:	ea09 090c 	and.w	r9, r9, ip
 8017284:	ea89 0906 	eor.w	r9, r9, r6
    mult = mult + (q63_t)m1 * m2;
 8017288:	26f2      	movs	r6, #242	; 0xf2
 801728a:	fbc9 1006 	smlal	r1, r0, r9, r6
    SELECT_IF_NON_ZERO(242)
 801728e:	f3c5 7480 	ubfx	r4, r5, #30, #1
    result = (int32_t) (mult / (1ll << 31));
 8017292:	0fc9      	lsrs	r1, r1, #31
 8017294:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 8017298:	f345 7580 	sbfx	r5, r5, #30, #1
 801729c:	3c01      	subs	r4, #1
    mask = MASK_IF_ZERO(val);
 801729e:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 80172a2:	400d      	ands	r5, r1
 80172a4:	ea04 0409 	and.w	r4, r4, r9
    mask = MASK_IF_ZERO(val);
 80172a8:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 80172aa:	4065      	eors	r5, r4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80172ac:	1e51      	subs	r1, r2, #1
    mask = MASK_IF_ZERO(val);
 80172ae:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80172b0:	4029      	ands	r1, r5
 80172b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80172b6:	404a      	eors	r2, r1
    result = dividend >> exponent;
 80172b8:	1311      	asrs	r1, r2, #12
    if (remainder > threshold)
 80172ba:	0514      	lsls	r4, r2, #20
        result++;
 80172bc:	bf48      	it	mi
 80172be:	3101      	addmi	r1, #1
 80172c0:	440b      	add	r3, r1
        for (col = 0; col < row_size; ++col)
 80172c2:	f10e 0e01 	add.w	lr, lr, #1
 80172c6:	e556      	b.n	8016d76 <arm_softmax_s8+0x4a>
 80172c8:	2aaaaaab 	.word	0x2aaaaaab
 80172cc:	70f5a894 	.word	0x70f5a894
 80172d0:	63afbe7b 	.word	0x63afbe7b
 80172d4:	4da2cbf2 	.word	0x4da2cbf2
 80172d8:	2f16ac6c 	.word	0x2f16ac6c
 80172dc:	1152aaa4 	.word	0x1152aaa4
 80172e0:	02582ab7 	.word	0x02582ab7
 80172e4:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
 80172e8:	9b04      	ldr	r3, [sp, #16]
 80172ea:	9a01      	ldr	r2, [sp, #4]
 80172ec:	f913 300c 	ldrsb.w	r3, [r3, ip]
 80172f0:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 80172f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80172f4:	4293      	cmp	r3, r2
 80172f6:	f2c0 8175 	blt.w	80175e4 <arm_softmax_s8+0x8b8>
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80172fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80172fc:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
 80172fe:	ea83 020b 	eor.w	r2, r3, fp
 8017302:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 8017304:	2a00      	cmp	r2, #0
 8017306:	bf0b      	itete	eq
 8017308:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 801730c:	4672      	movne	r2, lr
 801730e:	2100      	moveq	r1, #0
 8017310:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017314:	fbc3 210b 	smlal	r2, r1, r3, fp
 8017318:	2900      	cmp	r1, #0
 801731a:	da05      	bge.n	8017328 <arm_softmax_s8+0x5fc>
 801731c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017320:	1810      	adds	r0, r2, r0
 8017322:	4602      	mov	r2, r0
 8017324:	f141 0100 	adc.w	r1, r1, #0
 8017328:	0fd2      	lsrs	r2, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801732a:	455b      	cmp	r3, fp
    result = (int32_t) (mult / (1ll << 31));
 801732c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017330:	d104      	bne.n	801733c <arm_softmax_s8+0x610>
        result = Q31_MAX;
 8017332:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 8017336:	bf08      	it	eq
 8017338:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801733c:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder             = val_mod_minus_quarter - val;
 8017340:	1ab3      	subs	r3, r6, r2
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8017342:	0176      	lsls	r6, r6, #5
 8017344:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 8017348:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t) (mult / (1ll << 31));
 801734c:	2400      	movs	r4, #0
 801734e:	fbc6 1406 	smlal	r1, r4, r6, r6
 8017352:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 8017354:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t) (mult / (1ll << 31));
 8017358:	da05      	bge.n	8017366 <arm_softmax_s8+0x63a>
 801735a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801735e:	1808      	adds	r0, r1, r0
 8017360:	4601      	mov	r1, r0
 8017362:	f144 0400 	adc.w	r4, r4, #0
 8017366:	0fc9      	lsrs	r1, r1, #31
 8017368:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 801736c:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t) (mult / (1ll << 31));
 8017370:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 8017372:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 8017376:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t) (mult / (1ll << 31));
 801737a:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
 801737e:	f1b8 0f00 	cmp.w	r8, #0
 8017382:	da06      	bge.n	8017392 <arm_softmax_s8+0x666>
 8017384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017388:	eb10 0909 	adds.w	r9, r0, r9
 801738c:	4648      	mov	r0, r9
 801738e:	f148 0800 	adc.w	r8, r8, #0
 8017392:	0fc0      	lsrs	r0, r0, #31
 8017394:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 8017398:	f000 0803 	and.w	r8, r0, #3
        threshold++;
 801739c:	1080      	asrs	r0, r0, #2
 801739e:	bf54      	ite	pl
 80173a0:	f04f 0901 	movpl.w	r9, #1
 80173a4:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 80173a8:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
 80173aa:	ea86 0801 	eor.w	r8, r6, r1
 80173ae:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        result++;
 80173b2:	bfc8      	it	gt
 80173b4:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
 80173b6:	4374      	muls	r4, r6
        mult = 1 - mult;
 80173b8:	f1b8 0f00 	cmp.w	r8, #0
    mult = mult + (q63_t)m1 * m2;
 80173bc:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
 80173c0:	bf08      	it	eq
 80173c2:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
 80173c6:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
 80173ca:	bf16      	itet	ne
 80173cc:	46f0      	movne	r8, lr
 80173ce:	f04f 0900 	moveq.w	r9, #0
 80173d2:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 80173d6:	443c      	add	r4, r7
 80173d8:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t) (mult / (1ll << 31));
 80173dc:	eb44 0409 	adc.w	r4, r4, r9
 80173e0:	2c00      	cmp	r4, #0
 80173e2:	da06      	bge.n	80173f2 <arm_softmax_s8+0x6c6>
 80173e4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80173e8:	eb15 0808 	adds.w	r8, r5, r8
 80173ec:	4645      	mov	r5, r8
 80173ee:	f144 0400 	adc.w	r4, r4, #0
 80173f2:	0fed      	lsrs	r5, r5, #31
 80173f4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80173f8:	4405      	add	r5, r0
    if ((m1 < 0) ^ (m2 < 0))
 80173fa:	0fe8      	lsrs	r0, r5, #31
        mult = 1 - mult;
 80173fc:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 80173fe:	4f7b      	ldr	r7, [pc, #492]	; (80175ec <arm_softmax_s8+0x8c0>)
        mult = 1 - mult;
 8017400:	bf0b      	itete	eq
 8017402:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 8017406:	4670      	movne	r0, lr
 8017408:	2400      	moveq	r4, #0
 801740a:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801740e:	fbc5 0407 	smlal	r0, r4, r5, r7
 8017412:	2c00      	cmp	r4, #0
 8017414:	da05      	bge.n	8017422 <arm_softmax_s8+0x6f6>
 8017416:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801741a:	1945      	adds	r5, r0, r5
 801741c:	4628      	mov	r0, r5
 801741e:	f144 0400 	adc.w	r4, r4, #0
 8017422:	0fc0      	lsrs	r0, r0, #31
 8017424:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017428:	4401      	add	r1, r0
    if (result < 0)
 801742a:	1048      	asrs	r0, r1, #1
 801742c:	d402      	bmi.n	8017434 <arm_softmax_s8+0x708>
    if (remainder > threshold)
 801742e:	07c9      	lsls	r1, r1, #31
        result++;
 8017430:	bf48      	it	mi
 8017432:	3001      	addmi	r0, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017434:	1831      	adds	r1, r6, r0
    if ((m1 < 0) ^ (m2 < 0))
 8017436:	0fc8      	lsrs	r0, r1, #31
        mult = 1 - mult;
 8017438:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 801743a:	4d6d      	ldr	r5, [pc, #436]	; (80175f0 <arm_softmax_s8+0x8c4>)
        mult = 1 - mult;
 801743c:	bf0b      	itete	eq
 801743e:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 8017442:	4674      	movne	r4, lr
 8017444:	2000      	moveq	r0, #0
 8017446:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801744a:	fbc1 4005 	smlal	r4, r0, r1, r5
 801744e:	2800      	cmp	r0, #0
 8017450:	da05      	bge.n	801745e <arm_softmax_s8+0x732>
 8017452:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017456:	1861      	adds	r1, r4, r1
 8017458:	460c      	mov	r4, r1
 801745a:	f140 0000 	adc.w	r0, r0, #0
 801745e:	0fe4      	lsrs	r4, r4, #31
 8017460:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017464:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 8017468:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801746c:	2000      	movs	r0, #0
 801746e:	4f61      	ldr	r7, [pc, #388]	; (80175f4 <arm_softmax_s8+0x8c8>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8017470:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 8017474:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 8017478:	460e      	mov	r6, r1
 801747a:	4680      	mov	r8, r0
 801747c:	fbc4 6807 	smlal	r6, r8, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 8017480:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t) (mult / (1ll << 31));
 8017484:	0ff6      	lsrs	r6, r6, #31
 8017486:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 801748a:	3d01      	subs	r5, #1
 801748c:	f343 6800 	sbfx	r8, r3, #24, #1
 8017490:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
 8017494:	4f58      	ldr	r7, [pc, #352]	; (80175f8 <arm_softmax_s8+0x8cc>)
    SELECT_IF_NON_ZERO(1672461947)
 8017496:	4025      	ands	r5, r4
 8017498:	ea88 0405 	eor.w	r4, r8, r5
    mult = mult + (q63_t)m1 * m2;
 801749c:	4688      	mov	r8, r1
 801749e:	4605      	mov	r5, r0
 80174a0:	fbc4 8507 	smlal	r8, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 80174a4:	f3c3 6640 	ubfx	r6, r3, #25, #1
    result = (int32_t) (mult / (1ll << 31));
 80174a8:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80174ac:	ea48 0845 	orr.w	r8, r8, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 80174b0:	3e01      	subs	r6, #1
 80174b2:	f343 6540 	sbfx	r5, r3, #25, #1
 80174b6:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
 80174b8:	4f50      	ldr	r7, [pc, #320]	; (80175fc <arm_softmax_s8+0x8d0>)
    SELECT_IF_NON_ZERO(1302514674)
 80174ba:	ea05 0508 	and.w	r5, r5, r8
 80174be:	4075      	eors	r5, r6
    mult = mult + (q63_t)m1 * m2;
 80174c0:	4688      	mov	r8, r1
 80174c2:	4604      	mov	r4, r0
 80174c4:	fbc5 8407 	smlal	r8, r4, r5, r7
    SELECT_IF_NON_ZERO(790015084)
 80174c8:	f3c3 6680 	ubfx	r6, r3, #26, #1
    result = (int32_t) (mult / (1ll << 31));
 80174cc:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80174d0:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 80174d4:	3e01      	subs	r6, #1
 80174d6:	f343 6480 	sbfx	r4, r3, #26, #1
 80174da:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
 80174dc:	4f48      	ldr	r7, [pc, #288]	; (8017600 <arm_softmax_s8+0x8d4>)
    SELECT_IF_NON_ZERO(790015084)
 80174de:	ea04 0408 	and.w	r4, r4, r8
 80174e2:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 80174e4:	4688      	mov	r8, r1
 80174e6:	4605      	mov	r5, r0
 80174e8:	fbc4 8507 	smlal	r8, r5, r4, r7
    SELECT_IF_NON_ZERO(290630308)
 80174ec:	f3c3 66c0 	ubfx	r6, r3, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 80174f0:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80174f4:	ea48 0845 	orr.w	r8, r8, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 80174f8:	3e01      	subs	r6, #1
 80174fa:	f343 65c0 	sbfx	r5, r3, #27, #1
 80174fe:	4026      	ands	r6, r4
 8017500:	ea05 0508 	and.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 8017504:	4f3f      	ldr	r7, [pc, #252]	; (8017604 <arm_softmax_s8+0x8d8>)
    SELECT_IF_NON_ZERO(290630308)
 8017506:	4075      	eors	r5, r6
    mult = mult + (q63_t)m1 * m2;
 8017508:	4688      	mov	r8, r1
 801750a:	4604      	mov	r4, r0
 801750c:	fbc5 8407 	smlal	r8, r4, r5, r7
    SELECT_IF_NON_ZERO(39332535)
 8017510:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 8017514:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8017518:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 801751c:	3e01      	subs	r6, #1
 801751e:	f343 7400 	sbfx	r4, r3, #28, #1
 8017522:	402e      	ands	r6, r5
 8017524:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
 8017528:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017608 <arm_softmax_s8+0x8dc>
    SELECT_IF_NON_ZERO(39332535)
 801752c:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 801752e:	4681      	mov	r9, r0
 8017530:	460e      	mov	r6, r1
 8017532:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
 8017536:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 801753a:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(720401)
 801753c:	f343 7840 	sbfx	r8, r3, #29, #1
    result = (int32_t) (mult / (1ll << 31));
 8017540:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
 8017544:	3d01      	subs	r5, #1
 8017546:	4025      	ands	r5, r4
 8017548:	ea08 0806 	and.w	r8, r8, r6
 801754c:	ea88 0805 	eor.w	r8, r8, r5
    mult = mult + (q63_t)m1 * m2;
 8017550:	25f2      	movs	r5, #242	; 0xf2
 8017552:	fbc8 1005 	smlal	r1, r0, r8, r5
    SELECT_IF_NON_ZERO(242)
 8017556:	f3c3 7480 	ubfx	r4, r3, #30, #1
    result = (int32_t) (mult / (1ll << 31));
 801755a:	0fc9      	lsrs	r1, r1, #31
 801755c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 8017560:	f343 7380 	sbfx	r3, r3, #30, #1
 8017564:	3c01      	subs	r4, #1
    mask = MASK_IF_ZERO(val);
 8017566:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 801756a:	400b      	ands	r3, r1
    mask = MASK_IF_ZERO(val);
 801756c:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 801756e:	ea04 0408 	and.w	r4, r4, r8
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8017572:	1e51      	subs	r1, r2, #1
    SELECT_IF_NON_ZERO(242)
 8017574:	4063      	eors	r3, r4
    mask = MASK_IF_ZERO(val);
 8017576:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8017578:	400b      	ands	r3, r1
 801757a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801757e:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 8017580:	9b05      	ldr	r3, [sp, #20]
    result = (int32_t) (mult / (1ll << 31));
 8017582:	9805      	ldr	r0, [sp, #20]
    if ((m1 < 0) ^ (m2 < 0))
 8017584:	4053      	eors	r3, r2
 8017586:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 8017588:	2b00      	cmp	r3, #0
 801758a:	bf0b      	itete	eq
 801758c:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8017590:	4673      	movne	r3, lr
 8017592:	2100      	moveq	r1, #0
 8017594:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8017598:	fbc0 3102 	smlal	r3, r1, r0, r2
 801759c:	2900      	cmp	r1, #0
 801759e:	da05      	bge.n	80175ac <arm_softmax_s8+0x880>
 80175a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80175a4:	189a      	adds	r2, r3, r2
 80175a6:	4613      	mov	r3, r2
 80175a8:	f141 0100 	adc.w	r1, r1, #0
    int32_t remainder = remainder_mask & dividend;
 80175ac:	9a06      	ldr	r2, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
 80175ae:	9807      	ldr	r0, [sp, #28]
    result = (int32_t) (mult / (1ll << 31));
 80175b0:	0fdb      	lsrs	r3, r3, #31
 80175b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    int32_t remainder = remainder_mask & dividend;
 80175b6:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
 80175b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175ba:	fa53 f30a 	asrs.w	r3, r3, sl
 80175be:	bf58      	it	pl
 80175c0:	4601      	movpl	r1, r0
    if (remainder > threshold)
 80175c2:	428a      	cmp	r2, r1
        result++;
 80175c4:	bfc8      	it	gt
 80175c6:	3301      	addgt	r3, #1
 80175c8:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80175ca:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80175ce:	db09      	blt.n	80175e4 <arm_softmax_s8+0x8b8>
 80175d0:	2b7e      	cmp	r3, #126	; 0x7e
 80175d2:	bfd4      	ite	le
 80175d4:	b25b      	sxtble	r3, r3
 80175d6:	237f      	movgt	r3, #127	; 0x7f
 80175d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175da:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
 80175de:	f10c 0c01 	add.w	ip, ip, #1
 80175e2:	e4f1      	b.n	8016fc8 <arm_softmax_s8+0x29c>
 80175e4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80175e8:	e7f6      	b.n	80175d8 <arm_softmax_s8+0x8ac>
 80175ea:	bf00      	nop
 80175ec:	2aaaaaab 	.word	0x2aaaaaab
 80175f0:	70f5a894 	.word	0x70f5a894
 80175f4:	63afbe7b 	.word	0x63afbe7b
 80175f8:	4da2cbf2 	.word	0x4da2cbf2
 80175fc:	2f16ac6c 	.word	0x2f16ac6c
 8017600:	1152aaa4 	.word	0x1152aaa4
 8017604:	02582ab7 	.word	0x02582ab7
 8017608:	000afe11 	.word	0x000afe11

0801760c <_ZdlPvj>:
 801760c:	f000 b824 	b.w	8017658 <_ZdlPv>

08017610 <_ZdaPv>:
 8017610:	f000 b822 	b.w	8017658 <_ZdlPv>

08017614 <__cxa_guard_acquire>:
 8017614:	6803      	ldr	r3, [r0, #0]
 8017616:	07db      	lsls	r3, r3, #31
 8017618:	d406      	bmi.n	8017628 <__cxa_guard_acquire+0x14>
 801761a:	7843      	ldrb	r3, [r0, #1]
 801761c:	b103      	cbz	r3, 8017620 <__cxa_guard_acquire+0xc>
 801761e:	deff      	udf	#255	; 0xff
 8017620:	2301      	movs	r3, #1
 8017622:	7043      	strb	r3, [r0, #1]
 8017624:	4618      	mov	r0, r3
 8017626:	4770      	bx	lr
 8017628:	2000      	movs	r0, #0
 801762a:	4770      	bx	lr

0801762c <__cxa_guard_release>:
 801762c:	2301      	movs	r3, #1
 801762e:	6003      	str	r3, [r0, #0]
 8017630:	4770      	bx	lr

08017632 <_Znwj>:
 8017632:	2801      	cmp	r0, #1
 8017634:	bf38      	it	cc
 8017636:	2001      	movcc	r0, #1
 8017638:	b510      	push	{r4, lr}
 801763a:	4604      	mov	r4, r0
 801763c:	4620      	mov	r0, r4
 801763e:	f000 faed 	bl	8017c1c <malloc>
 8017642:	b100      	cbz	r0, 8017646 <_Znwj+0x14>
 8017644:	bd10      	pop	{r4, pc}
 8017646:	f000 f809 	bl	801765c <_ZSt15get_new_handlerv>
 801764a:	b908      	cbnz	r0, 8017650 <_Znwj+0x1e>
 801764c:	f000 faba 	bl	8017bc4 <abort>
 8017650:	4780      	blx	r0
 8017652:	e7f3      	b.n	801763c <_Znwj+0xa>

08017654 <_Znaj>:
 8017654:	f7ff bfed 	b.w	8017632 <_Znwj>

08017658 <_ZdlPv>:
 8017658:	f000 bae8 	b.w	8017c2c <free>

0801765c <_ZSt15get_new_handlerv>:
 801765c:	4b02      	ldr	r3, [pc, #8]	; (8017668 <_ZSt15get_new_handlerv+0xc>)
 801765e:	6818      	ldr	r0, [r3, #0]
 8017660:	f3bf 8f5b 	dmb	ish
 8017664:	4770      	bx	lr
 8017666:	bf00      	nop
 8017668:	20017a78 	.word	0x20017a78

0801766c <frexp>:
 801766c:	b570      	push	{r4, r5, r6, lr}
 801766e:	2100      	movs	r1, #0
 8017670:	ec55 4b10 	vmov	r4, r5, d0
 8017674:	6001      	str	r1, [r0, #0]
 8017676:	4916      	ldr	r1, [pc, #88]	; (80176d0 <frexp+0x64>)
 8017678:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801767c:	428a      	cmp	r2, r1
 801767e:	4606      	mov	r6, r0
 8017680:	462b      	mov	r3, r5
 8017682:	dc22      	bgt.n	80176ca <frexp+0x5e>
 8017684:	ee10 1a10 	vmov	r1, s0
 8017688:	4311      	orrs	r1, r2
 801768a:	d01e      	beq.n	80176ca <frexp+0x5e>
 801768c:	4911      	ldr	r1, [pc, #68]	; (80176d4 <frexp+0x68>)
 801768e:	4029      	ands	r1, r5
 8017690:	b969      	cbnz	r1, 80176ae <frexp+0x42>
 8017692:	4b11      	ldr	r3, [pc, #68]	; (80176d8 <frexp+0x6c>)
 8017694:	2200      	movs	r2, #0
 8017696:	ee10 0a10 	vmov	r0, s0
 801769a:	4629      	mov	r1, r5
 801769c:	f7e8 ffb4 	bl	8000608 <__aeabi_dmul>
 80176a0:	460b      	mov	r3, r1
 80176a2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80176a6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80176aa:	4604      	mov	r4, r0
 80176ac:	6031      	str	r1, [r6, #0]
 80176ae:	6831      	ldr	r1, [r6, #0]
 80176b0:	1512      	asrs	r2, r2, #20
 80176b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80176b6:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80176ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80176be:	4411      	add	r1, r2
 80176c0:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80176c4:	6031      	str	r1, [r6, #0]
 80176c6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80176ca:	ec45 4b10 	vmov	d0, r4, r5
 80176ce:	bd70      	pop	{r4, r5, r6, pc}
 80176d0:	7fefffff 	.word	0x7fefffff
 80176d4:	7ff00000 	.word	0x7ff00000
 80176d8:	43500000 	.word	0x43500000

080176dc <expf>:
 80176dc:	b508      	push	{r3, lr}
 80176de:	ed2d 8b02 	vpush	{d8}
 80176e2:	eef0 8a40 	vmov.f32	s17, s0
 80176e6:	f000 f99f 	bl	8017a28 <__ieee754_expf>
 80176ea:	eeb0 8a40 	vmov.f32	s16, s0
 80176ee:	eeb0 0a68 	vmov.f32	s0, s17
 80176f2:	f000 f829 	bl	8017748 <finitef>
 80176f6:	b160      	cbz	r0, 8017712 <expf+0x36>
 80176f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017738 <expf+0x5c>
 80176fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017704:	dd0a      	ble.n	801771c <expf+0x40>
 8017706:	f000 fe21 	bl	801834c <__errno>
 801770a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801773c <expf+0x60>
 801770e:	2322      	movs	r3, #34	; 0x22
 8017710:	6003      	str	r3, [r0, #0]
 8017712:	eeb0 0a48 	vmov.f32	s0, s16
 8017716:	ecbd 8b02 	vpop	{d8}
 801771a:	bd08      	pop	{r3, pc}
 801771c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017740 <expf+0x64>
 8017720:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017728:	d5f3      	bpl.n	8017712 <expf+0x36>
 801772a:	f000 fe0f 	bl	801834c <__errno>
 801772e:	2322      	movs	r3, #34	; 0x22
 8017730:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8017744 <expf+0x68>
 8017734:	6003      	str	r3, [r0, #0]
 8017736:	e7ec      	b.n	8017712 <expf+0x36>
 8017738:	42b17217 	.word	0x42b17217
 801773c:	7f800000 	.word	0x7f800000
 8017740:	c2cff1b5 	.word	0xc2cff1b5
 8017744:	00000000 	.word	0x00000000

08017748 <finitef>:
 8017748:	b082      	sub	sp, #8
 801774a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801774e:	9801      	ldr	r0, [sp, #4]
 8017750:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017754:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017758:	bfac      	ite	ge
 801775a:	2000      	movge	r0, #0
 801775c:	2001      	movlt	r0, #1
 801775e:	b002      	add	sp, #8
 8017760:	4770      	bx	lr

08017762 <fmaxf>:
 8017762:	b508      	push	{r3, lr}
 8017764:	ed2d 8b02 	vpush	{d8}
 8017768:	eeb0 8a40 	vmov.f32	s16, s0
 801776c:	eef0 8a60 	vmov.f32	s17, s1
 8017770:	f000 f82e 	bl	80177d0 <__fpclassifyf>
 8017774:	b148      	cbz	r0, 801778a <fmaxf+0x28>
 8017776:	eeb0 0a68 	vmov.f32	s0, s17
 801777a:	f000 f829 	bl	80177d0 <__fpclassifyf>
 801777e:	b130      	cbz	r0, 801778e <fmaxf+0x2c>
 8017780:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017788:	dc01      	bgt.n	801778e <fmaxf+0x2c>
 801778a:	eeb0 8a68 	vmov.f32	s16, s17
 801778e:	eeb0 0a48 	vmov.f32	s0, s16
 8017792:	ecbd 8b02 	vpop	{d8}
 8017796:	bd08      	pop	{r3, pc}

08017798 <fminf>:
 8017798:	b508      	push	{r3, lr}
 801779a:	ed2d 8b02 	vpush	{d8}
 801779e:	eeb0 8a40 	vmov.f32	s16, s0
 80177a2:	eef0 8a60 	vmov.f32	s17, s1
 80177a6:	f000 f813 	bl	80177d0 <__fpclassifyf>
 80177aa:	b148      	cbz	r0, 80177c0 <fminf+0x28>
 80177ac:	eeb0 0a68 	vmov.f32	s0, s17
 80177b0:	f000 f80e 	bl	80177d0 <__fpclassifyf>
 80177b4:	b130      	cbz	r0, 80177c4 <fminf+0x2c>
 80177b6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80177ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177be:	d401      	bmi.n	80177c4 <fminf+0x2c>
 80177c0:	eeb0 8a68 	vmov.f32	s16, s17
 80177c4:	eeb0 0a48 	vmov.f32	s0, s16
 80177c8:	ecbd 8b02 	vpop	{d8}
 80177cc:	bd08      	pop	{r3, pc}
	...

080177d0 <__fpclassifyf>:
 80177d0:	ee10 3a10 	vmov	r3, s0
 80177d4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80177d8:	d00d      	beq.n	80177f6 <__fpclassifyf+0x26>
 80177da:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80177de:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80177e2:	d30a      	bcc.n	80177fa <__fpclassifyf+0x2a>
 80177e4:	4b07      	ldr	r3, [pc, #28]	; (8017804 <__fpclassifyf+0x34>)
 80177e6:	1e42      	subs	r2, r0, #1
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d908      	bls.n	80177fe <__fpclassifyf+0x2e>
 80177ec:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80177f0:	4258      	negs	r0, r3
 80177f2:	4158      	adcs	r0, r3
 80177f4:	4770      	bx	lr
 80177f6:	2002      	movs	r0, #2
 80177f8:	4770      	bx	lr
 80177fa:	2004      	movs	r0, #4
 80177fc:	4770      	bx	lr
 80177fe:	2003      	movs	r0, #3
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop
 8017804:	007ffffe 	.word	0x007ffffe

08017808 <with_errnof>:
 8017808:	b513      	push	{r0, r1, r4, lr}
 801780a:	4604      	mov	r4, r0
 801780c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017810:	f000 fd9c 	bl	801834c <__errno>
 8017814:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017818:	6004      	str	r4, [r0, #0]
 801781a:	b002      	add	sp, #8
 801781c:	bd10      	pop	{r4, pc}

0801781e <xflowf>:
 801781e:	b130      	cbz	r0, 801782e <xflowf+0x10>
 8017820:	eef1 7a40 	vneg.f32	s15, s0
 8017824:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017828:	2022      	movs	r0, #34	; 0x22
 801782a:	f7ff bfed 	b.w	8017808 <with_errnof>
 801782e:	eef0 7a40 	vmov.f32	s15, s0
 8017832:	e7f7      	b.n	8017824 <xflowf+0x6>

08017834 <__math_uflowf>:
 8017834:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801783c <__math_uflowf+0x8>
 8017838:	f7ff bff1 	b.w	801781e <xflowf>
 801783c:	10000000 	.word	0x10000000

08017840 <__math_oflowf>:
 8017840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017848 <__math_oflowf+0x8>
 8017844:	f7ff bfeb 	b.w	801781e <xflowf>
 8017848:	70000000 	.word	0x70000000
 801784c:	00000000 	.word	0x00000000

08017850 <floor>:
 8017850:	ec51 0b10 	vmov	r0, r1, d0
 8017854:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8017860:	2e13      	cmp	r6, #19
 8017862:	ee10 5a10 	vmov	r5, s0
 8017866:	ee10 8a10 	vmov	r8, s0
 801786a:	460c      	mov	r4, r1
 801786c:	dc31      	bgt.n	80178d2 <floor+0x82>
 801786e:	2e00      	cmp	r6, #0
 8017870:	da14      	bge.n	801789c <floor+0x4c>
 8017872:	a333      	add	r3, pc, #204	; (adr r3, 8017940 <floor+0xf0>)
 8017874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017878:	f7e8 fd10 	bl	800029c <__adddf3>
 801787c:	2200      	movs	r2, #0
 801787e:	2300      	movs	r3, #0
 8017880:	f7e9 f952 	bl	8000b28 <__aeabi_dcmpgt>
 8017884:	b138      	cbz	r0, 8017896 <floor+0x46>
 8017886:	2c00      	cmp	r4, #0
 8017888:	da53      	bge.n	8017932 <floor+0xe2>
 801788a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801788e:	4325      	orrs	r5, r4
 8017890:	d052      	beq.n	8017938 <floor+0xe8>
 8017892:	4c2d      	ldr	r4, [pc, #180]	; (8017948 <floor+0xf8>)
 8017894:	2500      	movs	r5, #0
 8017896:	4621      	mov	r1, r4
 8017898:	4628      	mov	r0, r5
 801789a:	e024      	b.n	80178e6 <floor+0x96>
 801789c:	4f2b      	ldr	r7, [pc, #172]	; (801794c <floor+0xfc>)
 801789e:	4137      	asrs	r7, r6
 80178a0:	ea01 0307 	and.w	r3, r1, r7
 80178a4:	4303      	orrs	r3, r0
 80178a6:	d01e      	beq.n	80178e6 <floor+0x96>
 80178a8:	a325      	add	r3, pc, #148	; (adr r3, 8017940 <floor+0xf0>)
 80178aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ae:	f7e8 fcf5 	bl	800029c <__adddf3>
 80178b2:	2200      	movs	r2, #0
 80178b4:	2300      	movs	r3, #0
 80178b6:	f7e9 f937 	bl	8000b28 <__aeabi_dcmpgt>
 80178ba:	2800      	cmp	r0, #0
 80178bc:	d0eb      	beq.n	8017896 <floor+0x46>
 80178be:	2c00      	cmp	r4, #0
 80178c0:	bfbe      	ittt	lt
 80178c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80178c6:	4133      	asrlt	r3, r6
 80178c8:	18e4      	addlt	r4, r4, r3
 80178ca:	ea24 0407 	bic.w	r4, r4, r7
 80178ce:	2500      	movs	r5, #0
 80178d0:	e7e1      	b.n	8017896 <floor+0x46>
 80178d2:	2e33      	cmp	r6, #51	; 0x33
 80178d4:	dd0b      	ble.n	80178ee <floor+0x9e>
 80178d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80178da:	d104      	bne.n	80178e6 <floor+0x96>
 80178dc:	ee10 2a10 	vmov	r2, s0
 80178e0:	460b      	mov	r3, r1
 80178e2:	f7e8 fcdb 	bl	800029c <__adddf3>
 80178e6:	ec41 0b10 	vmov	d0, r0, r1
 80178ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80178f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80178f6:	40df      	lsrs	r7, r3
 80178f8:	4238      	tst	r0, r7
 80178fa:	d0f4      	beq.n	80178e6 <floor+0x96>
 80178fc:	a310      	add	r3, pc, #64	; (adr r3, 8017940 <floor+0xf0>)
 80178fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017902:	f7e8 fccb 	bl	800029c <__adddf3>
 8017906:	2200      	movs	r2, #0
 8017908:	2300      	movs	r3, #0
 801790a:	f7e9 f90d 	bl	8000b28 <__aeabi_dcmpgt>
 801790e:	2800      	cmp	r0, #0
 8017910:	d0c1      	beq.n	8017896 <floor+0x46>
 8017912:	2c00      	cmp	r4, #0
 8017914:	da0a      	bge.n	801792c <floor+0xdc>
 8017916:	2e14      	cmp	r6, #20
 8017918:	d101      	bne.n	801791e <floor+0xce>
 801791a:	3401      	adds	r4, #1
 801791c:	e006      	b.n	801792c <floor+0xdc>
 801791e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017922:	2301      	movs	r3, #1
 8017924:	40b3      	lsls	r3, r6
 8017926:	441d      	add	r5, r3
 8017928:	45a8      	cmp	r8, r5
 801792a:	d8f6      	bhi.n	801791a <floor+0xca>
 801792c:	ea25 0507 	bic.w	r5, r5, r7
 8017930:	e7b1      	b.n	8017896 <floor+0x46>
 8017932:	2500      	movs	r5, #0
 8017934:	462c      	mov	r4, r5
 8017936:	e7ae      	b.n	8017896 <floor+0x46>
 8017938:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801793c:	e7ab      	b.n	8017896 <floor+0x46>
 801793e:	bf00      	nop
 8017940:	8800759c 	.word	0x8800759c
 8017944:	7e37e43c 	.word	0x7e37e43c
 8017948:	bff00000 	.word	0xbff00000
 801794c:	000fffff 	.word	0x000fffff

08017950 <round>:
 8017950:	ec53 2b10 	vmov	r2, r3, d0
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801795a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801795e:	2813      	cmp	r0, #19
 8017960:	ee10 5a10 	vmov	r5, s0
 8017964:	4619      	mov	r1, r3
 8017966:	dc18      	bgt.n	801799a <round+0x4a>
 8017968:	2800      	cmp	r0, #0
 801796a:	da09      	bge.n	8017980 <round+0x30>
 801796c:	3001      	adds	r0, #1
 801796e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8017972:	d103      	bne.n	801797c <round+0x2c>
 8017974:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8017978:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801797c:	2300      	movs	r3, #0
 801797e:	e02a      	b.n	80179d6 <round+0x86>
 8017980:	4c16      	ldr	r4, [pc, #88]	; (80179dc <round+0x8c>)
 8017982:	4104      	asrs	r4, r0
 8017984:	ea03 0604 	and.w	r6, r3, r4
 8017988:	4316      	orrs	r6, r2
 801798a:	d011      	beq.n	80179b0 <round+0x60>
 801798c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017990:	4103      	asrs	r3, r0
 8017992:	440b      	add	r3, r1
 8017994:	ea23 0104 	bic.w	r1, r3, r4
 8017998:	e7f0      	b.n	801797c <round+0x2c>
 801799a:	2833      	cmp	r0, #51	; 0x33
 801799c:	dd0b      	ble.n	80179b6 <round+0x66>
 801799e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80179a2:	d105      	bne.n	80179b0 <round+0x60>
 80179a4:	ee10 0a10 	vmov	r0, s0
 80179a8:	f7e8 fc78 	bl	800029c <__adddf3>
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	ec43 2b10 	vmov	d0, r2, r3
 80179b4:	bd70      	pop	{r4, r5, r6, pc}
 80179b6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80179ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80179be:	40f4      	lsrs	r4, r6
 80179c0:	4214      	tst	r4, r2
 80179c2:	d0f5      	beq.n	80179b0 <round+0x60>
 80179c4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80179c8:	2301      	movs	r3, #1
 80179ca:	4083      	lsls	r3, r0
 80179cc:	195b      	adds	r3, r3, r5
 80179ce:	bf28      	it	cs
 80179d0:	3101      	addcs	r1, #1
 80179d2:	ea23 0304 	bic.w	r3, r3, r4
 80179d6:	461a      	mov	r2, r3
 80179d8:	460b      	mov	r3, r1
 80179da:	e7e9      	b.n	80179b0 <round+0x60>
 80179dc:	000fffff 	.word	0x000fffff

080179e0 <roundf>:
 80179e0:	ee10 0a10 	vmov	r0, s0
 80179e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80179e8:	3a7f      	subs	r2, #127	; 0x7f
 80179ea:	2a16      	cmp	r2, #22
 80179ec:	dc15      	bgt.n	8017a1a <roundf+0x3a>
 80179ee:	2a00      	cmp	r2, #0
 80179f0:	da08      	bge.n	8017a04 <roundf+0x24>
 80179f2:	3201      	adds	r2, #1
 80179f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80179f8:	d101      	bne.n	80179fe <roundf+0x1e>
 80179fa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80179fe:	ee00 3a10 	vmov	s0, r3
 8017a02:	4770      	bx	lr
 8017a04:	4907      	ldr	r1, [pc, #28]	; (8017a24 <roundf+0x44>)
 8017a06:	4111      	asrs	r1, r2
 8017a08:	4208      	tst	r0, r1
 8017a0a:	d0fa      	beq.n	8017a02 <roundf+0x22>
 8017a0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017a10:	4113      	asrs	r3, r2
 8017a12:	4403      	add	r3, r0
 8017a14:	ea23 0301 	bic.w	r3, r3, r1
 8017a18:	e7f1      	b.n	80179fe <roundf+0x1e>
 8017a1a:	2a80      	cmp	r2, #128	; 0x80
 8017a1c:	d1f1      	bne.n	8017a02 <roundf+0x22>
 8017a1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a22:	4770      	bx	lr
 8017a24:	007fffff 	.word	0x007fffff

08017a28 <__ieee754_expf>:
 8017a28:	ee10 2a10 	vmov	r2, s0
 8017a2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8017a30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a34:	d902      	bls.n	8017a3c <__ieee754_expf+0x14>
 8017a36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a3a:	4770      	bx	lr
 8017a3c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8017a40:	d106      	bne.n	8017a50 <__ieee754_expf+0x28>
 8017a42:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8017b7c <__ieee754_expf+0x154>
 8017a46:	2900      	cmp	r1, #0
 8017a48:	bf18      	it	ne
 8017a4a:	eeb0 0a67 	vmovne.f32	s0, s15
 8017a4e:	4770      	bx	lr
 8017a50:	484b      	ldr	r0, [pc, #300]	; (8017b80 <__ieee754_expf+0x158>)
 8017a52:	4282      	cmp	r2, r0
 8017a54:	dd02      	ble.n	8017a5c <__ieee754_expf+0x34>
 8017a56:	2000      	movs	r0, #0
 8017a58:	f7ff bef2 	b.w	8017840 <__math_oflowf>
 8017a5c:	2a00      	cmp	r2, #0
 8017a5e:	da05      	bge.n	8017a6c <__ieee754_expf+0x44>
 8017a60:	4a48      	ldr	r2, [pc, #288]	; (8017b84 <__ieee754_expf+0x15c>)
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d902      	bls.n	8017a6c <__ieee754_expf+0x44>
 8017a66:	2000      	movs	r0, #0
 8017a68:	f7ff bee4 	b.w	8017834 <__math_uflowf>
 8017a6c:	4a46      	ldr	r2, [pc, #280]	; (8017b88 <__ieee754_expf+0x160>)
 8017a6e:	4293      	cmp	r3, r2
 8017a70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8017a74:	d952      	bls.n	8017b1c <__ieee754_expf+0xf4>
 8017a76:	4a45      	ldr	r2, [pc, #276]	; (8017b8c <__ieee754_expf+0x164>)
 8017a78:	4293      	cmp	r3, r2
 8017a7a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8017a7e:	d834      	bhi.n	8017aea <__ieee754_expf+0xc2>
 8017a80:	4b43      	ldr	r3, [pc, #268]	; (8017b90 <__ieee754_expf+0x168>)
 8017a82:	4413      	add	r3, r2
 8017a84:	ed93 7a00 	vldr	s14, [r3]
 8017a88:	4b42      	ldr	r3, [pc, #264]	; (8017b94 <__ieee754_expf+0x16c>)
 8017a8a:	4413      	add	r3, r2
 8017a8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8017a90:	f1c1 0201 	rsb	r2, r1, #1
 8017a94:	edd3 7a00 	vldr	s15, [r3]
 8017a98:	1a52      	subs	r2, r2, r1
 8017a9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8017a9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8017aa2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8017b98 <__ieee754_expf+0x170>
 8017aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8017b9c <__ieee754_expf+0x174>
 8017aaa:	eee6 6a05 	vfma.f32	s13, s12, s10
 8017aae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8017ba0 <__ieee754_expf+0x178>
 8017ab2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8017ab6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8017ba4 <__ieee754_expf+0x17c>
 8017aba:	eee5 6a06 	vfma.f32	s13, s10, s12
 8017abe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8017ba8 <__ieee754_expf+0x180>
 8017ac2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8017ac6:	eef0 6a40 	vmov.f32	s13, s0
 8017aca:	eee5 6a46 	vfms.f32	s13, s10, s12
 8017ace:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017ad2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8017ad6:	bb92      	cbnz	r2, 8017b3e <__ieee754_expf+0x116>
 8017ad8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017adc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8017ae0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017ae4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8017ae8:	4770      	bx	lr
 8017aea:	4b30      	ldr	r3, [pc, #192]	; (8017bac <__ieee754_expf+0x184>)
 8017aec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8017bb0 <__ieee754_expf+0x188>
 8017af0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8017bb4 <__ieee754_expf+0x18c>
 8017af4:	4413      	add	r3, r2
 8017af6:	edd3 7a00 	vldr	s15, [r3]
 8017afa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017afe:	eeb0 7a40 	vmov.f32	s14, s0
 8017b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b06:	ee17 2a90 	vmov	r2, s15
 8017b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017b12:	eddf 6a29 	vldr	s13, [pc, #164]	; 8017bb8 <__ieee754_expf+0x190>
 8017b16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017b1a:	e7be      	b.n	8017a9a <__ieee754_expf+0x72>
 8017b1c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8017b20:	d20b      	bcs.n	8017b3a <__ieee754_expf+0x112>
 8017b22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8017bbc <__ieee754_expf+0x194>
 8017b26:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017b2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8017b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b32:	dd02      	ble.n	8017b3a <__ieee754_expf+0x112>
 8017b34:	ee30 0a25 	vadd.f32	s0, s0, s11
 8017b38:	4770      	bx	lr
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	e7af      	b.n	8017a9e <__ieee754_expf+0x76>
 8017b3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8017b42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8017b46:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8017b4a:	bfb8      	it	lt
 8017b4c:	3264      	addlt	r2, #100	; 0x64
 8017b4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8017b5a:	ee17 3a90 	vmov	r3, s15
 8017b5e:	bfab      	itete	ge
 8017b60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8017b64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8017b68:	ee00 3a10 	vmovge	s0, r3
 8017b6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8017bc0 <__ieee754_expf+0x198>
 8017b70:	bfbc      	itt	lt
 8017b72:	ee00 3a10 	vmovlt	s0, r3
 8017b76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8017b7a:	4770      	bx	lr
 8017b7c:	00000000 	.word	0x00000000
 8017b80:	42b17217 	.word	0x42b17217
 8017b84:	42cff1b5 	.word	0x42cff1b5
 8017b88:	3eb17218 	.word	0x3eb17218
 8017b8c:	3f851591 	.word	0x3f851591
 8017b90:	0801fd4c 	.word	0x0801fd4c
 8017b94:	0801fd54 	.word	0x0801fd54
 8017b98:	3331bb4c 	.word	0x3331bb4c
 8017b9c:	b5ddea0e 	.word	0xb5ddea0e
 8017ba0:	388ab355 	.word	0x388ab355
 8017ba4:	bb360b61 	.word	0xbb360b61
 8017ba8:	3e2aaaab 	.word	0x3e2aaaab
 8017bac:	0801fd44 	.word	0x0801fd44
 8017bb0:	3fb8aa3b 	.word	0x3fb8aa3b
 8017bb4:	3f317180 	.word	0x3f317180
 8017bb8:	3717f7d1 	.word	0x3717f7d1
 8017bbc:	7149f2ca 	.word	0x7149f2ca
 8017bc0:	0d800000 	.word	0x0d800000

08017bc4 <abort>:
 8017bc4:	b508      	push	{r3, lr}
 8017bc6:	2006      	movs	r0, #6
 8017bc8:	f000 fb4e 	bl	8018268 <raise>
 8017bcc:	2001      	movs	r0, #1
 8017bce:	f7e9 fde1 	bl	8001794 <_exit>
	...

08017bd4 <__assert_func>:
 8017bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bd6:	4614      	mov	r4, r2
 8017bd8:	461a      	mov	r2, r3
 8017bda:	4b09      	ldr	r3, [pc, #36]	; (8017c00 <__assert_func+0x2c>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4605      	mov	r5, r0
 8017be0:	68d8      	ldr	r0, [r3, #12]
 8017be2:	b14c      	cbz	r4, 8017bf8 <__assert_func+0x24>
 8017be4:	4b07      	ldr	r3, [pc, #28]	; (8017c04 <__assert_func+0x30>)
 8017be6:	9100      	str	r1, [sp, #0]
 8017be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bec:	4906      	ldr	r1, [pc, #24]	; (8017c08 <__assert_func+0x34>)
 8017bee:	462b      	mov	r3, r5
 8017bf0:	f000 f9a4 	bl	8017f3c <fiprintf>
 8017bf4:	f7ff ffe6 	bl	8017bc4 <abort>
 8017bf8:	4b04      	ldr	r3, [pc, #16]	; (8017c0c <__assert_func+0x38>)
 8017bfa:	461c      	mov	r4, r3
 8017bfc:	e7f3      	b.n	8017be6 <__assert_func+0x12>
 8017bfe:	bf00      	nop
 8017c00:	200001e8 	.word	0x200001e8
 8017c04:	0801fd5c 	.word	0x0801fd5c
 8017c08:	0801fd69 	.word	0x0801fd69
 8017c0c:	0801fd97 	.word	0x0801fd97

08017c10 <atexit>:
 8017c10:	2300      	movs	r3, #0
 8017c12:	4601      	mov	r1, r0
 8017c14:	461a      	mov	r2, r3
 8017c16:	4618      	mov	r0, r3
 8017c18:	f000 bbd4 	b.w	80183c4 <__register_exitproc>

08017c1c <malloc>:
 8017c1c:	4b02      	ldr	r3, [pc, #8]	; (8017c28 <malloc+0xc>)
 8017c1e:	4601      	mov	r1, r0
 8017c20:	6818      	ldr	r0, [r3, #0]
 8017c22:	f000 b82b 	b.w	8017c7c <_malloc_r>
 8017c26:	bf00      	nop
 8017c28:	200001e8 	.word	0x200001e8

08017c2c <free>:
 8017c2c:	4b02      	ldr	r3, [pc, #8]	; (8017c38 <free+0xc>)
 8017c2e:	4601      	mov	r1, r0
 8017c30:	6818      	ldr	r0, [r3, #0]
 8017c32:	f000 bc25 	b.w	8018480 <_free_r>
 8017c36:	bf00      	nop
 8017c38:	200001e8 	.word	0x200001e8

08017c3c <sbrk_aligned>:
 8017c3c:	b570      	push	{r4, r5, r6, lr}
 8017c3e:	4e0e      	ldr	r6, [pc, #56]	; (8017c78 <sbrk_aligned+0x3c>)
 8017c40:	460c      	mov	r4, r1
 8017c42:	6831      	ldr	r1, [r6, #0]
 8017c44:	4605      	mov	r5, r0
 8017c46:	b911      	cbnz	r1, 8017c4e <sbrk_aligned+0x12>
 8017c48:	f000 fb5e 	bl	8018308 <_sbrk_r>
 8017c4c:	6030      	str	r0, [r6, #0]
 8017c4e:	4621      	mov	r1, r4
 8017c50:	4628      	mov	r0, r5
 8017c52:	f000 fb59 	bl	8018308 <_sbrk_r>
 8017c56:	1c43      	adds	r3, r0, #1
 8017c58:	d00a      	beq.n	8017c70 <sbrk_aligned+0x34>
 8017c5a:	1cc4      	adds	r4, r0, #3
 8017c5c:	f024 0403 	bic.w	r4, r4, #3
 8017c60:	42a0      	cmp	r0, r4
 8017c62:	d007      	beq.n	8017c74 <sbrk_aligned+0x38>
 8017c64:	1a21      	subs	r1, r4, r0
 8017c66:	4628      	mov	r0, r5
 8017c68:	f000 fb4e 	bl	8018308 <_sbrk_r>
 8017c6c:	3001      	adds	r0, #1
 8017c6e:	d101      	bne.n	8017c74 <sbrk_aligned+0x38>
 8017c70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017c74:	4620      	mov	r0, r4
 8017c76:	bd70      	pop	{r4, r5, r6, pc}
 8017c78:	20017a80 	.word	0x20017a80

08017c7c <_malloc_r>:
 8017c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c80:	1ccd      	adds	r5, r1, #3
 8017c82:	f025 0503 	bic.w	r5, r5, #3
 8017c86:	3508      	adds	r5, #8
 8017c88:	2d0c      	cmp	r5, #12
 8017c8a:	bf38      	it	cc
 8017c8c:	250c      	movcc	r5, #12
 8017c8e:	2d00      	cmp	r5, #0
 8017c90:	4607      	mov	r7, r0
 8017c92:	db01      	blt.n	8017c98 <_malloc_r+0x1c>
 8017c94:	42a9      	cmp	r1, r5
 8017c96:	d905      	bls.n	8017ca4 <_malloc_r+0x28>
 8017c98:	230c      	movs	r3, #12
 8017c9a:	603b      	str	r3, [r7, #0]
 8017c9c:	2600      	movs	r6, #0
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017d78 <_malloc_r+0xfc>
 8017ca8:	f000 f868 	bl	8017d7c <__malloc_lock>
 8017cac:	f8d8 3000 	ldr.w	r3, [r8]
 8017cb0:	461c      	mov	r4, r3
 8017cb2:	bb5c      	cbnz	r4, 8017d0c <_malloc_r+0x90>
 8017cb4:	4629      	mov	r1, r5
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	f7ff ffc0 	bl	8017c3c <sbrk_aligned>
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	4604      	mov	r4, r0
 8017cc0:	d155      	bne.n	8017d6e <_malloc_r+0xf2>
 8017cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8017cc6:	4626      	mov	r6, r4
 8017cc8:	2e00      	cmp	r6, #0
 8017cca:	d145      	bne.n	8017d58 <_malloc_r+0xdc>
 8017ccc:	2c00      	cmp	r4, #0
 8017cce:	d048      	beq.n	8017d62 <_malloc_r+0xe6>
 8017cd0:	6823      	ldr	r3, [r4, #0]
 8017cd2:	4631      	mov	r1, r6
 8017cd4:	4638      	mov	r0, r7
 8017cd6:	eb04 0903 	add.w	r9, r4, r3
 8017cda:	f000 fb15 	bl	8018308 <_sbrk_r>
 8017cde:	4581      	cmp	r9, r0
 8017ce0:	d13f      	bne.n	8017d62 <_malloc_r+0xe6>
 8017ce2:	6821      	ldr	r1, [r4, #0]
 8017ce4:	1a6d      	subs	r5, r5, r1
 8017ce6:	4629      	mov	r1, r5
 8017ce8:	4638      	mov	r0, r7
 8017cea:	f7ff ffa7 	bl	8017c3c <sbrk_aligned>
 8017cee:	3001      	adds	r0, #1
 8017cf0:	d037      	beq.n	8017d62 <_malloc_r+0xe6>
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	442b      	add	r3, r5
 8017cf6:	6023      	str	r3, [r4, #0]
 8017cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d038      	beq.n	8017d72 <_malloc_r+0xf6>
 8017d00:	685a      	ldr	r2, [r3, #4]
 8017d02:	42a2      	cmp	r2, r4
 8017d04:	d12b      	bne.n	8017d5e <_malloc_r+0xe2>
 8017d06:	2200      	movs	r2, #0
 8017d08:	605a      	str	r2, [r3, #4]
 8017d0a:	e00f      	b.n	8017d2c <_malloc_r+0xb0>
 8017d0c:	6822      	ldr	r2, [r4, #0]
 8017d0e:	1b52      	subs	r2, r2, r5
 8017d10:	d41f      	bmi.n	8017d52 <_malloc_r+0xd6>
 8017d12:	2a0b      	cmp	r2, #11
 8017d14:	d917      	bls.n	8017d46 <_malloc_r+0xca>
 8017d16:	1961      	adds	r1, r4, r5
 8017d18:	42a3      	cmp	r3, r4
 8017d1a:	6025      	str	r5, [r4, #0]
 8017d1c:	bf18      	it	ne
 8017d1e:	6059      	strne	r1, [r3, #4]
 8017d20:	6863      	ldr	r3, [r4, #4]
 8017d22:	bf08      	it	eq
 8017d24:	f8c8 1000 	streq.w	r1, [r8]
 8017d28:	5162      	str	r2, [r4, r5]
 8017d2a:	604b      	str	r3, [r1, #4]
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f104 060b 	add.w	r6, r4, #11
 8017d32:	f000 f829 	bl	8017d88 <__malloc_unlock>
 8017d36:	f026 0607 	bic.w	r6, r6, #7
 8017d3a:	1d23      	adds	r3, r4, #4
 8017d3c:	1af2      	subs	r2, r6, r3
 8017d3e:	d0ae      	beq.n	8017c9e <_malloc_r+0x22>
 8017d40:	1b9b      	subs	r3, r3, r6
 8017d42:	50a3      	str	r3, [r4, r2]
 8017d44:	e7ab      	b.n	8017c9e <_malloc_r+0x22>
 8017d46:	42a3      	cmp	r3, r4
 8017d48:	6862      	ldr	r2, [r4, #4]
 8017d4a:	d1dd      	bne.n	8017d08 <_malloc_r+0x8c>
 8017d4c:	f8c8 2000 	str.w	r2, [r8]
 8017d50:	e7ec      	b.n	8017d2c <_malloc_r+0xb0>
 8017d52:	4623      	mov	r3, r4
 8017d54:	6864      	ldr	r4, [r4, #4]
 8017d56:	e7ac      	b.n	8017cb2 <_malloc_r+0x36>
 8017d58:	4634      	mov	r4, r6
 8017d5a:	6876      	ldr	r6, [r6, #4]
 8017d5c:	e7b4      	b.n	8017cc8 <_malloc_r+0x4c>
 8017d5e:	4613      	mov	r3, r2
 8017d60:	e7cc      	b.n	8017cfc <_malloc_r+0x80>
 8017d62:	230c      	movs	r3, #12
 8017d64:	603b      	str	r3, [r7, #0]
 8017d66:	4638      	mov	r0, r7
 8017d68:	f000 f80e 	bl	8017d88 <__malloc_unlock>
 8017d6c:	e797      	b.n	8017c9e <_malloc_r+0x22>
 8017d6e:	6025      	str	r5, [r4, #0]
 8017d70:	e7dc      	b.n	8017d2c <_malloc_r+0xb0>
 8017d72:	605b      	str	r3, [r3, #4]
 8017d74:	deff      	udf	#255	; 0xff
 8017d76:	bf00      	nop
 8017d78:	20017a7c 	.word	0x20017a7c

08017d7c <__malloc_lock>:
 8017d7c:	4801      	ldr	r0, [pc, #4]	; (8017d84 <__malloc_lock+0x8>)
 8017d7e:	f000 bb10 	b.w	80183a2 <__retarget_lock_acquire_recursive>
 8017d82:	bf00      	nop
 8017d84:	20017bc5 	.word	0x20017bc5

08017d88 <__malloc_unlock>:
 8017d88:	4801      	ldr	r0, [pc, #4]	; (8017d90 <__malloc_unlock+0x8>)
 8017d8a:	f000 bb0b 	b.w	80183a4 <__retarget_lock_release_recursive>
 8017d8e:	bf00      	nop
 8017d90:	20017bc5 	.word	0x20017bc5

08017d94 <_realloc_r>:
 8017d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d98:	4680      	mov	r8, r0
 8017d9a:	4614      	mov	r4, r2
 8017d9c:	460e      	mov	r6, r1
 8017d9e:	b921      	cbnz	r1, 8017daa <_realloc_r+0x16>
 8017da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017da4:	4611      	mov	r1, r2
 8017da6:	f7ff bf69 	b.w	8017c7c <_malloc_r>
 8017daa:	b92a      	cbnz	r2, 8017db8 <_realloc_r+0x24>
 8017dac:	f000 fb68 	bl	8018480 <_free_r>
 8017db0:	4625      	mov	r5, r4
 8017db2:	4628      	mov	r0, r5
 8017db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017db8:	f000 fbae 	bl	8018518 <_malloc_usable_size_r>
 8017dbc:	4284      	cmp	r4, r0
 8017dbe:	4607      	mov	r7, r0
 8017dc0:	d802      	bhi.n	8017dc8 <_realloc_r+0x34>
 8017dc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017dc6:	d812      	bhi.n	8017dee <_realloc_r+0x5a>
 8017dc8:	4621      	mov	r1, r4
 8017dca:	4640      	mov	r0, r8
 8017dcc:	f7ff ff56 	bl	8017c7c <_malloc_r>
 8017dd0:	4605      	mov	r5, r0
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d0ed      	beq.n	8017db2 <_realloc_r+0x1e>
 8017dd6:	42bc      	cmp	r4, r7
 8017dd8:	4622      	mov	r2, r4
 8017dda:	4631      	mov	r1, r6
 8017ddc:	bf28      	it	cs
 8017dde:	463a      	movcs	r2, r7
 8017de0:	f000 fae1 	bl	80183a6 <memcpy>
 8017de4:	4631      	mov	r1, r6
 8017de6:	4640      	mov	r0, r8
 8017de8:	f000 fb4a 	bl	8018480 <_free_r>
 8017dec:	e7e1      	b.n	8017db2 <_realloc_r+0x1e>
 8017dee:	4635      	mov	r5, r6
 8017df0:	e7df      	b.n	8017db2 <_realloc_r+0x1e>
	...

08017df4 <std>:
 8017df4:	2300      	movs	r3, #0
 8017df6:	b510      	push	{r4, lr}
 8017df8:	4604      	mov	r4, r0
 8017dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8017dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e02:	6083      	str	r3, [r0, #8]
 8017e04:	8181      	strh	r1, [r0, #12]
 8017e06:	6643      	str	r3, [r0, #100]	; 0x64
 8017e08:	81c2      	strh	r2, [r0, #14]
 8017e0a:	6183      	str	r3, [r0, #24]
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	2208      	movs	r2, #8
 8017e10:	305c      	adds	r0, #92	; 0x5c
 8017e12:	f000 f9e7 	bl	80181e4 <memset>
 8017e16:	4b0d      	ldr	r3, [pc, #52]	; (8017e4c <std+0x58>)
 8017e18:	6263      	str	r3, [r4, #36]	; 0x24
 8017e1a:	4b0d      	ldr	r3, [pc, #52]	; (8017e50 <std+0x5c>)
 8017e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017e1e:	4b0d      	ldr	r3, [pc, #52]	; (8017e54 <std+0x60>)
 8017e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017e22:	4b0d      	ldr	r3, [pc, #52]	; (8017e58 <std+0x64>)
 8017e24:	6323      	str	r3, [r4, #48]	; 0x30
 8017e26:	4b0d      	ldr	r3, [pc, #52]	; (8017e5c <std+0x68>)
 8017e28:	6224      	str	r4, [r4, #32]
 8017e2a:	429c      	cmp	r4, r3
 8017e2c:	d006      	beq.n	8017e3c <std+0x48>
 8017e2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017e32:	4294      	cmp	r4, r2
 8017e34:	d002      	beq.n	8017e3c <std+0x48>
 8017e36:	33d0      	adds	r3, #208	; 0xd0
 8017e38:	429c      	cmp	r4, r3
 8017e3a:	d105      	bne.n	8017e48 <std+0x54>
 8017e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e44:	f000 baac 	b.w	80183a0 <__retarget_lock_init_recursive>
 8017e48:	bd10      	pop	{r4, pc}
 8017e4a:	bf00      	nop
 8017e4c:	08018001 	.word	0x08018001
 8017e50:	08018023 	.word	0x08018023
 8017e54:	0801805b 	.word	0x0801805b
 8017e58:	0801807f 	.word	0x0801807f
 8017e5c:	20017a84 	.word	0x20017a84

08017e60 <stdio_exit_handler>:
 8017e60:	4a02      	ldr	r2, [pc, #8]	; (8017e6c <stdio_exit_handler+0xc>)
 8017e62:	4903      	ldr	r1, [pc, #12]	; (8017e70 <stdio_exit_handler+0x10>)
 8017e64:	4803      	ldr	r0, [pc, #12]	; (8017e74 <stdio_exit_handler+0x14>)
 8017e66:	f000 b87b 	b.w	8017f60 <_fwalk_sglue>
 8017e6a:	bf00      	nop
 8017e6c:	20000190 	.word	0x20000190
 8017e70:	08018e8d 	.word	0x08018e8d
 8017e74:	2000019c 	.word	0x2000019c

08017e78 <cleanup_stdio>:
 8017e78:	6841      	ldr	r1, [r0, #4]
 8017e7a:	4b0c      	ldr	r3, [pc, #48]	; (8017eac <cleanup_stdio+0x34>)
 8017e7c:	4299      	cmp	r1, r3
 8017e7e:	b510      	push	{r4, lr}
 8017e80:	4604      	mov	r4, r0
 8017e82:	d001      	beq.n	8017e88 <cleanup_stdio+0x10>
 8017e84:	f001 f802 	bl	8018e8c <_fflush_r>
 8017e88:	68a1      	ldr	r1, [r4, #8]
 8017e8a:	4b09      	ldr	r3, [pc, #36]	; (8017eb0 <cleanup_stdio+0x38>)
 8017e8c:	4299      	cmp	r1, r3
 8017e8e:	d002      	beq.n	8017e96 <cleanup_stdio+0x1e>
 8017e90:	4620      	mov	r0, r4
 8017e92:	f000 fffb 	bl	8018e8c <_fflush_r>
 8017e96:	68e1      	ldr	r1, [r4, #12]
 8017e98:	4b06      	ldr	r3, [pc, #24]	; (8017eb4 <cleanup_stdio+0x3c>)
 8017e9a:	4299      	cmp	r1, r3
 8017e9c:	d004      	beq.n	8017ea8 <cleanup_stdio+0x30>
 8017e9e:	4620      	mov	r0, r4
 8017ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ea4:	f000 bff2 	b.w	8018e8c <_fflush_r>
 8017ea8:	bd10      	pop	{r4, pc}
 8017eaa:	bf00      	nop
 8017eac:	20017a84 	.word	0x20017a84
 8017eb0:	20017aec 	.word	0x20017aec
 8017eb4:	20017b54 	.word	0x20017b54

08017eb8 <global_stdio_init.part.0>:
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	4b0b      	ldr	r3, [pc, #44]	; (8017ee8 <global_stdio_init.part.0+0x30>)
 8017ebc:	4c0b      	ldr	r4, [pc, #44]	; (8017eec <global_stdio_init.part.0+0x34>)
 8017ebe:	4a0c      	ldr	r2, [pc, #48]	; (8017ef0 <global_stdio_init.part.0+0x38>)
 8017ec0:	601a      	str	r2, [r3, #0]
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	2104      	movs	r1, #4
 8017ec8:	f7ff ff94 	bl	8017df4 <std>
 8017ecc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	2109      	movs	r1, #9
 8017ed4:	f7ff ff8e 	bl	8017df4 <std>
 8017ed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017edc:	2202      	movs	r2, #2
 8017ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ee2:	2112      	movs	r1, #18
 8017ee4:	f7ff bf86 	b.w	8017df4 <std>
 8017ee8:	20017bbc 	.word	0x20017bbc
 8017eec:	20017a84 	.word	0x20017a84
 8017ef0:	08017e61 	.word	0x08017e61

08017ef4 <__sfp_lock_acquire>:
 8017ef4:	4801      	ldr	r0, [pc, #4]	; (8017efc <__sfp_lock_acquire+0x8>)
 8017ef6:	f000 ba54 	b.w	80183a2 <__retarget_lock_acquire_recursive>
 8017efa:	bf00      	nop
 8017efc:	20017bc6 	.word	0x20017bc6

08017f00 <__sfp_lock_release>:
 8017f00:	4801      	ldr	r0, [pc, #4]	; (8017f08 <__sfp_lock_release+0x8>)
 8017f02:	f000 ba4f 	b.w	80183a4 <__retarget_lock_release_recursive>
 8017f06:	bf00      	nop
 8017f08:	20017bc6 	.word	0x20017bc6

08017f0c <__sinit>:
 8017f0c:	b510      	push	{r4, lr}
 8017f0e:	4604      	mov	r4, r0
 8017f10:	f7ff fff0 	bl	8017ef4 <__sfp_lock_acquire>
 8017f14:	6a23      	ldr	r3, [r4, #32]
 8017f16:	b11b      	cbz	r3, 8017f20 <__sinit+0x14>
 8017f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1c:	f7ff bff0 	b.w	8017f00 <__sfp_lock_release>
 8017f20:	4b04      	ldr	r3, [pc, #16]	; (8017f34 <__sinit+0x28>)
 8017f22:	6223      	str	r3, [r4, #32]
 8017f24:	4b04      	ldr	r3, [pc, #16]	; (8017f38 <__sinit+0x2c>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1f5      	bne.n	8017f18 <__sinit+0xc>
 8017f2c:	f7ff ffc4 	bl	8017eb8 <global_stdio_init.part.0>
 8017f30:	e7f2      	b.n	8017f18 <__sinit+0xc>
 8017f32:	bf00      	nop
 8017f34:	08017e79 	.word	0x08017e79
 8017f38:	20017bbc 	.word	0x20017bbc

08017f3c <fiprintf>:
 8017f3c:	b40e      	push	{r1, r2, r3}
 8017f3e:	b503      	push	{r0, r1, lr}
 8017f40:	4601      	mov	r1, r0
 8017f42:	ab03      	add	r3, sp, #12
 8017f44:	4805      	ldr	r0, [pc, #20]	; (8017f5c <fiprintf+0x20>)
 8017f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f4a:	6800      	ldr	r0, [r0, #0]
 8017f4c:	9301      	str	r3, [sp, #4]
 8017f4e:	f000 fc6d 	bl	801882c <_vfiprintf_r>
 8017f52:	b002      	add	sp, #8
 8017f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f58:	b003      	add	sp, #12
 8017f5a:	4770      	bx	lr
 8017f5c:	200001e8 	.word	0x200001e8

08017f60 <_fwalk_sglue>:
 8017f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f64:	4607      	mov	r7, r0
 8017f66:	4688      	mov	r8, r1
 8017f68:	4614      	mov	r4, r2
 8017f6a:	2600      	movs	r6, #0
 8017f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017f70:	f1b9 0901 	subs.w	r9, r9, #1
 8017f74:	d505      	bpl.n	8017f82 <_fwalk_sglue+0x22>
 8017f76:	6824      	ldr	r4, [r4, #0]
 8017f78:	2c00      	cmp	r4, #0
 8017f7a:	d1f7      	bne.n	8017f6c <_fwalk_sglue+0xc>
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f82:	89ab      	ldrh	r3, [r5, #12]
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d907      	bls.n	8017f98 <_fwalk_sglue+0x38>
 8017f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	d003      	beq.n	8017f98 <_fwalk_sglue+0x38>
 8017f90:	4629      	mov	r1, r5
 8017f92:	4638      	mov	r0, r7
 8017f94:	47c0      	blx	r8
 8017f96:	4306      	orrs	r6, r0
 8017f98:	3568      	adds	r5, #104	; 0x68
 8017f9a:	e7e9      	b.n	8017f70 <_fwalk_sglue+0x10>

08017f9c <iprintf>:
 8017f9c:	b40f      	push	{r0, r1, r2, r3}
 8017f9e:	b507      	push	{r0, r1, r2, lr}
 8017fa0:	4906      	ldr	r1, [pc, #24]	; (8017fbc <iprintf+0x20>)
 8017fa2:	ab04      	add	r3, sp, #16
 8017fa4:	6808      	ldr	r0, [r1, #0]
 8017fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017faa:	6881      	ldr	r1, [r0, #8]
 8017fac:	9301      	str	r3, [sp, #4]
 8017fae:	f000 fc3d 	bl	801882c <_vfiprintf_r>
 8017fb2:	b003      	add	sp, #12
 8017fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fb8:	b004      	add	sp, #16
 8017fba:	4770      	bx	lr
 8017fbc:	200001e8 	.word	0x200001e8

08017fc0 <siprintf>:
 8017fc0:	b40e      	push	{r1, r2, r3}
 8017fc2:	b500      	push	{lr}
 8017fc4:	b09c      	sub	sp, #112	; 0x70
 8017fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8017fc8:	9002      	str	r0, [sp, #8]
 8017fca:	9006      	str	r0, [sp, #24]
 8017fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fd0:	4809      	ldr	r0, [pc, #36]	; (8017ff8 <siprintf+0x38>)
 8017fd2:	9107      	str	r1, [sp, #28]
 8017fd4:	9104      	str	r1, [sp, #16]
 8017fd6:	4909      	ldr	r1, [pc, #36]	; (8017ffc <siprintf+0x3c>)
 8017fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fdc:	9105      	str	r1, [sp, #20]
 8017fde:	6800      	ldr	r0, [r0, #0]
 8017fe0:	9301      	str	r3, [sp, #4]
 8017fe2:	a902      	add	r1, sp, #8
 8017fe4:	f000 fafa 	bl	80185dc <_svfiprintf_r>
 8017fe8:	9b02      	ldr	r3, [sp, #8]
 8017fea:	2200      	movs	r2, #0
 8017fec:	701a      	strb	r2, [r3, #0]
 8017fee:	b01c      	add	sp, #112	; 0x70
 8017ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ff4:	b003      	add	sp, #12
 8017ff6:	4770      	bx	lr
 8017ff8:	200001e8 	.word	0x200001e8
 8017ffc:	ffff0208 	.word	0xffff0208

08018000 <__sread>:
 8018000:	b510      	push	{r4, lr}
 8018002:	460c      	mov	r4, r1
 8018004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018008:	f000 f958 	bl	80182bc <_read_r>
 801800c:	2800      	cmp	r0, #0
 801800e:	bfab      	itete	ge
 8018010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018012:	89a3      	ldrhlt	r3, [r4, #12]
 8018014:	181b      	addge	r3, r3, r0
 8018016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801801a:	bfac      	ite	ge
 801801c:	6563      	strge	r3, [r4, #84]	; 0x54
 801801e:	81a3      	strhlt	r3, [r4, #12]
 8018020:	bd10      	pop	{r4, pc}

08018022 <__swrite>:
 8018022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018026:	461f      	mov	r7, r3
 8018028:	898b      	ldrh	r3, [r1, #12]
 801802a:	05db      	lsls	r3, r3, #23
 801802c:	4605      	mov	r5, r0
 801802e:	460c      	mov	r4, r1
 8018030:	4616      	mov	r6, r2
 8018032:	d505      	bpl.n	8018040 <__swrite+0x1e>
 8018034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018038:	2302      	movs	r3, #2
 801803a:	2200      	movs	r2, #0
 801803c:	f000 f92c 	bl	8018298 <_lseek_r>
 8018040:	89a3      	ldrh	r3, [r4, #12]
 8018042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801804a:	81a3      	strh	r3, [r4, #12]
 801804c:	4632      	mov	r2, r6
 801804e:	463b      	mov	r3, r7
 8018050:	4628      	mov	r0, r5
 8018052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018056:	f000 b967 	b.w	8018328 <_write_r>

0801805a <__sseek>:
 801805a:	b510      	push	{r4, lr}
 801805c:	460c      	mov	r4, r1
 801805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018062:	f000 f919 	bl	8018298 <_lseek_r>
 8018066:	1c43      	adds	r3, r0, #1
 8018068:	89a3      	ldrh	r3, [r4, #12]
 801806a:	bf15      	itete	ne
 801806c:	6560      	strne	r0, [r4, #84]	; 0x54
 801806e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018076:	81a3      	strheq	r3, [r4, #12]
 8018078:	bf18      	it	ne
 801807a:	81a3      	strhne	r3, [r4, #12]
 801807c:	bd10      	pop	{r4, pc}

0801807e <__sclose>:
 801807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018082:	f000 b8f9 	b.w	8018278 <_close_r>

08018086 <__swbuf_r>:
 8018086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018088:	460e      	mov	r6, r1
 801808a:	4614      	mov	r4, r2
 801808c:	4605      	mov	r5, r0
 801808e:	b118      	cbz	r0, 8018098 <__swbuf_r+0x12>
 8018090:	6a03      	ldr	r3, [r0, #32]
 8018092:	b90b      	cbnz	r3, 8018098 <__swbuf_r+0x12>
 8018094:	f7ff ff3a 	bl	8017f0c <__sinit>
 8018098:	69a3      	ldr	r3, [r4, #24]
 801809a:	60a3      	str	r3, [r4, #8]
 801809c:	89a3      	ldrh	r3, [r4, #12]
 801809e:	071a      	lsls	r2, r3, #28
 80180a0:	d525      	bpl.n	80180ee <__swbuf_r+0x68>
 80180a2:	6923      	ldr	r3, [r4, #16]
 80180a4:	b31b      	cbz	r3, 80180ee <__swbuf_r+0x68>
 80180a6:	6823      	ldr	r3, [r4, #0]
 80180a8:	6922      	ldr	r2, [r4, #16]
 80180aa:	1a98      	subs	r0, r3, r2
 80180ac:	6963      	ldr	r3, [r4, #20]
 80180ae:	b2f6      	uxtb	r6, r6
 80180b0:	4283      	cmp	r3, r0
 80180b2:	4637      	mov	r7, r6
 80180b4:	dc04      	bgt.n	80180c0 <__swbuf_r+0x3a>
 80180b6:	4621      	mov	r1, r4
 80180b8:	4628      	mov	r0, r5
 80180ba:	f000 fee7 	bl	8018e8c <_fflush_r>
 80180be:	b9e0      	cbnz	r0, 80180fa <__swbuf_r+0x74>
 80180c0:	68a3      	ldr	r3, [r4, #8]
 80180c2:	3b01      	subs	r3, #1
 80180c4:	60a3      	str	r3, [r4, #8]
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	1c5a      	adds	r2, r3, #1
 80180ca:	6022      	str	r2, [r4, #0]
 80180cc:	701e      	strb	r6, [r3, #0]
 80180ce:	6962      	ldr	r2, [r4, #20]
 80180d0:	1c43      	adds	r3, r0, #1
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d004      	beq.n	80180e0 <__swbuf_r+0x5a>
 80180d6:	89a3      	ldrh	r3, [r4, #12]
 80180d8:	07db      	lsls	r3, r3, #31
 80180da:	d506      	bpl.n	80180ea <__swbuf_r+0x64>
 80180dc:	2e0a      	cmp	r6, #10
 80180de:	d104      	bne.n	80180ea <__swbuf_r+0x64>
 80180e0:	4621      	mov	r1, r4
 80180e2:	4628      	mov	r0, r5
 80180e4:	f000 fed2 	bl	8018e8c <_fflush_r>
 80180e8:	b938      	cbnz	r0, 80180fa <__swbuf_r+0x74>
 80180ea:	4638      	mov	r0, r7
 80180ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180ee:	4621      	mov	r1, r4
 80180f0:	4628      	mov	r0, r5
 80180f2:	f000 f805 	bl	8018100 <__swsetup_r>
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d0d5      	beq.n	80180a6 <__swbuf_r+0x20>
 80180fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80180fe:	e7f4      	b.n	80180ea <__swbuf_r+0x64>

08018100 <__swsetup_r>:
 8018100:	b538      	push	{r3, r4, r5, lr}
 8018102:	4b2a      	ldr	r3, [pc, #168]	; (80181ac <__swsetup_r+0xac>)
 8018104:	4605      	mov	r5, r0
 8018106:	6818      	ldr	r0, [r3, #0]
 8018108:	460c      	mov	r4, r1
 801810a:	b118      	cbz	r0, 8018114 <__swsetup_r+0x14>
 801810c:	6a03      	ldr	r3, [r0, #32]
 801810e:	b90b      	cbnz	r3, 8018114 <__swsetup_r+0x14>
 8018110:	f7ff fefc 	bl	8017f0c <__sinit>
 8018114:	89a3      	ldrh	r3, [r4, #12]
 8018116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801811a:	0718      	lsls	r0, r3, #28
 801811c:	d422      	bmi.n	8018164 <__swsetup_r+0x64>
 801811e:	06d9      	lsls	r1, r3, #27
 8018120:	d407      	bmi.n	8018132 <__swsetup_r+0x32>
 8018122:	2309      	movs	r3, #9
 8018124:	602b      	str	r3, [r5, #0]
 8018126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801812a:	81a3      	strh	r3, [r4, #12]
 801812c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018130:	e034      	b.n	801819c <__swsetup_r+0x9c>
 8018132:	0758      	lsls	r0, r3, #29
 8018134:	d512      	bpl.n	801815c <__swsetup_r+0x5c>
 8018136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018138:	b141      	cbz	r1, 801814c <__swsetup_r+0x4c>
 801813a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801813e:	4299      	cmp	r1, r3
 8018140:	d002      	beq.n	8018148 <__swsetup_r+0x48>
 8018142:	4628      	mov	r0, r5
 8018144:	f000 f99c 	bl	8018480 <_free_r>
 8018148:	2300      	movs	r3, #0
 801814a:	6363      	str	r3, [r4, #52]	; 0x34
 801814c:	89a3      	ldrh	r3, [r4, #12]
 801814e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018152:	81a3      	strh	r3, [r4, #12]
 8018154:	2300      	movs	r3, #0
 8018156:	6063      	str	r3, [r4, #4]
 8018158:	6923      	ldr	r3, [r4, #16]
 801815a:	6023      	str	r3, [r4, #0]
 801815c:	89a3      	ldrh	r3, [r4, #12]
 801815e:	f043 0308 	orr.w	r3, r3, #8
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	6923      	ldr	r3, [r4, #16]
 8018166:	b94b      	cbnz	r3, 801817c <__swsetup_r+0x7c>
 8018168:	89a3      	ldrh	r3, [r4, #12]
 801816a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018172:	d003      	beq.n	801817c <__swsetup_r+0x7c>
 8018174:	4621      	mov	r1, r4
 8018176:	4628      	mov	r0, r5
 8018178:	f000 fed6 	bl	8018f28 <__smakebuf_r>
 801817c:	89a0      	ldrh	r0, [r4, #12]
 801817e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018182:	f010 0301 	ands.w	r3, r0, #1
 8018186:	d00a      	beq.n	801819e <__swsetup_r+0x9e>
 8018188:	2300      	movs	r3, #0
 801818a:	60a3      	str	r3, [r4, #8]
 801818c:	6963      	ldr	r3, [r4, #20]
 801818e:	425b      	negs	r3, r3
 8018190:	61a3      	str	r3, [r4, #24]
 8018192:	6923      	ldr	r3, [r4, #16]
 8018194:	b943      	cbnz	r3, 80181a8 <__swsetup_r+0xa8>
 8018196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801819a:	d1c4      	bne.n	8018126 <__swsetup_r+0x26>
 801819c:	bd38      	pop	{r3, r4, r5, pc}
 801819e:	0781      	lsls	r1, r0, #30
 80181a0:	bf58      	it	pl
 80181a2:	6963      	ldrpl	r3, [r4, #20]
 80181a4:	60a3      	str	r3, [r4, #8]
 80181a6:	e7f4      	b.n	8018192 <__swsetup_r+0x92>
 80181a8:	2000      	movs	r0, #0
 80181aa:	e7f7      	b.n	801819c <__swsetup_r+0x9c>
 80181ac:	200001e8 	.word	0x200001e8

080181b0 <memmove>:
 80181b0:	4288      	cmp	r0, r1
 80181b2:	b510      	push	{r4, lr}
 80181b4:	eb01 0402 	add.w	r4, r1, r2
 80181b8:	d902      	bls.n	80181c0 <memmove+0x10>
 80181ba:	4284      	cmp	r4, r0
 80181bc:	4623      	mov	r3, r4
 80181be:	d807      	bhi.n	80181d0 <memmove+0x20>
 80181c0:	1e43      	subs	r3, r0, #1
 80181c2:	42a1      	cmp	r1, r4
 80181c4:	d008      	beq.n	80181d8 <memmove+0x28>
 80181c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80181ce:	e7f8      	b.n	80181c2 <memmove+0x12>
 80181d0:	4402      	add	r2, r0
 80181d2:	4601      	mov	r1, r0
 80181d4:	428a      	cmp	r2, r1
 80181d6:	d100      	bne.n	80181da <memmove+0x2a>
 80181d8:	bd10      	pop	{r4, pc}
 80181da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80181de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80181e2:	e7f7      	b.n	80181d4 <memmove+0x24>

080181e4 <memset>:
 80181e4:	4402      	add	r2, r0
 80181e6:	4603      	mov	r3, r0
 80181e8:	4293      	cmp	r3, r2
 80181ea:	d100      	bne.n	80181ee <memset+0xa>
 80181ec:	4770      	bx	lr
 80181ee:	f803 1b01 	strb.w	r1, [r3], #1
 80181f2:	e7f9      	b.n	80181e8 <memset+0x4>

080181f4 <strncmp>:
 80181f4:	b510      	push	{r4, lr}
 80181f6:	b16a      	cbz	r2, 8018214 <strncmp+0x20>
 80181f8:	3901      	subs	r1, #1
 80181fa:	1884      	adds	r4, r0, r2
 80181fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018200:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018204:	429a      	cmp	r2, r3
 8018206:	d103      	bne.n	8018210 <strncmp+0x1c>
 8018208:	42a0      	cmp	r0, r4
 801820a:	d001      	beq.n	8018210 <strncmp+0x1c>
 801820c:	2a00      	cmp	r2, #0
 801820e:	d1f5      	bne.n	80181fc <strncmp+0x8>
 8018210:	1ad0      	subs	r0, r2, r3
 8018212:	bd10      	pop	{r4, pc}
 8018214:	4610      	mov	r0, r2
 8018216:	e7fc      	b.n	8018212 <strncmp+0x1e>

08018218 <_raise_r>:
 8018218:	291f      	cmp	r1, #31
 801821a:	b538      	push	{r3, r4, r5, lr}
 801821c:	4604      	mov	r4, r0
 801821e:	460d      	mov	r5, r1
 8018220:	d904      	bls.n	801822c <_raise_r+0x14>
 8018222:	2316      	movs	r3, #22
 8018224:	6003      	str	r3, [r0, #0]
 8018226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801822a:	bd38      	pop	{r3, r4, r5, pc}
 801822c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801822e:	b112      	cbz	r2, 8018236 <_raise_r+0x1e>
 8018230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018234:	b94b      	cbnz	r3, 801824a <_raise_r+0x32>
 8018236:	4620      	mov	r0, r4
 8018238:	f000 f864 	bl	8018304 <_getpid_r>
 801823c:	462a      	mov	r2, r5
 801823e:	4601      	mov	r1, r0
 8018240:	4620      	mov	r0, r4
 8018242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018246:	f000 b84b 	b.w	80182e0 <_kill_r>
 801824a:	2b01      	cmp	r3, #1
 801824c:	d00a      	beq.n	8018264 <_raise_r+0x4c>
 801824e:	1c59      	adds	r1, r3, #1
 8018250:	d103      	bne.n	801825a <_raise_r+0x42>
 8018252:	2316      	movs	r3, #22
 8018254:	6003      	str	r3, [r0, #0]
 8018256:	2001      	movs	r0, #1
 8018258:	e7e7      	b.n	801822a <_raise_r+0x12>
 801825a:	2400      	movs	r4, #0
 801825c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018260:	4628      	mov	r0, r5
 8018262:	4798      	blx	r3
 8018264:	2000      	movs	r0, #0
 8018266:	e7e0      	b.n	801822a <_raise_r+0x12>

08018268 <raise>:
 8018268:	4b02      	ldr	r3, [pc, #8]	; (8018274 <raise+0xc>)
 801826a:	4601      	mov	r1, r0
 801826c:	6818      	ldr	r0, [r3, #0]
 801826e:	f7ff bfd3 	b.w	8018218 <_raise_r>
 8018272:	bf00      	nop
 8018274:	200001e8 	.word	0x200001e8

08018278 <_close_r>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	4d06      	ldr	r5, [pc, #24]	; (8018294 <_close_r+0x1c>)
 801827c:	2300      	movs	r3, #0
 801827e:	4604      	mov	r4, r0
 8018280:	4608      	mov	r0, r1
 8018282:	602b      	str	r3, [r5, #0]
 8018284:	f7e9 fa9a 	bl	80017bc <_close>
 8018288:	1c43      	adds	r3, r0, #1
 801828a:	d102      	bne.n	8018292 <_close_r+0x1a>
 801828c:	682b      	ldr	r3, [r5, #0]
 801828e:	b103      	cbz	r3, 8018292 <_close_r+0x1a>
 8018290:	6023      	str	r3, [r4, #0]
 8018292:	bd38      	pop	{r3, r4, r5, pc}
 8018294:	20017bc0 	.word	0x20017bc0

08018298 <_lseek_r>:
 8018298:	b538      	push	{r3, r4, r5, lr}
 801829a:	4d07      	ldr	r5, [pc, #28]	; (80182b8 <_lseek_r+0x20>)
 801829c:	4604      	mov	r4, r0
 801829e:	4608      	mov	r0, r1
 80182a0:	4611      	mov	r1, r2
 80182a2:	2200      	movs	r2, #0
 80182a4:	602a      	str	r2, [r5, #0]
 80182a6:	461a      	mov	r2, r3
 80182a8:	f7e9 fa92 	bl	80017d0 <_lseek>
 80182ac:	1c43      	adds	r3, r0, #1
 80182ae:	d102      	bne.n	80182b6 <_lseek_r+0x1e>
 80182b0:	682b      	ldr	r3, [r5, #0]
 80182b2:	b103      	cbz	r3, 80182b6 <_lseek_r+0x1e>
 80182b4:	6023      	str	r3, [r4, #0]
 80182b6:	bd38      	pop	{r3, r4, r5, pc}
 80182b8:	20017bc0 	.word	0x20017bc0

080182bc <_read_r>:
 80182bc:	b538      	push	{r3, r4, r5, lr}
 80182be:	4d07      	ldr	r5, [pc, #28]	; (80182dc <_read_r+0x20>)
 80182c0:	4604      	mov	r4, r0
 80182c2:	4608      	mov	r0, r1
 80182c4:	4611      	mov	r1, r2
 80182c6:	2200      	movs	r2, #0
 80182c8:	602a      	str	r2, [r5, #0]
 80182ca:	461a      	mov	r2, r3
 80182cc:	f7e9 fa82 	bl	80017d4 <_read>
 80182d0:	1c43      	adds	r3, r0, #1
 80182d2:	d102      	bne.n	80182da <_read_r+0x1e>
 80182d4:	682b      	ldr	r3, [r5, #0]
 80182d6:	b103      	cbz	r3, 80182da <_read_r+0x1e>
 80182d8:	6023      	str	r3, [r4, #0]
 80182da:	bd38      	pop	{r3, r4, r5, pc}
 80182dc:	20017bc0 	.word	0x20017bc0

080182e0 <_kill_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4d07      	ldr	r5, [pc, #28]	; (8018300 <_kill_r+0x20>)
 80182e4:	2300      	movs	r3, #0
 80182e6:	4604      	mov	r4, r0
 80182e8:	4608      	mov	r0, r1
 80182ea:	4611      	mov	r1, r2
 80182ec:	602b      	str	r3, [r5, #0]
 80182ee:	f7e9 fa49 	bl	8001784 <_kill>
 80182f2:	1c43      	adds	r3, r0, #1
 80182f4:	d102      	bne.n	80182fc <_kill_r+0x1c>
 80182f6:	682b      	ldr	r3, [r5, #0]
 80182f8:	b103      	cbz	r3, 80182fc <_kill_r+0x1c>
 80182fa:	6023      	str	r3, [r4, #0]
 80182fc:	bd38      	pop	{r3, r4, r5, pc}
 80182fe:	bf00      	nop
 8018300:	20017bc0 	.word	0x20017bc0

08018304 <_getpid_r>:
 8018304:	f7e9 ba3c 	b.w	8001780 <_getpid>

08018308 <_sbrk_r>:
 8018308:	b538      	push	{r3, r4, r5, lr}
 801830a:	4d06      	ldr	r5, [pc, #24]	; (8018324 <_sbrk_r+0x1c>)
 801830c:	2300      	movs	r3, #0
 801830e:	4604      	mov	r4, r0
 8018310:	4608      	mov	r0, r1
 8018312:	602b      	str	r3, [r5, #0]
 8018314:	f7e9 fa1a 	bl	800174c <_sbrk>
 8018318:	1c43      	adds	r3, r0, #1
 801831a:	d102      	bne.n	8018322 <_sbrk_r+0x1a>
 801831c:	682b      	ldr	r3, [r5, #0]
 801831e:	b103      	cbz	r3, 8018322 <_sbrk_r+0x1a>
 8018320:	6023      	str	r3, [r4, #0]
 8018322:	bd38      	pop	{r3, r4, r5, pc}
 8018324:	20017bc0 	.word	0x20017bc0

08018328 <_write_r>:
 8018328:	b538      	push	{r3, r4, r5, lr}
 801832a:	4d07      	ldr	r5, [pc, #28]	; (8018348 <_write_r+0x20>)
 801832c:	4604      	mov	r4, r0
 801832e:	4608      	mov	r0, r1
 8018330:	4611      	mov	r1, r2
 8018332:	2200      	movs	r2, #0
 8018334:	602a      	str	r2, [r5, #0]
 8018336:	461a      	mov	r2, r3
 8018338:	f7e9 fa32 	bl	80017a0 <_write>
 801833c:	1c43      	adds	r3, r0, #1
 801833e:	d102      	bne.n	8018346 <_write_r+0x1e>
 8018340:	682b      	ldr	r3, [r5, #0]
 8018342:	b103      	cbz	r3, 8018346 <_write_r+0x1e>
 8018344:	6023      	str	r3, [r4, #0]
 8018346:	bd38      	pop	{r3, r4, r5, pc}
 8018348:	20017bc0 	.word	0x20017bc0

0801834c <__errno>:
 801834c:	4b01      	ldr	r3, [pc, #4]	; (8018354 <__errno+0x8>)
 801834e:	6818      	ldr	r0, [r3, #0]
 8018350:	4770      	bx	lr
 8018352:	bf00      	nop
 8018354:	200001e8 	.word	0x200001e8

08018358 <__libc_init_array>:
 8018358:	b570      	push	{r4, r5, r6, lr}
 801835a:	4d0d      	ldr	r5, [pc, #52]	; (8018390 <__libc_init_array+0x38>)
 801835c:	4c0d      	ldr	r4, [pc, #52]	; (8018394 <__libc_init_array+0x3c>)
 801835e:	1b64      	subs	r4, r4, r5
 8018360:	10a4      	asrs	r4, r4, #2
 8018362:	2600      	movs	r6, #0
 8018364:	42a6      	cmp	r6, r4
 8018366:	d109      	bne.n	801837c <__libc_init_array+0x24>
 8018368:	4d0b      	ldr	r5, [pc, #44]	; (8018398 <__libc_init_array+0x40>)
 801836a:	4c0c      	ldr	r4, [pc, #48]	; (801839c <__libc_init_array+0x44>)
 801836c:	f000 fe3a 	bl	8018fe4 <_init>
 8018370:	1b64      	subs	r4, r4, r5
 8018372:	10a4      	asrs	r4, r4, #2
 8018374:	2600      	movs	r6, #0
 8018376:	42a6      	cmp	r6, r4
 8018378:	d105      	bne.n	8018386 <__libc_init_array+0x2e>
 801837a:	bd70      	pop	{r4, r5, r6, pc}
 801837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018380:	4798      	blx	r3
 8018382:	3601      	adds	r6, #1
 8018384:	e7ee      	b.n	8018364 <__libc_init_array+0xc>
 8018386:	f855 3b04 	ldr.w	r3, [r5], #4
 801838a:	4798      	blx	r3
 801838c:	3601      	adds	r6, #1
 801838e:	e7f2      	b.n	8018376 <__libc_init_array+0x1e>
 8018390:	0801fdd0 	.word	0x0801fdd0
 8018394:	0801fdd0 	.word	0x0801fdd0
 8018398:	0801fdd0 	.word	0x0801fdd0
 801839c:	0801fdd4 	.word	0x0801fdd4

080183a0 <__retarget_lock_init_recursive>:
 80183a0:	4770      	bx	lr

080183a2 <__retarget_lock_acquire_recursive>:
 80183a2:	4770      	bx	lr

080183a4 <__retarget_lock_release_recursive>:
 80183a4:	4770      	bx	lr

080183a6 <memcpy>:
 80183a6:	440a      	add	r2, r1
 80183a8:	4291      	cmp	r1, r2
 80183aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80183ae:	d100      	bne.n	80183b2 <memcpy+0xc>
 80183b0:	4770      	bx	lr
 80183b2:	b510      	push	{r4, lr}
 80183b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183bc:	4291      	cmp	r1, r2
 80183be:	d1f9      	bne.n	80183b4 <memcpy+0xe>
 80183c0:	bd10      	pop	{r4, pc}
	...

080183c4 <__register_exitproc>:
 80183c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183c8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801847c <__register_exitproc+0xb8>
 80183cc:	4606      	mov	r6, r0
 80183ce:	f8d8 0000 	ldr.w	r0, [r8]
 80183d2:	461f      	mov	r7, r3
 80183d4:	460d      	mov	r5, r1
 80183d6:	4691      	mov	r9, r2
 80183d8:	f7ff ffe3 	bl	80183a2 <__retarget_lock_acquire_recursive>
 80183dc:	4b23      	ldr	r3, [pc, #140]	; (801846c <__register_exitproc+0xa8>)
 80183de:	681c      	ldr	r4, [r3, #0]
 80183e0:	b934      	cbnz	r4, 80183f0 <__register_exitproc+0x2c>
 80183e2:	4c23      	ldr	r4, [pc, #140]	; (8018470 <__register_exitproc+0xac>)
 80183e4:	601c      	str	r4, [r3, #0]
 80183e6:	4b23      	ldr	r3, [pc, #140]	; (8018474 <__register_exitproc+0xb0>)
 80183e8:	b113      	cbz	r3, 80183f0 <__register_exitproc+0x2c>
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80183f0:	6863      	ldr	r3, [r4, #4]
 80183f2:	2b1f      	cmp	r3, #31
 80183f4:	dd07      	ble.n	8018406 <__register_exitproc+0x42>
 80183f6:	f8d8 0000 	ldr.w	r0, [r8]
 80183fa:	f7ff ffd3 	bl	80183a4 <__retarget_lock_release_recursive>
 80183fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018406:	b32e      	cbz	r6, 8018454 <__register_exitproc+0x90>
 8018408:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801840c:	b968      	cbnz	r0, 801842a <__register_exitproc+0x66>
 801840e:	4b1a      	ldr	r3, [pc, #104]	; (8018478 <__register_exitproc+0xb4>)
 8018410:	2b00      	cmp	r3, #0
 8018412:	d0f0      	beq.n	80183f6 <__register_exitproc+0x32>
 8018414:	f44f 7084 	mov.w	r0, #264	; 0x108
 8018418:	f7ff fc00 	bl	8017c1c <malloc>
 801841c:	2800      	cmp	r0, #0
 801841e:	d0ea      	beq.n	80183f6 <__register_exitproc+0x32>
 8018420:	2300      	movs	r3, #0
 8018422:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8018426:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801842a:	6863      	ldr	r3, [r4, #4]
 801842c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8018430:	2201      	movs	r2, #1
 8018432:	409a      	lsls	r2, r3
 8018434:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8018438:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801843c:	4313      	orrs	r3, r2
 801843e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8018442:	2e02      	cmp	r6, #2
 8018444:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8018448:	bf02      	ittt	eq
 801844a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801844e:	4313      	orreq	r3, r2
 8018450:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8018454:	6863      	ldr	r3, [r4, #4]
 8018456:	f8d8 0000 	ldr.w	r0, [r8]
 801845a:	1c5a      	adds	r2, r3, #1
 801845c:	3302      	adds	r3, #2
 801845e:	6062      	str	r2, [r4, #4]
 8018460:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018464:	f7ff ff9e 	bl	80183a4 <__retarget_lock_release_recursive>
 8018468:	2000      	movs	r0, #0
 801846a:	e7ca      	b.n	8018402 <__register_exitproc+0x3e>
 801846c:	20017c54 	.word	0x20017c54
 8018470:	20017bc8 	.word	0x20017bc8
 8018474:	00000000 	.word	0x00000000
 8018478:	08017c1d 	.word	0x08017c1d
 801847c:	200001ec 	.word	0x200001ec

08018480 <_free_r>:
 8018480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018482:	2900      	cmp	r1, #0
 8018484:	d044      	beq.n	8018510 <_free_r+0x90>
 8018486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801848a:	9001      	str	r0, [sp, #4]
 801848c:	2b00      	cmp	r3, #0
 801848e:	f1a1 0404 	sub.w	r4, r1, #4
 8018492:	bfb8      	it	lt
 8018494:	18e4      	addlt	r4, r4, r3
 8018496:	f7ff fc71 	bl	8017d7c <__malloc_lock>
 801849a:	4a1e      	ldr	r2, [pc, #120]	; (8018514 <_free_r+0x94>)
 801849c:	9801      	ldr	r0, [sp, #4]
 801849e:	6813      	ldr	r3, [r2, #0]
 80184a0:	b933      	cbnz	r3, 80184b0 <_free_r+0x30>
 80184a2:	6063      	str	r3, [r4, #4]
 80184a4:	6014      	str	r4, [r2, #0]
 80184a6:	b003      	add	sp, #12
 80184a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184ac:	f7ff bc6c 	b.w	8017d88 <__malloc_unlock>
 80184b0:	42a3      	cmp	r3, r4
 80184b2:	d908      	bls.n	80184c6 <_free_r+0x46>
 80184b4:	6825      	ldr	r5, [r4, #0]
 80184b6:	1961      	adds	r1, r4, r5
 80184b8:	428b      	cmp	r3, r1
 80184ba:	bf01      	itttt	eq
 80184bc:	6819      	ldreq	r1, [r3, #0]
 80184be:	685b      	ldreq	r3, [r3, #4]
 80184c0:	1949      	addeq	r1, r1, r5
 80184c2:	6021      	streq	r1, [r4, #0]
 80184c4:	e7ed      	b.n	80184a2 <_free_r+0x22>
 80184c6:	461a      	mov	r2, r3
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	b10b      	cbz	r3, 80184d0 <_free_r+0x50>
 80184cc:	42a3      	cmp	r3, r4
 80184ce:	d9fa      	bls.n	80184c6 <_free_r+0x46>
 80184d0:	6811      	ldr	r1, [r2, #0]
 80184d2:	1855      	adds	r5, r2, r1
 80184d4:	42a5      	cmp	r5, r4
 80184d6:	d10b      	bne.n	80184f0 <_free_r+0x70>
 80184d8:	6824      	ldr	r4, [r4, #0]
 80184da:	4421      	add	r1, r4
 80184dc:	1854      	adds	r4, r2, r1
 80184de:	42a3      	cmp	r3, r4
 80184e0:	6011      	str	r1, [r2, #0]
 80184e2:	d1e0      	bne.n	80184a6 <_free_r+0x26>
 80184e4:	681c      	ldr	r4, [r3, #0]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	6053      	str	r3, [r2, #4]
 80184ea:	440c      	add	r4, r1
 80184ec:	6014      	str	r4, [r2, #0]
 80184ee:	e7da      	b.n	80184a6 <_free_r+0x26>
 80184f0:	d902      	bls.n	80184f8 <_free_r+0x78>
 80184f2:	230c      	movs	r3, #12
 80184f4:	6003      	str	r3, [r0, #0]
 80184f6:	e7d6      	b.n	80184a6 <_free_r+0x26>
 80184f8:	6825      	ldr	r5, [r4, #0]
 80184fa:	1961      	adds	r1, r4, r5
 80184fc:	428b      	cmp	r3, r1
 80184fe:	bf04      	itt	eq
 8018500:	6819      	ldreq	r1, [r3, #0]
 8018502:	685b      	ldreq	r3, [r3, #4]
 8018504:	6063      	str	r3, [r4, #4]
 8018506:	bf04      	itt	eq
 8018508:	1949      	addeq	r1, r1, r5
 801850a:	6021      	streq	r1, [r4, #0]
 801850c:	6054      	str	r4, [r2, #4]
 801850e:	e7ca      	b.n	80184a6 <_free_r+0x26>
 8018510:	b003      	add	sp, #12
 8018512:	bd30      	pop	{r4, r5, pc}
 8018514:	20017a7c 	.word	0x20017a7c

08018518 <_malloc_usable_size_r>:
 8018518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801851c:	1f18      	subs	r0, r3, #4
 801851e:	2b00      	cmp	r3, #0
 8018520:	bfbc      	itt	lt
 8018522:	580b      	ldrlt	r3, [r1, r0]
 8018524:	18c0      	addlt	r0, r0, r3
 8018526:	4770      	bx	lr

08018528 <__ssputs_r>:
 8018528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801852c:	688e      	ldr	r6, [r1, #8]
 801852e:	461f      	mov	r7, r3
 8018530:	42be      	cmp	r6, r7
 8018532:	680b      	ldr	r3, [r1, #0]
 8018534:	4682      	mov	sl, r0
 8018536:	460c      	mov	r4, r1
 8018538:	4690      	mov	r8, r2
 801853a:	d82c      	bhi.n	8018596 <__ssputs_r+0x6e>
 801853c:	898a      	ldrh	r2, [r1, #12]
 801853e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018542:	d026      	beq.n	8018592 <__ssputs_r+0x6a>
 8018544:	6965      	ldr	r5, [r4, #20]
 8018546:	6909      	ldr	r1, [r1, #16]
 8018548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801854c:	eba3 0901 	sub.w	r9, r3, r1
 8018550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018554:	1c7b      	adds	r3, r7, #1
 8018556:	444b      	add	r3, r9
 8018558:	106d      	asrs	r5, r5, #1
 801855a:	429d      	cmp	r5, r3
 801855c:	bf38      	it	cc
 801855e:	461d      	movcc	r5, r3
 8018560:	0553      	lsls	r3, r2, #21
 8018562:	d527      	bpl.n	80185b4 <__ssputs_r+0x8c>
 8018564:	4629      	mov	r1, r5
 8018566:	f7ff fb89 	bl	8017c7c <_malloc_r>
 801856a:	4606      	mov	r6, r0
 801856c:	b360      	cbz	r0, 80185c8 <__ssputs_r+0xa0>
 801856e:	6921      	ldr	r1, [r4, #16]
 8018570:	464a      	mov	r2, r9
 8018572:	f7ff ff18 	bl	80183a6 <memcpy>
 8018576:	89a3      	ldrh	r3, [r4, #12]
 8018578:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801857c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018580:	81a3      	strh	r3, [r4, #12]
 8018582:	6126      	str	r6, [r4, #16]
 8018584:	6165      	str	r5, [r4, #20]
 8018586:	444e      	add	r6, r9
 8018588:	eba5 0509 	sub.w	r5, r5, r9
 801858c:	6026      	str	r6, [r4, #0]
 801858e:	60a5      	str	r5, [r4, #8]
 8018590:	463e      	mov	r6, r7
 8018592:	42be      	cmp	r6, r7
 8018594:	d900      	bls.n	8018598 <__ssputs_r+0x70>
 8018596:	463e      	mov	r6, r7
 8018598:	6820      	ldr	r0, [r4, #0]
 801859a:	4632      	mov	r2, r6
 801859c:	4641      	mov	r1, r8
 801859e:	f7ff fe07 	bl	80181b0 <memmove>
 80185a2:	68a3      	ldr	r3, [r4, #8]
 80185a4:	1b9b      	subs	r3, r3, r6
 80185a6:	60a3      	str	r3, [r4, #8]
 80185a8:	6823      	ldr	r3, [r4, #0]
 80185aa:	4433      	add	r3, r6
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	2000      	movs	r0, #0
 80185b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185b4:	462a      	mov	r2, r5
 80185b6:	f7ff fbed 	bl	8017d94 <_realloc_r>
 80185ba:	4606      	mov	r6, r0
 80185bc:	2800      	cmp	r0, #0
 80185be:	d1e0      	bne.n	8018582 <__ssputs_r+0x5a>
 80185c0:	6921      	ldr	r1, [r4, #16]
 80185c2:	4650      	mov	r0, sl
 80185c4:	f7ff ff5c 	bl	8018480 <_free_r>
 80185c8:	230c      	movs	r3, #12
 80185ca:	f8ca 3000 	str.w	r3, [sl]
 80185ce:	89a3      	ldrh	r3, [r4, #12]
 80185d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185d4:	81a3      	strh	r3, [r4, #12]
 80185d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185da:	e7e9      	b.n	80185b0 <__ssputs_r+0x88>

080185dc <_svfiprintf_r>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	4698      	mov	r8, r3
 80185e2:	898b      	ldrh	r3, [r1, #12]
 80185e4:	061b      	lsls	r3, r3, #24
 80185e6:	b09d      	sub	sp, #116	; 0x74
 80185e8:	4607      	mov	r7, r0
 80185ea:	460d      	mov	r5, r1
 80185ec:	4614      	mov	r4, r2
 80185ee:	d50e      	bpl.n	801860e <_svfiprintf_r+0x32>
 80185f0:	690b      	ldr	r3, [r1, #16]
 80185f2:	b963      	cbnz	r3, 801860e <_svfiprintf_r+0x32>
 80185f4:	2140      	movs	r1, #64	; 0x40
 80185f6:	f7ff fb41 	bl	8017c7c <_malloc_r>
 80185fa:	6028      	str	r0, [r5, #0]
 80185fc:	6128      	str	r0, [r5, #16]
 80185fe:	b920      	cbnz	r0, 801860a <_svfiprintf_r+0x2e>
 8018600:	230c      	movs	r3, #12
 8018602:	603b      	str	r3, [r7, #0]
 8018604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018608:	e0d0      	b.n	80187ac <_svfiprintf_r+0x1d0>
 801860a:	2340      	movs	r3, #64	; 0x40
 801860c:	616b      	str	r3, [r5, #20]
 801860e:	2300      	movs	r3, #0
 8018610:	9309      	str	r3, [sp, #36]	; 0x24
 8018612:	2320      	movs	r3, #32
 8018614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018618:	f8cd 800c 	str.w	r8, [sp, #12]
 801861c:	2330      	movs	r3, #48	; 0x30
 801861e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80187c4 <_svfiprintf_r+0x1e8>
 8018622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018626:	f04f 0901 	mov.w	r9, #1
 801862a:	4623      	mov	r3, r4
 801862c:	469a      	mov	sl, r3
 801862e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018632:	b10a      	cbz	r2, 8018638 <_svfiprintf_r+0x5c>
 8018634:	2a25      	cmp	r2, #37	; 0x25
 8018636:	d1f9      	bne.n	801862c <_svfiprintf_r+0x50>
 8018638:	ebba 0b04 	subs.w	fp, sl, r4
 801863c:	d00b      	beq.n	8018656 <_svfiprintf_r+0x7a>
 801863e:	465b      	mov	r3, fp
 8018640:	4622      	mov	r2, r4
 8018642:	4629      	mov	r1, r5
 8018644:	4638      	mov	r0, r7
 8018646:	f7ff ff6f 	bl	8018528 <__ssputs_r>
 801864a:	3001      	adds	r0, #1
 801864c:	f000 80a9 	beq.w	80187a2 <_svfiprintf_r+0x1c6>
 8018650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018652:	445a      	add	r2, fp
 8018654:	9209      	str	r2, [sp, #36]	; 0x24
 8018656:	f89a 3000 	ldrb.w	r3, [sl]
 801865a:	2b00      	cmp	r3, #0
 801865c:	f000 80a1 	beq.w	80187a2 <_svfiprintf_r+0x1c6>
 8018660:	2300      	movs	r3, #0
 8018662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801866a:	f10a 0a01 	add.w	sl, sl, #1
 801866e:	9304      	str	r3, [sp, #16]
 8018670:	9307      	str	r3, [sp, #28]
 8018672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018676:	931a      	str	r3, [sp, #104]	; 0x68
 8018678:	4654      	mov	r4, sl
 801867a:	2205      	movs	r2, #5
 801867c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018680:	4850      	ldr	r0, [pc, #320]	; (80187c4 <_svfiprintf_r+0x1e8>)
 8018682:	f7e7 fdb5 	bl	80001f0 <memchr>
 8018686:	9a04      	ldr	r2, [sp, #16]
 8018688:	b9d8      	cbnz	r0, 80186c2 <_svfiprintf_r+0xe6>
 801868a:	06d0      	lsls	r0, r2, #27
 801868c:	bf44      	itt	mi
 801868e:	2320      	movmi	r3, #32
 8018690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018694:	0711      	lsls	r1, r2, #28
 8018696:	bf44      	itt	mi
 8018698:	232b      	movmi	r3, #43	; 0x2b
 801869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801869e:	f89a 3000 	ldrb.w	r3, [sl]
 80186a2:	2b2a      	cmp	r3, #42	; 0x2a
 80186a4:	d015      	beq.n	80186d2 <_svfiprintf_r+0xf6>
 80186a6:	9a07      	ldr	r2, [sp, #28]
 80186a8:	4654      	mov	r4, sl
 80186aa:	2000      	movs	r0, #0
 80186ac:	f04f 0c0a 	mov.w	ip, #10
 80186b0:	4621      	mov	r1, r4
 80186b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186b6:	3b30      	subs	r3, #48	; 0x30
 80186b8:	2b09      	cmp	r3, #9
 80186ba:	d94d      	bls.n	8018758 <_svfiprintf_r+0x17c>
 80186bc:	b1b0      	cbz	r0, 80186ec <_svfiprintf_r+0x110>
 80186be:	9207      	str	r2, [sp, #28]
 80186c0:	e014      	b.n	80186ec <_svfiprintf_r+0x110>
 80186c2:	eba0 0308 	sub.w	r3, r0, r8
 80186c6:	fa09 f303 	lsl.w	r3, r9, r3
 80186ca:	4313      	orrs	r3, r2
 80186cc:	9304      	str	r3, [sp, #16]
 80186ce:	46a2      	mov	sl, r4
 80186d0:	e7d2      	b.n	8018678 <_svfiprintf_r+0x9c>
 80186d2:	9b03      	ldr	r3, [sp, #12]
 80186d4:	1d19      	adds	r1, r3, #4
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	9103      	str	r1, [sp, #12]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	bfbb      	ittet	lt
 80186de:	425b      	neglt	r3, r3
 80186e0:	f042 0202 	orrlt.w	r2, r2, #2
 80186e4:	9307      	strge	r3, [sp, #28]
 80186e6:	9307      	strlt	r3, [sp, #28]
 80186e8:	bfb8      	it	lt
 80186ea:	9204      	strlt	r2, [sp, #16]
 80186ec:	7823      	ldrb	r3, [r4, #0]
 80186ee:	2b2e      	cmp	r3, #46	; 0x2e
 80186f0:	d10c      	bne.n	801870c <_svfiprintf_r+0x130>
 80186f2:	7863      	ldrb	r3, [r4, #1]
 80186f4:	2b2a      	cmp	r3, #42	; 0x2a
 80186f6:	d134      	bne.n	8018762 <_svfiprintf_r+0x186>
 80186f8:	9b03      	ldr	r3, [sp, #12]
 80186fa:	1d1a      	adds	r2, r3, #4
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	9203      	str	r2, [sp, #12]
 8018700:	2b00      	cmp	r3, #0
 8018702:	bfb8      	it	lt
 8018704:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018708:	3402      	adds	r4, #2
 801870a:	9305      	str	r3, [sp, #20]
 801870c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80187d4 <_svfiprintf_r+0x1f8>
 8018710:	7821      	ldrb	r1, [r4, #0]
 8018712:	2203      	movs	r2, #3
 8018714:	4650      	mov	r0, sl
 8018716:	f7e7 fd6b 	bl	80001f0 <memchr>
 801871a:	b138      	cbz	r0, 801872c <_svfiprintf_r+0x150>
 801871c:	9b04      	ldr	r3, [sp, #16]
 801871e:	eba0 000a 	sub.w	r0, r0, sl
 8018722:	2240      	movs	r2, #64	; 0x40
 8018724:	4082      	lsls	r2, r0
 8018726:	4313      	orrs	r3, r2
 8018728:	3401      	adds	r4, #1
 801872a:	9304      	str	r3, [sp, #16]
 801872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018730:	4825      	ldr	r0, [pc, #148]	; (80187c8 <_svfiprintf_r+0x1ec>)
 8018732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018736:	2206      	movs	r2, #6
 8018738:	f7e7 fd5a 	bl	80001f0 <memchr>
 801873c:	2800      	cmp	r0, #0
 801873e:	d038      	beq.n	80187b2 <_svfiprintf_r+0x1d6>
 8018740:	4b22      	ldr	r3, [pc, #136]	; (80187cc <_svfiprintf_r+0x1f0>)
 8018742:	bb1b      	cbnz	r3, 801878c <_svfiprintf_r+0x1b0>
 8018744:	9b03      	ldr	r3, [sp, #12]
 8018746:	3307      	adds	r3, #7
 8018748:	f023 0307 	bic.w	r3, r3, #7
 801874c:	3308      	adds	r3, #8
 801874e:	9303      	str	r3, [sp, #12]
 8018750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018752:	4433      	add	r3, r6
 8018754:	9309      	str	r3, [sp, #36]	; 0x24
 8018756:	e768      	b.n	801862a <_svfiprintf_r+0x4e>
 8018758:	fb0c 3202 	mla	r2, ip, r2, r3
 801875c:	460c      	mov	r4, r1
 801875e:	2001      	movs	r0, #1
 8018760:	e7a6      	b.n	80186b0 <_svfiprintf_r+0xd4>
 8018762:	2300      	movs	r3, #0
 8018764:	3401      	adds	r4, #1
 8018766:	9305      	str	r3, [sp, #20]
 8018768:	4619      	mov	r1, r3
 801876a:	f04f 0c0a 	mov.w	ip, #10
 801876e:	4620      	mov	r0, r4
 8018770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018774:	3a30      	subs	r2, #48	; 0x30
 8018776:	2a09      	cmp	r2, #9
 8018778:	d903      	bls.n	8018782 <_svfiprintf_r+0x1a6>
 801877a:	2b00      	cmp	r3, #0
 801877c:	d0c6      	beq.n	801870c <_svfiprintf_r+0x130>
 801877e:	9105      	str	r1, [sp, #20]
 8018780:	e7c4      	b.n	801870c <_svfiprintf_r+0x130>
 8018782:	fb0c 2101 	mla	r1, ip, r1, r2
 8018786:	4604      	mov	r4, r0
 8018788:	2301      	movs	r3, #1
 801878a:	e7f0      	b.n	801876e <_svfiprintf_r+0x192>
 801878c:	ab03      	add	r3, sp, #12
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	462a      	mov	r2, r5
 8018792:	4b0f      	ldr	r3, [pc, #60]	; (80187d0 <_svfiprintf_r+0x1f4>)
 8018794:	a904      	add	r1, sp, #16
 8018796:	4638      	mov	r0, r7
 8018798:	f3af 8000 	nop.w
 801879c:	1c42      	adds	r2, r0, #1
 801879e:	4606      	mov	r6, r0
 80187a0:	d1d6      	bne.n	8018750 <_svfiprintf_r+0x174>
 80187a2:	89ab      	ldrh	r3, [r5, #12]
 80187a4:	065b      	lsls	r3, r3, #25
 80187a6:	f53f af2d 	bmi.w	8018604 <_svfiprintf_r+0x28>
 80187aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187ac:	b01d      	add	sp, #116	; 0x74
 80187ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b2:	ab03      	add	r3, sp, #12
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	462a      	mov	r2, r5
 80187b8:	4b05      	ldr	r3, [pc, #20]	; (80187d0 <_svfiprintf_r+0x1f4>)
 80187ba:	a904      	add	r1, sp, #16
 80187bc:	4638      	mov	r0, r7
 80187be:	f000 f9bd 	bl	8018b3c <_printf_i>
 80187c2:	e7eb      	b.n	801879c <_svfiprintf_r+0x1c0>
 80187c4:	0801fd98 	.word	0x0801fd98
 80187c8:	0801fda2 	.word	0x0801fda2
 80187cc:	00000000 	.word	0x00000000
 80187d0:	08018529 	.word	0x08018529
 80187d4:	0801fd9e 	.word	0x0801fd9e

080187d8 <__sfputc_r>:
 80187d8:	6893      	ldr	r3, [r2, #8]
 80187da:	3b01      	subs	r3, #1
 80187dc:	2b00      	cmp	r3, #0
 80187de:	b410      	push	{r4}
 80187e0:	6093      	str	r3, [r2, #8]
 80187e2:	da08      	bge.n	80187f6 <__sfputc_r+0x1e>
 80187e4:	6994      	ldr	r4, [r2, #24]
 80187e6:	42a3      	cmp	r3, r4
 80187e8:	db01      	blt.n	80187ee <__sfputc_r+0x16>
 80187ea:	290a      	cmp	r1, #10
 80187ec:	d103      	bne.n	80187f6 <__sfputc_r+0x1e>
 80187ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187f2:	f7ff bc48 	b.w	8018086 <__swbuf_r>
 80187f6:	6813      	ldr	r3, [r2, #0]
 80187f8:	1c58      	adds	r0, r3, #1
 80187fa:	6010      	str	r0, [r2, #0]
 80187fc:	7019      	strb	r1, [r3, #0]
 80187fe:	4608      	mov	r0, r1
 8018800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018804:	4770      	bx	lr

08018806 <__sfputs_r>:
 8018806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018808:	4606      	mov	r6, r0
 801880a:	460f      	mov	r7, r1
 801880c:	4614      	mov	r4, r2
 801880e:	18d5      	adds	r5, r2, r3
 8018810:	42ac      	cmp	r4, r5
 8018812:	d101      	bne.n	8018818 <__sfputs_r+0x12>
 8018814:	2000      	movs	r0, #0
 8018816:	e007      	b.n	8018828 <__sfputs_r+0x22>
 8018818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801881c:	463a      	mov	r2, r7
 801881e:	4630      	mov	r0, r6
 8018820:	f7ff ffda 	bl	80187d8 <__sfputc_r>
 8018824:	1c43      	adds	r3, r0, #1
 8018826:	d1f3      	bne.n	8018810 <__sfputs_r+0xa>
 8018828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801882c <_vfiprintf_r>:
 801882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018830:	460d      	mov	r5, r1
 8018832:	b09d      	sub	sp, #116	; 0x74
 8018834:	4614      	mov	r4, r2
 8018836:	4698      	mov	r8, r3
 8018838:	4606      	mov	r6, r0
 801883a:	b118      	cbz	r0, 8018844 <_vfiprintf_r+0x18>
 801883c:	6a03      	ldr	r3, [r0, #32]
 801883e:	b90b      	cbnz	r3, 8018844 <_vfiprintf_r+0x18>
 8018840:	f7ff fb64 	bl	8017f0c <__sinit>
 8018844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018846:	07d9      	lsls	r1, r3, #31
 8018848:	d405      	bmi.n	8018856 <_vfiprintf_r+0x2a>
 801884a:	89ab      	ldrh	r3, [r5, #12]
 801884c:	059a      	lsls	r2, r3, #22
 801884e:	d402      	bmi.n	8018856 <_vfiprintf_r+0x2a>
 8018850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018852:	f7ff fda6 	bl	80183a2 <__retarget_lock_acquire_recursive>
 8018856:	89ab      	ldrh	r3, [r5, #12]
 8018858:	071b      	lsls	r3, r3, #28
 801885a:	d501      	bpl.n	8018860 <_vfiprintf_r+0x34>
 801885c:	692b      	ldr	r3, [r5, #16]
 801885e:	b99b      	cbnz	r3, 8018888 <_vfiprintf_r+0x5c>
 8018860:	4629      	mov	r1, r5
 8018862:	4630      	mov	r0, r6
 8018864:	f7ff fc4c 	bl	8018100 <__swsetup_r>
 8018868:	b170      	cbz	r0, 8018888 <_vfiprintf_r+0x5c>
 801886a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801886c:	07dc      	lsls	r4, r3, #31
 801886e:	d504      	bpl.n	801887a <_vfiprintf_r+0x4e>
 8018870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018874:	b01d      	add	sp, #116	; 0x74
 8018876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801887a:	89ab      	ldrh	r3, [r5, #12]
 801887c:	0598      	lsls	r0, r3, #22
 801887e:	d4f7      	bmi.n	8018870 <_vfiprintf_r+0x44>
 8018880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018882:	f7ff fd8f 	bl	80183a4 <__retarget_lock_release_recursive>
 8018886:	e7f3      	b.n	8018870 <_vfiprintf_r+0x44>
 8018888:	2300      	movs	r3, #0
 801888a:	9309      	str	r3, [sp, #36]	; 0x24
 801888c:	2320      	movs	r3, #32
 801888e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018892:	f8cd 800c 	str.w	r8, [sp, #12]
 8018896:	2330      	movs	r3, #48	; 0x30
 8018898:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018a4c <_vfiprintf_r+0x220>
 801889c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188a0:	f04f 0901 	mov.w	r9, #1
 80188a4:	4623      	mov	r3, r4
 80188a6:	469a      	mov	sl, r3
 80188a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188ac:	b10a      	cbz	r2, 80188b2 <_vfiprintf_r+0x86>
 80188ae:	2a25      	cmp	r2, #37	; 0x25
 80188b0:	d1f9      	bne.n	80188a6 <_vfiprintf_r+0x7a>
 80188b2:	ebba 0b04 	subs.w	fp, sl, r4
 80188b6:	d00b      	beq.n	80188d0 <_vfiprintf_r+0xa4>
 80188b8:	465b      	mov	r3, fp
 80188ba:	4622      	mov	r2, r4
 80188bc:	4629      	mov	r1, r5
 80188be:	4630      	mov	r0, r6
 80188c0:	f7ff ffa1 	bl	8018806 <__sfputs_r>
 80188c4:	3001      	adds	r0, #1
 80188c6:	f000 80a9 	beq.w	8018a1c <_vfiprintf_r+0x1f0>
 80188ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188cc:	445a      	add	r2, fp
 80188ce:	9209      	str	r2, [sp, #36]	; 0x24
 80188d0:	f89a 3000 	ldrb.w	r3, [sl]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	f000 80a1 	beq.w	8018a1c <_vfiprintf_r+0x1f0>
 80188da:	2300      	movs	r3, #0
 80188dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188e4:	f10a 0a01 	add.w	sl, sl, #1
 80188e8:	9304      	str	r3, [sp, #16]
 80188ea:	9307      	str	r3, [sp, #28]
 80188ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188f0:	931a      	str	r3, [sp, #104]	; 0x68
 80188f2:	4654      	mov	r4, sl
 80188f4:	2205      	movs	r2, #5
 80188f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188fa:	4854      	ldr	r0, [pc, #336]	; (8018a4c <_vfiprintf_r+0x220>)
 80188fc:	f7e7 fc78 	bl	80001f0 <memchr>
 8018900:	9a04      	ldr	r2, [sp, #16]
 8018902:	b9d8      	cbnz	r0, 801893c <_vfiprintf_r+0x110>
 8018904:	06d1      	lsls	r1, r2, #27
 8018906:	bf44      	itt	mi
 8018908:	2320      	movmi	r3, #32
 801890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801890e:	0713      	lsls	r3, r2, #28
 8018910:	bf44      	itt	mi
 8018912:	232b      	movmi	r3, #43	; 0x2b
 8018914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018918:	f89a 3000 	ldrb.w	r3, [sl]
 801891c:	2b2a      	cmp	r3, #42	; 0x2a
 801891e:	d015      	beq.n	801894c <_vfiprintf_r+0x120>
 8018920:	9a07      	ldr	r2, [sp, #28]
 8018922:	4654      	mov	r4, sl
 8018924:	2000      	movs	r0, #0
 8018926:	f04f 0c0a 	mov.w	ip, #10
 801892a:	4621      	mov	r1, r4
 801892c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018930:	3b30      	subs	r3, #48	; 0x30
 8018932:	2b09      	cmp	r3, #9
 8018934:	d94d      	bls.n	80189d2 <_vfiprintf_r+0x1a6>
 8018936:	b1b0      	cbz	r0, 8018966 <_vfiprintf_r+0x13a>
 8018938:	9207      	str	r2, [sp, #28]
 801893a:	e014      	b.n	8018966 <_vfiprintf_r+0x13a>
 801893c:	eba0 0308 	sub.w	r3, r0, r8
 8018940:	fa09 f303 	lsl.w	r3, r9, r3
 8018944:	4313      	orrs	r3, r2
 8018946:	9304      	str	r3, [sp, #16]
 8018948:	46a2      	mov	sl, r4
 801894a:	e7d2      	b.n	80188f2 <_vfiprintf_r+0xc6>
 801894c:	9b03      	ldr	r3, [sp, #12]
 801894e:	1d19      	adds	r1, r3, #4
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	9103      	str	r1, [sp, #12]
 8018954:	2b00      	cmp	r3, #0
 8018956:	bfbb      	ittet	lt
 8018958:	425b      	neglt	r3, r3
 801895a:	f042 0202 	orrlt.w	r2, r2, #2
 801895e:	9307      	strge	r3, [sp, #28]
 8018960:	9307      	strlt	r3, [sp, #28]
 8018962:	bfb8      	it	lt
 8018964:	9204      	strlt	r2, [sp, #16]
 8018966:	7823      	ldrb	r3, [r4, #0]
 8018968:	2b2e      	cmp	r3, #46	; 0x2e
 801896a:	d10c      	bne.n	8018986 <_vfiprintf_r+0x15a>
 801896c:	7863      	ldrb	r3, [r4, #1]
 801896e:	2b2a      	cmp	r3, #42	; 0x2a
 8018970:	d134      	bne.n	80189dc <_vfiprintf_r+0x1b0>
 8018972:	9b03      	ldr	r3, [sp, #12]
 8018974:	1d1a      	adds	r2, r3, #4
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	9203      	str	r2, [sp, #12]
 801897a:	2b00      	cmp	r3, #0
 801897c:	bfb8      	it	lt
 801897e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018982:	3402      	adds	r4, #2
 8018984:	9305      	str	r3, [sp, #20]
 8018986:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018a5c <_vfiprintf_r+0x230>
 801898a:	7821      	ldrb	r1, [r4, #0]
 801898c:	2203      	movs	r2, #3
 801898e:	4650      	mov	r0, sl
 8018990:	f7e7 fc2e 	bl	80001f0 <memchr>
 8018994:	b138      	cbz	r0, 80189a6 <_vfiprintf_r+0x17a>
 8018996:	9b04      	ldr	r3, [sp, #16]
 8018998:	eba0 000a 	sub.w	r0, r0, sl
 801899c:	2240      	movs	r2, #64	; 0x40
 801899e:	4082      	lsls	r2, r0
 80189a0:	4313      	orrs	r3, r2
 80189a2:	3401      	adds	r4, #1
 80189a4:	9304      	str	r3, [sp, #16]
 80189a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189aa:	4829      	ldr	r0, [pc, #164]	; (8018a50 <_vfiprintf_r+0x224>)
 80189ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189b0:	2206      	movs	r2, #6
 80189b2:	f7e7 fc1d 	bl	80001f0 <memchr>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	d03f      	beq.n	8018a3a <_vfiprintf_r+0x20e>
 80189ba:	4b26      	ldr	r3, [pc, #152]	; (8018a54 <_vfiprintf_r+0x228>)
 80189bc:	bb1b      	cbnz	r3, 8018a06 <_vfiprintf_r+0x1da>
 80189be:	9b03      	ldr	r3, [sp, #12]
 80189c0:	3307      	adds	r3, #7
 80189c2:	f023 0307 	bic.w	r3, r3, #7
 80189c6:	3308      	adds	r3, #8
 80189c8:	9303      	str	r3, [sp, #12]
 80189ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189cc:	443b      	add	r3, r7
 80189ce:	9309      	str	r3, [sp, #36]	; 0x24
 80189d0:	e768      	b.n	80188a4 <_vfiprintf_r+0x78>
 80189d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80189d6:	460c      	mov	r4, r1
 80189d8:	2001      	movs	r0, #1
 80189da:	e7a6      	b.n	801892a <_vfiprintf_r+0xfe>
 80189dc:	2300      	movs	r3, #0
 80189de:	3401      	adds	r4, #1
 80189e0:	9305      	str	r3, [sp, #20]
 80189e2:	4619      	mov	r1, r3
 80189e4:	f04f 0c0a 	mov.w	ip, #10
 80189e8:	4620      	mov	r0, r4
 80189ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189ee:	3a30      	subs	r2, #48	; 0x30
 80189f0:	2a09      	cmp	r2, #9
 80189f2:	d903      	bls.n	80189fc <_vfiprintf_r+0x1d0>
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d0c6      	beq.n	8018986 <_vfiprintf_r+0x15a>
 80189f8:	9105      	str	r1, [sp, #20]
 80189fa:	e7c4      	b.n	8018986 <_vfiprintf_r+0x15a>
 80189fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a00:	4604      	mov	r4, r0
 8018a02:	2301      	movs	r3, #1
 8018a04:	e7f0      	b.n	80189e8 <_vfiprintf_r+0x1bc>
 8018a06:	ab03      	add	r3, sp, #12
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	462a      	mov	r2, r5
 8018a0c:	4b12      	ldr	r3, [pc, #72]	; (8018a58 <_vfiprintf_r+0x22c>)
 8018a0e:	a904      	add	r1, sp, #16
 8018a10:	4630      	mov	r0, r6
 8018a12:	f3af 8000 	nop.w
 8018a16:	4607      	mov	r7, r0
 8018a18:	1c78      	adds	r0, r7, #1
 8018a1a:	d1d6      	bne.n	80189ca <_vfiprintf_r+0x19e>
 8018a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a1e:	07d9      	lsls	r1, r3, #31
 8018a20:	d405      	bmi.n	8018a2e <_vfiprintf_r+0x202>
 8018a22:	89ab      	ldrh	r3, [r5, #12]
 8018a24:	059a      	lsls	r2, r3, #22
 8018a26:	d402      	bmi.n	8018a2e <_vfiprintf_r+0x202>
 8018a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a2a:	f7ff fcbb 	bl	80183a4 <__retarget_lock_release_recursive>
 8018a2e:	89ab      	ldrh	r3, [r5, #12]
 8018a30:	065b      	lsls	r3, r3, #25
 8018a32:	f53f af1d 	bmi.w	8018870 <_vfiprintf_r+0x44>
 8018a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a38:	e71c      	b.n	8018874 <_vfiprintf_r+0x48>
 8018a3a:	ab03      	add	r3, sp, #12
 8018a3c:	9300      	str	r3, [sp, #0]
 8018a3e:	462a      	mov	r2, r5
 8018a40:	4b05      	ldr	r3, [pc, #20]	; (8018a58 <_vfiprintf_r+0x22c>)
 8018a42:	a904      	add	r1, sp, #16
 8018a44:	4630      	mov	r0, r6
 8018a46:	f000 f879 	bl	8018b3c <_printf_i>
 8018a4a:	e7e4      	b.n	8018a16 <_vfiprintf_r+0x1ea>
 8018a4c:	0801fd98 	.word	0x0801fd98
 8018a50:	0801fda2 	.word	0x0801fda2
 8018a54:	00000000 	.word	0x00000000
 8018a58:	08018807 	.word	0x08018807
 8018a5c:	0801fd9e 	.word	0x0801fd9e

08018a60 <_printf_common>:
 8018a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a64:	4616      	mov	r6, r2
 8018a66:	4699      	mov	r9, r3
 8018a68:	688a      	ldr	r2, [r1, #8]
 8018a6a:	690b      	ldr	r3, [r1, #16]
 8018a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a70:	4293      	cmp	r3, r2
 8018a72:	bfb8      	it	lt
 8018a74:	4613      	movlt	r3, r2
 8018a76:	6033      	str	r3, [r6, #0]
 8018a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a7c:	4607      	mov	r7, r0
 8018a7e:	460c      	mov	r4, r1
 8018a80:	b10a      	cbz	r2, 8018a86 <_printf_common+0x26>
 8018a82:	3301      	adds	r3, #1
 8018a84:	6033      	str	r3, [r6, #0]
 8018a86:	6823      	ldr	r3, [r4, #0]
 8018a88:	0699      	lsls	r1, r3, #26
 8018a8a:	bf42      	ittt	mi
 8018a8c:	6833      	ldrmi	r3, [r6, #0]
 8018a8e:	3302      	addmi	r3, #2
 8018a90:	6033      	strmi	r3, [r6, #0]
 8018a92:	6825      	ldr	r5, [r4, #0]
 8018a94:	f015 0506 	ands.w	r5, r5, #6
 8018a98:	d106      	bne.n	8018aa8 <_printf_common+0x48>
 8018a9a:	f104 0a19 	add.w	sl, r4, #25
 8018a9e:	68e3      	ldr	r3, [r4, #12]
 8018aa0:	6832      	ldr	r2, [r6, #0]
 8018aa2:	1a9b      	subs	r3, r3, r2
 8018aa4:	42ab      	cmp	r3, r5
 8018aa6:	dc26      	bgt.n	8018af6 <_printf_common+0x96>
 8018aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018aac:	1e13      	subs	r3, r2, #0
 8018aae:	6822      	ldr	r2, [r4, #0]
 8018ab0:	bf18      	it	ne
 8018ab2:	2301      	movne	r3, #1
 8018ab4:	0692      	lsls	r2, r2, #26
 8018ab6:	d42b      	bmi.n	8018b10 <_printf_common+0xb0>
 8018ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018abc:	4649      	mov	r1, r9
 8018abe:	4638      	mov	r0, r7
 8018ac0:	47c0      	blx	r8
 8018ac2:	3001      	adds	r0, #1
 8018ac4:	d01e      	beq.n	8018b04 <_printf_common+0xa4>
 8018ac6:	6823      	ldr	r3, [r4, #0]
 8018ac8:	6922      	ldr	r2, [r4, #16]
 8018aca:	f003 0306 	and.w	r3, r3, #6
 8018ace:	2b04      	cmp	r3, #4
 8018ad0:	bf02      	ittt	eq
 8018ad2:	68e5      	ldreq	r5, [r4, #12]
 8018ad4:	6833      	ldreq	r3, [r6, #0]
 8018ad6:	1aed      	subeq	r5, r5, r3
 8018ad8:	68a3      	ldr	r3, [r4, #8]
 8018ada:	bf0c      	ite	eq
 8018adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ae0:	2500      	movne	r5, #0
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	bfc4      	itt	gt
 8018ae6:	1a9b      	subgt	r3, r3, r2
 8018ae8:	18ed      	addgt	r5, r5, r3
 8018aea:	2600      	movs	r6, #0
 8018aec:	341a      	adds	r4, #26
 8018aee:	42b5      	cmp	r5, r6
 8018af0:	d11a      	bne.n	8018b28 <_printf_common+0xc8>
 8018af2:	2000      	movs	r0, #0
 8018af4:	e008      	b.n	8018b08 <_printf_common+0xa8>
 8018af6:	2301      	movs	r3, #1
 8018af8:	4652      	mov	r2, sl
 8018afa:	4649      	mov	r1, r9
 8018afc:	4638      	mov	r0, r7
 8018afe:	47c0      	blx	r8
 8018b00:	3001      	adds	r0, #1
 8018b02:	d103      	bne.n	8018b0c <_printf_common+0xac>
 8018b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b0c:	3501      	adds	r5, #1
 8018b0e:	e7c6      	b.n	8018a9e <_printf_common+0x3e>
 8018b10:	18e1      	adds	r1, r4, r3
 8018b12:	1c5a      	adds	r2, r3, #1
 8018b14:	2030      	movs	r0, #48	; 0x30
 8018b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018b1a:	4422      	add	r2, r4
 8018b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018b24:	3302      	adds	r3, #2
 8018b26:	e7c7      	b.n	8018ab8 <_printf_common+0x58>
 8018b28:	2301      	movs	r3, #1
 8018b2a:	4622      	mov	r2, r4
 8018b2c:	4649      	mov	r1, r9
 8018b2e:	4638      	mov	r0, r7
 8018b30:	47c0      	blx	r8
 8018b32:	3001      	adds	r0, #1
 8018b34:	d0e6      	beq.n	8018b04 <_printf_common+0xa4>
 8018b36:	3601      	adds	r6, #1
 8018b38:	e7d9      	b.n	8018aee <_printf_common+0x8e>
	...

08018b3c <_printf_i>:
 8018b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018b40:	7e0f      	ldrb	r7, [r1, #24]
 8018b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018b44:	2f78      	cmp	r7, #120	; 0x78
 8018b46:	4691      	mov	r9, r2
 8018b48:	4680      	mov	r8, r0
 8018b4a:	460c      	mov	r4, r1
 8018b4c:	469a      	mov	sl, r3
 8018b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018b52:	d807      	bhi.n	8018b64 <_printf_i+0x28>
 8018b54:	2f62      	cmp	r7, #98	; 0x62
 8018b56:	d80a      	bhi.n	8018b6e <_printf_i+0x32>
 8018b58:	2f00      	cmp	r7, #0
 8018b5a:	f000 80d4 	beq.w	8018d06 <_printf_i+0x1ca>
 8018b5e:	2f58      	cmp	r7, #88	; 0x58
 8018b60:	f000 80c0 	beq.w	8018ce4 <_printf_i+0x1a8>
 8018b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018b6c:	e03a      	b.n	8018be4 <_printf_i+0xa8>
 8018b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018b72:	2b15      	cmp	r3, #21
 8018b74:	d8f6      	bhi.n	8018b64 <_printf_i+0x28>
 8018b76:	a101      	add	r1, pc, #4	; (adr r1, 8018b7c <_printf_i+0x40>)
 8018b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018b7c:	08018bd5 	.word	0x08018bd5
 8018b80:	08018be9 	.word	0x08018be9
 8018b84:	08018b65 	.word	0x08018b65
 8018b88:	08018b65 	.word	0x08018b65
 8018b8c:	08018b65 	.word	0x08018b65
 8018b90:	08018b65 	.word	0x08018b65
 8018b94:	08018be9 	.word	0x08018be9
 8018b98:	08018b65 	.word	0x08018b65
 8018b9c:	08018b65 	.word	0x08018b65
 8018ba0:	08018b65 	.word	0x08018b65
 8018ba4:	08018b65 	.word	0x08018b65
 8018ba8:	08018ced 	.word	0x08018ced
 8018bac:	08018c15 	.word	0x08018c15
 8018bb0:	08018ca7 	.word	0x08018ca7
 8018bb4:	08018b65 	.word	0x08018b65
 8018bb8:	08018b65 	.word	0x08018b65
 8018bbc:	08018d0f 	.word	0x08018d0f
 8018bc0:	08018b65 	.word	0x08018b65
 8018bc4:	08018c15 	.word	0x08018c15
 8018bc8:	08018b65 	.word	0x08018b65
 8018bcc:	08018b65 	.word	0x08018b65
 8018bd0:	08018caf 	.word	0x08018caf
 8018bd4:	682b      	ldr	r3, [r5, #0]
 8018bd6:	1d1a      	adds	r2, r3, #4
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	602a      	str	r2, [r5, #0]
 8018bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018be4:	2301      	movs	r3, #1
 8018be6:	e09f      	b.n	8018d28 <_printf_i+0x1ec>
 8018be8:	6820      	ldr	r0, [r4, #0]
 8018bea:	682b      	ldr	r3, [r5, #0]
 8018bec:	0607      	lsls	r7, r0, #24
 8018bee:	f103 0104 	add.w	r1, r3, #4
 8018bf2:	6029      	str	r1, [r5, #0]
 8018bf4:	d501      	bpl.n	8018bfa <_printf_i+0xbe>
 8018bf6:	681e      	ldr	r6, [r3, #0]
 8018bf8:	e003      	b.n	8018c02 <_printf_i+0xc6>
 8018bfa:	0646      	lsls	r6, r0, #25
 8018bfc:	d5fb      	bpl.n	8018bf6 <_printf_i+0xba>
 8018bfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018c02:	2e00      	cmp	r6, #0
 8018c04:	da03      	bge.n	8018c0e <_printf_i+0xd2>
 8018c06:	232d      	movs	r3, #45	; 0x2d
 8018c08:	4276      	negs	r6, r6
 8018c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c0e:	485a      	ldr	r0, [pc, #360]	; (8018d78 <_printf_i+0x23c>)
 8018c10:	230a      	movs	r3, #10
 8018c12:	e012      	b.n	8018c3a <_printf_i+0xfe>
 8018c14:	682b      	ldr	r3, [r5, #0]
 8018c16:	6820      	ldr	r0, [r4, #0]
 8018c18:	1d19      	adds	r1, r3, #4
 8018c1a:	6029      	str	r1, [r5, #0]
 8018c1c:	0605      	lsls	r5, r0, #24
 8018c1e:	d501      	bpl.n	8018c24 <_printf_i+0xe8>
 8018c20:	681e      	ldr	r6, [r3, #0]
 8018c22:	e002      	b.n	8018c2a <_printf_i+0xee>
 8018c24:	0641      	lsls	r1, r0, #25
 8018c26:	d5fb      	bpl.n	8018c20 <_printf_i+0xe4>
 8018c28:	881e      	ldrh	r6, [r3, #0]
 8018c2a:	4853      	ldr	r0, [pc, #332]	; (8018d78 <_printf_i+0x23c>)
 8018c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8018c2e:	bf0c      	ite	eq
 8018c30:	2308      	moveq	r3, #8
 8018c32:	230a      	movne	r3, #10
 8018c34:	2100      	movs	r1, #0
 8018c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018c3a:	6865      	ldr	r5, [r4, #4]
 8018c3c:	60a5      	str	r5, [r4, #8]
 8018c3e:	2d00      	cmp	r5, #0
 8018c40:	bfa2      	ittt	ge
 8018c42:	6821      	ldrge	r1, [r4, #0]
 8018c44:	f021 0104 	bicge.w	r1, r1, #4
 8018c48:	6021      	strge	r1, [r4, #0]
 8018c4a:	b90e      	cbnz	r6, 8018c50 <_printf_i+0x114>
 8018c4c:	2d00      	cmp	r5, #0
 8018c4e:	d04b      	beq.n	8018ce8 <_printf_i+0x1ac>
 8018c50:	4615      	mov	r5, r2
 8018c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8018c56:	fb03 6711 	mls	r7, r3, r1, r6
 8018c5a:	5dc7      	ldrb	r7, [r0, r7]
 8018c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018c60:	4637      	mov	r7, r6
 8018c62:	42bb      	cmp	r3, r7
 8018c64:	460e      	mov	r6, r1
 8018c66:	d9f4      	bls.n	8018c52 <_printf_i+0x116>
 8018c68:	2b08      	cmp	r3, #8
 8018c6a:	d10b      	bne.n	8018c84 <_printf_i+0x148>
 8018c6c:	6823      	ldr	r3, [r4, #0]
 8018c6e:	07de      	lsls	r6, r3, #31
 8018c70:	d508      	bpl.n	8018c84 <_printf_i+0x148>
 8018c72:	6923      	ldr	r3, [r4, #16]
 8018c74:	6861      	ldr	r1, [r4, #4]
 8018c76:	4299      	cmp	r1, r3
 8018c78:	bfde      	ittt	le
 8018c7a:	2330      	movle	r3, #48	; 0x30
 8018c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018c84:	1b52      	subs	r2, r2, r5
 8018c86:	6122      	str	r2, [r4, #16]
 8018c88:	f8cd a000 	str.w	sl, [sp]
 8018c8c:	464b      	mov	r3, r9
 8018c8e:	aa03      	add	r2, sp, #12
 8018c90:	4621      	mov	r1, r4
 8018c92:	4640      	mov	r0, r8
 8018c94:	f7ff fee4 	bl	8018a60 <_printf_common>
 8018c98:	3001      	adds	r0, #1
 8018c9a:	d14a      	bne.n	8018d32 <_printf_i+0x1f6>
 8018c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ca0:	b004      	add	sp, #16
 8018ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ca6:	6823      	ldr	r3, [r4, #0]
 8018ca8:	f043 0320 	orr.w	r3, r3, #32
 8018cac:	6023      	str	r3, [r4, #0]
 8018cae:	4833      	ldr	r0, [pc, #204]	; (8018d7c <_printf_i+0x240>)
 8018cb0:	2778      	movs	r7, #120	; 0x78
 8018cb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018cb6:	6823      	ldr	r3, [r4, #0]
 8018cb8:	6829      	ldr	r1, [r5, #0]
 8018cba:	061f      	lsls	r7, r3, #24
 8018cbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8018cc0:	d402      	bmi.n	8018cc8 <_printf_i+0x18c>
 8018cc2:	065f      	lsls	r7, r3, #25
 8018cc4:	bf48      	it	mi
 8018cc6:	b2b6      	uxthmi	r6, r6
 8018cc8:	07df      	lsls	r7, r3, #31
 8018cca:	bf48      	it	mi
 8018ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8018cd0:	6029      	str	r1, [r5, #0]
 8018cd2:	bf48      	it	mi
 8018cd4:	6023      	strmi	r3, [r4, #0]
 8018cd6:	b91e      	cbnz	r6, 8018ce0 <_printf_i+0x1a4>
 8018cd8:	6823      	ldr	r3, [r4, #0]
 8018cda:	f023 0320 	bic.w	r3, r3, #32
 8018cde:	6023      	str	r3, [r4, #0]
 8018ce0:	2310      	movs	r3, #16
 8018ce2:	e7a7      	b.n	8018c34 <_printf_i+0xf8>
 8018ce4:	4824      	ldr	r0, [pc, #144]	; (8018d78 <_printf_i+0x23c>)
 8018ce6:	e7e4      	b.n	8018cb2 <_printf_i+0x176>
 8018ce8:	4615      	mov	r5, r2
 8018cea:	e7bd      	b.n	8018c68 <_printf_i+0x12c>
 8018cec:	682b      	ldr	r3, [r5, #0]
 8018cee:	6826      	ldr	r6, [r4, #0]
 8018cf0:	6961      	ldr	r1, [r4, #20]
 8018cf2:	1d18      	adds	r0, r3, #4
 8018cf4:	6028      	str	r0, [r5, #0]
 8018cf6:	0635      	lsls	r5, r6, #24
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	d501      	bpl.n	8018d00 <_printf_i+0x1c4>
 8018cfc:	6019      	str	r1, [r3, #0]
 8018cfe:	e002      	b.n	8018d06 <_printf_i+0x1ca>
 8018d00:	0670      	lsls	r0, r6, #25
 8018d02:	d5fb      	bpl.n	8018cfc <_printf_i+0x1c0>
 8018d04:	8019      	strh	r1, [r3, #0]
 8018d06:	2300      	movs	r3, #0
 8018d08:	6123      	str	r3, [r4, #16]
 8018d0a:	4615      	mov	r5, r2
 8018d0c:	e7bc      	b.n	8018c88 <_printf_i+0x14c>
 8018d0e:	682b      	ldr	r3, [r5, #0]
 8018d10:	1d1a      	adds	r2, r3, #4
 8018d12:	602a      	str	r2, [r5, #0]
 8018d14:	681d      	ldr	r5, [r3, #0]
 8018d16:	6862      	ldr	r2, [r4, #4]
 8018d18:	2100      	movs	r1, #0
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f7e7 fa68 	bl	80001f0 <memchr>
 8018d20:	b108      	cbz	r0, 8018d26 <_printf_i+0x1ea>
 8018d22:	1b40      	subs	r0, r0, r5
 8018d24:	6060      	str	r0, [r4, #4]
 8018d26:	6863      	ldr	r3, [r4, #4]
 8018d28:	6123      	str	r3, [r4, #16]
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d30:	e7aa      	b.n	8018c88 <_printf_i+0x14c>
 8018d32:	6923      	ldr	r3, [r4, #16]
 8018d34:	462a      	mov	r2, r5
 8018d36:	4649      	mov	r1, r9
 8018d38:	4640      	mov	r0, r8
 8018d3a:	47d0      	blx	sl
 8018d3c:	3001      	adds	r0, #1
 8018d3e:	d0ad      	beq.n	8018c9c <_printf_i+0x160>
 8018d40:	6823      	ldr	r3, [r4, #0]
 8018d42:	079b      	lsls	r3, r3, #30
 8018d44:	d413      	bmi.n	8018d6e <_printf_i+0x232>
 8018d46:	68e0      	ldr	r0, [r4, #12]
 8018d48:	9b03      	ldr	r3, [sp, #12]
 8018d4a:	4298      	cmp	r0, r3
 8018d4c:	bfb8      	it	lt
 8018d4e:	4618      	movlt	r0, r3
 8018d50:	e7a6      	b.n	8018ca0 <_printf_i+0x164>
 8018d52:	2301      	movs	r3, #1
 8018d54:	4632      	mov	r2, r6
 8018d56:	4649      	mov	r1, r9
 8018d58:	4640      	mov	r0, r8
 8018d5a:	47d0      	blx	sl
 8018d5c:	3001      	adds	r0, #1
 8018d5e:	d09d      	beq.n	8018c9c <_printf_i+0x160>
 8018d60:	3501      	adds	r5, #1
 8018d62:	68e3      	ldr	r3, [r4, #12]
 8018d64:	9903      	ldr	r1, [sp, #12]
 8018d66:	1a5b      	subs	r3, r3, r1
 8018d68:	42ab      	cmp	r3, r5
 8018d6a:	dcf2      	bgt.n	8018d52 <_printf_i+0x216>
 8018d6c:	e7eb      	b.n	8018d46 <_printf_i+0x20a>
 8018d6e:	2500      	movs	r5, #0
 8018d70:	f104 0619 	add.w	r6, r4, #25
 8018d74:	e7f5      	b.n	8018d62 <_printf_i+0x226>
 8018d76:	bf00      	nop
 8018d78:	0801fda9 	.word	0x0801fda9
 8018d7c:	0801fdba 	.word	0x0801fdba

08018d80 <__sflush_r>:
 8018d80:	898a      	ldrh	r2, [r1, #12]
 8018d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d86:	4605      	mov	r5, r0
 8018d88:	0710      	lsls	r0, r2, #28
 8018d8a:	460c      	mov	r4, r1
 8018d8c:	d458      	bmi.n	8018e40 <__sflush_r+0xc0>
 8018d8e:	684b      	ldr	r3, [r1, #4]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	dc05      	bgt.n	8018da0 <__sflush_r+0x20>
 8018d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	dc02      	bgt.n	8018da0 <__sflush_r+0x20>
 8018d9a:	2000      	movs	r0, #0
 8018d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018da2:	2e00      	cmp	r6, #0
 8018da4:	d0f9      	beq.n	8018d9a <__sflush_r+0x1a>
 8018da6:	2300      	movs	r3, #0
 8018da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018dac:	682f      	ldr	r7, [r5, #0]
 8018dae:	6a21      	ldr	r1, [r4, #32]
 8018db0:	602b      	str	r3, [r5, #0]
 8018db2:	d032      	beq.n	8018e1a <__sflush_r+0x9a>
 8018db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018db6:	89a3      	ldrh	r3, [r4, #12]
 8018db8:	075a      	lsls	r2, r3, #29
 8018dba:	d505      	bpl.n	8018dc8 <__sflush_r+0x48>
 8018dbc:	6863      	ldr	r3, [r4, #4]
 8018dbe:	1ac0      	subs	r0, r0, r3
 8018dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dc2:	b10b      	cbz	r3, 8018dc8 <__sflush_r+0x48>
 8018dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018dc6:	1ac0      	subs	r0, r0, r3
 8018dc8:	2300      	movs	r3, #0
 8018dca:	4602      	mov	r2, r0
 8018dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018dce:	6a21      	ldr	r1, [r4, #32]
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	47b0      	blx	r6
 8018dd4:	1c43      	adds	r3, r0, #1
 8018dd6:	89a3      	ldrh	r3, [r4, #12]
 8018dd8:	d106      	bne.n	8018de8 <__sflush_r+0x68>
 8018dda:	6829      	ldr	r1, [r5, #0]
 8018ddc:	291d      	cmp	r1, #29
 8018dde:	d82b      	bhi.n	8018e38 <__sflush_r+0xb8>
 8018de0:	4a29      	ldr	r2, [pc, #164]	; (8018e88 <__sflush_r+0x108>)
 8018de2:	410a      	asrs	r2, r1
 8018de4:	07d6      	lsls	r6, r2, #31
 8018de6:	d427      	bmi.n	8018e38 <__sflush_r+0xb8>
 8018de8:	2200      	movs	r2, #0
 8018dea:	6062      	str	r2, [r4, #4]
 8018dec:	04d9      	lsls	r1, r3, #19
 8018dee:	6922      	ldr	r2, [r4, #16]
 8018df0:	6022      	str	r2, [r4, #0]
 8018df2:	d504      	bpl.n	8018dfe <__sflush_r+0x7e>
 8018df4:	1c42      	adds	r2, r0, #1
 8018df6:	d101      	bne.n	8018dfc <__sflush_r+0x7c>
 8018df8:	682b      	ldr	r3, [r5, #0]
 8018dfa:	b903      	cbnz	r3, 8018dfe <__sflush_r+0x7e>
 8018dfc:	6560      	str	r0, [r4, #84]	; 0x54
 8018dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e00:	602f      	str	r7, [r5, #0]
 8018e02:	2900      	cmp	r1, #0
 8018e04:	d0c9      	beq.n	8018d9a <__sflush_r+0x1a>
 8018e06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e0a:	4299      	cmp	r1, r3
 8018e0c:	d002      	beq.n	8018e14 <__sflush_r+0x94>
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f7ff fb36 	bl	8018480 <_free_r>
 8018e14:	2000      	movs	r0, #0
 8018e16:	6360      	str	r0, [r4, #52]	; 0x34
 8018e18:	e7c0      	b.n	8018d9c <__sflush_r+0x1c>
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	4628      	mov	r0, r5
 8018e1e:	47b0      	blx	r6
 8018e20:	1c41      	adds	r1, r0, #1
 8018e22:	d1c8      	bne.n	8018db6 <__sflush_r+0x36>
 8018e24:	682b      	ldr	r3, [r5, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d0c5      	beq.n	8018db6 <__sflush_r+0x36>
 8018e2a:	2b1d      	cmp	r3, #29
 8018e2c:	d001      	beq.n	8018e32 <__sflush_r+0xb2>
 8018e2e:	2b16      	cmp	r3, #22
 8018e30:	d101      	bne.n	8018e36 <__sflush_r+0xb6>
 8018e32:	602f      	str	r7, [r5, #0]
 8018e34:	e7b1      	b.n	8018d9a <__sflush_r+0x1a>
 8018e36:	89a3      	ldrh	r3, [r4, #12]
 8018e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e3c:	81a3      	strh	r3, [r4, #12]
 8018e3e:	e7ad      	b.n	8018d9c <__sflush_r+0x1c>
 8018e40:	690f      	ldr	r7, [r1, #16]
 8018e42:	2f00      	cmp	r7, #0
 8018e44:	d0a9      	beq.n	8018d9a <__sflush_r+0x1a>
 8018e46:	0793      	lsls	r3, r2, #30
 8018e48:	680e      	ldr	r6, [r1, #0]
 8018e4a:	bf08      	it	eq
 8018e4c:	694b      	ldreq	r3, [r1, #20]
 8018e4e:	600f      	str	r7, [r1, #0]
 8018e50:	bf18      	it	ne
 8018e52:	2300      	movne	r3, #0
 8018e54:	eba6 0807 	sub.w	r8, r6, r7
 8018e58:	608b      	str	r3, [r1, #8]
 8018e5a:	f1b8 0f00 	cmp.w	r8, #0
 8018e5e:	dd9c      	ble.n	8018d9a <__sflush_r+0x1a>
 8018e60:	6a21      	ldr	r1, [r4, #32]
 8018e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e64:	4643      	mov	r3, r8
 8018e66:	463a      	mov	r2, r7
 8018e68:	4628      	mov	r0, r5
 8018e6a:	47b0      	blx	r6
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	dc06      	bgt.n	8018e7e <__sflush_r+0xfe>
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e76:	81a3      	strh	r3, [r4, #12]
 8018e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e7c:	e78e      	b.n	8018d9c <__sflush_r+0x1c>
 8018e7e:	4407      	add	r7, r0
 8018e80:	eba8 0800 	sub.w	r8, r8, r0
 8018e84:	e7e9      	b.n	8018e5a <__sflush_r+0xda>
 8018e86:	bf00      	nop
 8018e88:	dfbffffe 	.word	0xdfbffffe

08018e8c <_fflush_r>:
 8018e8c:	b538      	push	{r3, r4, r5, lr}
 8018e8e:	690b      	ldr	r3, [r1, #16]
 8018e90:	4605      	mov	r5, r0
 8018e92:	460c      	mov	r4, r1
 8018e94:	b913      	cbnz	r3, 8018e9c <_fflush_r+0x10>
 8018e96:	2500      	movs	r5, #0
 8018e98:	4628      	mov	r0, r5
 8018e9a:	bd38      	pop	{r3, r4, r5, pc}
 8018e9c:	b118      	cbz	r0, 8018ea6 <_fflush_r+0x1a>
 8018e9e:	6a03      	ldr	r3, [r0, #32]
 8018ea0:	b90b      	cbnz	r3, 8018ea6 <_fflush_r+0x1a>
 8018ea2:	f7ff f833 	bl	8017f0c <__sinit>
 8018ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d0f3      	beq.n	8018e96 <_fflush_r+0xa>
 8018eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018eb0:	07d0      	lsls	r0, r2, #31
 8018eb2:	d404      	bmi.n	8018ebe <_fflush_r+0x32>
 8018eb4:	0599      	lsls	r1, r3, #22
 8018eb6:	d402      	bmi.n	8018ebe <_fflush_r+0x32>
 8018eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018eba:	f7ff fa72 	bl	80183a2 <__retarget_lock_acquire_recursive>
 8018ebe:	4628      	mov	r0, r5
 8018ec0:	4621      	mov	r1, r4
 8018ec2:	f7ff ff5d 	bl	8018d80 <__sflush_r>
 8018ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ec8:	07da      	lsls	r2, r3, #31
 8018eca:	4605      	mov	r5, r0
 8018ecc:	d4e4      	bmi.n	8018e98 <_fflush_r+0xc>
 8018ece:	89a3      	ldrh	r3, [r4, #12]
 8018ed0:	059b      	lsls	r3, r3, #22
 8018ed2:	d4e1      	bmi.n	8018e98 <_fflush_r+0xc>
 8018ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ed6:	f7ff fa65 	bl	80183a4 <__retarget_lock_release_recursive>
 8018eda:	e7dd      	b.n	8018e98 <_fflush_r+0xc>

08018edc <__swhatbuf_r>:
 8018edc:	b570      	push	{r4, r5, r6, lr}
 8018ede:	460c      	mov	r4, r1
 8018ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ee4:	2900      	cmp	r1, #0
 8018ee6:	b096      	sub	sp, #88	; 0x58
 8018ee8:	4615      	mov	r5, r2
 8018eea:	461e      	mov	r6, r3
 8018eec:	da0d      	bge.n	8018f0a <__swhatbuf_r+0x2e>
 8018eee:	89a3      	ldrh	r3, [r4, #12]
 8018ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018ef4:	f04f 0100 	mov.w	r1, #0
 8018ef8:	bf0c      	ite	eq
 8018efa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018efe:	2340      	movne	r3, #64	; 0x40
 8018f00:	2000      	movs	r0, #0
 8018f02:	6031      	str	r1, [r6, #0]
 8018f04:	602b      	str	r3, [r5, #0]
 8018f06:	b016      	add	sp, #88	; 0x58
 8018f08:	bd70      	pop	{r4, r5, r6, pc}
 8018f0a:	466a      	mov	r2, sp
 8018f0c:	f000 f848 	bl	8018fa0 <_fstat_r>
 8018f10:	2800      	cmp	r0, #0
 8018f12:	dbec      	blt.n	8018eee <__swhatbuf_r+0x12>
 8018f14:	9901      	ldr	r1, [sp, #4]
 8018f16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018f1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018f1e:	4259      	negs	r1, r3
 8018f20:	4159      	adcs	r1, r3
 8018f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f26:	e7eb      	b.n	8018f00 <__swhatbuf_r+0x24>

08018f28 <__smakebuf_r>:
 8018f28:	898b      	ldrh	r3, [r1, #12]
 8018f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f2c:	079d      	lsls	r5, r3, #30
 8018f2e:	4606      	mov	r6, r0
 8018f30:	460c      	mov	r4, r1
 8018f32:	d507      	bpl.n	8018f44 <__smakebuf_r+0x1c>
 8018f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f38:	6023      	str	r3, [r4, #0]
 8018f3a:	6123      	str	r3, [r4, #16]
 8018f3c:	2301      	movs	r3, #1
 8018f3e:	6163      	str	r3, [r4, #20]
 8018f40:	b002      	add	sp, #8
 8018f42:	bd70      	pop	{r4, r5, r6, pc}
 8018f44:	ab01      	add	r3, sp, #4
 8018f46:	466a      	mov	r2, sp
 8018f48:	f7ff ffc8 	bl	8018edc <__swhatbuf_r>
 8018f4c:	9900      	ldr	r1, [sp, #0]
 8018f4e:	4605      	mov	r5, r0
 8018f50:	4630      	mov	r0, r6
 8018f52:	f7fe fe93 	bl	8017c7c <_malloc_r>
 8018f56:	b948      	cbnz	r0, 8018f6c <__smakebuf_r+0x44>
 8018f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f5c:	059a      	lsls	r2, r3, #22
 8018f5e:	d4ef      	bmi.n	8018f40 <__smakebuf_r+0x18>
 8018f60:	f023 0303 	bic.w	r3, r3, #3
 8018f64:	f043 0302 	orr.w	r3, r3, #2
 8018f68:	81a3      	strh	r3, [r4, #12]
 8018f6a:	e7e3      	b.n	8018f34 <__smakebuf_r+0xc>
 8018f6c:	89a3      	ldrh	r3, [r4, #12]
 8018f6e:	6020      	str	r0, [r4, #0]
 8018f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f74:	81a3      	strh	r3, [r4, #12]
 8018f76:	9b00      	ldr	r3, [sp, #0]
 8018f78:	6163      	str	r3, [r4, #20]
 8018f7a:	9b01      	ldr	r3, [sp, #4]
 8018f7c:	6120      	str	r0, [r4, #16]
 8018f7e:	b15b      	cbz	r3, 8018f98 <__smakebuf_r+0x70>
 8018f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f84:	4630      	mov	r0, r6
 8018f86:	f000 f81d 	bl	8018fc4 <_isatty_r>
 8018f8a:	b128      	cbz	r0, 8018f98 <__smakebuf_r+0x70>
 8018f8c:	89a3      	ldrh	r3, [r4, #12]
 8018f8e:	f023 0303 	bic.w	r3, r3, #3
 8018f92:	f043 0301 	orr.w	r3, r3, #1
 8018f96:	81a3      	strh	r3, [r4, #12]
 8018f98:	89a3      	ldrh	r3, [r4, #12]
 8018f9a:	431d      	orrs	r5, r3
 8018f9c:	81a5      	strh	r5, [r4, #12]
 8018f9e:	e7cf      	b.n	8018f40 <__smakebuf_r+0x18>

08018fa0 <_fstat_r>:
 8018fa0:	b538      	push	{r3, r4, r5, lr}
 8018fa2:	4d07      	ldr	r5, [pc, #28]	; (8018fc0 <_fstat_r+0x20>)
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	4608      	mov	r0, r1
 8018faa:	4611      	mov	r1, r2
 8018fac:	602b      	str	r3, [r5, #0]
 8018fae:	f7e8 fc08 	bl	80017c2 <_fstat>
 8018fb2:	1c43      	adds	r3, r0, #1
 8018fb4:	d102      	bne.n	8018fbc <_fstat_r+0x1c>
 8018fb6:	682b      	ldr	r3, [r5, #0]
 8018fb8:	b103      	cbz	r3, 8018fbc <_fstat_r+0x1c>
 8018fba:	6023      	str	r3, [r4, #0]
 8018fbc:	bd38      	pop	{r3, r4, r5, pc}
 8018fbe:	bf00      	nop
 8018fc0:	20017bc0 	.word	0x20017bc0

08018fc4 <_isatty_r>:
 8018fc4:	b538      	push	{r3, r4, r5, lr}
 8018fc6:	4d06      	ldr	r5, [pc, #24]	; (8018fe0 <_isatty_r+0x1c>)
 8018fc8:	2300      	movs	r3, #0
 8018fca:	4604      	mov	r4, r0
 8018fcc:	4608      	mov	r0, r1
 8018fce:	602b      	str	r3, [r5, #0]
 8018fd0:	f7e8 fbfc 	bl	80017cc <_isatty>
 8018fd4:	1c43      	adds	r3, r0, #1
 8018fd6:	d102      	bne.n	8018fde <_isatty_r+0x1a>
 8018fd8:	682b      	ldr	r3, [r5, #0]
 8018fda:	b103      	cbz	r3, 8018fde <_isatty_r+0x1a>
 8018fdc:	6023      	str	r3, [r4, #0]
 8018fde:	bd38      	pop	{r3, r4, r5, pc}
 8018fe0:	20017bc0 	.word	0x20017bc0

08018fe4 <_init>:
 8018fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe6:	bf00      	nop
 8018fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fea:	bc08      	pop	{r3}
 8018fec:	469e      	mov	lr, r3
 8018fee:	4770      	bx	lr

08018ff0 <_fini>:
 8018ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff2:	bf00      	nop
 8018ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ff6:	bc08      	pop	{r3}
 8018ff8:	469e      	mov	lr, r3
 8018ffa:	4770      	bx	lr
 8018ffc:	0000      	movs	r0, r0
	...
